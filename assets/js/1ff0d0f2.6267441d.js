"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9004],{44935:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"background/why-riscv","title":"Why RISC-V and PolkaVM for Smart Contracts?","description":"\ud83e\udd14 Shortcomings of WebAssembly for Smart Contracts","source":"@site/docs/background/why-riscv.md","sourceDirName":"background","slug":"/background/why-riscv-and-polkavm-for-smart-contracts","permalink":"/docs/v6/background/why-riscv-and-polkavm-for-smart-contracts","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/background/why-riscv.md","tags":[],"version":"current","frontMatter":{"title":"Why RISC-V and PolkaVM for Smart Contracts?","hide_title":true,"slug":"/background/why-riscv-and-polkavm-for-smart-contracts"},"sidebar":"reference","previous":{"title":"Why Rust for Smart Contracts?","permalink":"/docs/v6/background/why-rust-for-smart-contracts"},"next":{"title":"Solidity & MetaMask Compatibility","permalink":"/docs/v6/background/solidity-metamask-compatibility"}}');var o=n(23420),r=n(65404),s=n(57241);const i={title:"Why RISC-V and PolkaVM for Smart Contracts?",hide_title:!0,slug:"/background/why-riscv-and-polkavm-for-smart-contracts"},c=void 0,l={},d=[{value:"\ud83e\udd14 Shortcomings of WebAssembly for Smart Contracts",id:"-shortcomings-of-webassembly-for-smart-contracts",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udd2c RISC-V + PolkaVM",id:"-risc-v--polkavm",level:2},{value:"\ud83e\udd1d <code>pallet-revive</code>",id:"-pallet-revive",level:2},{value:"\ud83d\ude4c Migrating ink! to RISC-V + PolkaVM + <code>pallet-revive</code>",id:"-migrating-ink-to-risc-v--polkavm--pallet-revive",level:2}];function h(e){const t={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n,{children:[(0,o.jsx)("meta",{name:"description",content:"What is PolkaVM? And what does it mean for smart contracts in Polkadot."}),(0,o.jsx)("meta",{name:"keywords",content:"Polkadot, PolkaVM, RISC-V, RISCV, Smart Contracts"}),(0,o.jsx)("meta",{property:"og:title",content:"Why RISC-V and PolkaVM for Smart Contracts?"}),(0,o.jsx)("meta",{property:"og:description",content:"What is PolkaVM? And what does it mean for smart contracts in Polkadot."}),(0,o.jsx)("meta",{property:"og:image",content:"https://use-ink.com/img/opengraph/riscv-polkavm.png"}),(0,o.jsx)("meta",{property:"og:image:width",content:"1200"}),(0,o.jsx)("meta",{property:"og:image:height",content:"630"}),(0,o.jsx)("meta",{property:"og:image:alt",content:"RISC-V, PolkaVM, and ink!"}),(0,o.jsx)("meta",{property:"og:image:type",content:"image/png"})]}),"\n","\n",(0,o.jsx)("img",{src:(0,s.Ay)("/img/title/polkadot-riscv.svg"),title:"RISC-V",className:"titlePic"}),"\n",(0,o.jsx)(t.h2,{id:"-shortcomings-of-webassembly-for-smart-contracts",children:"\ud83e\udd14 Shortcomings of WebAssembly for Smart Contracts"}),"\n",(0,o.jsxs)(t.p,{children:["From ink! v1 to v5, the execution platform was Substrate's smart contracts\nmodule ",(0,o.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts/",children:(0,o.jsx)(t.code,{children:"pallet-contracts"})}),".\nThis pallet required the smart contracts that were uploaded to be in the ",(0,o.jsx)(t.em,{children:"WebAssembly\n(Wasm) bytecode format"}),". So ink! contracts were always compiled to a WebAssembly binary.\nThis could be done by invoking ",(0,o.jsx)(t.code,{children:"cargo build"}),"/",(0,o.jsx)(t.code,{children:"rustc"})," directly or via our CLI tool\n",(0,o.jsx)(t.a,{href:"https://github.com/use-ink/cargo-contract",children:(0,o.jsx)(t.code,{children:"cargo-contract"})})," (which executes the\nRust compiler with optimal flags for smart contracts)."]}),"\n",(0,o.jsxs)(t.p,{children:["As an ongoing research project Parity was always looking at alternatives to WebAssembly\nfor smart contract execution. Some of those investigations are\npersisted in the Polkadot Forum. The forum post on ",(0,o.jsx)(t.a,{href:"https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084",children:"the eBPF investigation"}),"\n(eBPF is used in Solana) highlights some shortcomings of WebAssembly for smart contracts."]}),"\n",(0,o.jsx)(t.h2,{id:"-risc-v--polkavm",children:"\ud83e\uddd1\u200d\ud83d\udd2c RISC-V + PolkaVM"}),"\n",(0,o.jsxs)(t.p,{children:["During 2023, Parity core developer Jan Bujak (",(0,o.jsx)(t.a,{href:"https://github.com/koute",children:"@koute"}),") did another\nexploration on alternatives for WebAssembly. ",(0,o.jsx)(t.a,{href:"https://forum.polkadot.network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434",children:"His forum post"}),"\ngives a great overview on how he landed at RISC-V and its potential.\nHis explorations yielded promising results and a new project\nwas started: ",(0,o.jsx)(t.a,{href:"https://github.com/paritytech/polkavm",children:"PolkaVM"}),"\n(",(0,o.jsx)(t.a,{href:"https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811",children:"the announcement contains more info"}),").\nPolkaVM is intended to be a very fast RISC-V based virtual machine. Jan\nregularly shared performance benchmarks in the Polkadot Forum. Those were very\ngood and got community enthusiasm started.\nFor blockchains a very fast performance correlates with transaction throughput\nand transaction costs, which implies improved scalability and reduced costs for users."]}),"\n",(0,o.jsxs)(t.h2,{id:"-pallet-revive",children:["\ud83e\udd1d ",(0,o.jsx)(t.code,{children:"pallet-revive"})]}),"\n",(0,o.jsxs)(t.p,{children:["Parity in late 2024 forked Substrate's ",(0,o.jsx)(t.code,{children:"pallet-contracts"})," into a new project called\n",(0,o.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive",children:(0,o.jsx)(t.code,{children:"pallet-revive"})}),".\nSmart contracts that are uploaded to this new pallet have to be\nin the RISC-V bytecode format, and no longer in WebAssembly."]}),"\n",(0,o.jsx)(t.p,{children:"Besides the contract binary format, a number of other significant changes were\nmade to provide first-class support for Solidity contracts:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"Extensive changes were made in the inner logic of the pallet to bring its behavior\ncloser to the EVM (e.g. types, events, and debugging was changed to be Solidity\ncompatible)."}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsxs)(t.p,{children:["In the ",(0,o.jsx)(t.code,{children:"pallet-contracts"})," era, the idea for Solidity compatibility was a project\ncalled ",(0,o.jsx)(t.a,{href:"https://github.com/hyperledger-solang/solang/",children:"Solang"}),". It's a Solidity\ncompiler that parses Solidity syntax and outputs WebAssembly.\nParsing the Solidity syntax turned out to be a complex undertaking. Solidity\nas a language is also evolving and provided a moving target.",(0,o.jsx)("br",{}),(0,o.jsx)("br",{}),"\nAs an iteration on that approach, for ",(0,o.jsx)(t.code,{children:"pallet-revive"})," Parity started a new\nproject called ",(0,o.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src",children:(0,o.jsx)(t.code,{children:"revive"})})," \u1806\na compiler from the Solidity bytecode YUL to a RISC-V\ncontract that can be executed on ",(0,o.jsx)(t.code,{children:"pallet-revive"}),".\nThis bytecode is more stable than the language syntax. Plus Solidity developers\ncan continue to use the Solidity compiler ",(0,o.jsx)(t.code,{children:"solc"})," to compile their contracts."]}),"\n"]}),"\n",(0,o.jsxs)(t.li,{children:["\n",(0,o.jsx)(t.p,{children:"An RPC wrapper that maps Ethereum RPC's onto Substrate was created."}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(t.p,{children:["At the time of writing, ",(0,o.jsx)(t.code,{children:"pallet-revive"})," is deployed to the Polkadot testnet Westend\n(on the AssetHub parachain).\nA launch on Polkadot's canary network Kusama is targeted for early Q2/25.\nThe Polkadot launch is targeted for Q3/25."]}),"\n",(0,o.jsxs)(t.h2,{id:"-migrating-ink-to-risc-v--polkavm--pallet-revive",children:["\ud83d\ude4c Migrating ink! to RISC-V + PolkaVM + ",(0,o.jsx)(t.code,{children:"pallet-revive"})]}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"pallet-revive"})," and RISC-V are seen as the future of smart contracts in the Polkadot\necosystem. We agree with that vision and are excited to work on making the ink! stack\nready for it!\nIn autumn 2024 the ink! Alliance created ",(0,o.jsx)(t.a,{href:"https://forum.polkadot.network/t/treasury-ink-alliance-for-a-more-successful-plaza/9692",children:"a Polkadot treasury proposal"}),"\naround this.\nThe Polkadot community signaled its alignment and gave us the mandate of\nmigrating ink! to this new stack."]}),"\n",(0,o.jsxs)(t.p,{children:["Hence, v5 of ink! and ",(0,o.jsx)(t.code,{children:"cargo-contract"})," were the last versions supporting ",(0,o.jsx)(t.code,{children:"pallet-contracts"}),"\nand Wasm. We can still backport important fixes, but the coming releases (",(0,o.jsx)(t.code,{children:">= v6"}),") will\nall no longer be compatible. In case you want to create a PR for a backport, we have\nv5 release branches ",(0,o.jsx)(t.a,{href:"https://github.com/use-ink/ink/tree/v5.x",children:"here"})," and ",(0,o.jsx)(t.a,{href:"https://github.com/use-ink/cargo-contract/tree/v5.x.x",children:"here"}),"."]}),"\n",(0,o.jsxs)(t.p,{children:["We have created ",(0,o.jsx)(t.a,{href:"/docs/v6/faq/migrating-from-ink-5-to-6",children:"this migration guide"})," from ink! v5 to v6.\nAll breaking changes and new features are documented there."]}),"\n",(0,o.jsxs)(t.p,{children:["What has not yet been migrated is ",(0,o.jsx)(t.a,{href:"https://github.com/use-ink/contracts-ui",children:"Contracts UI"}),"\nand external libraries (such as ",(0,o.jsx)(t.a,{href:"https://inkathon.xyz/",children:"ink!athon"}),", the\n",(0,o.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer",children:"ink! Analyzer VS Code extension"}),",\n",(0,o.jsx)(t.code,{children:"polkadot-js"}),", \u2026).\nWe are in contact with the maintainers of these external libraries about migrating\nthem as well."]})]})}function m(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(h,{...e})}):h(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>i});var a=n(36672);const o={},r=a.createContext(o);function s(e){const t=a.useContext(r);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:s(e.components),a.createElement(r.Provider,{value:t},e.children)}}}]);