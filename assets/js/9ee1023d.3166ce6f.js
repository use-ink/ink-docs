"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9884],{80255:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>c,metadata:()=>s,toc:()=>g});const s=JSON.parse('{"id":"debugging/events","title":"Debug Events","description":"Magnifying Glass Title Picture","source":"@site/versioned_docs/version-v6/debugging/events.md","sourceDirName":"debugging","slug":"/contract-debugging/debug-events","permalink":"/docs/v6/contract-debugging/debug-events","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-v6/debugging/events.md","tags":[],"version":"v6","frontMatter":{"title":"Debug Events","slug":"/contract-debugging/debug-events","hide_title":true},"sidebar":"reference","previous":{"title":"Overview","permalink":"/docs/v6/contract-debugging/"},"next":{"title":"Return value","permalink":"/docs/v6/contract-debugging/return-value"}}');var i=t(74848),r=t(28453);const c={title:"Debug Events",slug:"/contract-debugging/debug-events",hide_title:!0},a="Emit debugging events",o={},g=[];function u(e){const n={a:"a",code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Magnifying Glass Title Picture",src:t(6381).A+"",width:"1600",height:"500"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"emit-debugging-events",children:"Emit debugging events"})}),"\n",(0,i.jsxs)(n.p,{children:["The idea here is to add a feature to your contract's ",(0,i.jsx)(n.code,{children:"Cargo.toml"}),". You can\nname it e.g. ",(0,i.jsx)(n.code,{children:"debug"}),".\nIn your contract you would then emit debug information if the flag is set."]}),"\n",(0,i.jsx)(n.p,{children:"This allows for emitting debug events in the contract, that can be checked\nfor in your tests."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std, no_main)]\n\n#[ink::contract]\nmod debugging_strategies {\n    #[cfg(feature = "debug")]\n    use ink::prelude::{\n        borrow::ToOwned,\n        format,\n        string::String,\n    };\n\n    #[ink::event]\n    #[cfg(feature = "debug")]\n    pub struct DebugEvent {\n        message: String,\n    }\n\n    #[ink(storage)]\n    #[derive(Default)]\n    pub struct DebuggingStrategies {}\n\n    impl DebuggingStrategies {\n        #[ink(constructor)]\n        pub fn new() -> Self {\n            Self {}\n        }\n\n        #[ink(message)]\n        pub fn get(&self) {\n            #[cfg(feature = "debug")]\n            self.env().emit_event(DebugEvent {\n                message: format!("received {:?}", self.env().transferred_value())\n                    .to_owned(),\n            });\n            // \u2026\n        }\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"This event will be shown when you call a contract. You can also access it in E2E tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'#[ink_e2e::test(features = ["debug"])]\nasync fn e2e_debugging_event_emitted<Client: E2EBackend>(\n    mut client: Client,\n) -> E2EResult<()> {\n    // given\n    // create contract\n    /* --snip-- */\n\n    // when\n    // call contract\n    /* --snip-- */\n\n    // then\n    // the contract wil have emitted an event\n    let contract_events = call_res.contract_emitted_events()?;\n    assert_eq!(1, contract_events.len());\n    let contract_event = &contract_events[0];\n    let debug_event: DebugEvent =\n        ink::scale::Decode::decode(&mut &contract_event.event.data[..])\n            .expect("encountered invalid contract event data buffer");\n    assert_eq!(debug_event.message, "received 0");\n\n    Ok(())\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We've put the above into a complete example. You can see the full source code\n",(0,i.jsx)(n.a,{href:"https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies/lib.rs",children:"here"}),"."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},6381:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/magnifying-glass-3ca6f9b0db517931b899b678a8543a81.svg"},28453:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>a});var s=t(96540);const i={},r=s.createContext(i);function c(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);