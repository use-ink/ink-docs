"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1614],{9329:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"basics/storing-values","title":"Storing Values","description":"Here is how you store simple values in storage:","source":"@site/versioned_docs/version-3.x/basics/storing-values.md","sourceDirName":"basics","slug":"/basics/storing-values","permalink":"/3.x/basics/storing-values","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-3.x/basics/storing-values.md","tags":[],"version":"3.x","frontMatter":{"title":"Storing Values","slug":"/basics/storing-values"},"sidebar":"reference","previous":{"title":"Contract Template","permalink":"/3.x/basics/contract-template"},"next":{"title":"Reading Values from Storage","permalink":"/3.x/basics/reading-values"}}');var i=t(4848),a=t(8453);const r={title:"Storing Values",slug:"/basics/storing-values"},o=void 0,c={},u=[{value:"Supported Types",id:"supported-types",level:2},{value:"Use of enum",id:"use-of-enum",level:2},{value:"Initializing Storage in Constructors",id:"initializing-storage-in-constructors",level:2}];function l(e){const n={a:"a",code:"code",h2:"h2",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"Here is how you store simple values in storage:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct MyContract {\n    // Store a bool\n    my_bool: bool,\n    // Store some number\n    my_number: u32,\n}\n/* --snip-- */\n"})}),"\n",(0,i.jsx)(n.h2,{id:"supported-types",children:"Supported Types"}),"\n",(0,i.jsxs)(n.p,{children:["Substrate contracts may store types that are encodable and decodable with\n",(0,i.jsx)(n.a,{href:"https://github.com/paritytech/parity-codec",children:"Parity Codec"})," which includes most Rust common data\ntypes such as ",(0,i.jsx)(n.code,{children:"bool"}),", ",(0,i.jsx)(n.code,{children:"u{8,16,32,64,128}"}),", ",(0,i.jsx)(n.code,{children:"i{8,16,32,64,128}"}),", ",(0,i.jsx)(n.code,{children:"String"}),", tuples, and arrays."]}),"\n",(0,i.jsxs)(n.p,{children:["ink! provides Substrate specific types like ",(0,i.jsx)(n.code,{children:"AccountId"}),", ",(0,i.jsx)(n.code,{children:"Balance"}),", and ",(0,i.jsx)(n.code,{children:"Hash"})," to smart contracts as if\nthey were primitive types."]}),"\n",(0,i.jsxs)(n.p,{children:["ink! also provides a ",(0,i.jsx)(n.code,{children:"Mapping"})," storage type. You can read more about it ",(0,i.jsx)(n.a,{href:"/3.x/datastructures/mapping",children:"here"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of how you would store an ",(0,i.jsx)(n.code,{children:"AccountId"})," and ",(0,i.jsx)(n.code,{children:"Balance"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"// We are importing the default ink! types\nuse ink_lang as ink;\n\n#[ink::contract]\nmod MyContract {\n\n    // Our struct will use those default ink! types\n    #[ink(storage)]\n    pub struct MyContract {\n        // Store some AccountId\n        my_account: AccountId,\n        // Store some Balance\n        my_balance: Balance,\n    }\n    /* --snip-- */\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here is an example of a structure storing ",(0,i.jsx)(n.code,{children:"String"})," and  ",(0,i.jsx)(n.code,{children:"Hash"})," values."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub struct Auction {\n    /// Branded name of the auction event.\n    name: String,\n    /// Some hash identifying the auction subject.\n    subject: Hash,\n    /// Auction status.\n    status: Status, // Enum: Usage shown in next section\n    /// Candle auction can have no winner.\n    /// If auction is finalized, that means that the winner is determined.\n    finalized: bool,\n    /// vector\n    vector: Vec<u8>,\n}\n"})}),"\n",(0,i.jsx)(n.h2,{id:"use-of-enum",children:"Use of enum"}),"\n",(0,i.jsxs)(n.p,{children:["Enum can be used as a datatype in ",(0,i.jsx)(n.code,{children:"struct"})," as depicted above in ",(0,i.jsx)(n.code,{children:"struct Auction"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"pub enum Status {\n    /// An auction has not started yet.\n    NotStarted,\n    /// We are in the starting period of the auction, collecting initial bids.\n    OpeningPeriod,\n    /// We are in the ending period of the auction, where we are taking snapshots\n    /// of the winning bids. \n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The values of an enum should be referenced as ",(0,i.jsx)(n.code,{children:"Status::OpeningPeriod"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"initializing-storage-in-constructors",children:"Initializing Storage in Constructors"}),"\n",(0,i.jsx)(n.p,{children:"Constructors are how values get initialized.\nEvery ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:"}),"\n",(0,i.jsxs)(n.p,{children:["Note that if you have a contract whose storage contains ",(0,i.jsx)(n.code,{children:"Mapping'"}),"s you will need to use\n",(0,i.jsx)(n.code,{children:"ink_lang::utils::initialize_contract"})," in your constructor. See the\n",(0,i.jsxs)(n.a,{href:"/3.x/datastructures/mapping",children:[(0,i.jsx)(n.code,{children:"Mapping"})," documentation"]})," for more details."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:"use ink_lang as ink;\n\n#[ink::contract]\nmod mycontract {\n\n    #[ink(storage)]\n    pub struct MyContract {\n        number: u32,\n    }\n\n    impl MyContract {\n        /// Constructor that initializes the `u32` value to the given `init_value`.\n        #[ink(constructor)]\n        pub fn new(init_value: u32) -> Self {\n            Self {\n                number: init_value,\n            }\n        }\n\n        /// Constructor that initializes the `u32` value to the `u32` default.\n        #[ink(constructor)]\n        pub fn default() -> Self {\n            Self {\n                number: Default::default(),\n            }\n        }\n    /* --snip-- */\n    }\n}\n"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);