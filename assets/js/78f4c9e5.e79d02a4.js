"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4570],{65404:(n,e,t)=>{t.d(e,{R:()=>a,x:()=>s});var i=t(36672);const r={},o=i.createContext(r);function a(n){const e=i.useContext(o);return i.useMemo(function(){return"function"==typeof n?n(e):{...e,...n}},[e,n])}function s(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(r):n.components||r:a(n.components),i.createElement(o.Provider,{value:e},n.children)}},75922:(n,e,t)=>{t.r(e),t.d(e,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"ethereum-compatibility/wagmi-integration","title":"Wagmi Integration","description":"Now that you\'ve deployed your ink! smart contract, you can build a full frontend dApp using Ethereum-compatible libraries like Wagmi.","source":"@site/tutorials/ethereum-compatibility/wagmi-integration.md","sourceDirName":"ethereum-compatibility","slug":"/ethereum-compatibility/wagmi-integration","permalink":"/tutorials/ethereum-compatibility/wagmi-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/tutorials/ethereum-compatibility/wagmi-integration.md","tags":[],"version":"current","lastUpdatedBy":"Lucas Grasso","lastUpdatedAt":1759414379000,"sidebarPosition":5,"frontMatter":{"title":"Wagmi Integration","sidebar_position":5},"sidebar":"tutorials","previous":{"title":"Hardhat Deployment","permalink":"/tutorials/ethereum-compatibility/hardhat-deployment"},"next":{"title":"Guide","permalink":"/tutorials/guide"}}');var r=t(23420),o=t(65404);const a={title:"Wagmi Integration",sidebar_position:5},s="Build dApps with Wagmi",c={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Configure Wagmi for Polkadot Hub",id:"configure-wagmi-for-polkadot-hub",level:2},{value:"Set Up the Wagmi Provider",id:"set-up-the-wagmi-provider",level:2},{value:"Connect a Wallet",id:"connect-a-wallet",level:2},{value:"Interact with Your Contract",id:"interact-with-your-contract",level:2},{value:"Main Application",id:"main-application",level:2},{value:"Run Your dApp",id:"run-your-dapp",level:2},{value:"Key Features",id:"key-features",level:2},{value:"Next Steps",id:"next-steps",level:2},{value:"Other Libraries",id:"other-libraries",level:2}];function d(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...n.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(e.header,{children:(0,r.jsx)(e.h1,{id:"build-dapps-with-wagmi",children:"Build dApps with Wagmi"})}),"\n",(0,r.jsxs)(e.p,{children:["Now that you've deployed your ink! smart contract, you can build a full frontend dApp using Ethereum-compatible libraries like ",(0,r.jsx)(e.a,{href:"https://wagmi.sh/",children:"Wagmi"}),"."]}),"\n",(0,r.jsxs)(e.p,{children:["Wagmi is a popular library of React Hooks designed to work with Solidity ABI-compatible contracts \u2014 which makes it fully compatible with ink! contracts compiled using ",(0,r.jsx)(e.code,{children:'abi = "sol"'}),"."]}),"\n",(0,r.jsx)(e.p,{children:"This guide walks you through building a frontend React dApp for the Flipper contract deployed on the Polkadot Hub Testnet."}),"\n",(0,r.jsx)(e.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,r.jsx)(e.p,{children:"Before starting, ensure you have:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:(0,r.jsx)(e.a,{href:"/tutorials/ethereum-compatibility/hardhat-deployment",children:"Deployed your contract with Hardhat"})}),"\n",(0,r.jsx)(e.li,{children:"The contract address and ABI from your deployment"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,r.jsx)(e.p,{children:"Create a new React project and install required dependencies:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npx create-next-app@latest wagmi-asset-hub\ncd wagmi-asset-hub\nnpm install wagmi viem @tanstack/react-query\n"})}),"\n",(0,r.jsx)(e.h2,{id:"configure-wagmi-for-polkadot-hub",children:"Configure Wagmi for Polkadot Hub"}),"\n",(0,r.jsxs)(e.p,{children:["Create a configuration file to initialize Wagmi with Polkadot Hub. In your project, create a file named ",(0,r.jsx)(e.code,{children:"src/lib/wagmi.ts"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:"import { http, createConfig } from 'wagmi';\n\n// Configure the Polkadot Hub chain\nconst assetHub = {\n  id: 420420422,\n  name: 'polkadot-hub-testnet',\n  network: 'polkadot-hub-testnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'PAS',\n    symbol: 'PAS',\n  },\n  rpcUrls: {\n    default: {\n      http: ['https://testnet-passet-hub-eth-rpc.polkadot.io'],\n    },\n  },\n} as const;\n\n// Create wagmi config\nexport const config = createConfig({\n  chains: [assetHub],\n  transports: {\n    [assetHub.id]: http(),\n  },\n});\n"})}),"\n",(0,r.jsx)(e.h2,{id:"set-up-the-wagmi-provider",children:"Set Up the Wagmi Provider"}),"\n",(0,r.jsxs)(e.p,{children:["To enable Wagmi in your React application, wrap your app with the ",(0,r.jsx)(e.a,{href:"https://wagmi.sh/react/api/WagmiProvider#wagmiprovider",children:"WagmiProvider"}),". Update your ",(0,r.jsx)(e.code,{children:"app/layout.tsx"})," file (for Next.js app router):"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-js",children:'// For app router (src/app/layout.tsx)\n"use client";\n\nimport { WagmiProvider } from "wagmi";\nimport { QueryClient, QueryClientProvider } from "@tanstack/react-query";\nimport { config } from "./lib/wagmi";\n\n// Create a query client\nconst queryClient = new QueryClient();\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang="en">\n      <body>\n        <WagmiProvider config={config}>\n          <QueryClientProvider client={queryClient}>\n            {children}\n          </QueryClientProvider>\n        </WagmiProvider>\n      </body>\n    </html>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"connect-a-wallet",children:"Connect a Wallet"}),"\n",(0,r.jsxs)(e.p,{children:["Create a component to connect wallets to your dApp. Create a file named ",(0,r.jsx)(e.code,{children:"app/components/ConnectWallet.tsx"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'"use client";\n\nimport React from "react";\nimport { useConnect, useAccount, useDisconnect } from "wagmi";\nimport { injected } from "wagmi/connectors";\n\nexport function ConnectWallet() {\n  const { connect } = useConnect();\n  const { address, isConnected } = useAccount();\n  const { disconnect } = useDisconnect();\n\n  if (isConnected) {\n    return (\n      <div>\n        <div>Connected to {address}</div>\n        <button onClick={() => disconnect()}>Disconnect</button>\n      </div>\n    );\n  }\n\n  return (\n    <button onClick={() => connect({ connector: injected() })}>\n      Connect Wallet\n    </button>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"interact-with-your-contract",children:"Interact with Your Contract"}),"\n",(0,r.jsxs)(e.p,{children:["Create a component to interact with your deployed contract. Create a file named ",(0,r.jsx)(e.code,{children:"app/components/FlipperContract.tsx"}),":"]}),"\n",(0,r.jsx)(e.admonition,{type:"info",children:(0,r.jsxs)(e.p,{children:["This assumes your Flipper contract has already been deployed to the Polkadot Hub Testnet. If you haven't deployed it yet, follow the ",(0,r.jsx)(e.a,{href:"/tutorials/ethereum-compatibility/hardhat-deployment",children:"Hardhat Deployment"})," guide first."]})}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'"use client";\n\nimport {\n  useReadContract,\n  useWriteContract,\n  useWaitForTransactionReceipt,\n} from "wagmi";\n\nconst CONTRACT_ADDRESS = "INSERT_CONTRACT_ADDRESS" as `0x${string}`;\n\nexport function FlipperContract() {\n  // Import the ABI of the contract from the flipper_evm.abi file.\n  const abi = [\n    {\n      "type": "constructor",\n      "inputs": [{"name": "init_value", "type": "bool"}],\n      "stateMutability": "nonpayable"\n    },\n    {\n      "type": "function",\n      "name": "flip",\n      "inputs": [],\n      "outputs": [],\n      "stateMutability": "nonpayable"\n    },\n    {\n      "type": "function",\n      "name": "get",\n      "inputs": [],\n      "outputs": [{"name": "", "type": "bool"}],\n      "stateMutability": "view"\n    }\n  ];\n\n  // Read the current stored value\n  const { data: value, refetch } = useReadContract({\n    address: CONTRACT_ADDRESS,\n    abi,\n    functionName: "get",\n  });\n\n  // Call the contract\n  const { writeContract, data: hash, error, isPending } = useWriteContract();\n\n  // Wait for transaction to be confirmed\n  const { isLoading: isConfirming, isSuccess: isConfirmed } =\n    useWaitForTransactionReceipt({\n      hash,\n    });\n\n  const flip = () => {\n    writeContract({\n      address: CONTRACT_ADDRESS,\n      abi,\n      functionName: "flip",\n      args: [],\n    });\n  };\n\n  return (\n    <div>\n      <h2>Flipper Contract Interaction</h2>\n      <div>\n        <p>Contract Address: {CONTRACT_ADDRESS}</p>\n        <p>Current Value: {value?.toString() || "Loading..."}</p>\n      </div>\n\n      <div>\n        <button onClick={flip} disabled={isPending || isConfirming}>\n          {isPending\n            ? "Waiting for approval..."\n            : isConfirming\n            ? "Confirming..."\n            : "Flip Value"}\n        </button>\n      </div>\n\n      {error && <div className="error-message">Error: {error.message}</div>}\n\n      {isConfirmed && (\n        <div className="success-message">\n          Successfully updated!{" "}\n          <button onClick={() => refetch()}>Refresh</button>\n        </div>\n      )}\n    </div>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"main-application",children:"Main Application"}),"\n",(0,r.jsxs)(e.p,{children:["Update your main page to combine all the components in ",(0,r.jsx)(e.code,{children:"src/app/page.tsx"}),":"]}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-tsx",children:'"use client";\n\nimport { ConnectWallet } from "./components/ConnectWallet";\nimport { FlipperContract } from "./components/FlipperContract";\nimport { useAccount } from "wagmi";\n\nexport default function Home() {\n  const { isConnected } = useAccount();\n\n  return (\n    <main>\n      <h1>Wagmi - Polkadot Hub Smart Contracts</h1>\n      <ConnectWallet />\n      {isConnected ? <FlipperContract /> : <span>Connect your wallet</span>}\n    </main>\n  );\n}\n'})}),"\n",(0,r.jsx)(e.h2,{id:"run-your-dapp",children:"Run Your dApp"}),"\n",(0,r.jsx)(e.p,{children:"Start the development server:"}),"\n",(0,r.jsx)(e.pre,{children:(0,r.jsx)(e.code,{className:"language-bash",children:"npm run dev\n"})}),"\n",(0,r.jsx)(e.p,{children:"Now you have a modern frontend dApp that connects to Polkadot Hub using MetaMask and interacts with your ink! contract compiled with Solidity ABI support."}),"\n",(0,r.jsx)(e.h2,{id:"key-features",children:"Key Features"}),"\n",(0,r.jsx)(e.p,{children:"Your dApp now supports:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Wallet Connection"}),": Connect/disconnect MetaMask wallet"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Contract Reading"}),": Query current contract state"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Contract Writing"}),": Send transactions to modify state"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Transaction Tracking"}),": Monitor transaction status and confirmations"]}),"\n",(0,r.jsxs)(e.li,{children:[(0,r.jsx)(e.strong,{children:"Error Handling"}),": Display user-friendly error messages"]}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,r.jsx)(e.p,{children:"With Wagmi integration complete, you can:"}),"\n",(0,r.jsxs)(e.ul,{children:["\n",(0,r.jsx)(e.li,{children:"Add more complex contract interactions"}),"\n",(0,r.jsx)(e.li,{children:"Implement additional UI components"}),"\n",(0,r.jsx)(e.li,{children:"Integrate with other Ethereum-compatible libraries"}),"\n",(0,r.jsx)(e.li,{children:"Deploy your dApp to production"}),"\n"]}),"\n",(0,r.jsx)(e.h2,{id:"other-libraries",children:"Other Libraries"}),"\n",(0,r.jsx)(e.p,{children:"Solidity ABI compatibility allows you to use a wide range of Ethereum-compatible libraries beyond Wagmi."}),"\n",(0,r.jsxs)(e.p,{children:["\ud83d\udcda Learn more in ",(0,r.jsx)(e.a,{href:"https://papermoonio.github.io/polkadot-mkdocs/develop/smart-contracts/libraries/",children:"Explore the key libraries for interacting with smart contracts on Polkadot-based networks"})]})]})}function p(n={}){const{wrapper:e}={...(0,o.R)(),...n.components};return e?(0,r.jsx)(e,{...n,children:(0,r.jsx)(d,{...n})}):d(n)}}}]);