"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[7462],{1264:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>c});const n=JSON.parse('{"id":"background/solidity-metamask-compat","title":"Solidity & MetaMask Compatibility","description":"Metadata Title Picture","source":"@site/docs/background/solidity-metamask-compat.md","sourceDirName":"background","slug":"/background/solidity-metamask-compatibility","permalink":"/docs/v6/background/solidity-metamask-compatibility","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/background/solidity-metamask-compat.md","tags":[],"version":"current","frontMatter":{"title":"Solidity & MetaMask Compatibility","hide_title":true,"slug":"/background/solidity-metamask-compatibility"},"sidebar":"reference","previous":{"title":"Why RISC-V and PolkaVM for Smart Contracts?","permalink":"/docs/v6/background/why-riscv-and-polkavm-for-smart-contracts"},"next":{"title":"ink! vs. Solidity","permalink":"/docs/v6/background/ink-vs-solidity"}}');var r=i(23420),s=i(65404);const o={title:"Solidity & MetaMask Compatibility",hide_title:!0,slug:"/background/solidity-metamask-compatibility"},d="Solidity & MetaMask Compatibility",l={},c=[{value:"Rust/ink! to Solidity ABI type mapping",id:"rustink-to-solidity-abi-type-mapping",level:2},{value:"Default/provided mappings",id:"defaultprovided-mappings",level:3},{value:"Handling the <code>Result&lt;T, E&gt;</code> type",id:"handling-the-resultt-e-type",level:3},{value:"Mappings for arbitrary custom types",id:"mappings-for-arbitrary-custom-types",level:3},{value:"MetaMask",id:"metamask",level:2},{value:"Solidity Tooling",id:"solidity-tooling",level:2},{value:"Block explorers",id:"block-explorers",level:2}];function a(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components},{Head:n}=t;return n||function(e,t){throw new Error("Expected "+(t?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n,{children:[(0,r.jsx)("meta",{name:"description",content:"Explanation of ink!'s compatibility with Solidity and Ethereum tooling (MetaMask, block explorers, Hardhat, \u2026)."}),(0,r.jsx)("meta",{name:"keywords",content:"Ethereum, MetaMask, Solidity, Hardhat, ink!"}),(0,r.jsx)("meta",{property:"og:title",content:"Solidity & MetaMask Compatibility"}),(0,r.jsx)("meta",{property:"og:description",content:"Explanation of ink!'s compatibility with Solidity and Ethereum tooling (MetaMask, block explorers, Hardhat, \u2026)."}),(0,r.jsx)("meta",{property:"og:image",content:"https://use-ink.com/img/opengraph/solidity-metamask.jpg"}),(0,r.jsx)("meta",{property:"og:image:width",content:"1200"}),(0,r.jsx)("meta",{property:"og:image:height",content:"630"}),(0,r.jsx)("meta",{property:"og:image:alt",content:"Solidity and MetaMask"}),(0,r.jsx)("meta",{property:"og:image:type",content:"image/jpg"})]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.img,{alt:"Metadata Title Picture",src:i(99905).A+"",width:"1600",height:"500"})}),"\n",(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"solidity--metamask-compatibility",children:"Solidity & MetaMask Compatibility"})}),"\n",(0,r.jsxs)(t.p,{children:["With ink! v6, we have introduced an ",(0,r.jsx)(t.code,{children:"abi"})," field in a custom ",(0,r.jsx)(t.code,{children:"ink-lang"})," table\nin the ",(0,r.jsxs)(t.a,{href:"https://doc.rust-lang.org/cargo/reference/manifest.html#the-metadata-table",children:[(0,r.jsx)(t.code,{children:"package.metadata"})," table"]})," of a contract's manifest\nfile (i.e. the ",(0,r.jsx)(t.code,{children:"Cargo.toml"})," file) - ",(0,r.jsx)(t.a,{href:"/docs/v6/basics/abi#declaring-the-abi",children:"more details here"}),".\nIt allows building your contract in Solidity ABI compatibility mode\nwhen declared as follows:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-toml",children:'[package.metadata.ink-lang]\nabi = "sol"\n'})}),"\n",(0,r.jsx)(t.p,{children:"The implication of supporting Solidity ABI encoding is that all types used as\nconstructor/message argument and return types, and event argument types must\ndefine a mapping to an equivalent Solidity ABI type."}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["This is similar to the requirement to implement ",(0,r.jsxs)(t.a,{href:"https://docs.rs/parity-scale-codec/latest/parity_scale_codec",children:[(0,r.jsx)(t.code,{children:"scale::Encode"})," and ",(0,r.jsx)(t.code,{children:"scale::Decode"})]}),'\nfor Rust types used in the public interfaces of ink!/"native" ABI encoded contracts.']})}),"\n",(0,r.jsx)(t.h2,{id:"rustink-to-solidity-abi-type-mapping",children:"Rust/ink! to Solidity ABI type mapping"}),"\n",(0,r.jsxs)(t.p,{children:["This mapping is defined using the ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolDecode.html",children:(0,r.jsx)(t.code,{children:"SolDecode"})})," traits,\nwhich are analogs to ",(0,r.jsxs)(t.a,{href:"https://docs.rs/parity-scale-codec/latest/parity_scale_codec",children:[(0,r.jsx)(t.code,{children:"scale::Encode"})," and ",(0,r.jsx)(t.code,{children:"scale::Decode"})]}),"\n(but for Solidity ABI encoding/decoding).\nYou won't be able to use Rust types for which no mapping to a Solidity type is defined.\nAn error about a missing trait implementation for this type will be thrown."]}),"\n",(0,r.jsx)(t.h3,{id:"defaultprovided-mappings",children:"Default/provided mappings"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolDecode.html",children:(0,r.jsx)(t.code,{children:"SolDecode"})})," are implemented\nfor the following Rust/ink! primitive types creating a mapping\nto the corresponding Solidity ABI types as shown in the table below:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Rust/ink! type"}),(0,r.jsx)(t.th,{children:"Solidity ABI type"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bool"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bool"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"iN"})," for ",(0,r.jsx)(t.code,{children:"N \u2208 {8,16,32,64,128}"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"intN"})}),(0,r.jsxs)(t.td,{children:["e.g ",(0,r.jsx)(t.code,{children:"i8"})," \u2194 ",(0,r.jsx)(t.code,{children:"int8"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"uN"})," for ",(0,r.jsx)(t.code,{children:"N \u2208 {8,16,32,64,128}"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"uintN"})}),(0,r.jsxs)(t.td,{children:["e.g ",(0,r.jsx)(t.code,{children:"u8"})," \u2194 ",(0,r.jsx)(t.code,{children:"uint8"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/struct.U256.html",children:(0,r.jsx)(t.code,{children:"ink::U256"})})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"uint256"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"String"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Box<str>"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/type.Address.html",children:(0,r.jsx)(t.code,{children:"ink::Address"})})," / ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/struct.H160.html",children:(0,r.jsx)(t.code,{children:"ink::H160"})})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"address"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"ink::Address"})," is a type alias for the ",(0,r.jsx)(t.code,{children:"ink::H160"})," type used for addresses in ",(0,r.jsx)(t.code,{children:"pallet-revive"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"[T; N]"})," for ",(0,r.jsx)(t.code,{children:"const N: usize"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"T[N]"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"[i8; 64]"})," \u2194 ",(0,r.jsx)(t.code,{children:"int8[64]"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Vec<T>"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"T[]"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"Vec<i8>"})," \u2194 ",(0,r.jsx)(t.code,{children:"int8[]"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Box<[T]>"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"T[]"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"Box<[i8]>"})," \u2194 ",(0,r.jsx)(t.code,{children:"int8[]"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/struct.FixedBytes.html",children:(0,r.jsx)(t.code,{children:"ink::sol::FixedBytes<N>"})})," for ",(0,r.jsx)(t.code,{children:"1 <= N <= 32"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bytesN"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"FixedBytes<32>"})," \u2194 ",(0,r.jsx)(t.code,{children:"bytes32"}),", ",(0,r.jsx)(t.code,{children:"FixedBytes<N>"})," is just a newtype wrapper for ",(0,r.jsx)(t.code,{children:"[u8; N]"})," that also implements ",(0,r.jsx)(t.code,{children:"From<u8>"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/struct.DynBytes.html",children:(0,r.jsx)(t.code,{children:"ink::sol::DynBytes"})})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bytes"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"DynBytes"})," is just a newtype wrapper for ",(0,r.jsx)(t.code,{children:"Vec<u8>"})," that also implements ",(0,r.jsx)(t.code,{children:"From<Box<[u8]>>"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"(T1, T2, T3, ... T12)"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"(U1, U2, U3, ... U12)"})}),(0,r.jsxs)(t.td,{children:["where ",(0,r.jsx)(t.code,{children:"T1"})," \u2194 ",(0,r.jsx)(t.code,{children:"U1"}),", ... ",(0,r.jsx)(t.code,{children:"T12"})," \u2194 ",(0,r.jsx)(t.code,{children:"U12"})," e.g. ",(0,r.jsx)(t.code,{children:"(bool, u8, Address)"})," \u2194 ",(0,r.jsx)(t.code,{children:"(bool, uint8, address)"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"Option<T>"})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"(bool, T)"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"Option<u8>"})," \u2194 ",(0,r.jsx)(t.code,{children:"(bool, uint8)"})]})]})]})]}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)(t.p,{children:["Rust's ",(0,r.jsx)(t.code,{children:"Option<T>"})," type doesn't have a ",(0,r.jsx)(t.strong,{children:"semantically"})," equivalent Solidity ABI type,\nbecause ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/types.html#enums",children:"Solidity enums"})," are field-less."]}),(0,r.jsxs)(t.p,{children:["So ",(0,r.jsx)(t.code,{children:"Option<T>"})," is mapped to a tuple representation instead (i.e. ",(0,r.jsx)(t.code,{children:"(bool, T)"}),"),\nbecause this representation allows preservation of semantic information in Solidity,\nby using the ",(0,r.jsx)(t.code,{children:"bool"}),' as a "flag" indicating the variant\n(i.e. ',(0,r.jsx)(t.code,{children:"false"})," for ",(0,r.jsx)(t.code,{children:"None"})," and ",(0,r.jsx)(t.code,{children:"true"})," for ",(0,r.jsx)(t.code,{children:"Some"}),") such that:"]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Option::None"})," is mapped to ",(0,r.jsx)(t.code,{children:"(false, <default_value>)"}),"\nwhere ",(0,r.jsx)(t.code,{children:"<default_value>"})," is the zero bytes only representation of ",(0,r.jsx)(t.code,{children:"T"}),"\n(e.g. ",(0,r.jsx)(t.code,{children:"0u8"})," for ",(0,r.jsx)(t.code,{children:"u8"})," or ",(0,r.jsx)(t.code,{children:"Vec::new()"})," for ",(0,r.jsx)(t.code,{children:"Vec<T>"}),")"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"Option::Some(value)"})," is mapped to ",(0,r.jsx)(t.code,{children:"(true, value)"})]}),"\n"]}),(0,r.jsx)(t.p,{children:'The resulting type in Solidity can be represented as a struct with a field for the "flag"\nand another for the data.'}),(0,r.jsxs)(t.p,{children:["Note that ",(0,r.jsx)(t.code,{children:"enum"})," in Solidity is encoded as ",(0,r.jsx)(t.code,{children:"uint8"})," in ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#mapping-solidity-to-abi-types",children:"Solidity ABI encoding"}),",\nwhile the encoding for ",(0,r.jsx)(t.code,{children:"bool"})," is equivalent to the encoding of ",(0,r.jsx)(t.code,{children:"uint8"}),",\nwith ",(0,r.jsx)(t.code,{children:"true"})," equivalent to ",(0,r.jsx)(t.code,{children:"1"})," and ",(0,r.jsx)(t.code,{children:"false"})," equivalent to ",(0,r.jsx)(t.code,{children:"0"}),".\nTherefore, the ",(0,r.jsx)(t.code,{children:"bool"}),' "flag" can be safely interpreted as a ',(0,r.jsx)(t.code,{children:"bool"})," or ",(0,r.jsx)(t.code,{children:"enum"})," (or even ",(0,r.jsx)(t.code,{children:"uint8"}),")\nin Solidity code."]})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," is additionally implemented for reference and smart\npointer types below:"]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Rust/ink! type"}),(0,r.jsx)(t.th,{children:"Solidity ABI type"}),(0,r.jsx)(t.th,{children:"Notes"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"&str"}),", ",(0,r.jsx)(t.code,{children:"&mut str"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"string"})}),(0,r.jsx)(t.td,{})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"&T"}),", ",(0,r.jsx)(t.code,{children:"&mut T"}),", ",(0,r.jsx)(t.code,{children:"Box<T>"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"T"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"&i8 \u2194 int8"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"&[T]"}),", ",(0,r.jsx)(t.code,{children:"&mut [T]"})]}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"T[]"})}),(0,r.jsxs)(t.td,{children:["e.g. ",(0,r.jsx)(t.code,{children:"&[i8]"})," \u2194 ",(0,r.jsx)(t.code,{children:"int8[]"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/struct.ByteSlice.html",children:(0,r.jsx)(t.code,{children:"ink::sol::ByteSlice"})})}),(0,r.jsx)(t.td,{children:(0,r.jsx)(t.code,{children:"bytes"})}),(0,r.jsxs)(t.td,{children:[(0,r.jsx)(t.code,{children:"ByteSlice"})," is a just newtype wrapper for ",(0,r.jsx)(t.code,{children:"&[u8]"})]})]})]})]}),"\n",(0,r.jsxs)(t.h3,{id:"handling-the-resultt-e-type",children:["Handling the ",(0,r.jsx)(t.code,{children:"Result<T, E>"})," type"]}),"\n",(0,r.jsxs)(t.p,{children:["Rust's ",(0,r.jsx)(t.code,{children:"Result<T, E>"})," type doesn't have a ",(0,r.jsx)(t.strong,{children:"semantically"})," equivalent Solidity ABI type,\nbecause ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/types.html#enums",children:"Solidity enums"})," are field-less, so no composable mapping is provided."]}),"\n",(0,r.jsxs)(t.p,{children:["However, ",(0,r.jsx)(t.code,{children:"Result<T, E>"})," types are supported as the return type of messages\nand constructors, and they're handled at language level as follows:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["When returning the ",(0,r.jsx)(t.code,{children:"Result::Ok"})," variant, where ",(0,r.jsx)(t.code,{children:"T"})," implements ",(0,r.jsx)(t.code,{children:"SolEncode"}),",\n",(0,r.jsx)(t.code,{children:"T"}),' is encoded as "normal" Solidity ABI return data.']}),"\n",(0,r.jsxs)(t.li,{children:["When returning the ",(0,r.jsx)(t.code,{children:"Result::Err"})," variant, ",(0,r.jsx)(t.code,{children:"E"})," must implement ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorEncode.html",children:(0,r.jsx)(t.code,{children:"SolErrorEncode"})}),",\nink! will set the revert flag in the execution environment,\nand ",(0,r.jsx)(t.code,{children:"E"})," will be encoded as ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/control-structures.html#revert",children:"Solidity revert error data"}),",\nwith the error data representation depending on the ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorEncode.html",children:(0,r.jsx)(t.code,{children:"SolErrorEncode"})})," implementation."]}),"\n",(0,r.jsxs)(t.li,{children:["Similarly, for decoding, ",(0,r.jsx)(t.code,{children:"T"})," must implement ",(0,r.jsx)(t.code,{children:"SolDecode"}),",\nwhile ",(0,r.jsx)(t.code,{children:"E"})," must implement ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorDecode.html",children:(0,r.jsx)(t.code,{children:"SolErrorDecode"})}),", and the returned data is decoded as ",(0,r.jsx)(t.code,{children:"T"}),"\n(i.e. ",(0,r.jsx)(t.code,{children:"Result::Ok"}),") or ",(0,r.jsx)(t.code,{children:"E"})," (i.e. ",(0,r.jsx)(t.code,{children:"Result::Err"}),") depending on whether\nthe revert flag is set (i.e. ",(0,r.jsx)(t.code,{children:"E"})," if the revert flag is set, and ",(0,r.jsx)(t.code,{children:"T"})," otherwise)."]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorEncode.html",children:(0,r.jsx)(t.code,{children:"SolErrorEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorDecode.html",children:(0,r.jsx)(t.code,{children:"SolErrorDecode"})})," traits define\nthe highest level interfaces for encoding and decoding an arbitrary Rust/ink! error type as\nSolidity ABI revert error data."]}),"\n",(0,r.jsxs)(t.p,{children:["Default implementations for both ",(0,r.jsx)(t.code,{children:"SolErrorEncode"})," and ",(0,r.jsx)(t.code,{children:"SolErrorDecode"})," are provided for unit\n(i.e. ",(0,r.jsx)(t.code,{children:"()"}),"), and these are equivalent to reverting with no error data in Solidity\n(i.e. empty output buffer)."]}),"\n",(0,r.jsxs)(t.p,{children:["For arbitrary custom error types, ",(0,r.jsx)(t.code,{children:"Derive"})," macros are provided for automatically generating\nimplementations of ",(0,r.jsx)(t.code,{children:"SolErrorEncode"})," and ",(0,r.jsx)(t.code,{children:"SolErrorDecode"})," for structs and enums for which\nall fields (if any) implement ",(0,r.jsx)(t.code,{children:"SolEncode"})," and ",(0,r.jsx)(t.code,{children:"SolDecode"}),"."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["For structs, the struct name is used as the name of the ",(0,r.jsx)(t.a,{href:"https://soliditylang.org/blog/2021/04/21/custom-errors/",children:"Solidity custom error"}),"\nwhile the fields (if any) are the parameters"]}),"\n",(0,r.jsxs)(t.li,{children:["For enums, each variant is its own ",(0,r.jsx)(t.a,{href:"https://soliditylang.org/blog/2021/04/21/custom-errors/",children:"Solidity custom error"}),",\nwith the variant name being the custom error name, and the fields (if any) being the parameters"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For convenience, the ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/attr.error.html",children:(0,r.jsx)(t.code,{children:"#[ink::error]"})})," attribute macro is also provided for automatically deriving the following traits:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorEncode.html",children:(0,r.jsx)(t.code,{children:"SolErrorEncode"})}),": for encoding a custom type as revert error data"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorDecode.html",children:(0,r.jsx)(t.code,{children:"SolErrorDecode"})}),": for decoding revert error data into a custom type"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.code,{children:"SolErrorMetadata"}),": for generating ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#json",children:"Solidity ABI metadata"})]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"// Represented as a Solidity custom error with no parameters\n#[ink::error]\nstruct UnitError;\n\n// Represented as a Solidity custom error with parameters\n#[ink::error]\nstruct ErrorWithParams(bool, u8, String);\n\n// Represented as a Solidity custom error with named parameters\n#[ink::error]\nstruct ErrorWithNamedParams {\n    status: bool,\n    count: u8,\n    reason: String,\n}\n\n// Represented as multiple Solidity custom errors\n// (i.e. each variant represents a Solidity custom error)\n#[ink::error]\nenum MultipleErrors {\n    UnitError,\n    ErrorWithParams(bool, u8, String),\n    ErrorWithNamedParams {\n        status: bool,\n        count: u8,\n        reason: String,\n    }\n}\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["In ",(0,r.jsx)(t.a,{href:"/docs/v6/basics/abi#declaring-the-abi",children:'"ink" and "all" ABI mode'}),", the ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/attr.error.html",children:(0,r.jsx)(t.code,{children:"#[ink::error]"})})," attribute macro\nwill also derive implementations of the ",(0,r.jsxs)(t.a,{href:"https://docs.rs/parity-scale-codec/latest/parity_scale_codec",children:[(0,r.jsx)(t.code,{children:"scale::Encode"})," and ",(0,r.jsx)(t.code,{children:"scale::Decode"})]})," traits."]})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["For other ",(0,r.jsxs)(t.a,{href:"https://docs.soliditylang.org/en/latest/control-structures.html#revert",children:["Solidity ",(0,r.jsx)(t.code,{children:"revert"})]})," error data representations (e.g. legacy revert strings),\nyou can implement ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorEncode.html",children:(0,r.jsx)(t.code,{children:"SolErrorEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/sol/trait.SolErrorDecode.html",children:(0,r.jsx)(t.code,{children:"SolErrorDecode"})}),"\nmanually to match those representations."]})}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["Rust's ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",children:"coherence/orphan rules"})," mean that you can only implement the\n",(0,r.jsx)(t.code,{children:"SolErrorEncode"})," and ",(0,r.jsx)(t.code,{children:"SolErrorDecode"})," traits for local types."]})}),"\n",(0,r.jsx)(t.h3,{id:"mappings-for-arbitrary-custom-types",children:"Mappings for arbitrary custom types"}),"\n",(0,r.jsxs)(t.p,{children:["For arbitrary custom types, ",(0,r.jsx)(t.code,{children:"Derive"})," macros are provided for automatically generating\nimplementations of ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolDecode.html",children:(0,r.jsx)(t.code,{children:"SolDecode"})})]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["For structs where all fields (if any) implement ",(0,r.jsx)(t.code,{children:"SolEncode"})," and ",(0,r.jsx)(t.code,{children:"SolDecode"})," respectively,\nincluding support for generic types"]}),"\n",(0,r.jsxs)(t.li,{children:["For enums where all variants are either ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/enumerations.html#r-items.enum.unit-only",children:"unit-only"})," or ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/enumerations.html#r-items.enum.fieldless",children:"field-less"}),"\n(see notes below for the rationale for this limitation)"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rust",children:"use ink_macro::{SolDecode, SolEncode};\n\n#[derive(SolDecode, SolEncode)]\nstruct UnitStruct;\n\n#[derive(SolDecode, SolEncode)]\nstruct TupleStruct(bool, u8, String);\n\n#[derive(SolDecode, SolEncode)]\nstruct FieldStruct {\n    status: bool,\n    count: u8,\n    reason: String,\n}\n\n#[derive(SolDecode, SolEncode)]\nenum SimpleEnum {\n    One,\n    Two,\n    Three,\n}\n\n#[derive(SolDecode, SolEncode)]\nstruct NestedStruct {\n    unit: UnitStruct,\n    tuple: TupleStruct,\n    fields: FieldStruct,\n    enumerate: SimpleEnum,\n}\n\n#[derive(SolDecode, SolEncode)]\nstruct GenericStruct<T> {\n    concrete: u8,\n    generic: T,\n}\n"})}),"\n",(0,r.jsxs)(t.admonition,{type:"note",children:[(0,r.jsxs)(t.p,{children:["Solidity has no ",(0,r.jsx)(t.strong,{children:"semantic"})," equivalent for Rust/ink! enums with fields\n(i.e. ",(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/types.html#enums",children:"Solidity enums"})," can only express the equivalent of Rust ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/enumerations.html#r-items.enum.unit-only",children:"unit-only"}),"\nor ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/enumerations.html#r-items.enum.fieldless",children:"field-less"})," enums)."]}),(0,r.jsxs)(t.p,{children:['So mapping complex Rust enums (i.e. enums with fields) to "equivalent" Solidity representations\ntypically yields complex structures based on tuples (at ',(0,r.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#mapping-solidity-to-abi-types",children:"Solidity ABI encoding"})," level)\nand structs (at Solidity language level)."]}),(0,r.jsxs)(t.p,{children:["Because of this, the ",(0,r.jsx)(t.code,{children:"Derive"})," macros for ",(0,r.jsx)(t.code,{children:"SolEncode"})," and ",(0,r.jsx)(t.code,{children:"SolDecode"})," do NOT generate implementations\nfor enums with fields."]}),(0,r.jsxs)(t.p,{children:["However, you can define custom representations for these types by manually implementing\nthe ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolDecode.html",children:(0,r.jsx)(t.code,{children:"SolDecode"})}),"\n(see linked rustdoc for instructions)."]})]}),"\n",(0,r.jsx)(t.admonition,{type:"note",children:(0,r.jsxs)(t.p,{children:["Rust's ",(0,r.jsx)(t.a,{href:"https://doc.rust-lang.org/reference/items/implementations.html#trait-implementation-coherence",children:"coherence/orphan rules"})," mean that you can\nonly implement the ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolEncode.html",children:(0,r.jsx)(t.code,{children:"SolEncode"})})," and ",(0,r.jsx)(t.a,{href:"https://use-ink.github.io/ink/ink/trait.SolDecode.html",children:(0,r.jsx)(t.code,{children:"SolDecode"})}),"\ntraits for local types."]})}),"\n",(0,r.jsx)(t.h2,{id:"metamask",children:"MetaMask"}),"\n",(0,r.jsxs)(t.p,{children:["You can use ",(0,r.jsx)(t.a,{href:"https://metamask.io/",children:"MetaMask"})," to interact with your ",(0,r.jsx)(t.code,{children:"ink!"})," smart contract via the Solidity ABI."]}),"\n",(0,r.jsxs)(t.p,{children:["To set up your wallet and connect to the appropriate network, follow this quick start guide: ",(0,r.jsx)(t.a,{href:"https://papermoonio.github.io/polkadot-mkdocs/develop/smart-contracts/wallets/#metamask",children:"Connect MetaMask to Polkadot Hub Testnet"})]}),"\n",(0,r.jsxs)(t.admonition,{title:"Network Details \u2013 Polkadot Hub Testnet",type:"info",children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Network name:"})," Polkadot Hub TestNet"]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Currency symbol:"})," PAS"]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Chain ID:"})," 420420422"]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"RPC URL:"})," ",(0,r.jsx)(t.a,{href:"https://testnet-passet-hub-eth-rpc.polkadot.io",children:"https://testnet-passet-hub-eth-rpc.polkadot.io"})]}),(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.em,{children:"Block explorer URL:"})," ",(0,r.jsx)(t.a,{href:"https://blockscout-passet-hub.parity-testnet.parity.io/",children:"https://blockscout-passet-hub.parity-testnet.parity.io/"})]})]}),"\n",(0,r.jsxs)(t.p,{children:["For step-by-step manual configuration instructions, see this guide: ",(0,r.jsx)(t.a,{href:"https://docs.polkadot.com/develop/smart-contracts/wallets/#metamask",children:"Connect MetaMask to Polkadot Hub Testnet"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"solidity-tooling",children:"Solidity Tooling"}),"\n",(0,r.jsxs)(t.p,{children:["You can deploy and interact with ",(0,r.jsx)(t.code,{children:"ink!"})," smart contracts using popular Solidity tools like Hardhat and Foundry thanks to the Solidity-compatible ABI output."]}),"\n",(0,r.jsxs)(t.p,{children:["Full Tutorial: ",(0,r.jsx)(t.a,{href:"/docs/v6/integrations-and-sdks/ethereum-compatibility/overview",children:"Use Solidity Tooling with ink! Contracts"})]}),"\n",(0,r.jsxs)(t.p,{children:["This guide walks through compiling an ",(0,r.jsx)(t.code,{children:"ink!"})," contract with Solidity metadata, configuring Hardhat, deploying to the Polkadot Hub Testnet, and interacting with the contract using Ethers.js."]}),"\n",(0,r.jsx)(t.h2,{id:"block-explorers",children:"Block explorers"}),"\n",(0,r.jsxs)(t.p,{children:["PolkaVM smart contracts are compatible with Ethereum-style block explorers such as ",(0,r.jsx)(t.a,{href:"https://www.blockscout.com/",children:"BlockScout"}),", which is already integrated with the Polkadot Hub Testnet."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://blockscout.testnet.polkadot.io",children:"Polkadot Hub Testnet BlockScout"})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For additional information and instructions, check out: ",(0,r.jsx)(t.a,{href:"https://papermoonio.github.io/polkadot-mkdocs/develop/smart-contracts/block-explorers/",children:"Polkadot Smart Contract Block Explorers"})]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},65404:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>d});var n=i(36672);const r={},s=n.createContext(r);function o(e){const t=n.useContext(s);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(s.Provider,{value:t},e.children)}},99905:(e,t,i)=>{i.d(t,{A:()=>n});const n=i.p+"assets/images/solidity-c214fe3b4dd74e70b39bbb135b78c5db.svg"}}]);