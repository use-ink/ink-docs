"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[5566],{65404:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>s});var r=n(36672);const a={},i=r.createContext(a);function o(e){const t=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),r.createElement(i.Provider,{value:t},e.children)}},73219:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"ethereum-compatibility/hardhat-deployment","title":"Hardhat Deployment","description":"Hardhat is a popular Ethereum development framework. With @parity/hardhat-polkadot, you can use it to deploy and interact with ink! smart contracts on Polkadot-compatible environments.","source":"@site/tutorials/ethereum-compatibility/hardhat-deployment.md","sourceDirName":"ethereum-compatibility","slug":"/ethereum-compatibility/hardhat-deployment","permalink":"/tutorials/ethereum-compatibility/hardhat-deployment","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/tutorials/ethereum-compatibility/hardhat-deployment.md","tags":[],"version":"current","lastUpdatedBy":"David Semakula","lastUpdatedAt":1755164806000,"sidebarPosition":4,"frontMatter":{"title":"Hardhat Deployment","sidebar_position":4},"sidebar":"tutorials","previous":{"title":"MetaMask Setup","permalink":"/tutorials/ethereum-compatibility/metamask-setup"},"next":{"title":"Wagmi Integration","permalink":"/tutorials/ethereum-compatibility/wagmi-integration"}}');var a=n(23420),i=n(65404);const o={title:"Hardhat Deployment",sidebar_position:4},s="Deploy with Hardhat & Ethers.js",l={},c=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Project Setup",id:"project-setup",level:2},{value:"Configuration",id:"configuration",level:2},{value:"Network Configuration",id:"network-configuration",level:3},{value:"Private Key Setup",id:"private-key-setup",level:3},{value:"Get Test Tokens",id:"get-test-tokens",level:3},{value:"Contract Deployment",id:"contract-deployment",level:2},{value:"Understanding Contract Files",id:"understanding-contract-files",level:3},{value:"Deployment Script",id:"deployment-script",level:3},{value:"Run Deployment",id:"run-deployment",level:3},{value:"Contract Interaction",id:"contract-interaction",level:2},{value:"Local Development Environment",id:"local-development-environment",level:2},{value:"Download Required Binaries",id:"download-required-binaries",level:3},{value:"Configure Local Network",id:"configure-local-network",level:3},{value:"Start Local Environment",id:"start-local-environment",level:3},{value:"Interact with Local Network",id:"interact-with-local-network",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(t.header,{children:(0,a.jsx)(t.h1,{id:"deploy-with-hardhat--ethersjs",children:"Deploy with Hardhat & Ethers.js"})}),"\n",(0,a.jsxs)(t.p,{children:[(0,a.jsx)(t.a,{href:"https://hardhat.org/",children:"Hardhat"})," is a popular Ethereum development framework. With ",(0,a.jsx)(t.a,{href:"https://github.com/paritytech/hardhat-polkadot",children:(0,a.jsx)(t.code,{children:"@parity/hardhat-polkadot"})}),", you can use it to deploy and interact with ink! smart contracts on Polkadot-compatible environments."]}),"\n",(0,a.jsx)(t.p,{children:"This guide walks you through using Hardhat to deploy and interact with ink! smart contracts on Polkadot Hub."}),"\n",(0,a.jsx)(t.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(t.p,{children:"Before starting, ensure you have:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/tutorials/ethereum-compatibility/setup-solidity-abi",children:"Set up Solidity ABI"})," for your ink! contract"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.a,{href:"/tutorials/ethereum-compatibility/metamask-setup",children:"Configured MetaMask"})," and obtained test tokens"]}),"\n"]}),"\n",(0,a.jsx)(t.h2,{id:"project-setup",children:"Project Setup"}),"\n",(0,a.jsxs)(t.ol,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Create a Hardhat Project"})}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"mkdir hardhat-example\ncd hardhat-example\nnpm init -y\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"2",children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Install Required Dependencies"})}),"\n"]}),"\n",(0,a.jsx)(t.p,{children:"To interact with Polkadot, Hardhat requires the following plugin to compile contracts to PolkaVM bytecode and to spawn a local node compatible with PolkaVM:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npm install --save-dev @parity/hardhat-polkadot\n"})}),"\n",(0,a.jsxs)(t.ol,{start:"3",children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.strong,{children:"Initialize the Project"})}),"\n"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx hardhat-polkadot init\nnpm install\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"By default, this creates a basic project with a Solidity smart contract. Since we already have our ink! smart contract compiled, we'll skip the Solidity compilation step."})}),"\n",(0,a.jsx)(t.h2,{id:"configuration",children:"Configuration"}),"\n",(0,a.jsx)(t.h3,{id:"network-configuration",children:"Network Configuration"}),"\n",(0,a.jsxs)(t.p,{children:["Update your ",(0,a.jsx)(t.code,{children:"hardhat.config.js"})," with network settings for the Polkadot Hub Testnet:"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"require('@nomicfoundation/hardhat-toolbox');\nrequire('@parity/hardhat-polkadot');\n\nconst { vars } = require('hardhat/config');\n\nmodule.exports = {\n  // ... other config\n  networks: {\n    hardhat: {\n      // ... local config\n    },\n    polkadotHubTestnet: {\n      polkavm: true,\n      url: 'https://testnet-passet-hub-eth-rpc.polkadot.io',\n      accounts: [vars.get('PRIVATE_KEY')],\n    },\n  },\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"private-key-setup",children:"Private Key Setup"}),"\n",(0,a.jsx)(t.p,{children:"Export your private key and save it in your Hardhat environment:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:'npx hardhat vars set PRIVATE_KEY "INSERT_PRIVATE_KEY"\n'})}),"\n",(0,a.jsxs)(t.p,{children:["Replace ",(0,a.jsx)(t.code,{children:"INSERT_PRIVATE_KEY"})," with your actual private key. For details on private key exportation, refer to ",(0,a.jsx)(t.a,{href:"https://support.metamask.io/configure/accounts/how-to-export-an-accounts-private-key/",children:"How to export an account's private key"}),"."]}),"\n",(0,a.jsx)(t.h3,{id:"get-test-tokens",children:"Get Test Tokens"}),"\n",(0,a.jsxs)(t.p,{children:["Use the ",(0,a.jsx)(t.a,{href:"https://faucet.polkadot.io/?parachain=1111",children:"Polkadot Hub Testnet faucet"})," to fund your account with test PAS tokens."]}),"\n",(0,a.jsx)(t.h2,{id:"contract-deployment",children:"Contract Deployment"}),"\n",(0,a.jsx)(t.h3,{id:"understanding-contract-files",children:"Understanding Contract Files"}),"\n",(0,a.jsx)(t.p,{children:"After building your ink! smart contract with Solidity metadata, you'll find 3 key files in your contract's target directory:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"<contract-name>.polkavm"}),": Raw contract bytecode that will be deployed on-chain"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"<contract-name>.abi"}),": Solidity ABI JSON format for contract interaction (used by ethers.js)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"<contract-name>.json"}),": Solidity contract metadata specification for verification"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"deployment-script",children:"Deployment Script"}),"\n",(0,a.jsxs)(t.p,{children:["Create a file called ",(0,a.jsx)(t.code,{children:"scripts/deploy.js"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const hre = require('hardhat');\nconst { join } = require('path');\nconst { readFileSync } = require('fs');\n\n// Import the ABI of the contract from the flipper_evm.json file.\nconst abi = require(\"../../target/ink/flipper_evm.json\").output.abi;\n\nasync function main() {\n    const [deployer] = await hre.ethers.getSigners();\n\n    // Fetch the bytecode of the contract.\n    const bytecodePath = join(__dirname, \"../../target/ink\", \"flipper_evm.polkavm\");\n    const bytecode = `0x${readFileSync(bytecodePath).toString('hex')}`;\n\n    const flipper = new hre.ethers.ContractFactory(abi, bytecode, deployer);\n\n    // Deploy the contract with the constructor arguments.\n    const contract = await flipper.deploy(true);\n    await contract.waitForDeployment();\n    \n    // Get the address of the deployed contract.\n    const address = await contract.getAddress();\n    console.log(`Contract deployed at: ${address}`);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n"})}),"\n",(0,a.jsx)(t.h3,{id:"run-deployment",children:"Run Deployment"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx hardhat run scripts/deploy.js --network polkadotHubTestnet\n"})}),"\n",(0,a.jsx)(t.p,{children:"This will print the smart contract address once deployment is complete:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"Contract deployed at: YOUR_CONTRACT_ADDRESS\n"})}),"\n",(0,a.jsx)(t.admonition,{type:"note",children:(0,a.jsx)(t.p,{children:"Save this address - you'll need it to interact with your deployed contract."})}),"\n",(0,a.jsx)(t.h2,{id:"contract-interaction",children:"Contract Interaction"}),"\n",(0,a.jsxs)(t.p,{children:["Create a file called ",(0,a.jsx)(t.code,{children:"scripts/interact.js"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"const hre = require('hardhat');\n\n// Import the ABI of the contract from the flipper_evm.json file.\nconst abi = require(\"../../target/ink/flipper_evm.json\").output.abi;\n\nasync function main() {\n    const [deployer] = await hre.ethers.getSigners();\n\n    // Replace with your deployed contract address\n    const contractAddress = 'INSERT_CONTRACT_ADDRESS';\n\n    const flipper = new hre.ethers.Contract(contractAddress, abi, deployer);\n    \n    // Read contract state\n    const state = await flipper.get();\n    console.log(`State: ${state}`);\n\n    // Call the flip message\n    await flipper.flip();\n    \n    // Read contract state again to see the change\n    const state_after = await flipper.get();\n    console.log(`State: ${state_after}`);\n}\n\nmain().catch((error) => {\n  console.error(error);\n  process.exitCode = 1;\n});\n"})}),"\n",(0,a.jsx)(t.p,{children:"Run the interaction script:"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx hardhat run scripts/interact.js --network polkadotHubTestnet\n"})}),"\n",(0,a.jsx)(t.h2,{id:"local-development-environment",children:"Local Development Environment"}),"\n",(0,a.jsx)(t.p,{children:"For local testing, you can spin up a local testing environment:"}),"\n",(0,a.jsx)(t.h3,{id:"download-required-binaries",children:"Download Required Binaries"}),"\n",(0,a.jsxs)(t.p,{children:["Download the latest release from ",(0,a.jsx)(t.a,{href:"https://github.com/use-ink/ink-node/releases",children:"ink-node releases"}),". The release includes:"]}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"ink-node"})," binary (the PolkaVM-compatible node)"]}),"\n",(0,a.jsxs)(t.li,{children:[(0,a.jsx)(t.code,{children:"eth-rpc"})," adapter binary (adapts the node to EVM-style JSON-RPC)"]}),"\n"]}),"\n",(0,a.jsx)(t.h3,{id:"configure-local-network",children:"Configure Local Network"}),"\n",(0,a.jsxs)(t.p,{children:["Update your ",(0,a.jsx)(t.code,{children:"hardhat.config.js"}),":"]}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-js",children:"require('@nomicfoundation/hardhat-toolbox');\nrequire('@parity/hardhat-polkadot');\n\nmodule.exports = {\n  // ... other config\n  networks: {\n    hardhat: {\n      polkavm: true,\n      nodeConfig: {\n        nodeBinaryPath: 'INSERT_PATH_TO_INK_NODE',\n        rpcPort: 8000,\n        dev: true,\n      },\n      adapterConfig: {\n        adapterBinaryPath: 'INSERT_PATH_TO_ETH_RPC_ADAPTER',\n        dev: true,\n      },\n    },\n    localNode: {\n      polkavm: true,\n      url: `http://127.0.0.1:8545`,\n    },\n  },\n};\n"})}),"\n",(0,a.jsx)(t.h3,{id:"start-local-environment",children:"Start Local Environment"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx hardhat node\n"})}),"\n",(0,a.jsxs)(t.p,{children:["This launches the ",(0,a.jsx)(t.code,{children:"ink-node"})," (on ",(0,a.jsx)(t.code,{children:"localhost:8000"}),") and the ",(0,a.jsx)(t.code,{children:"eth-rpc"})," adapter (on ",(0,a.jsx)(t.code,{children:"localhost:8545"}),")."]}),"\n",(0,a.jsx)(t.h3,{id:"interact-with-local-network",children:"Interact with Local Network"}),"\n",(0,a.jsx)(t.pre,{children:(0,a.jsx)(t.code,{className:"language-bash",children:"npx hardhat run scripts/interact.js --network localNode\n"})}),"\n",(0,a.jsx)(t.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,a.jsx)(t.p,{children:"With your contract deployed via Hardhat, you can now:"}),"\n",(0,a.jsxs)(t.ul,{children:["\n",(0,a.jsx)(t.li,{children:(0,a.jsx)(t.a,{href:"/tutorials/ethereum-compatibility/wagmi-integration",children:"Build frontend applications with Wagmi"})}),"\n",(0,a.jsx)(t.li,{children:"Use any Ethereum-compatible tools and libraries"}),"\n",(0,a.jsx)(t.li,{children:"Integrate with existing Ethereum dApp infrastructure"}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,a.jsx)(t,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}}}]);