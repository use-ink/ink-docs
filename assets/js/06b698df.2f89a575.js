"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1744],{2385:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/metadata-revive-2409587c8d292f13afb31073948c3ec6.svg"},19527:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>h,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"basics/abi/overview","title":"Overview","description":"Metadata Title Picture","source":"@site/docs/basics/abi/overview.md","sourceDirName":"basics/abi","slug":"/basics/abi","permalink":"/docs/v6/basics/abi","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/basics/abi/overview.md","tags":[],"version":"current","frontMatter":{"title":"Overview","hide_title":true,"slug":"/basics/abi"},"sidebar":"reference","previous":{"title":"Chain Environment Types","permalink":"/docs/v6/basics/chain-environment-types"},"next":{"title":"ink! ABI","permalink":"/docs/v6/basics/abi/ink"}}');var a=i(23420),s=i(65404);const c={title:"Overview",hide_title:!0,slug:"/basics/abi"},r="ABI (Application Binary Interface)",o={},l=[{value:"Declaring the ABI",id:"declaring-the-abi",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Metadata Title Picture",src:i(2385).A+"",width:"1600",height:"500"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"abi-application-binary-interface",children:"ABI (Application Binary Interface)"})}),"\n",(0,a.jsx)(n.p,{children:"An ABI (Application Binary Interface) defines a standard way to interact with contracts\n(i.e. it defines the calling conventions to use for public function calls)."}),"\n",(0,a.jsx)(n.p,{children:"More concretely this entails specifications for:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Computing or defining selectors which identify the entry points for public function calls"}),"\n",(0,a.jsx)(n.li,{children:"Encoding and decoding public function input and output data"}),"\n",(0,a.jsx)(n.li,{children:"Encoding and decoding event and error data"}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"With ink! v6, the ink! code generator supports two ABI specifications:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/v6/basics/abi/ink",children:"Our own native ink! ABI specification"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"/docs/v6/basics/abi/solidity",children:"The Solidity ABI specification"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Supporting the Solidity ABI specification allows:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Solidity contracts to transparently call ink! contracts"}),"\n",(0,a.jsxs)(n.li,{children:["Developers to use Solidity tools (e.g. ",(0,a.jsx)(n.a,{href:"https://docs.ethers.org/",children:"ethers.js"}),") to\ntransparently interact with ink! contracts."]}),"\n"]}),"\n",(0,a.jsxs)(n.p,{children:["Additionally, the ink! code generator can operate in an ",(0,a.jsxs)(n.a,{href:"/docs/v6/basics/abi/all",children:[(0,a.jsx)(n.code,{children:'"all"'})," ABI mode"]}),",\nwhere it generates a binary that supports both the ink! and Solidity ABI specifications\n(i.e. it generates a binary that transparently supports both ink! and Solidity\ncalling conventions, and thus transparently supports interactions from\nboth ink! and Solidity contracts and external tools)."]}),"\n",(0,a.jsx)(n.h2,{id:"declaring-the-abi",children:"Declaring the ABI"}),"\n",(0,a.jsxs)(n.p,{children:["The ABI for an ink! contract is declared in the contract's manifest file\n(i.e. the ",(0,a.jsx)(n.code,{children:"Cargo.toml"})," file), as a field ",(0,a.jsx)(n.code,{children:"abi"})," of a custom ",(0,a.jsx)(n.code,{children:"ink-lang"})," table\nin the ",(0,a.jsxs)(n.a,{href:"https://doc.rust-lang.org/cargo/reference/manifest.html#the-metadata-table",children:[(0,a.jsx)(n.code,{children:"package.metadata"})," table"]})," e.g."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'[package.metadata.ink-lang]\nabi = "sol"\n'})}),"\n",(0,a.jsxs)(n.p,{children:["The default value for ",(0,a.jsx)(n.code,{children:"abi"})," is currently ",(0,a.jsx)(n.code,{children:'"ink"'}),",\nbut we might change this before a production release."]}),"\n",(0,a.jsxs)(n.p,{children:["Allowed values are ",(0,a.jsx)(n.code,{children:'"ink"'}),", ",(0,a.jsx)(n.code,{children:'"sol"'})," and ",(0,a.jsx)(n.code,{children:'"all"'}),"."]}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsxs)(n.p,{children:["The Solidity ABI specification can only be used if all constructor and message\nargument and return types, and event argument types can be mapped to\nequivalent Solidity ABI types (",(0,a.jsx)(n.a,{href:"/docs/v6/background/solidity-metamask-compatibility#rustink-to-solidity-abi-type-mapping",children:"more details here"}),")."]})}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"Your contract sizes will get larger if you support both the ink! and Solidity ABI."})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},65404:(e,n,i)=>{i.d(n,{R:()=>c,x:()=>r});var t=i(36672);const a={},s=t.createContext(a);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);