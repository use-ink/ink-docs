"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[3541],{41183:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/testing1-d84c1e06aff43cd5541920ef31eee08f.svg"},65404:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>a});var i=n(36672);const s={},o=i.createContext(s);function r(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:t},e.children)}},93183:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"testing/unit-integration","title":"Unit & Integration","description":"Testing1 Title Picture","source":"@site/versioned_docs/version-v6/testing/unit-integration.md","sourceDirName":"testing","slug":"/contract-testing/unit-integration-tests","permalink":"/docs/v6/contract-testing/unit-integration-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-v6/testing/unit-integration.md","tags":[],"version":"v6","frontMatter":{"title":"Unit & Integration","hide_title":true,"slug":"/contract-testing/unit-integration-tests"},"sidebar":"reference","previous":{"title":"Overview","permalink":"/docs/v6/contract-testing/overview"},"next":{"title":"E2E: Node Process","permalink":"/docs/v6/contract-testing/end-to-end-e2e-testing"}}');var s=n(23420),o=n(65404);const r={title:"Unit & Integration",hide_title:!0,slug:"/contract-testing/unit-integration-tests"},a="Tests",c={},l=[{value:"Unit Tests",id:"unit-tests",level:2},{value:"Integration Tests",id:"integration-tests",level:2},{value:"Example",id:"example",level:3},{value:"How do you find out if a test requires the off-chain environment?",id:"how-do-you-find-out-if-a-test-requires-the-off-chain-environment",level:2}];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Testing1 Title Picture",src:n(41183).A+"",width:"1600",height:"500"})}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"tests",children:"Tests"})}),"\n",(0,s.jsx)(t.p,{children:"On this page we lay out the different use-cases for unit vs. integration tests."}),"\n",(0,s.jsx)(t.h2,{id:"unit-tests",children:"Unit Tests"}),"\n",(0,s.jsxs)(t.p,{children:["Testing contracts off-chain is done by ",(0,s.jsx)(t.code,{children:"cargo contract test"})," and users can simply use the standard Rust\nroutines of creating unit test modules within the ink! project:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[cfg(test)]\nmod tests {\n    use super::*;\n\n    #[test]\n    fn my_test() { ... }\n}\n"})}),"\n",(0,s.jsx)(t.p,{children:"Test instances of contracts can be created with something like:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"let contract = MyContract::my_constructor(a, b);\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Messages can simply be called on the returned instance as if ",(0,s.jsx)(t.code,{children:"MyContract::my_constructor"})," returns a\n",(0,s.jsx)(t.code,{children:"Self"})," instance."]}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs",children:"flipper example"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"integration-tests",children:"Integration Tests"}),"\n",(0,s.jsxs)(t.p,{children:["For integration tests, the test is annotated with our ",(0,s.jsx)(t.code,{children:"#[ink::test]"}),"\nattribute instead of ",(0,s.jsx)(t.code,{children:"#[test]"}),". This attribute denotes that\nthe test is then executed in a simulated, mocked blockchain environment.\nHere functions are available to influence how the test environment\nis configured (e.g. setting a specified balance of an account to\nsimulate how a contract would behave when interacting with it)."]}),"\n",(0,s.jsxs)(t.p,{children:["If you annotate a test with the ",(0,s.jsx)(t.code,{children:"#[ink::test]"})," attribute it\nwill be executed in a simulated environment, similar to as it\nwould be run on-chain.\nYou then have fine-grained control over how a contract is called;\nfor example you can influence the block advancement, the value transferred to it,\nby which account it is called, which storage it is run with, etc.."]}),"\n",(0,s.jsxs)(t.p,{children:["See the ",(0,s.jsx)(t.a,{href:"https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs",children:(0,s.jsx)(t.code,{children:"examples/erc20"})})," contract on how to utilize those or ",(0,s.jsx)(t.a,{href:"https://docs.rs/ink/6.0.0/ink/attr.test.html",children:"the documentation"})," for details."]}),"\n",(0,s.jsx)(t.p,{children:"At the moment there are some known limitations to our off-chain environment,\nand we are working on making it behave as close to the real chain environment\nas possible."}),"\n",(0,s.jsxs)(t.admonition,{type:"note",children:[(0,s.jsxs)(t.p,{children:["One limitation of the off-chain testing framework is that it\ncurrently only supports a ",(0,s.jsx)(t.code,{children:"DefaultEnvironment"}),"."]}),(0,s.jsxs)(t.p,{children:["See ",(0,s.jsx)(t.a,{href:"/docs/v6/basics/chain-environment-types",children:"here"})," for an explanation of what an environment is."]})]}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"#[cfg(test)]\nmod tests {\n    // Conventional unit test that works with assertions.\n    #[ink::test]\n    fn test1() {\n        // test code comes here as usual\n    }\n\n    // Conventional unit test that returns some Result.\n    // The test code can make use of operator-`?`.\n    #[ink::test]\n    fn test2() -> Result<(), ink::env::Error> {\n        // test code that returns a Rust Result type\n    }\n}\n"})}),"\n",(0,s.jsx)(t.h2,{id:"how-do-you-find-out-if-a-test-requires-the-off-chain-environment",children:"How do you find out if a test requires the off-chain environment?"}),"\n",(0,s.jsxs)(t.p,{children:["If the test recursively uses or invokes methods that call a function defined\nin ",(0,s.jsx)(t.code,{children:"self.env()"})," or ",(0,s.jsx)(t.code,{children:"Self::env()"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"An example is the following:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rust",children:"let caller: AccountId = self.env().caller();\n"})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}}}]);