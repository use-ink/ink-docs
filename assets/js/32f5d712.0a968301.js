"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1773],{79075:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"background/ink-vs-cosmwasm","title":"ink! vs. CosmWasm","description":"Cosmwasm Title Picture","source":"@site/versioned_docs/version-v6/background/ink-vs-cosmwasm.md","sourceDirName":"background","slug":"/background/ink-vs-cosmwasm","permalink":"/docs/v6/background/ink-vs-cosmwasm","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-v6/background/ink-vs-cosmwasm.md","tags":[],"version":"v6","frontMatter":{"title":"ink! vs. CosmWasm","slug":"/background/ink-vs-cosmwasm","hide_title":true},"sidebar":"reference","previous":{"title":"ink! vs. Solidity","permalink":"/docs/v6/background/ink-vs-solidity"},"next":{"title":"Migrate an ink! contract to a Rollup","permalink":"/docs/v6/background/migrate-ink-contracts-to-polkadot-frame-parachain-rollup"}}');var o=t(74848),i=t(28453);const r={title:"ink! vs. CosmWasm",slug:"/background/ink-vs-cosmwasm",hide_title:!0},a="ink! vs. CosmWasm",c={},d=[{value:"Architecture",id:"architecture",level:2},{value:"Unit Testing",id:"unit-testing",level:2},{value:"Compiler",id:"compiler",level:2},{value:"Testnets",id:"testnets",level:2},{value:"Development Workflow",id:"development-workflow",level:2},{value:"Dependencies and Environment Setup",id:"dependencies-and-environment-setup",level:3},{value:"Compile and Test",id:"compile-and-test",level:3},{value:"Deploy and Interact",id:"deploy-and-interact",level:3}];function l(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components},{Head:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(s,{children:[(0,o.jsx)("meta",{name:"title",content:"Polkadot's ink! vs. CosmWasm"}),(0,o.jsx)("meta",{name:"description",content:"Comparison of Polkadot's ink! vs. CosmWasm."}),(0,o.jsx)("meta",{name:"keywords",content:"Polkadot, ComsWasm, Cosmos, ink!, Smart Contracts"}),(0,o.jsx)("meta",{property:"og:title",content:"ink! vs. CosmWasm"}),(0,o.jsx)("meta",{property:"og:description",content:"Comparison of Polkadot's ink! vs. CosmWasm."})]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{alt:"Cosmwasm Title Picture",src:t(82731).A+"",width:"1600",height:"500"})}),"\n",(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"ink-vs-cosmwasm",children:"ink! vs. CosmWasm"})}),"\n",(0,o.jsxs)(n.p,{children:["This is a short comparison between ",(0,o.jsx)(n.a,{href:"https://github.com/use-ink/ink/",children:"ink!"}),"\nand ",(0,o.jsx)(n.a,{href:"https://github.com/CosmWasm/cosmwasm",children:"CosmWasm"})," meant to onboard\ndevelopers coming from the Cosmos ecosystem."]}),"\n",(0,o.jsx)(n.h2,{id:"architecture",children:"Architecture"}),"\n",(0,o.jsxs)(n.p,{children:["CosmWasm is modular, meaning that any blockchain using the Cosmos SDK can add smart\ncontract support to their chain. That is similar to the ",(0,o.jsx)(n.a,{href:"https://polkadot.com/platform/sdk",children:"Polkadot SDK"}),"\napproach, where chains have the option to add ",(0,o.jsx)(n.code,{children:"pallet-revive"})," to their runtime."]}),"\n",(0,o.jsx)(n.p,{children:"Aside from that, the architecture philosophy is likely the point where CosmWasm and ink!\ndiffer the most. CosmWasm follows the actor model design pattern, while ink! follows a\nsynchronous execution model. That means some fundamental differences in how the source\ncode is structured."}),"\n",(0,o.jsx)(n.p,{children:"The main entry point functions of CosmWasm contracts are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"instantiate"})," which bootstraps the initial contract state (assuming it's already been\ndeployed)."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"execute"})," which has the actor perform operations to its internal state."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"query"})," which retrieves data from the actor\u2019s internal state."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:"An ink! contract can have as many public dispatchables as the developer desires, and\ndifferently from CosmWasm, it doesn\u2019t rely on JSON schemas for defining how the messages\nare structured."}),"\n",(0,o.jsx)(n.p,{children:"Instead, ink! makes heavy usage of Rust macros. The main ink! macros are:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"#[ink(constructor)]"})," which is called when the contract is deployed, and is responsible\nfor bootstrapping the initial contract state into the storage. It is analogous to the\nCosmWasm ",(0,o.jsx)(n.code,{children:"instantiate"})," function."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"#[ink(storage)]"})," which annotates a struct that represents the contract's internal\nstate."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"#[ink(message)]"})," which marks a function as a public dispatchable, meaning that it is\nexposed in the contract interface to the outside world. This macro can make a function\nbehave analogously to CosmWasm\u2019s ",(0,o.jsx)(n.code,{children:"execute"})," and ",(0,o.jsx)(n.code,{children:"query"})," functions. This depends on how it\naffects the internal contract state and what the return types."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.code,{children:"#[ink(event)]"})," and ",(0,o.jsx)(n.code,{children:"#[ink(topic)]"})," which annotates a struct and its members as the\nevents and topics that the contract might emit."]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["There are other ink! macros, for which details can be found at ",(0,o.jsx)(n.a,{href:"/docs/v6/macros-attributes",children:"Macros & Attributes"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,o.jsxs)(n.p,{children:["Unit testing in CosmWasm is quite similar to ink!. Both use the conventional Rust\n",(0,o.jsx)(n.code,{children:"#[cfg(test)]"})," macro and set up a mock on-chain environment."]}),"\n",(0,o.jsxs)(n.p,{children:["While CosmWasm unit tests have different modules for each of the three main entry-point\nfunctions, ink! allows for a more generalised approach, where the ",(0,o.jsx)(n.code,{children:"#[ink(test)]"})," macro is\nused for each unit test."]}),"\n",(0,o.jsxs)(n.p,{children:["You can read more about ink! unit tests ",(0,o.jsx)(n.a,{href:"/docs/v6/contract-testing/unit-integration-tests",children:"here"}),"."]}),"\n",(0,o.jsx)(n.h2,{id:"compiler",children:"Compiler"}),"\n",(0,o.jsxs)(n.p,{children:["CosmWasm uses ",(0,o.jsx)(n.a,{href:"https://docs.rs/crate/cargo-wasm/latest",children:"cargo-wasm"})," as its main\ncompiler, while ink! uses ",(0,o.jsx)(n.a,{href:"https://github.com/use-ink/cargo-contract",children:"cargo-contract"}),".\n",(0,o.jsx)(n.code,{children:"cargo-contract"})," is developed specifically for building, testing, and deploying\nink! contracts."]}),"\n",(0,o.jsx)(n.h1,{id:"local-development-network",children:"Local Development Network"}),"\n",(0,o.jsxs)(n.p,{children:["In terms of local development networks, the ",(0,o.jsx)(n.a,{href:"https://github.com/cosmos/gaia",children:"cosmos/gaia"}),"\nrepository acts as the basic template for a generic Cosmos node. With the addition of the\n",(0,o.jsx)(n.code,{children:"x/wasm"})," module and some clean-up, this template repository becomes\n",(0,o.jsx)(n.a,{href:"https://github.com/CosmWasm/wasmd",children:"wasmd"}),", the entry point for CosmWasm development."]}),"\n",(0,o.jsxs)(n.p,{children:["In terms of Polkadot SDK, ",(0,o.jsx)(n.a,{href:"https://github.com/paritytech/polkadot-sdk-solochain-template",children:(0,o.jsx)(n.code,{children:"polkadot-sdk-solochain-template"})})," is a basic generic template of a node.\nSimilar to ",(0,o.jsx)(n.code,{children:"x/wasm"}),", ",(0,o.jsx)(n.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/susbtrate/frame/revive",children:(0,o.jsx)(n.code,{children:"pallet-revive"})}),"\nis the module that adds RISC-V smart contract functionality to the chain.\nWe provide the ",(0,o.jsx)(n.a,{href:"https://github.com/use-ink/ink-node",children:"ink-node"}),", which is analogous to ",(0,o.jsx)(n.code,{children:"wasmd"})," \u2014 a basic template node\nfor smart contract development."]}),"\n",(0,o.jsx)(n.h2,{id:"testnets",children:"Testnets"}),"\n",(0,o.jsxs)(n.p,{children:["For CosmWasm development and on-chain testing, ",(0,o.jsx)(n.code,{children:"wasmd"})," can be operated as a local setup\n(single or multiple nodes), or connected to the ",(0,o.jsx)(n.code,{children:"cliffnet"})," public test network."]}),"\n",(0,o.jsx)(n.p,{children:"For testing, ink! contracts can be deployed on a few different options:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Locally, on a single or multiple node setup of ",(0,o.jsx)(n.a,{href:"https://github.com/use-ink/ink-node",children:(0,o.jsx)(n.code,{children:"ink-node"})}),"."]}),"\n",(0,o.jsxs)(n.li,{children:["Westend's ",(0,o.jsx)(n.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fasset-hub-westend-rpc.dwellir.com#/explorer",children:"Asset Hub"})]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frpc1.paseo.popnetwork.xyz#/explorer",children:"Pop Testnet"})," (on Paseo). See ",(0,o.jsx)(n.a,{href:"https://learn.onpop.io/contracts/pop-cli/up",children:"Pop CLI for one way to deploy"}),"."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"development-workflow",children:"Development Workflow"}),"\n",(0,o.jsx)(n.h3,{id:"dependencies-and-environment-setup",children:"Dependencies and Environment Setup"}),"\n",(0,o.jsxs)(n.p,{children:["The first step in CosmWasm development is to\n",(0,o.jsx)(n.a,{href:"https://docs.cosmwasm.com/core/installation",children:"install dependencies and setup the environment"}),",\nnamely Rust, the WebAssembly target, ",(0,o.jsx)(n.code,{children:"cargo-generate"})," and ",(0,o.jsx)(n.code,{children:"cargo-run-script"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["For ink! you can also find ",(0,o.jsx)(n.a,{href:"/docs/v6/getting-started/setup",children:"a setup guide"})," which will help you\nwith dependencies, namely Rust, ",(0,o.jsx)(n.code,{children:"cargo-contract"})," and ",(0,o.jsx)(n.code,{children:"ink-node"}),"."]}),"\n",(0,o.jsx)(n.h3,{id:"compile-and-test",children:"Compile and Test"}),"\n",(0,o.jsxs)(n.p,{children:["CosmWasm provides a template at the\n",(0,o.jsx)(n.a,{href:"https://github.com/CosmWasm/cw-template",children:"cw-template"})," repository. In order to generate a new project, all  you have to do is run:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ cargo generate --git https://github.com/CosmWasm/cw-template.git --name PROJECT_NAME\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Replacing ",(0,o.jsx)(n.code,{children:"PROJECT_NAME"})," with the name of your project."]}),"\n",(0,o.jsxs)(n.p,{children:["Similarly, ink! provides an\n",(0,o.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/tree/main",children:(0,o.jsx)(n.code,{children:"examples"})})," directory of its\nmain repository."]}),"\n",(0,o.jsx)(n.p,{children:"A contract can be compiled from its directory via:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ cargo contract build\n"})}),"\n",(0,o.jsx)(n.p,{children:"and tested via:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"$ cargo test\n"})}),"\n",(0,o.jsx)(n.h3,{id:"deploy-and-interact",children:"Deploy and Interact"}),"\n",(0,o.jsxs)(n.p,{children:["CosmWasm contracts are deployed and instantiated with help of the ",(0,o.jsx)(n.code,{children:"wasmd"})," executable. The\nlist of step is provided ",(0,o.jsx)(n.a,{href:"https://docs.cosmwasm.com/wasmd",children:"here"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["It is possible to deploy and interact with ink! contracts using either a CLI\n(",(0,o.jsx)(n.code,{children:"cargo-contract"}),"), or a web UI (",(0,o.jsx)(n.a,{href:"https://ui.use.ink",children:(0,o.jsx)(n.code,{children:"contracts-ui"})}),")."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.a,{href:"https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md",children:["Instructions for ",(0,o.jsx)(n.code,{children:"cargo-contract"})]})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsxs)(n.a,{href:"/docs/v6/getting-started/deploy-your-contract",children:["Instructions for ",(0,o.jsx)(n.code,{children:"contracts-ui"})]})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},82731:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/cosmwasm-3562133838fb33a00be2325804c4ef59.svg"},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(96540);const o={},i=s.createContext(o);function r(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:r(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);