"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[3159],{2338:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>c,toc:()=>o});var s=t(4848),i=t(8453);const r={title:"ink! vs. Solidity",slug:"/ink-vs-solidity"},l=void 0,c={id:"intro/ink-vs-solidity",title:"ink! vs. Solidity",description:"Here is a brief comparison of features between ink! and Solidity:",source:"@site/versioned_docs/version-3.x/intro/ink-vs-solidity.md",sourceDirName:"intro",slug:"/ink-vs-solidity",permalink:"/3.x/ink-vs-solidity",draft:!1,unlisted:!1,editUrl:"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-3.x/intro/ink-vs-solidity.md",tags:[],version:"3.x",frontMatter:{title:"ink! vs. Solidity",slug:"/ink-vs-solidity"},sidebar:"reference",previous:{title:"How it Works \u2012 Substrate",permalink:"/3.x/how-it-works"},next:{title:"ink! vs. CosmWasm",permalink:"/3.x/ink-vs-cosmwasm"}},a={},o=[{value:"Solidity to ink! Guide",id:"solidity-to-ink-guide",level:2},{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Converting a Solidity Contract to ink!",id:"converting-a-solidity-contract-to-ink",level:2},{value:"1. Generate New ink! Contract",id:"1-generate-new-ink-contract",level:3},{value:"2. Build ink! Contract",id:"2-build-ink-contract",level:3},{value:"3. Convert Solidity class fields to Rust struct",id:"3-convert-solidity-class-fields-to-rust-struct",level:3},{value:"4. Convert each function",id:"4-convert-each-function",level:3},{value:"Best Practices + Tips",id:"best-practices--tips",level:2},{value:"Syntax Equivalencies",id:"syntax-equivalencies",level:2},{value:"<code>public function</code>",id:"public-function",level:3},{value:"<code>mapping declaration</code>",id:"mapping-declaration",level:3},{value:"<code>mapping usage</code>",id:"mapping-usage",level:3},{value:"<code>struct</code>",id:"struct",level:3},{value:"<code>assertions / requires</code>",id:"assertions--requires",level:3},{value:"<code>timestamp</code>",id:"timestamp",level:3},{value:"<code>contract caller</code>",id:"contract-caller",level:3},{value:"<code>contract&#39;s address</code>",id:"contracts-address",level:3},{value:"<code>bytes</code>",id:"bytes",level:3},{value:"<code>uint256</code>",id:"uint256",level:3},{value:"<code>payable</code>",id:"payable",level:3},{value:"<code>received deposit / payment</code>",id:"received-deposit--payment",level:3},{value:"<code>contract balance</code>",id:"contract-balance",level:3},{value:"<code>transfer tokens from contract</code>",id:"transfer-tokens-from-contract",level:3},{value:"<code>events &amp; indexed</code>",id:"events--indexed",level:3},{value:"<code>errors and returning</code>",id:"errors-and-returning",level:3},{value:"<code>throw</code>",id:"throw",level:4},{value:"<code>assert</code>",id:"assert",level:4},{value:"<code>require and revert</code>",id:"require-and-revert",level:4},{value:"<code>nested mappings + custom / advanced structures</code>",id:"nested-mappings--custom--advanced-structures",level:3},{value:"<code>cross-contract calling</code>",id:"cross-contract-calling",level:3},{value:"<code>submit generic transaction / dynamic cross-contract calling</code>",id:"submit-generic-transaction--dynamic-cross-contract-calling",level:3},{value:"Limitations of ink! v3",id:"limitations-of-ink-v3",level:2},{value:"Troubleshooting Errors",id:"troubleshooting-errors",level:2},{value:"unit testing (off-chain)",id:"unit-testing-off-chain",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Here is a brief comparison of features between ink! and Solidity:"}),"\n",(0,s.jsx)("div",{class:"comparison",children:(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"}}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"ink!"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Solidity"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Virtual Machine"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Any Wasm VM"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"EVM"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Encoding"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Wasm"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"EVM Byte Code"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Language"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Rust"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Standalone"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Overflow Protection"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Enabled by default"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Constructor Functions"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Multiple"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Single"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Tooling"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Anything that supports Rust"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Custom"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Versioning"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Semantic"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Semantic"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Has Metadata?"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Multi-File Project"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Planned"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Storage Entries"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Variable"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"256 bits"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Supported Types"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Docs"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Docs"})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Has Interfaces?"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes (Rust Traits)"}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Yes"})]})]})]})}),"\n",(0,s.jsx)(n.h2,{id:"solidity-to-ink-guide",children:"Solidity to ink! Guide"}),"\n",(0,s.jsx)(n.h2,{id:"table-of-contents",children:"Table of Contents"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#solidity-to-ink-guide",children:"Solidity to ink! Guide"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#table-of-contents",children:"Table of Contents"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#converting-a-solidity-contract-to-ink",children:"Converting a Solidity Contract to ink!"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#1-generate-new-ink-contract",children:"1. Generate New ink! Contract"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#2-build-ink-contract",children:"2. Build ink! Contract"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#3-convert-solidity-class-fields-to-rust-struct",children:"3. Convert Solidity class fields to Rust struct"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#4-convert-each-function",children:"4. Convert each function"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#best-practices--tips",children:"Best Practices + Tips"})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#syntax-equivalencies",children:"Syntax Equivalencies"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#public-function",children:(0,s.jsx)(n.code,{children:"public function"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#mapping-declaration",children:(0,s.jsx)(n.code,{children:"mapping declaration"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#mapping-usage",children:(0,s.jsx)(n.code,{children:"mapping usage"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#struct",children:(0,s.jsx)(n.code,{children:"struct"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#assertions--requires",children:(0,s.jsx)(n.code,{children:"assertions / requires"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#timestamp",children:(0,s.jsx)(n.code,{children:"timestamp"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#contract-caller",children:(0,s.jsx)(n.code,{children:"contract caller"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#contracts-address",children:(0,s.jsx)(n.code,{children:"contract's address"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#bytes",children:(0,s.jsx)(n.code,{children:"bytes"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#uint256",children:(0,s.jsx)(n.code,{children:"uint256"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#payable",children:(0,s.jsx)(n.code,{children:"payable"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#received-deposit--payment",children:(0,s.jsx)(n.code,{children:"received deposit / payment"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#contract-balance",children:(0,s.jsx)(n.code,{children:"contract balance"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#transfer-tokens-from-contract",children:(0,s.jsx)(n.code,{children:"transfer tokens from contract"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#events--indexed",children:(0,s.jsx)(n.code,{children:"events & indexed"})})}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#errors-and-returning",children:(0,s.jsx)(n.code,{children:"errors and returning"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#throw",children:(0,s.jsx)(n.code,{children:"throw"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#assert",children:(0,s.jsx)(n.code,{children:"assert"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#require-and-revert",children:(0,s.jsx)(n.code,{children:"require and revert"})})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#nested-mappings--custom--advanced-structures",children:(0,s.jsx)(n.code,{children:"nested mappings + custom / advanced structures"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#cross-contract-calling",children:(0,s.jsx)(n.code,{children:"cross-contract calling"})})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#submit-generic-transaction--dynamic-cross-contract-calling",children:(0,s.jsx)(n.code,{children:"submit generic transaction / dynamic cross-contract calling"})})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#limitations-of-ink-v3",children:"Limitations of ink! v3"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#troubleshooting-errors",children:"Troubleshooting Errors"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#unit-testing-off-chain",children:"unit testing (off-chain)"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"converting-a-solidity-contract-to-ink",children:"Converting a Solidity Contract to ink!"}),"\n",(0,s.jsx)(n.h3,{id:"1-generate-new-ink-contract",children:"1. Generate New ink! Contract"}),"\n",(0,s.jsxs)(n.p,{children:['Run the following to generate ink! boilerplate code for ink!\'s "Hello, World!" (the ',(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/tree/main/flipper",children:(0,s.jsx)(n.code,{children:"flipper"})})," contract))"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo contract new <contract-name>\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-build-ink-contract",children:"2. Build ink! Contract"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"cargo +nightly contract build\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-convert-solidity-class-fields-to-rust-struct",children:"3. Convert Solidity class fields to Rust struct"}),"\n",(0,s.jsx)(n.p,{children:"Solidity is an object oriented language, and uses classes. ink! (Rust) does not use classes."}),"\n",(0,s.jsx)(n.p,{children:"An example Solidity class looks like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'contract MyContract {\n    bool private _theBool;\n    event UpdatedBool(bool indexed _theBool);\n\n    constructor(bool theBool_) {\n        require(theBool_ == true, "theBool_ must start as true");\n\n        _theBool = theBool_;\n    }\n\n    function setBool(bool newBool) public returns (bool boolChanged) {\n        if _theBool == newBool{\n               boolChanged = false;\n        }else{\n            boolChanged = true;\n        }\n\n        _theBool = newBool;\n        //emit event\n        UpdatedBool(newBool);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"And the equivalent contract in ink! looks like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n#[ink::contract]\nmod mycontract {\n    #[ink(storage)]\n    pub struct MyContract {\n        the_bool: bool, //class members become struct fields\n    }\n\n    #[ink(event)]\n    pub struct UpdatedBool {\n        #[ink(topic)] //-> indexed\n        the_bool: bool,\n    }\n\n    impl MyContract {\n        #[ink(constructor)]\n        pub fn new(the_bool: bool) -> Self {\n            assert!(the_bool == true, "the_bool must start as true");\n            Self { the_bool }\n        }\n\n        #[ink(message)] //functions become struct implementations\n        pub fn set_bool(&mut self, new_bool: bool) -> bool{\n            let bool_changed = true;\n\n            if self.the_bool == new_bool{\n                bool_changed = false;\n            }else{\n                bool_changed = true;\n            }\n\n            self.the_bool = new_bool;\n\n            self.env().emit_event(UpdatedBool {\n                the_bool: new_bool\n            });\n\n            //return\n            bool_changed\n        }\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"A few key differences are:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Solidity class variables / members will be placed in the contract struct in ink!"}),"\n",(0,s.jsxs)(n.li,{children:["All class methods in Solidity are ",(0,s.jsx)(n.code,{children:"impl"}),"emented for the contract struct in ink!"]}),"\n",(0,s.jsxs)(n.li,{children:["Solidity frequently prefixes variables with an underscore (",(0,s.jsx)(n.code,{children:"_name"}),"). ink! / Rust only prefixes with an underscore for ",(0,s.jsx)(n.em,{children:"unused"})," variables."]}),"\n",(0,s.jsx)(n.li,{children:"Solidity uses camelCase. ink! uses snake_case."}),"\n",(0,s.jsx)(n.li,{children:"In Solidity, the variable type comes before the variable name (e.g. bool myVar). While ink! specifies var type after the var name (e.g. my_var: bool)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"4-convert-each-function",children:"4. Convert each function"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Start converting each function one by one."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"A recommended approach is to, if possible, skip cross-contract calls at first and use mock data instead"}),"\n",(0,s.jsxs)(n.li,{children:["This way offchain unit tests can be written to test the core functionality","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"unit tests are offchain and do not work with cross-contract calls"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Once fully tested, start adding in cross-contract calls and perform on-chain manual + integration tests"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Ensure that function's visibility (public, private) are matched in ink!"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In Solidity, if a function returns a ",(0,s.jsx)(n.code,{children:"bool success"}),", ink! will use a ",(0,s.jsx)(n.code,{children:"Result<()>"})," instead (",(0,s.jsx)(n.code,{children:"Result::Ok"})," or ",(0,s.jsx)(n.code,{children:"Result::Err"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\n\n//result type\npub type Result<T> = core::result::Result<T, Error>;\n\n// ...\n\n//public function that returns a Result\n#[ink(message)]\npub fn my_function(&self) -> Result<()>{\n    Ok(())\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices--tips",children:"Best Practices + Tips"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["If the Solidity contract uses a ",(0,s.jsx)(n.code,{children:"string"}),", it is recommended to use a ",(0,s.jsx)(n.code,{children:"Vec<u8>"})," to avoid the overhead of a ",(0,s.jsx)(n.code,{children:"String"}),". See ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract",children:"here"})," for more details on why. The smart contract should only contain the information that strictly needs to be placed on the blockchain and go through consensus. The UI should be used for displaying strings."]}),"\n",(0,s.jsxs)(n.li,{children:["Double check all ",(0,s.jsx)(n.code,{children:".unwrap()"}),"s performed. Solidity does not have as strict checking as ink! does. For example, a mapping field can be accessed as simple as ",(0,s.jsx)(n.code,{children:"myMapping[someKey]"}),". ink!, however, requires ",(0,s.jsx)(n.code,{children:"self.my_mapping.get(some_key).unwrap()"}),". A useful way to handle ",(0,s.jsx)(n.code,{children:"None"})," cases is to use ",(0,s.jsx)(n.code,{children:".unwrap_or(some_val)"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Run the contracts node with ",(0,s.jsx)(n.code,{children:"substrate-contracts-node --dev -lerror,runtime::contracts=debug"})," for debug prints, and errors to be displayed in the nodes console."]}),"\n",(0,s.jsxs)(n.li,{children:["When passing parameters to a helper, it is recommended to pass references (even for primitives) as Wasm is more efficient with references.\nFor example (see ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs",children:"erc20"})," example):"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"/// Returns the account balance for the specified `owner`.\n///\n/// Returns `0` if the account is non-existent.\n#[ink(message)]\npub fn balance_of(&self, owner: AccountId) -> Balance {\n    self.balance_of_impl(&owner)\n}\n\n/// Returns the account balance for the specified `owner`.\n///\n/// Returns `0` if the account is non-existent.\n///\n/// # Note\n///\n/// Prefer to call this method over `balance_of` since this\n/// works using references which are more efficient in Wasm.\n#[inline]\nfn balance_of_impl(&self, owner: &AccountId) -> Balance {\n    self.balances.get(owner).unwrap_or_default()\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Just as in Solidity, ink! does not have floating point numbers due to the non-deterministic nature. Instead, the frontend should add decimal points as needed."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"syntax-equivalencies",children:"Syntax Equivalencies"}),"\n",(0,s.jsx)(n.h3,{id:"public-function",children:(0,s.jsx)(n.code,{children:"public function"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nfunction fnName() public {}\n//or\n//by default, functions are public\nfunction fnName() {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\n#[ink(message)]\npub fn fn_name(&self) {}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"mapping-declaration",children:(0,s.jsx)(n.code,{children:"mapping declaration"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nmapping(address => uint128) private mapName;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"//ink!\nuse ink_storage::{\n    traits::SpreadAllocate,\n    Mapping,\n};\n\n#[ink(storage)]\n#[derive(SpreadAllocate)]\npub struct ContractName {\n    map_name: Mapping<AccountId, u128>,\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["when using a map in ink!, ",(0,s.jsx)(n.code,{children:"ink_lang::utils::initialize_contract"})," must be used in the constructor. See ",(0,s.jsx)(n.a,{href:"/3.x/datastructures/mapping",children:"here"})," for more details."]}),"\n",(0,s.jsx)(n.h3,{id:"mapping-usage",children:(0,s.jsx)(n.code,{children:"mapping usage"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\n\n//insert / update\naMap[aKey] = aValue;\n\n// get\naMap[aKey]\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\n\n//insert / update\nself.a_map.insert(&a_key, &a_value);\n\n// get\nself.a_map.get(a_key).unwrap()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"struct",children:(0,s.jsx)(n.code,{children:"struct"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nstruct MyPerson{\n    address person;\n    u64 favNum;\n}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nstruct MyPerson {\n    person: AccountId,\n    fav_num: u64,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"assertions--requires",children:(0,s.jsx)(n.code,{children:"assertions / requires"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// solidity\nrequire(someValue < 10, "someValue is not less than 10");\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ink!\nassert!(some_value < 10, "some_value is not less than 10");\n'})}),"\n",(0,s.jsx)(n.h3,{id:"timestamp",children:(0,s.jsx)(n.code,{children:"timestamp"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nblock.timestamp\n// or\nnow\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nself.env().block_timestamp()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contract-caller",children:(0,s.jsx)(n.code,{children:"contract caller"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\naddress caller = msg.sender;\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nlet caller: AccountId = self.env().caller();\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contracts-address",children:(0,s.jsx)(n.code,{children:"contract's address"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\naddress(this)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nself.env().account_id()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"bytes",children:(0,s.jsx)(n.code,{children:"bytes"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity has a type ",(0,s.jsx)(n.code,{children:"bytes"}),". ",(0,s.jsx)(n.code,{children:"bytes"})," is (essentially) equivalent to an array of uint8. So, ",(0,s.jsx)(n.code,{children:"bytes"})," in Solidity => ",(0,s.jsx)(n.code,{children:"Vec<u8>"})," or ",(0,s.jsx)(n.code,{children:"[u8; ...]"})," in ink!. See ",(0,s.jsx)(n.a,{href:"https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity",children:"here"})," for more details. If desired, a ",(0,s.jsx)(n.code,{children:"bytes"})," struct can be created in ink! to replicate the ",(0,s.jsx)(n.code,{children:"bytes"})," type in Solidity."]}),"\n",(0,s.jsx)(n.h3,{id:"uint256",children:(0,s.jsx)(n.code,{children:"uint256"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity uses ",(0,s.jsx)(n.code,{children:"uint256"})," and ",(0,s.jsx)(n.code,{children:"uint"})," to represent a 256-bit type."]}),"\n",(0,s.jsxs)(n.p,{children:["Solidity is 256-bit / 32-byte word optimized. Meaning, using ",(0,s.jsx)(n.code,{children:"uint256"})," in Solidity contracts will reduce gas usage -- but increase storage usage. The largest size ink! has built in is a ",(0,s.jsx)(n.code,{children:"u128"}),". ink! compiles to Wasm. The largest primitive Wasm has is 64bit (due to most computers using 64bit). So, there is no benefit to using any larger primitive over a collection."]}),"\n",(0,s.jsxs)(n.p,{children:["When porting a ",(0,s.jsx)(n.code,{children:"uint256"})," from Solidity to ink!, it is recommended to, with discretion, determine the range of the value, and choose the appropriate size (u8, u16, u32, u64, u128). If a 256-bit hash value is required, ink! has a ",(0,s.jsx)(n.code,{children:"Hash"})," primitive available. In the event a value needs to be 256-bit, it is recommended to use an array (e.g. ",(0,s.jsx)(n.code,{children:"[u64; 4]"}),")."]}),"\n",(0,s.jsx)(n.h3,{id:"payable",children:(0,s.jsx)(n.code,{children:"payable"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nfunction myFunction() payable returns (uint64) {}\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(message, payable)]\npub fn my_function() -> (u64) {}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"received-deposit--payment",children:(0,s.jsx)(n.code,{children:"received deposit / payment"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-C++",children:"// solidity\nmsg.value\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nself.env().transferred_value()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"contract-balance",children:(0,s.jsx)(n.code,{children:"contract balance"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nthis.balance\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\nself.env().balance()\n"})}),"\n",(0,s.jsx)(n.h3,{id:"transfer-tokens-from-contract",children:(0,s.jsx)(n.code,{children:"transfer tokens from contract"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\nrecipient.send(amount)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'//ink!\nif self.env().transfer(recipient, amount).is_err() {\n    panic!("error transferring")\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"events--indexed",children:(0,s.jsx)(n.code,{children:"events & indexed"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\n\nevent MyCoolEvent(\n    u128 indexed indexedValue,\n    u128 notIndexedValue,\n);\n\n//emit event\nMyCoolEvent (someValue, someOtherValue)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\n\n#[ink(event)]\npub struct MyCoolEvent {\n    #[ink(topic)]\n    indexed_value: u128,\n\n    not_indexed_value: u128,\n}\n\n// emit event\nself.env().emit_event(MyCoolEvent {\n    indexed_value: some_value,\n    not_indexed_value: some_other_value\n});\n"})}),"\n",(0,s.jsx)(n.h3,{id:"errors-and-returning",children:(0,s.jsx)(n.code,{children:"errors and returning"})}),"\n",(0,s.jsxs)(n.p,{children:["Solidity has several error handling mechanisms: ",(0,s.jsx)(n.code,{children:"assert"}),", ",(0,s.jsx)(n.code,{children:"require"}),", ",(0,s.jsx)(n.code,{children:"revert"}),", and ",(0,s.jsx)(n.code,{children:"throw"}),". Each of these will revert the changed state when called. See ",(0,s.jsx)(n.a,{href:"https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e",children:"this article"})," for details on these."]}),"\n",(0,s.jsxs)(n.p,{children:["ink! uses a ",(0,s.jsx)(n.code,{children:"Result"})," enum (",(0,s.jsx)(n.code,{children:"Ok(T)"}),", ",(0,s.jsx)(n.code,{children:"Err(E)"}),"), ",(0,s.jsx)(n.code,{children:"assert!"})," and ",(0,s.jsx)(n.code,{children:"panic!"}),". ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts",children:"This Stack Exchange"})," answer and ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink/issues/641",children:"GitHub discussion"})," provide more details on these."]}),"\n",(0,s.jsx)(n.h4,{id:"throw",children:(0,s.jsx)(n.code,{children:"throw"})}),"\n",(0,s.jsxs)(n.p,{children:["Throw is deprecated in Solidity and would throw an invalid opcode error (no details) and revert the state. As an alternative to the ",(0,s.jsx)(n.code,{children:"if...{throw;}"})," pattern in Solidity, a ",(0,s.jsx)(n.code,{children:"Result::Err"})," should be returned for expected errors, and an ",(0,s.jsx)(n.code,{children:"assert!"})," should be used for errors that should not occur."]}),"\n",(0,s.jsx)(n.h4,{id:"assert",children:(0,s.jsx)(n.code,{children:"assert"})}),"\n",(0,s.jsxs)(n.p,{children:["In Solidity, ",(0,s.jsx)(n.code,{children:"assert"})," is used as internal guards against errors in the ",(0,s.jsx)(n.em,{children:"code"}),". In general, properly functioning code should never hit a failing assert. ",(0,s.jsx)(n.code,{children:"assert"})," in Solidity does not have error strings. In ink!, use ",(0,s.jsx)(n.code,{children:"assert!"}),". ",(0,s.jsx)(n.code,{children:"assert!"})," will ",(0,s.jsx)(n.code,{children:"panic!"})," if it evaluates to ",(0,s.jsx)(n.em,{children:"false"}),". The state will be reverted, and a ",(0,s.jsx)(n.code,{children:"CalleeTrapped"})," will be returned. The (optional) error string will be printed to the debug buffer."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// ink!\nassert!(caller == owner, "caller is not owner")\n'})}),"\n",(0,s.jsx)(n.h4,{id:"require-and-revert",children:(0,s.jsx)(n.code,{children:"require and revert"})}),"\n",(0,s.jsxs)(n.p,{children:["In Solidity, ",(0,s.jsx)(n.code,{children:"require"})," is used for general (normal) errors -- such as errors that occur based on user input. ",(0,s.jsx)(n.code,{children:"require"})," does have the option for an error string. ",(0,s.jsx)(n.code,{children:"revert"})," is very similar to ",(0,s.jsx)(n.code,{children:"require"})," except that ",(0,s.jsx)(n.code,{children:"revert"})," will be called in ",(0,s.jsx)(n.code,{children:"if ... else"})," chains. Both ",(0,s.jsx)(n.code,{children:"require"})," and ",(0,s.jsx)(n.code,{children:"revert"})," will revert the chain state. In ink!, ",(0,s.jsx)(n.code,{children:"if ... { return Err(Error::SomeError) }"})," should be used for ",(0,s.jsx)(n.code,{children:"require"})," or ",(0,s.jsx)(n.code,{children:"revert"}),". When a ",(0,s.jsx)(n.code,{children:"Result::Err"})," is returned in ink!, then all state is reverted."]}),"\n",(0,s.jsxs)(n.p,{children:["In general, ",(0,s.jsx)(n.code,{children:"Result::Err"})," should be used when a ",(0,s.jsx)(n.em,{children:"calling contract"})," needs to know ",(0,s.jsx)(n.em,{children:"why"})," a function failed. Otherwise, ",(0,s.jsx)(n.code,{children:"assert!"})," should be used as it has less overhead than a ",(0,s.jsx)(n.code,{children:"Result"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:'// Solidity\nfunction myFunction(bool returnError) public {\n    require(!returnError, "my error here");\n\n    //or\n\n    if returnError {\n        revert("my error here");\n    }\n}\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'//ink!\n\n#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]\n#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]\npub enum Error {\n    /// Provide a detailed comment on the error\n    MyError,\n}\n\n// result type\npub type Result<T> = core::result::Result<T, Error>;\n\n// ...\n#[ink(message)]\npub fn my_function(&self, return_error: bool) -> Result<()> {\n    if return_error{\n        return Err(Error::MyError)\n    }\n    Ok(())\n}\n\n'})}),"\n",(0,s.jsx)(n.h3,{id:"nested-mappings--custom--advanced-structures",children:(0,s.jsx)(n.code,{children:"nested mappings + custom / advanced structures"})}),"\n",(0,s.jsx)(n.p,{children:"In Solidity, it is easy to do nested mappings. It is not as straightforward in ink!."}),"\n",(0,s.jsx)(n.p,{children:"imagine the following scenario"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\ncontract Dao {\n    struct Proposal {\n        mapping (address => bool) votedYes\n    }\n\n    mapping (address => bool) public isWhitelisted;\n    Proposal[] public proposals;\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["in ink! this ",(0,s.jsx)(n.em,{children:"seems"})," like it could be represented like so:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink::contract]\nmod dao {\n\n    #[derive(SpreadAllocate)]\n    pub struct Proposal {\n        voted_yes: Mapping<AccountId, bool>,\n    }\n\n    #[ink(storage)]\n    #[derive(SpreadAllocate)]\n    pub struct Dao {\n        proposals: Vec<Proposal>,\n        is_whitelisted: Mapping<AccountId, bool>,\n    }\n\n    impl Dao{\n        #[ink(constructor)]\n        pub fn new(/*...*/) -> Self {\n            //required for mappings\n            ink_lang::utils::initialize_contract(|contract| {/*...*/})\n        }\n    }\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["However, this will cause an error due to the nested mapping. ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract",children:"This answer"})," explains in detail why nested mappings are not allowed"]}),"\n",(0,s.jsxs)(n.p,{children:["So, as of now, to get around this issue an alternate data structure will need to be used. A data-structure that can be interchanged with the ",(0,s.jsx)(n.code,{children:"Mapping"})," syntax and with minimal additional implementations is the ",(0,s.jsx)(n.code,{children:"BTreeMap"}),". ",(0,s.jsx)(n.code,{children:"BTreeMap"})," is less efficient than ",(0,s.jsx)(n.code,{children:"Mapping"}),", but is an easy workaround until nested mappings are allowed. This will be used in the nested struct. Additional ",(0,s.jsx)(n.code,{children:"derive"}),"s will need to be added to be compatible with the #[ink(storage)] struct (see below)."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#[ink::contract]\nmod dao {\n\n    use ink_prelude::collections::BTreeMap;\n\n    #[derive(\n        scale::Encode,\n        scale::Decode,\n        SpreadLayout,\n        PackedLayout,\n        SpreadAllocate,\n    )]\n    #[cfg_attr(\n        feature = "std",\n        derive(scale_info::TypeInfo, ink_storage::traits::StorageLayout)\n    )]\n    pub struct Proposal {\n        voted_yes: BTreeMap<AccountId, bool>,\n    }\n\n    #[ink(storage)]\n    #[derive(SpreadAllocate)]\n    pub struct Dao {\n        proposals: Vec<Proposal>,\n        is_whitelisted: Mapping<AccountId, bool>,\n    }\n\n    impl Dao{\n        #[ink(constructor)]\n        pub fn new(/*...*/) -> Self {\n            //required for mappings\n            ink_lang::utils::initialize_contract(|contract| {/*...*/})\n        }\n    }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["This almost works as expected. However, there is still one issue. ",(0,s.jsx)(n.code,{children:"SpreadAllocate"})," (used with ",(0,s.jsx)(n.code,{children:"Mapping"}),") requires that ",(0,s.jsx)(n.code,{children:"Vec<Proposal>"})," implements ",(0,s.jsx)(n.code,{children:"PackedAllocate"}),". To fix this, ",(0,s.jsx)(n.code,{children:"Proposal"})," needs to implement ",(0,s.jsx)(n.code,{children:"PackedAllocate"}),". See ",(0,s.jsx)(n.a,{href:"https://docs.rs/ink_storage/3.3.1/ink_storage/traits/trait.PackedAllocate.html",children:"here"})," for details + examples. See the following for this example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"    use ink_primitives::Key;\n\n    pub struct Proposal {\n        voted_yes: BTreeMap<AccountId, bool>,\n    }\n\n    impl ink_storage::traits::PackedAllocate for Proposal {\n        fn allocate_packed(&mut self, at: &Key){\n            PackedAllocate::allocate_packed(&mut *self, at)\n        }\n    }\n"})}),"\n",(0,s.jsx)(n.h3,{id:"cross-contract-calling",children:(0,s.jsx)(n.code,{children:"cross-contract calling"})}),"\n",(0,s.jsxs)(n.p,{children:["In ink!, to do ",(0,s.jsx)(n.a,{href:"/3.x/basics/cross-contract-calling",children:"cross-contract calling"}),", the contract will need to be added to the project. Ensure the contract is properly exporting its Structs. See the ",(0,s.jsx)(n.code,{children:"erc20"})," contract example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\n//make the structs visible\npub use self::erc20::{\n    Erc20,\n    //this is necessary\n    Erc20Ref,\n};\n\n#[ink::contract]\npub mod erc20 {}\n'})}),"\n",(0,s.jsx)(n.p,{children:"In the new cross-called contract's Cargo.toml, add (or edit) the following:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'[lib]\nname = "erc20"\npath = "lib.rs"\ncrate-type = [\n\t# Used for normal contract Wasm blobs.\n\t"cdylib",\n    # Used for ABI generation. Necessary for importing as a dependency\n    "rlib",\n]\n\n[features]\nink-as-dependency = []\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"ink-as-dependency"}),' "tells the ink! code generator to always or never compile the smart contract as if it was used as a dependency of another ink! smart contract" (',(0,s.jsx)(n.a,{href:"/3.x/basics/cross-contract-calling",children:"source"}),")."]}),"\n",(0,s.jsx)(n.p,{children:"Then, In the main contract's Cargo.toml, import the contract that will be cross-called."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }\n'})}),"\n",(0,s.jsxs)(n.p,{children:["And make sure to add it to the ",(0,s.jsx)(n.code,{children:"std"})," field of the .toml file."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'[features]\ndefault = ["std"]\nstd = [\n    # ...\n\n    "erc20/std",\n]\n'})}),"\n",(0,s.jsx)(n.p,{children:"Now, import the cross-called-contract to the main contract:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// example\nuse erc20::Erc20Ref;\n"})}),"\n",(0,s.jsx)(n.p,{children:"There are two methods to setup the other contract."}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Instantiate the cross-called-contract in the main contract's constructor.\nSee ",(0,s.jsx)(n.a,{href:"/3.x/basics/cross-contract-calling",children:"here"})," for a tutorial, and ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator",children:"here"})," for an example."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["Or, add the ",(0,s.jsx)(n.code,{children:"AccountId"})," of an already deployed contract.\nHere is an example constructor to set this up:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"use my_other_contract::MyOtherContractRef;\n// ...\nfn new(contract_id: AccountId) -> Self {\n     //for already deployed contract\n     let contract_ref: MyOtherContractRef = ink_env::call::FromAccountId::from_account_id(contract_id);\n     Self {contract_ref}\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Now, to perform the cross-contract call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"{\n    self.contract_ref.some_external_function(a_param);\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note: as of now (ink! v3.3.1), when using cross-contract calls, emitting events will not work and compile errors will occur. See ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink/issues/1000",children:"issue #1000"}),". Furthermore, the compiler will throw an error saying that (for example) Erc20Ref does not implement ",(0,s.jsx)(n.code,{children:"SpreadAllocate"}),". This ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink/issues/1149",children:"issue #1149"})," explains more and has a workaround. These issues will be fixed in ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink/issues/1134",children:"issue #1134"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"submit-generic-transaction--dynamic-cross-contract-calling",children:(0,s.jsx)(n.code,{children:"submit generic transaction / dynamic cross-contract calling"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-c++",children:"// solidity\n\n// invokes function found at`addr`, sends the `_amount` to the `addr`, and the `_transactionData` payload.\naddr.call.value(_amount)(_transactionData)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// ink!\n\n// ...\n\nuse ink_env::call::{\n    build_call,\n    Call,\n    ExecutionInput,\n    Selector,\n};\n\n/// A wrapper that allows us to encode a blob of bytes.\n///\n/// We use this to pass the set of untyped (bytes) parameters to the `CallBuilder`.\nstruct CallInput<'a>(&'a [u8]);\n\nimpl<'a> scale::Encode for CallInput<'a> {\n    fn encode_to<T: Output + ?Sized>(&self, dest: &mut T) {\n        dest.write(self.0);\n    }\n}\n\n// ...\n\n// see: https://github.com/use-ink/ink-examples/blob/main/multisig/lib.rs#L535\nfn invoke_transaction(\n    &mut self,\n    callee: AccountId,\n    transfer_amount: u128,\n    function_selector: [u8; 4],\n    transaction_data: Vec<u8>,\n    gas_limit: u64) -> Result<()> {\n\n    let result = build_call::<<Self as ::ink_lang::reflect::ContractEnv>::Env>()\n        .call_type(\n            Call::new()\n                .callee(callee) //contract to call\n                .gas_limit(*gas_limit)\n                .transferred_value(transfer_amount), //value to transfer with call\n        )\n        .exec_input(\n            ExecutionInput::new(Selector::from(*function_selector)).push_arg(CallInput(transaction_data)), //SCALE encoded parameters\n        )\n        .returns::<()>()\n        .fire()\n        .map_err(|_| Error::TransactionFailed);\n    result\n}\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Note: the ",(0,s.jsx)(n.code,{children:"function_selector"})," bytes can be found in the generated ",(0,s.jsx)(n.code,{children:"target/ink/metadata.json"})]}),"\n",(0,s.jsx)(n.h2,{id:"limitations-of-ink-v3",children:"Limitations of ink! v3"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Multi-file projects are not supported with pure ink!","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"implementing traits / interfaces will not work"}),"\n",(0,s.jsx)(n.li,{children:"There are alternatives that do add this functionality such as OpenBrush"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Nested structs and data structures can be difficult to use"}),"\n",(0,s.jsxs)(n.li,{children:["Cross-contract calling prevents events from being emitted. See ",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink/issues/1000",children:"here"})," for details."]}),"\n",(0,s.jsx)(n.li,{children:"Cross-contract calling can not be tested offchain with unit tests. On-chain integration tests will need to be used."}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting-errors",children:"Troubleshooting Errors"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"ERROR: Validation of the Wasm failed."})}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"ERROR: Validation of the Wasm failed.\n\nERROR: An unexpected panic function import was found in the contract Wasm.\nThis typically goes back to a known bug in the Rust compiler:\nhttps://github.com/rust-lang/rust/issues/78744\n\nAs a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.\nThis will disable safe math operations, but unfortunately we are currently not\naware of a better workaround until the bug in the compiler is fixed.\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),"\nAdd the following to the contract Cargo.toml:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"[profile.release]\noverflow-checks = false\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"\"failed to load bitcode of module '...' \""})}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This happens when trying to import a contract for cross-contract calling."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution"}),"\nEnsure that the following is added to Cargo.toml contract import:`"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'features = ["ink-as-dependency"]\n'})}),"\n",(0,s.jsx)(n.p,{children:"so the import would look like:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"unit-testing-off-chain",children:"unit testing (off-chain)"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit tests are an integral part of smart-contract development and ensuring your code works off-chain before testing on-chain."}),"\n",(0,s.jsxs)(n.li,{children:["To run ink! tests, do ",(0,s.jsx)(n.em,{children:"not"})," use ",(0,s.jsx)(n.code,{children:"cargo +nightly contract test"}),". Use ",(0,s.jsx)(n.code,{children:"cargo +nightly test"}),". Add the ",(0,s.jsx)(n.code,{children:"--nocapture"})," flag for debug prints to show. See ",(0,s.jsx)(n.a,{href:"https://substrate.stackexchange.com/questions/3197/how-to-understand-which-test-failed-in-ink",children:"here"})," for more info why."]}),"\n",(0,s.jsx)(n.li,{children:"From the contract module, make sure to make the contract struct and anything else that is going to be used in the unit tests public. For example:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'// top of file\n#![cfg_attr(not(feature = "std"), no_std)]\n\nuse ink_lang as ink;\n\npub use self::mycontract::{\n    MyContract\n};\n'})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Off-chain unit tests will not work with cross-contract calls.\nOne workaround to ensure unit tests are still passing is to provide mock data."}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["An easy approach is to use conditional compiling with ",(0,s.jsx)(n.code,{children:"#[cfg(test)]"})," and ",(0,s.jsx)(n.code,{children:"#[cfg(not(test))]"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"Note: this solution is not ideal. ink! v4.0 will provide much better solutions."}),"\n",(0,s.jsx)(n.p,{children:"For example, here is a read-only ERC20 cross-contract call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"//only compiles when *not* running tests\n#[cfg(not(test))]\nfn get_token_balance(&self, caller: &AccountId) -> Balance {\n    //calls the external ERC-20 contract\n    self.token.balance_of(*caller)\n}\n\n//only compiles when running tests\n#[cfg(test)]\nfn get_token_balance(&self, _: &AccountId) -> Balance {\n    //arbitrary value\n    1\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["And if the cross-contract call ",(0,s.jsx)(n.em,{children:"writes"})," to storage, a mock field can be added to the contract struct. For example:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct MyContract {\n    #[cfg(test)]\n    mock_field: SomeStruct, // will serve as a fake storage\n}\n\n...\n\n//on-chain, performs cross-contract call\n#[cfg(not(test))]\nfn do_some_write(&mut self) {\n    self.external_contract.write_to_field(0xDEADBEEF);\n}\n\n\n//testing environment only\n#[cfg(test)]\nfn do_some_write(&mut self) {\n    self.mock_field.my_fake_storage_item = 0xDEADBEEF;\n}\n"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"useful code to interact and modify the contract environment for testing"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://use-ink.github.io/ink/ink_env/test/index.html",children:"ink_env docs"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"// get the default accounts (alice, bob, ...)\nlet accounts = ink_env::test::default_accounts::<ink_env::DefaultEnvironment>();\naccounts.alice //usage example\n\n// set which account calls the contract\nink_env::test::set_caller::<ink_env::DefaultEnvironment>(accounts.bob);\n\n//get the contract's address\nlet callee = ink_env::account_id::<ink_env::DefaultEnvironment>();\n\n// set the contracts address.\n// by default, this is alice's account\nink_env::test::set_callee::<ink_env::DefaultEnvironment>(callee);\n\n// transfer native currency to the contract\nink_env::test::set_value_transferred::<ink_env::DefaultEnvironment>(2);\n\n// increase block number (and block timestamp).\n// this can be placed in a loop to advance the block many times\nink_env::test::advance_block::<ink_env::DefaultEnvironment>();\n\n//generate arbitrary AccountId\nAccountId::from([0x01; 32]);\n\n//generate arbitrary Hash\nHash::from([0x01; 32])\n\n//macro for tests that are expected to panic.\n#[should_panic]\n"})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(6540);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);