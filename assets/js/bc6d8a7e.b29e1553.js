"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9985],{15583:(t,e,s)=>{s.r(e),s.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"background/why-rust","title":"Why Rust for Smart Contracts?","description":"Rust Title Picture","source":"@site/docs/background/why-rust.md","sourceDirName":"background","slug":"/background/why-rust-for-smart-contracts","permalink":"/docs/v6/background/why-rust-for-smart-contracts","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/background/why-rust.md","tags":[],"version":"current","frontMatter":{"title":"Why Rust for Smart Contracts?","hide_title":true,"slug":"/background/why-rust-for-smart-contracts"},"sidebar":"reference","previous":{"title":"Polkadot SDK and ink!","permalink":"/docs/v6/background/polkadot-sdk"},"next":{"title":"Why RISC-V and PolkaVM for Smart Contracts?","permalink":"/docs/v6/background/why-riscv-and-polkavm-for-smart-contracts"}}');var a=s(23420),r=s(65404);const o={title:"Why Rust for Smart Contracts?",hide_title:!0,slug:"/background/why-rust-for-smart-contracts"},i="Why Rust for Smart Contracts?",c={},l=[];function d(t){const e={a:"a",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",ul:"ul",...(0,r.R)(),...t.components},{Head:n}=e;return n||function(t,e){throw new Error("Expected "+(e?"component":"object")+" `"+t+"` to be defined: you likely forgot to import, pass, or provide it.")}("Head",!0),(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)(n,{children:[(0,a.jsx)("meta",{name:"description",content:"Explanation why Rust is a great language for smart contracts."}),(0,a.jsx)("meta",{name:"keywords",content:"ink!, Rust, Smart Contracts"}),(0,a.jsx)("meta",{property:"og:title",content:"Why Rust for Smart Contracts?"}),(0,a.jsx)("meta",{property:"og:description",content:"Explanation why Rust is a great language for smart contracts."})]}),"\n",(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Rust Title Picture",src:s(92184).A+"",width:"1600",height:"500"})}),"\n",(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"why-rust-for-smart-contracts",children:"Why Rust for Smart Contracts?"})}),"\n",(0,a.jsx)(e.p,{children:"ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.\nIf this doesn't already convince you, you find many more good reasons here:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Rust is an ideal smart contract language:"})," It is type safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn\u2019t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Rust ecosystem:"})," You gain all the support available to the Rust ecosystem for free. As the language develops, ink! will automatically gain access to new features and functionality, improving how you can write smart contracts in the future."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Tooling:"})," Because ink! follows Rust standards, tools like rustfmt, clippy and rust-analyzer already work out of the box.\nThe same goes for code formatting and syntax highlighting in most modern text editors.\nAlso, Rust has an integrated test and benchmark runner,"]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"No overhead:"})," Minimal runtime."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Safe & Efficient:"})," Zero-cost & safe abstractions."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Productive:"})," Cargo + ",(0,a.jsx)("a",{href:"https://crates.io",children:"crates.io"})," Ecosystem."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"1st class RISC-V:"})," The Rust compiler has excellent support for the RISC-V bytecode architecture.\nThat's because it leverages LLVM as its backend to generate machine code for the RISC-V architecture."]}),"\n"]}),"\n",(0,a.jsxs)(e.li,{children:["\n",(0,a.jsxs)(e.p,{children:[(0,a.jsx)("span",{class:"highlight",children:"Small Size:"})," In the space-constrained blockchain world size is important.\nThe Rust compiler is a great help for that, since it reorders struct fields in order\nto make each type as small as possible. Thus, Rust data structures are very compact,\nin many cases even more compact than in C."]}),"\n"]}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:["ink! is an ",(0,a.jsx)(e.a,{href:"https://wiki.haskell.org/Embedded_domain_specific_language",children:"Embedded Domain Specific Language"})," (eDSL):\na domain-specific language of the Rust programming language.\nThat means:"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"we allow only a subset of the Rust programming language features to be used\nfor writing smart contracts. For example, it is not possible do any\nmulti-threading operations or access the web."}),"\n",(0,a.jsx)(e.li,{children:"we provide annotations, macros, and primitives that are needed when writing\nsmart contracts. For example, annotations on what the smart contract's storage\nstruct is or what an event is."}),"\n"]}),"\n",(0,a.jsxs)(e.p,{children:['ink! is just standard Rust in a well-defined "contract format" with specialized ',(0,a.jsx)(e.code,{children:"#[ink(\u2026)]"})," attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Polkadot SDK compatible RISC-V bytecode!"]})]})}function h(t={}){const{wrapper:e}={...(0,r.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(d,{...t})}):d(t)}},65404:(t,e,s)=>{s.d(e,{R:()=>o,x:()=>i});var n=s(36672);const a={},r=n.createContext(a);function o(t){const e=n.useContext(r);return n.useMemo(function(){return"function"==typeof t?t(e):{...e,...t}},[e,t])}function i(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:o(t.components),n.createElement(r.Provider,{value:e},t.children)}},92184:(t,e,s)=>{s.d(e,{A:()=>n});const n=s.p+"assets/images/rust-750c42dda186793e9d8ecd0aa09f3d45.svg"}}]);