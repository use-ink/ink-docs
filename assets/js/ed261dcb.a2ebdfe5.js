"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[4916],{2385:(e,t,n)=>{n.d(t,{A:()=>i});const i=n.p+"assets/images/metadata-revive-2409587c8d292f13afb31073948c3ec6.svg"},45430:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"basics/abi/all","title":"\\"All\\" ABI Mode\\n","description":"Metadata Title Picture","source":"@site/docs/basics/abi/all.md","sourceDirName":"basics/abi","slug":"/basics/abi/all","permalink":"/docs/v6/basics/abi/all","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/basics/abi/all.md","tags":[],"version":"current","frontMatter":{"title":"\\"All\\" ABI Mode\\n","hide_title":true,"slug":"/basics/abi/all"},"sidebar":"reference","previous":{"title":"Solidity ABI","permalink":"/docs/v6/basics/abi/solidity"},"next":{"title":"Overview","permalink":"/docs/v6/basics/metadata"}}');var s=n(23420),o=n(65404);const a={title:'"All" ABI Mode\n',hide_title:!0,slug:"/basics/abi/all"},r='"All" ABI Mode',c={},l=[];function d(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",header:"header",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Metadata Title Picture",src:n(2385).A+"",width:"1600",height:"500"})}),"\n",(0,s.jsx)(t.header,{children:(0,s.jsx)(t.h1,{id:"all-abi-mode",children:'"All" ABI Mode'})}),"\n",(0,s.jsxs)(t.p,{children:['The "all" ABI mode is declared in the contract\'s manifest file (i.e. the ',(0,s.jsx)(t.code,{children:"Cargo.toml"})," file)\nas follows:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-toml",children:'[package.metadata.ink-lang]\nabi = "all"\n'})}),"\n",(0,s.jsx)(t.p,{children:'When the "all" ABI is specified, the ink! code generator follows both\nthe ink! and Solidity ABI specifications, and generates entry points\nfor both calling conventions. This means:'}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:["For each message, two selectors are generated, one for ",(0,s.jsx)(t.a,{href:"/docs/v6/basics/abi/ink",children:"ink!"}),"\nand another for ",(0,s.jsx)(t.a,{href:"/docs/v6/basics/abi/solidity",children:"Solidity"})," ABI."]}),"\n",(0,s.jsxs)(t.li,{children:["Each selector is ABI specific and its entry point uses the corresponding\ninput/output encoding/decoding scheme (i.e. entry points for ink! selectors use\nParity's ",(0,s.jsx)(t.a,{href:"https://docs.rs/parity-scale-codec/latest/parity_scale_codec",children:"SCALE Codec"}),", while entry points for Solidity selectors\nuse Solidity ABI encoding/decoding for input/output encoding/decoding)."]}),"\n",(0,s.jsxs)(t.li,{children:["Message selector manual overrides\n(using the ",(0,s.jsxs)(t.a,{href:"/docs/v6/macros-attributes/selector",children:[(0,s.jsx)(t.code,{children:"selector"})," attribute"]}),") are respected for\nink! ABI entry points but ignored for Solidity ABI entry points\n(i.e. Solidity selectors are ",(0,s.jsx)(t.strong,{children:"always"})," generated according to the\n",(0,s.jsx)(t.a,{href:"https://docs.soliditylang.org/en/latest/abi-spec.html#function-selector",children:"Solidity ABI specification for function selectors"}),")."]}),"\n",(0,s.jsxs)(t.li,{children:["Multiple constructors are supported (as per the ink! ABI), however,\nif multiple constructors are defined, then one of the constructors\nmust be annotated with the ",(0,s.jsxs)(t.a,{href:"/docs/v6/macros-attributes/default",children:[(0,s.jsx)(t.code,{children:"default"})," attribute"]}),"\nto identify it as the constructor to use for Solidity ABI encoded instantiation.\nNote that if only a single constructor is defined,\nthen the ",(0,s.jsx)(t.code,{children:"default"})," attribute annotation is unnecessary."]}),"\n",(0,s.jsxs)(t.li,{children:["Call builders and ",(0,s.jsx)(t.a,{href:"/docs/v6/basics/cross-contract-calling#contract-references",children:"contract references"})," are generated for\nboth ink! and Solidity ABI calling conventions."]}),"\n",(0,s.jsxs)(t.li,{children:["Both an ink! and Solidity ABI encoded event are emitted for each call to\n",(0,s.jsx)(t.code,{children:"Self::env().emit_event()"})," or ",(0,s.jsx)(t.code,{children:"self.env().emit_event()"}),"."]}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsx)(t.p,{children:"Your contract sizes will get larger if you support both the ink! and Solidity ABI."})}),"\n",(0,s.jsx)(t.admonition,{type:"note",children:(0,s.jsxs)(t.p,{children:['The "all" ABI mode can only be used if all message argument and return types,\nthe argument and return type of the constructor used for Solidity ABI encoded instantiation,\nand event argument types can be mapped to equivalent Solidity ABI types\n(',(0,s.jsx)(t.a,{href:"/docs/v6/background/solidity-metamask-compatibility#rustink-to-solidity-abi-type-mapping",children:"more details here"}),")."]})})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var i=n(36672);const s={},o=i.createContext(s);function a(e){const t=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);