"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1103],{5270:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"basics/upgradeability","title":"Upgradeable Contracts","description":"Even though smart contracts are intended to be immutable by design,","source":"@site/versioned_docs/version-3.x/basics/upgradeability.md","sourceDirName":"basics","slug":"/basics/upgradeable-contracts","permalink":"/3.x/basics/upgradeable-contracts","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-3.x/basics/upgradeability.md","tags":[],"version":"3.x","frontMatter":{"title":"Upgradeable Contracts","slug":"/basics/upgradeable-contracts"},"sidebar":"reference","previous":{"title":"Cross-Contract Calling","permalink":"/3.x/basics/cross-contract-calling"},"next":{"title":"Contract Testing","permalink":"/3.x/basics/contract-testing"}}');var s=t(4848),a=t(8453);const o={title:"Upgradeable Contracts",slug:"/basics/upgradeable-contracts"},i=void 0,c={},l=[{value:"Proxy Forwarding",id:"proxy-forwarding",level:2},{value:"Properties",id:"properties",level:3},{value:"Replacing Contract Code with <code>set_code_hash()</code>",id:"replacing-contract-code-with-set_code_hash",level:2},{value:"Properties",id:"properties-1",level:3},{value:"Storage Compatibility",id:"storage-compatibility",level:3},{value:"A little note on the determinism of contract addresses",id:"a-little-note-on-the-determinism-of-contract-addresses",level:3},{value:"Examples",id:"examples",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Even though smart contracts are intended to be immutable by design,\nit is often necessary to perform an upgrade of a smart contract."}),"\n",(0,s.jsx)(n.p,{children:"The developer may need to fix a critical bug or introduce a new feature."}),"\n",(0,s.jsx)(n.p,{children:"For this type of scenario, ink! has different upgrade strategies."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.a,{href:"#proxy-forwarding",children:"Proxy Forwarding"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#properties",children:"Properties"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.a,{href:"#replacing-contract-code-with-set_code_hash",children:["Replacing Contract Code with ",(0,s.jsx)(n.code,{children:"set_code_hash()"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#properties-1",children:"Properties"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#storage-compatibility",children:"Storage Compatibility"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#a-little-note-on-the-determinism-of-contract-addresses",children:"A little note on the determinism of contract addresses"})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"#examples",children:"Examples"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"proxy-forwarding",children:"Proxy Forwarding"}),"\n",(0,s.jsx)(n.p,{children:"This method relies on the ability of contracts to proxy calls to other contracts."}),"\n",(0,s.jsx)(n.h3,{id:"properties",children:"Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Forwards any call that does not match a selector of itself to another contract."}),"\n",(0,s.jsx)(n.li,{children:"The other contract needs to be deployed on-chain."}),"\n",(0,s.jsx)(n.li,{children:"State is stored in the storage of the contract to which calls are forwarded."}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"User ---- tx ---\x3e Proxy ----------\x3e Implementation_v0\n                     |\n                      ------------\x3e Implementation_v1\n                     |\n                      ------------\x3e Implementation_v2\n"})}),"\n",(0,s.jsx)(n.p,{children:"Our proxy contract will have these 2 storage fields:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct Proxy {\n    /// The `AccountId` of a contract where any call that does not match a\n    /// selector of this contract is forwarded to.\n    forward_to: AccountId,\n    /// The `AccountId` of a privileged account that can update the\n    /// forwarding address. This address is set to the account that\n    /// instantiated this contract.\n    admin: AccountId,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"We then need a way to change the address of a contract to which we forward calls to\nand the actual message selector to proxy the call:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'impl Proxy {\n    /// Changes the `AccountId` of the contract where any call that does\n    /// not match a selector of this contract is forwarded to.\n    #[ink(message)]\n    pub fn change_forward_address(&mut self, new_address: AccountId) {\n        assert_eq!(\n            self.env().caller(),\n            self.admin,\n            "caller {:?} does not have sufficient permissions, only {:?} does",\n            self.env().caller(),\n            self.admin,\n        );\n        self.forward_to = new_address;\n    }\n\n    /// Fallback message for a contract call that doesn\'t match any\n    /// of the other message selectors.\n    ///\n    /// # Note:\n    ///\n    /// - We allow payable messages here and would forward any optionally supplied\n    ///   value as well.\n    /// - If the self receiver were `forward(&mut self)` here, this would not\n    ///   have any effect whatsoever on the contract we forward to.\n    #[ink(message, payable, selector = _)]\n    pub fn forward(&self) -> u32 {\n        ink_env::call::build_call::<ink_env::DefaultEnvironment>()\n            .call_type(\n                Call::new()\n                    .callee(self.forward_to)\n                    .transferred_value(self.env().transferred_value())\n                    .gas_limit(0),\n            )\n            .call_flags(\n                ink_env::CallFlags::default()\n                    .set_forward_input(true)\n                    .set_tail_call(true),\n            )\n            .fire()\n            .unwrap_or_else(|err| {\n                panic!(\n                    "cross-contract call to {:?} failed due to {:?}",\n                    self.forward_to, err\n                )\n            });\n        unreachable!(\n            "the forwarded call will never return since `tail_call` was set"\n        );\n    }\n}\n'})}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.p,{children:["Take a look at the selector pattern in the attribute macro: by declaring ",(0,s.jsx)(n.code,{children:"selector = _"}),"\nwe specify that all other messages should be handled by this message selector."]})}),"\n",(0,s.jsx)(n.p,{children:"Using this pattern, you can introduce other message to your proxy contract.\nAny messages that are not matched in the proxy contract\nwill be forwarded to the specified contract address."}),"\n",(0,s.jsxs)(n.h2,{id:"replacing-contract-code-with-set_code_hash",children:["Replacing Contract Code with ",(0,s.jsx)(n.code,{children:"set_code_hash()"})]}),"\n",(0,s.jsxs)(n.p,{children:["Following ",(0,s.jsx)(n.a,{href:"https://docs.substrate.io/maintain/runtime-upgrades/",children:"Substrate's runtime upgradeability"}),"\nphilosophy, ink! also supports an easy way to update your contract code via the special function\n",(0,s.jsx)(n.a,{href:"https://use-ink.github.io/ink/ink_env/fn.set_code_hash.html",children:(0,s.jsx)(n.code,{children:"set_code_hash()"})}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"properties-1",children:"Properties"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Updates the contract code using ",(0,s.jsx)(n.code,{children:"set_code_hash()"}),".\nThis effectively replaces the code which is executed for the contract address."]}),"\n",(0,s.jsx)(n.li,{children:"The other contract needs to be deployed on-chain."}),"\n",(0,s.jsx)(n.li,{children:"State is stored in the storage of the originally instantiated contract."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"Just add the following function to the contract you want to upgrade in the future."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:'/// Modifies the code which is used to execute calls to this contract address (`AccountId`).\n///\n/// We use this to upgrade the contract logic. We don\'t do any authorization here, any caller\n/// can execute this method. In a production contract you would do some authorization here.\n#[ink(message)]\npub fn set_code(&mut self, code_hash: [u8; 32]) {\n    ink_env::set_code_hash(&code_hash).unwrap_or_else(|err| {\n        panic!(\n            "Failed to `set_code_hash` to {:?} due to {:?}",\n            code_hash, err\n        )\n    });\n    ink_env::debug_println!("Switched code hash to {:?}.", code_hash);\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"storage-compatibility",children:"Storage Compatibility"}),"\n",(0,s.jsx)(n.p,{children:"It is the developer's responsibility to ensure\nthat the new contract's storage is compatible with the storage of the contract that is replaced."}),"\n",(0,s.jsxs)(n.admonition,{title:"Beware",type:"danger",children:[(0,s.jsx)(n.p,{children:"You should not change the order in which the contract state variables are declared, nor their type!"}),(0,s.jsxs)(n.p,{children:["Violating the restriction will not prevent a successful compilation,\nbut will result in ",(0,s.jsx)(n.strong,{children:"the mix-up of values"})," or ",(0,s.jsx)(n.strong,{children:"failure to read the storage correctly"}),".\nThis can be a result of severe errors in the application utilizing the contract."]})]}),"\n",(0,s.jsx)(n.p,{children:"If the storage of your contract looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct YourContract {\n    x: u32,\n    y: bool,\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["The procedures listed below will make it ",(0,s.jsx)(n.em,{children:(0,s.jsx)(n.strong,{children:"invalid"})})]}),"\n",(0,s.jsx)(n.p,{children:"Changing the order of variables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct YourContract {\n    y: bool,\n    x: u32,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Removing an existing variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct YourContract {\n    x: u32,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Changing the type of a variable:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct YourContract {\n    x: u64,\n    y: bool,\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Introducing a new variable before any of the existing ones:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-rust",children:"#[ink(storage)]\npub struct YourContract {\n    z: Vec<u32>,\n    x: u32,\n    y: bool,\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"a-little-note-on-the-determinism-of-contract-addresses",children:"A little note on the determinism of contract addresses"}),"\n",(0,s.jsx)(n.admonition,{type:"note",children:(0,s.jsxs)(n.p,{children:["If your contract utilizes this approach, it no-longer holds a deterministic address assumption.\nYou can no longer assume that a contract address identifies a specific code hash.\nPlease refer to ",(0,s.jsx)(n.a,{href:"https://github.com/paritytech/substrate/pull/10690#issuecomment-1025702389",children:"the issue"}),"\nfor more details."]})}),"\n",(0,s.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,s.jsxs)(n.p,{children:["Examples of upgradable contracts can be found in the\n",(0,s.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts",children:"ink! repository"})]})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(6540);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);