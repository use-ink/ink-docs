"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[1226],{6381:(e,n,t)=>{t.d(n,{A:()=>a});const a=t.p+"assets/images/magnifying-glass-3ca6f9b0db517931b899b678a8543a81.svg"},13965:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>g,frontMatter:()=>s,metadata:()=>a,toc:()=>o});const a=JSON.parse('{"id":"debugging/tracing","title":"Tracing API","description":"Magnifying Glass Title Picture","source":"@site/versioned_docs/version-v6/debugging/tracing.md","sourceDirName":"debugging","slug":"/contract-debugging/pallet-revive-tracing-api","permalink":"/docs/v6/contract-debugging/pallet-revive-tracing-api","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/versioned_docs/version-v6/debugging/tracing.md","tags":[],"version":"v6","frontMatter":{"title":"Tracing API","slug":"/contract-debugging/pallet-revive-tracing-api","hide_title":true},"sidebar":"reference","previous":{"title":"Return value","permalink":"/docs/v6/contract-debugging/return-value"},"next":{"title":"Sandbox","permalink":"/docs/v6/contract-debugging/sandbox"}}');var i=t(74848),r=t(28453);const s={title:"Tracing API",slug:"/contract-debugging/pallet-revive-tracing-api",hide_title:!0},c="Tracing APIs",l={},o=[];function d(e){const n={a:"a",code:"code",h1:"h1",header:"header",img:"img",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Magnifying Glass Title Picture",src:t(6381).A+"",width:"1600",height:"500"})}),"\n",(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"tracing-apis",children:"Tracing APIs"})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src",children:(0,i.jsx)(n.code,{children:"pallet-revive"})}),"\nhas implemented a tracing API.\nThis is what the Ethereum-debugging tools use when interacting with ",(0,i.jsx)(n.code,{children:"pallet-revive"}),"."]}),"\n",(0,i.jsx)(n.p,{children:"You can utilize the tracing API in your E2E tests:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-rust",children:'/// This test illustrates how to use the `pallet-revive` tracing functionality.\n#[ink_e2e::test]\nasync fn e2e_tracing<Client: E2EBackend>(mut client: Client) -> E2EResult<()> {\n    // given\n    let mut constructor = DebuggingStrategiesRef::new();\n    let contract = client\n        .instantiate("debugging_strategies", &ink_e2e::bob(), &mut constructor)\n        .submit()\n        .await\n        .expect("instantiate failed");\n    let call_builder = contract.call_builder::<DebuggingStrategies>();\n\n    let call = call_builder.instantiate_and_call(contract.code_hash);\n    let call_res = client\n        .call(&ink_e2e::alice(), &call)\n        .value(1_337_000_000)\n        .submit()\n        .await?;\n\n    // when\n    let trace: ink_e2e::CallTrace = call_res.trace.expect("trace must exist");\n    assert_eq!(trace.calls.len(), 2);\n    // This is how the object looks:\n    // ```\n    // CallTrace {\n    //     from: 0x9621dde636de098b43efb0fa9b61facfe328f99d,\n    //     gas: 1497105168000,\n    //     gas_used: 1548337586000,\n    //     to: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,\n    //     input: Bytes(\n    //         0x829da98747d85e35d0b3ca3c7ceeac09b63ec2754e6a05eb6d2d5b92fb916da126364dd4,\n    //     ),\n    //     output: Bytes(0x0001),\n    //     error: None,\n    //     revert_reason: None,\n    //     calls: [\n    //         CallTrace {\n    //             from: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,\n    //             gas: 711404887000,\n    //             gas_used: 205987649000,\n    //             to: 0xfd8bf44f34a2d2cec42b8ab31ede1bb1bc366e8e,\n    //             input: Bytes(0x9bae9d5e),\n    //             output: Bytes(0x0000),\n    //             error: None,\n    //             revert_reason: None,\n    //             calls: [],\n    //             logs: [],\n    //             value: Some(0),\n    //             call_type: Call,\n    //         },\n    //         CallTrace {\n    //             from: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,\n    //             gas: 124370129000,\n    //             gas_used: 163567881000,\n    //             to: 0xfd8bf44f34a2d2cec42b8ab31ede1bb1bc366e8e,\n    //             input: Bytes(0x2f865bd9),\n    //             output: Bytes(0x0001),\n    //             error: None,\n    //             revert_reason: None,\n    //             calls: [],\n    //             logs: [],\n    //             value: Some(0),\n    //             call_type: Call,\n    //         },\n    //     ],\n    //     logs: [],\n    //     value: Some(0),\n    //     call_type: Call,\n    // }\n    // ```\n\n    // then\n    #[allow(non_upper_case_globals)]\n    const NativeToEthRatio: u128 = 1_000_000; // todo add to environment\n    assert_eq!(\n        trace.value,\n        Some(ink::U256::from(1_337_000_000 * NativeToEthRatio))\n    );\n\n    Ok(())\n}\n'})}),"\n",(0,i.jsxs)(n.p,{children:["We've put the above into a complete example. You can see the full source code\n",(0,i.jsx)(n.a,{href:"https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies/lib.rs",children:"here"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var a=t(96540);const i={},r=a.createContext(i);function s(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);