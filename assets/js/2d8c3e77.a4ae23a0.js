"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[9452],{9150:(e,n,t)=>{t.d(n,{A:()=>r});const r=t.p+"assets/images/frontend-0b8f265f639b050d9e9a516ad52faa60.svg"},41211:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>o,default:()=>u,frontMatter:()=>c,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"frontend-development/inkathon-erc20","title":"Building a Frontend with Inkathon","description":"Frontend Title Picture","source":"@site/tutorials/frontend-development/inkathon-erc20.md","sourceDirName":"frontend-development","slug":"/frontend-development/inkathon-erc20","permalink":"/tutorials/frontend-development/inkathon-erc20","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/tutorials/frontend-development/inkathon-erc20.md","tags":[],"version":"current","lastUpdatedBy":"Alex Bean","lastUpdatedAt":1759683940000,"sidebarPosition":1,"frontMatter":{"title":"Building a Frontend with Inkathon","sidebar_position":1},"sidebar":"tutorials","previous":{"title":"Overview","permalink":"/tutorials/overview"},"next":{"title":"Ethereum Compatibility Overview","permalink":"/tutorials/ethereum-compatibility/overview"}}');var a=t(23420),s=t(65404);const c={title:"Building a Frontend with Inkathon",sidebar_position:1},o="Building a Frontend for an ink! ERC20 Smart Contract with Inkathon",i={},d=[{value:"Prerequisites",id:"prerequisites",level:3},{value:"Getting Started",id:"getting-started",level:3},{value:"1. Setup the Inkathon Boilerplate",id:"1-setup-the-inkathon-boilerplate",level:3},{value:"2. Add the ERC20 Smart Contract",id:"2-add-the-erc20-smart-contract",level:3},{value:"3. Deploy the ERC20 Contract on Passet Hub",id:"3-deploy-the-erc20-contract-on-passet-hub",level:3},{value:"4. Interact with the ERC20 Contract in the Frontend",id:"4-interact-with-the-erc20-contract-in-the-frontend",level:3},{value:"4.1. Querying the Contract",id:"41-querying-the-contract",level:3},{value:"4.1.1. Get Total Supply (via storage)",id:"411-get-total-supply-via-storage",level:4},{value:"4.1.2. Get Balance (via balance_of message):",id:"412-get-balance-via-balance_of-message",level:4},{value:"4.2. Sending Transactions (Transfer)",id:"42-sending-transactions-transfer",level:3},{value:"Resources",id:"resources",level:3}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",h4:"h4",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{alt:"Frontend Title Picture",src:t(9150).A+"",width:"1600",height:"500"})}),"\n",(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"building-a-frontend-for-an-ink-erc20-smart-contract-with-inkathon",children:"Building a Frontend for an ink! ERC20 Smart Contract with Inkathon"})}),"\n",(0,a.jsxs)(n.p,{children:["In this tutorial, you'll learn how to build a frontend interface that interacts with an ERC20 smart contract written in ink! on a Substrate-based chain. You'll start from the ",(0,a.jsx)(n.a,{href:"https://github.com/scio-labs/inkathon",children:"Inkathon"})," boilerplate, remove the default Flipper contract, and integrate a new ERC20 contract."]}),"\n",(0,a.jsxs)(n.p,{children:["ink!athon is a starter kit for full-stack dApp development with ink! smart contracts and a React-based frontend in one place. Under the hood, it leverages the power of the ",(0,a.jsx)(n.a,{href:"https://papi.how/sdks/ink-sdk",children:"PAPI ink-sdk"}),", ",(0,a.jsx)(n.a,{href:"https://reactivedot.dev/react/smart-contract/ink",children:"ReactiveDOT"}),", and other developer tools to simplify contract interaction."]}),"\n",(0,a.jsx)(n.h3,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,a.jsx)(n.p,{children:"Before you begin, make sure you have:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:"Understand ink! and Rust at a basic level."}),"\n",(0,a.jsxs)(n.li,{children:["Set up your development environment with the Pop CLI: ",(0,a.jsx)(n.a,{href:"https://learn.onpop.io/welcome/install-pop-cli",children:"Guide"})]}),"\n",(0,a.jsxs)(n.li,{children:["Installed ",(0,a.jsx)(n.a,{href:"https://nodejs.org/en",children:"Node.js"}),"."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.a,{href:"https://bun.sh/",children:"Bun"})," package manage"]}),"\n"]}),"\n",(0,a.jsx)(n.h3,{id:"getting-started",children:"Getting Started"}),"\n",(0,a.jsx)(n.h3,{id:"1-setup-the-inkathon-boilerplate",children:"1. Setup the Inkathon Boilerplate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# https://docs.inkathon.xyz/#create-your-project\nnpx create-inkathon-app@latest\ncd <project>\n\n# Start the project\nbun run dev\n"})}),"\n",(0,a.jsx)(n.h3,{id:"2-add-the-erc20-smart-contract",children:"2. Add the ERC20 Smart Contract"}),"\n",(0,a.jsx)(n.p,{children:"The project is divided into two main folders:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"contracts"}),": where the smart contracts and deployment scripts live."]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.code,{children:"frontend"}),": the React-based UI to interact with the contracts."]}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"To scaffold the ERC20 contract, run:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"cd contracts/src\npop new contract erc20 -c erc -t erc20\n"})}),"\n",(0,a.jsxs)(n.p,{children:["Then, in ",(0,a.jsx)(n.code,{children:"contracts/Cargo.toml"}),", update the members list:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-toml",children:'members = ["src/flipper", "src/erc20"]\n'})}),"\n",(0,a.jsx)(n.p,{children:"Now build and generate contract metadata:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Executed from the /contracts directory\nbun run build\n\n# Executed from the /contracts directory\nbun run codegen\n"})}),"\n",(0,a.jsx)(n.h3,{id:"3-deploy-the-erc20-contract-on-passet-hub",children:"3. Deploy the ERC20 Contract on Passet Hub"}),"\n",(0,a.jsx)(n.admonition,{type:"note",children:(0,a.jsx)(n.p,{children:"If you're using an already deployed contract, you can skip this section."})}),"\n",(0,a.jsx)(n.p,{children:"We\u2019ll deploy the contract to Passet Hub"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"# Executed from the /contracts directory\n# If `CHAIN` is not set, it will default to `dev`\nCHAIN=passethub bun run deploy\n"})}),"\n",(0,a.jsxs)(n.p,{children:["By default, the ",(0,a.jsx)(n.code,{children:"//Alice"})," account is used. If you want to use another account, put your signers ",(0,a.jsx)(n.code,{children:"ACCOUNT_URI"})," in ",(0,a.jsx)(n.code,{children:".env.<chain>"})," (e.g. ",(0,a.jsx)(n.code,{children:".env.passethub"}),")."]}),"\n",(0,a.jsx)(n.admonition,{type:"info",children:(0,a.jsxs)(n.p,{children:["Use the ",(0,a.jsx)(n.a,{href:"https://faucet.polkadot.io/?parachain=1111",children:"Passet Hub Faucet"})," to fund your account with test tokens."]})}),"\n",(0,a.jsx)(n.p,{children:"Successful deployment will look like:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"$ bun run scripts/deploy.ts\n\n\u2714 Initialized chain 'passethub' with account '5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY'\n\n\u2807 Deploying contract\u2026WS halt (3)\n\u2714 \ud83d\udcdc Deployed contract 'erc20' at address '5EnYcjJg88Ccg5Fco4L5zFR3r9QtFKknqbW9uubqbNXEgkbr' (0x7861ab0f2b73aceb7fbf661585caeff7dbad7140)\n\n\u2714 Exported deployment info to file 'deployments/erc20/passethub.ts'\n"})}),"\n",(0,a.jsxs)(n.admonition,{type:"info",children:[(0,a.jsx)(n.p,{children:"To deploy on another chain:"}),(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-bash",children:"bunx papi add -w <websocket-url> <chain-name>\nCHAIN=<chain-name> bun run deploy\n"})})]}),"\n",(0,a.jsx)(n.h3,{id:"4-interact-with-the-erc20-contract-in-the-frontend",children:"4. Interact with the ERC20 Contract in the Frontend"}),"\n",(0,a.jsxs)(n.p,{children:["In ",(0,a.jsx)(n.code,{children:"frontend/src/lib/inkathon/deployments.ts"}),", replace the Flipper contract with ERC20:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import {\n  evmAddress as evmAddressPassethub,\n  ss58Address as ss58AddressPassethub,\n} from "@inkathon/contracts/deployments/erc20/passethub"\n\nimport { contracts } from "@polkadot-api/descriptors"\n\n\nexport const erc20 = {\n  contract: contracts.erc20,\n  evmAddresses: {\n    passethub: evmAddressPassethub,\n  },\n  ss58Addresses: {\n    passethub: ss58AddressPassethub,\n  },\n}\n'})}),"\n",(0,a.jsxs)(n.p,{children:["Update ",(0,a.jsx)(n.code,{children:"frontend/src/components/web3/contract-card.tsx"})," to replace Flipper logic with ERC20 interaction logic."]}),"\n",(0,a.jsx)(n.h3,{id:"41-querying-the-contract",children:"4.1. Querying the Contract"}),"\n",(0,a.jsxs)(n.p,{children:["To read values like ",(0,a.jsx)(n.code,{children:"total_supply"})," or an account\u2019s balance, use storage queries or message calls:"]}),"\n",(0,a.jsxs)(n.h4,{id:"411-get-total-supply-via-storage",children:["4.1.1. Get Total Supply (via ",(0,a.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs#L16",children:"storage"}),")"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:"const [erc20TotalSupply, setErc20TotalSupply] = useState<FixedSizeArray<4, bigint>>()\n// Create SDK & contract instance\nconst sdk = createReviveSdk(api as ReviveSdkTypedApi, erc20.contract)\nconst contract = sdk.getContract(erc20.evmAddresses[chain])\n\n// Query storage directly\nconst storageResult = await contract.getStorage().getRoot()\nconst total_supply = storageResult.success ? storageResult.value.total_supply : undefined\nsetErc20TotalSupply(total_supply)\n"})}),"\n",(0,a.jsxs)(n.h4,{id:"412-get-balance-via-balance_of-message",children:["4.1.2. Get Balance (via ",(0,a.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs#L87",children:"balance_of message"}),"):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'const { signer, signerAddress } = useSignerAndAddress()\nconst [accountErc20MyBalance, setAccountErc20MyBalance] = useState<FixedSizeArray<4, bigint>>()\n// Create SDK & contract instance\nconst sdk = createReviveSdk(api as ReviveSdkTypedApi, erc20.contract)\nconst contract = sdk.getContract(erc20.evmAddresses[chain])\n\n// NOTE: Unfortunately, as `origin` is mandatory, every passed accounts needs to be mapped in an extra transaction first \n// before it can be used for querying.\nif (!api || !chain || !signer) return\n    const isMapped = await sdk.addressIsMapped(signerAddress)\n    if (!isMapped) {\n        toast.error("Account not mapped. Please map your account first.")\n    return\n}\n// Query my balance\nconst resultQueryMyBalance = await contract.query("balance_of", { origin: signerAddress , data: {\n    owner: ss58ToEthereum(signerAddress)\n}});\nconst mybalance = resultQueryMyBalance.success ? resultQueryMyBalance.value.response : undefined\nsetAccountErc20MyBalance(mybalance)\n'})}),"\n",(0,a.jsxs)(n.h3,{id:"42-sending-transactions-transfer",children:["4.2. Sending Transactions (",(0,a.jsx)(n.a,{href:"https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs#L134",children:"Transfer"}),")"]}),"\n",(0,a.jsx)(n.p,{children:"To transfer ERC20 tokens:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'// Check if account is mapped\nconst isMapped = await sdk.addressIsMapped(signerAddress)\nif (!isMapped) {\n    toast.error("Account not mapped. Please map your account first.")\n    return\n}\n\n// Send transfer transaction\nconst tx = contract\n    .send("transfer", { \n    origin: signerAddress, \n    data: {\n        to: Binary.fromHex(inputAddress),\n        value: [1n, 0n, 0n, 0n] // Transfer 1 token\n    }\n    })\n    .signAndSubmit(signer)\n    .then((tx) => {\n    queryContract() // Refresh data after transfer\n    if (!tx.ok) throw new Error("Failed to send transaction", { cause: tx.dispatchError })\n    })\n\ntoast.promise(tx, {\n    loading: "Transferring token...",\n    success: "Token transferred successfully",\n    error: "Failed to transfer token",\n})\n'})}),"\n",(0,a.jsx)(n.p,{children:"You\u2019ve successfully replaced the default Flipper contract in Inkathon with an ERC20 ink! contract, deployed it to a testnet, and built a frontend interface using Inkathon, PAPI ink-sdk, and ReactiveDOT."}),"\n",(0,a.jsxs)(n.p,{children:["If you'd like to explore or customize the full React component that interacts with the ERC20 contract, here's the complete implementation of  ",(0,a.jsx)(n.code,{children:"frontend/src/components/web3/contract-card.tsx"}),":"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-ts",children:'import { createReviveSdk, ss58ToEthereum, type ReviveSdkTypedApi } from "@polkadot-api/sdk-ink"\nimport { useChainId, useTypedApi } from "@reactive-dot/react"\nimport { useCallback, useEffect, useState } from "react"\nimport { toast } from "sonner"\nimport { useSignerAndAddress } from "@/hooks/use-signer-and-address"\nimport { erc20 } from "@/lib/inkathon/deployments"\nimport { CardSkeleton } from "../layout/skeletons"\nimport { Button } from "../ui/button-extended"\nimport { Card, CardHeader, CardTitle } from "../ui/card"\nimport { Table, TableBody, TableCell, TableRow } from "../ui/table"\nimport { Binary, FixedSizeArray } from "polkadot-api"\n\nexport function ContractCard() {\n  // State\n  const [queryIsLoading, setQueryIsLoading] = useState(true)\n  const [erc20TotalSupply, setErc20TotalSupply] = useState<FixedSizeArray<4, bigint>>()\n  const [accountErc20MyBalance, setAccountErc20MyBalance] = useState<FixedSizeArray<4, bigint>>()\n  const [accountErc20InputBalance, setAccountErc20InputBalance] = useState<FixedSizeArray<4, bigint>>()\n  const [inputAddress, setInputAddress] = useState<string>("0x41dccbd49b26c50d34355ed86ff0fa9e489d1e01") // BOB by default\n\n  // Hooks\n  const api = useTypedApi()\n  const chain = useChainId()\n  const { signer, signerAddress } = useSignerAndAddress()\n\n  /**\n   * Query contract data (total supply, my balance, and input address balance)\n   */\n  const queryContract = useCallback(async () => {\n    setQueryIsLoading(true)\n    try {\n      if (!api || !chain) return\n\n      // Create SDK & contract instance\n      const sdk = createReviveSdk(api as ReviveSdkTypedApi, erc20.contract)\n      const contract = sdk.getContract(erc20.evmAddresses[chain])\n\n      // Query total supply from storage\n      const storageResult = await contract.getStorage().getRoot()\n      const total_supply = storageResult.success ? storageResult.value.total_supply : undefined\n      setErc20TotalSupply(total_supply)\n\n      // Check if account is mapped before querying balances\n      if (!api || !chain || !signer) return\n      const isMapped = await sdk.addressIsMapped(signerAddress)\n      if (!isMapped) {\n        toast.error("Account not mapped. Please map your account first.")\n        return\n      }\n\n      // Query my balance\n      const resultQueryMyBalance = await contract.query("balance_of", { \n        origin: signerAddress, \n        data: {\n          owner: ss58ToEthereum(signerAddress)\n        }\n      })\n      const mybalance = resultQueryMyBalance.success ? resultQueryMyBalance.value.response : undefined\n      setAccountErc20MyBalance(mybalance)\n\n      // Query input address balance\n      const resultQueryInputAddressBalance = await contract.query("balance_of", { \n        origin: signerAddress, \n        data: {\n          owner: Binary.fromHex(inputAddress)\n        }\n      })\n      const balance = resultQueryInputAddressBalance.success ? resultQueryInputAddressBalance.value.response : undefined\n      setAccountErc20InputBalance(balance)\n    } catch (error) {\n      console.error(error)\n    } finally {\n      setQueryIsLoading(false)\n    }\n  }, [api, chain, inputAddress, signer, signerAddress])\n\n  useEffect(() => {\n    queryContract()\n  }, [queryContract])\n\n  /**\n   * Transfer 1 ERC20 token to the input address\n   */\n  const transfer = useCallback(async () => {\n    if (!api || !chain || !signer || !inputAddress) return\n\n    const sdk = createReviveSdk(api as ReviveSdkTypedApi, erc20.contract)\n    const contract = sdk.getContract(erc20.evmAddresses[chain])\n\n    // Check if account is mapped\n    const isMapped = await sdk.addressIsMapped(signerAddress)\n    if (!isMapped) {\n      toast.error("Account not mapped. Please map your account first.")\n      return\n    }\n\n    // Send transfer transaction\n    const tx = contract\n      .send("transfer", { \n        origin: signerAddress, \n        data: {\n          to: Binary.fromHex(inputAddress),\n          value: [1n, 0n, 0n, 0n] // Transfer 1 token\n        }\n      })\n      .signAndSubmit(signer)\n      .then((tx) => {\n        queryContract() // Refresh data after transfer\n        if (!tx.ok) throw new Error("Failed to send transaction", { cause: tx.dispatchError })\n      })\n\n    toast.promise(tx, {\n      loading: "Transferring token...",\n      success: "Token transferred successfully",\n      error: "Failed to transfer token",\n    })\n  }, [signer, api, chain, inputAddress, queryContract])\n\n  if (queryIsLoading) return <CardSkeleton />\n\n  return (\n    <Card className="inkathon-card">\n      <CardHeader>\n        <CardTitle>ERC20 Contract</CardTitle>\n      </CardHeader>\n      \n      <Table className="inkathon-card-table">\n        <TableBody>\n          <TableRow>\n            <TableCell>Total Supply</TableCell>\n            <TableCell>{erc20TotalSupply}</TableCell>\n          </TableRow>\n          <TableRow>\n            <TableCell>My Balance</TableCell>\n            <TableCell>{accountErc20MyBalance}</TableCell>\n          </TableRow>\n          {inputAddress && (\n            <TableRow>\n              <TableCell>Balance of {inputAddress}</TableCell>\n              <TableCell>{accountErc20InputBalance}</TableCell>\n            </TableRow>\n          )}\n          <TableRow>\n            <TableCell>Contract Address</TableCell>\n            <TableCell>{erc20.evmAddresses[chain]}</TableCell>\n          </TableRow>\n        </TableBody>\n      </Table>\n      \n      <div className="p-4 border-t border-gray-200">\n        <div className="flex gap-3 items-center">\n          <input\n            type="text"\n            placeholder="Enter address to transfer 1 ERC20 token"\n            value={inputAddress}\n            onChange={(e) => setInputAddress(e.target.value)}\n            onKeyPress={(e) => {\n              if (e.key === \'Enter\') {\n                setInputAddress(inputAddress)\n              }\n            }}\n            className="flex-1 px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 text-base"\n          />\n          <Button\n            onClick={transfer}\n            size="sm"\n            variant="default"\n          >\n            Transfer\n          </Button>\n        </div>\n      </div>\n    </Card>\n  )\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://docs.inkathon.xyz/",children:"Inkathon Docs"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/scio-labs/inkathon",children:"Inkathon GitHub"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://papi.how/sdks/ink-sdk",children:"PAPI ink-sdk"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://reactivedot.dev/",children:"ReactiveDOT"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://github.com/AlexD10S/inkathon/tree/tutorial",children:"Source code of this tutorial"})}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},65404:(e,n,t)=>{t.d(n,{R:()=>c,x:()=>o});var r=t(36672);const a={},s=r.createContext(a);function c(e){const n=r.useContext(s);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:c(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);