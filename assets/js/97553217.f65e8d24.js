"use strict";(self.webpackChunkink_docs=self.webpackChunkink_docs||[]).push([[6354],{11944:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"intro/current-state","title":"Project State 2025","description":"\ud83e\udd17 Time at Parity (2019-2024)","source":"@site/docs/intro/current-state.mdx","sourceDirName":"intro","slug":"/current-state","permalink":"/docs/v6/current-state","draft":false,"unlisted":false,"editUrl":"https://github.com/use-ink/ink-docs/edit/master/docs/intro/current-state.mdx","tags":[],"version":"current","frontMatter":{"title":"Project State 2025","slug":"/current-state","hide_title":true},"sidebar":"reference","previous":{"title":"Welcome!","permalink":"/docs/v6/"},"next":{"title":"Migration: ink! v5 \u2192 v6","permalink":"/docs/v6/faq/migrating-from-ink-5-to-6"}}');var r=n(23420),o=n(65404),i=n(55333);const s={title:"Project State 2025",slug:"/current-state",hide_title:!0},c=void 0,l={},d=[{value:"\ud83e\udd17 Time at Parity (2019-2024)",id:"-time-at-parity-2019-2024",level:2},{value:"\ud83e\uddd1\u200d\ud83d\udd2c Exploring alternatives to WebAssembly (2023)",id:"-exploring-alternatives-to-webassembly-2023",level:2},{value:"\ud83e\udd1d RISC-V + <code>pallet-revive</code> (2025)",id:"-risc-v--pallet-revive-2025",level:2},{value:"\ud83d\ude4c Migrating ink! to RISC-V + <code>pallet-revive</code> (currently wip)",id:"-migrating-ink-to-risc-v--pallet-revive-currently-wip",level:2},{value:"\ud83d\udcb8 ink!ubator 2.0",id:"-inkubator-20",level:2},{value:"\u2753Questions?",id:"questions",level:2}];function h(e){const t={a:"a",code:"code",h2:"h2",li:"li",p:"p",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)("img",{src:(0,i.Ay)("/img/title/q1-25.svg"),className:"titlePic titleSpace"}),"\n",(0,r.jsx)(t.h2,{id:"-time-at-parity-2019-2024",children:"\ud83e\udd17 Time at Parity (2019-2024)"}),"\n",(0,r.jsx)(t.p,{children:"In 2019, ink! started out as a small project at Parity. It grew into a sophisticated\necosystem over the years and a community did form around it.\nThroughout all these years Parity continued to allocate developer resources to the\nproject, which is amazing!"}),"\n",(0,r.jsxs)(t.p,{children:["In April 2024, ink! moved out of the Parity umbrella. Instead of one company,\nit is nowadays developed and maintained by an alliance of individual developers,\ncompanies, and community teams altogether.\nYou can read more on our transition out of Parity\n",(0,r.jsx)(t.a,{href:"https://x.com/ink_lang/status/1783877356819783916",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["We continue to work closely with Parity, we contribute code to Parity-maintained\ncomponents and regularly synchronize with Parity developers. Parity continues to\nbe involved in ink! as well: in late 2024 SRLabs and the Parity security team\nconducted an audit of ink! v5 (",(0,r.jsx)(t.a,{href:"https://x.com/paritytech/status/1882492494661005760",children:"read more here"}),")."]}),"\n",(0,r.jsx)(t.h2,{id:"-exploring-alternatives-to-webassembly-2023",children:"\ud83e\uddd1\u200d\ud83d\udd2c Exploring alternatives to WebAssembly (2023)"}),"\n",(0,r.jsxs)(t.p,{children:["From ink! v1 to v5, the execution platform was Substrate's smart contracts\nmodule ",(0,r.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts/",children:(0,r.jsx)(t.code,{children:"pallet-contracts"})}),".\nThis pallet required the smart contracts that were uploaded to be in the WebAssembly\n(Wasm) bytecode format. So ink! contracts were always compiled to a WebAssembly binary.\nThis could be done by invoking ",(0,r.jsx)(t.code,{children:"cargo build"}),"/",(0,r.jsx)(t.code,{children:"rustc"})," directly or via our CLI tool\n",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/cargo-contract",children:(0,r.jsx)(t.code,{children:"cargo-contract"})})," (which executes the\nRust compiler with optimal flags for smart contracts)."]}),"\n",(0,r.jsxs)(t.p,{children:["As an ongoing research project Parity was always looking at alternatives to WebAssembly\nfor smart contract execution. Some of those investigations are\npersisted in the Polkadot Forum. The forum post on ",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084",children:"the eBPF investigation"}),"\n(eBPF is used in Solana) highlights some shortcomings of WebAssembly for smart contracts."]}),"\n",(0,r.jsxs)(t.p,{children:["During 2023, Parity core developer Jan Bujak (",(0,r.jsx)(t.a,{href:"https://github.com/koute",children:"@koute"}),") did another\nexploration on alternatives for WebAssembly. ",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434",children:"His forum post"}),"\ngives a great overview on how he landed at RISC-V and its potential.\nHis explorations yielded promising results and a new project\nwas started: ",(0,r.jsx)(t.a,{href:"https://github.com/paritytech/polkavm",children:"PolkaVM"}),"\n(",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811",children:"the announcement contains more info"}),").\nPolkaVM is intended to be a very fast RISC-V based virtual machine. Jan\nregularly shared performance benchmarks in the Polkadot Forum. Those were very\ngood and got community enthusiasm started.\nFor blockchains a very fast performance correlates with transaction throughput\nand transaction costs, which implies improved scalability and reduced costs for users.\nEventually an idea emerged: move the Substrate stack in the long-term to RISC-V\ninstead of WebAssembly."]}),"\n",(0,r.jsxs)(t.h2,{id:"-risc-v--pallet-revive-2025",children:["\ud83e\udd1d RISC-V + ",(0,r.jsx)(t.code,{children:"pallet-revive"})," (2025)"]}),"\n",(0,r.jsx)(t.p,{children:"As migrating the Substrate stack from WebAssembly to RISC-V is a highly complex\nundertaking, it was found that smart contracts are an ideal starting point\nto kick off this migration in a clearly delimited component."}),"\n",(0,r.jsxs)(t.p,{children:["Parity subsequently forked Substrate's ",(0,r.jsx)(t.code,{children:"pallet-contracts"})," into a new project called\n",(0,r.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive",children:(0,r.jsx)(t.code,{children:"pallet-revive"})}),".\nSmart contracts that are uploaded to this new pallet have to be\nin the RISC-V bytecode format, and no longer in WebAssembly."]}),"\n",(0,r.jsx)(t.p,{children:"Besides the contract binary format, a number of other significant changes were\nmade to provide first-class support for Solidity contracts:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"Extensive changes were made in the inner logic of the pallet to bring its behavior\ncloser to the EVM (e.g. types, events, and debugging was changed to be Solidity\ncompatible)."}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:["In the ",(0,r.jsx)(t.code,{children:"pallet-contracts"})," era, the idea for Solidity compatibility was a project\ncalled ",(0,r.jsx)(t.a,{href:"https://github.com/hyperledger-solang/solang/",children:"Solang"}),". It's a Solidity\ncompiler that parses Solidity syntax and outputs WebAssembly.\nParsing the Solidity syntax turned out to be a complex undertaking. Solidity\nas a language is also evolving and provided a moving target.",(0,r.jsx)("br",{}),(0,r.jsx)("br",{}),"\nAs an iteration on that approach, for ",(0,r.jsx)(t.code,{children:"pallet-revive"})," Parity started a new\nproject called ",(0,r.jsx)(t.a,{href:"https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src",children:(0,r.jsx)(t.code,{children:"revive"})})," \u1806\na compiler from the Solidity bytecode YUL to a RISC-V\ncontract that can be executed on ",(0,r.jsx)(t.code,{children:"pallet-revive"}),".\nThis bytecode is more stable than the language syntax. Plus Solidity developers\ncan continue to use the Solidity compiler ",(0,r.jsx)(t.code,{children:"solc"})," to compile their contracts."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsx)(t.p,{children:"An RPC wrapper that maps Ethereum RPC's onto Substrate was created."}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["At the time of writing, ",(0,r.jsx)(t.code,{children:"pallet-revive"})," is deployed to the Polkadot testnet Westend\n(on the AssetHub parachain).\nA launch on Polkadot's canary network Kusama is targeted for early Q2/25.\nThe Polkadot launch is targeted for Q3/25."]}),"\n",(0,r.jsxs)(t.h2,{id:"-migrating-ink-to-risc-v--pallet-revive-currently-wip",children:["\ud83d\ude4c Migrating ink! to RISC-V + ",(0,r.jsx)(t.code,{children:"pallet-revive"})," (currently wip)"]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.code,{children:"pallet-revive"})," and RISC-V are seen as the future of smart contracts in the Polkadot\necosystem. We agree with that vision and are excited to work on making the ink! stack\nready for it!\nIn autumn 2024 the ink! Alliance created ",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/t/treasury-ink-alliance-for-a-more-successful-plaza/9692",children:"a Polkadot treasury proposal"}),"\naround this.\nThe Polkadot community signaled its alignment and gave us the mandate of\nmigrating ink! to this new stack."]}),"\n",(0,r.jsxs)(t.p,{children:["Hence, v5 of ink! and ",(0,r.jsx)(t.code,{children:"cargo-contract"})," are the last ones supporting ",(0,r.jsx)(t.code,{children:"pallet-contracts"}),"\nand Wasm. We can still backport important fixes, but the coming releases (",(0,r.jsx)(t.code,{children:">= v6"}),") will\nall no longer be compatible. In case you want to create a PR for a backport, we have\nv5 release branches ",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/ink/tree/v5.x",children:"here"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/cargo-contract/tree/v5.x.x",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["The current state of this migration is that the ",(0,r.jsx)(t.code,{children:"master"})," branches of\n",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/ink",children:"ink!"})," and ",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/cargo-contract",children:(0,r.jsx)(t.code,{children:"cargo-contract"})}),"\nare compatible with ",(0,r.jsx)(t.code,{children:"polkadot-sdk"})," + ",(0,r.jsx)(t.code,{children:"pallet-revive"})," + PolkaVM from Jan 7, 2025.\nThat's the date to which we've caught up so far. We are working on catching up\nto present day and aim to have a pre-release 6.0.0-alpha of both ink! and\n",(0,r.jsx)(t.code,{children:"cargo-contract"})," out in March 2025."]}),"\n",(0,r.jsxs)(t.p,{children:["We are actively working on ",(0,r.jsx)(t.a,{href:"/docs/v6/faq/migrating-from-ink-5-to-6",children:"this migration guide"}),".\nAll breaking changes and new features will eventually be documented there."]}),"\n",(0,r.jsxs)(t.p,{children:["What has not yet been migrated is ",(0,r.jsx)(t.a,{href:"https://github.com/use-ink/contracts-ui",children:"Contracts UI"}),"\nand external libraries (such as ",(0,r.jsx)(t.a,{href:"https://inkathon.xyz/",children:"ink!athon"}),", the\n",(0,r.jsx)(t.a,{href:"https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer",children:"ink! Analyzer VS Code extension"}),",\n",(0,r.jsx)(t.code,{children:"polkadot-js"}),", \u2026).\nWe are in contact with the maintainers of these external libraries about migrating as well."]}),"\n",(0,r.jsx)(t.h2,{id:"-inkubator-20",children:"\ud83d\udcb8 ink!ubator 2.0"}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)("a",{href:(0,i.Ay)("/inkubator"),children:"ink!ubator"})," is a funding program for advancing the ink! ecosystem.\nThe first round of projects was completed in autumn 2024! A final summary was posted\nby Toma, one of the curators, on the Polkadot Forum ",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/t/final-report-of-ink-ubator/10120",children:"here"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Applications for the second cohort are now open.\nSee ",(0,r.jsx)(t.a,{href:"https://github.com/use-inkubator/Ecosystem-Grants",children:"the ink!ubator 2.0 repository"}),"\non GitHub for more details."]}),"\n",(0,r.jsx)(t.h2,{id:"questions",children:"\u2753Questions?"}),"\n",(0,r.jsxs)(t.p,{children:["In case you have any questions, the best way to reach out is in\n",(0,r.jsx)(t.a,{href:"https://t.me/inkathon",children:"our Telegram group"})," or the\n",(0,r.jsx)(t.a,{href:"https://forum.polkadot.network/",children:"Polkadot Forum"}),"."]})]})}function u(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},65404:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>s});var a=n(36672);const r={},o=a.createContext(r);function i(e){const t=a.useContext(o);return a.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),a.createElement(o.Provider,{value:t},e.children)}}}]);