This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

# Directory Structure
```
docs/
  basics/
    verification/
      contract-verification.md
      sirato.mdx
    contract-template.md
    cross-contract-calling.md
    env-functions.md
    environment.md
    events.md
    gas.md
    metadata.md
    mutating-values.md
    reading-values.md
    selectors.md
    storing-values.md
    trait-definitions.md
    upgradeability.md
    xcm.md
  brand-assets/
    cargo-contract.mdx
    community-badges.md
    ink.mdx
    stickers.mdx
  datastructures/
    custom.md
    mapping.md
    overview.md
    storage-in-metadata.md
    storage-layout.mdx
    storagevec.md
  examples/
    contracts.mdx
    dapps.md
  faq/
    faq.mdx
    migrating-from-ink-3-to-4.md
    migrating-from-ink-4-to-5.mdx
  frontend/
    overview.md
  funding-programs/
    overview.md
  getting-started/
    calling.md
    cargo-contract.md
    compiling.md
    creating.md
    deploying.md
    running.md
    setup.md
    troubleshooting.md
  intro/
    how-it-works.md
    ink-vs-cosmwasm.md
    ink-vs-solidity.md
    intro.mdx
    migrate-to-parachain.md
    polkadot.md
    where-to-deploy.mdx
    why-rust.md
    why-webassembly.md
  linter/
    rules/
      no_main.md
      non_fallible_api.md
      primitive_topic.md
      storage_never_freed.md
      strict_balance_equality.md
    overview.md
  macros-attributes/
    anonymous.md
    chain-extension.md
    constructor.md
    contract.md
    default.md
    event.md
    implementation.md
    message.md
    namespace.md
    overview.md
    payable.md
    selector.md
    storage.md
    topic.md
  standards/
    overview.md
  testing/
    testnet/
      faucet.md
      Faucet.tsx
      overview.md
    debugging.md
    drink.md
    e2e.md
    off-chain.md
    overview.md
    testing-with-live-state.md
  third-party-tools/
    swanky/
      cli.md
      Figure.tsx
      index.md
      node.md
    ink-analyzer.md
    inkathon.mdx
    subwallet.md
    typink.md
versioned_docs/
  version-v3/
    basics/
      cargo-toml.md
      contract-template.md
      cross-contract-calling.md
      env-functions.md
      events.md
      metadata.md
      mutating-values.md
      reading-values.md
      storing-values.md
      testing.md
      trait-definitions.md
      upgradeability.md
    brand-assets/
      cargo-contract.md
      community-badges.md
      ink.md
    cargo-contract/
      call.md
      deploy.md
      instantiate.md
      overview.md
    datastructures/
      custom.md
      mapping.md
      overview.md
      spread-storage-layout.md
    examples/
      overview.md
    faq/
      faq.md
    getting-started/
      calling.md
      compiling.md
      creating.md
      deploying.md
      running.md
      setup.md
      troubleshooting.md
    intro/
      how-it-works.md
      ink-vs-cosmwasm.md
      ink-vs-solidity.md
      intro.mdx
      why-rust.md
      why-webassembly.md
    macros-attributes/
      anonymous.md
      chain-extension.md
      constructor.md
      contract.md
      event.md
      implementation.md
      message.md
      namespace.md
      overview.md
      payable.md
      selector.md
      storage.md
      topic.md
    testnet/
      overview.md
    third-party-tools/
      openbrush.md
  version-v4/
    basics/
      verification/
        contract-verification.md
        sirato.md
      contract-template.md
      cross-contract-calling.md
      debugging.md
      env-functions.md
      environment.md
      events.md
      metadata.md
      mutating-values.md
      reading-values.md
      selectors.md
      storing-values.md
      testing.md
      trait-definitions.md
      upgradeability.md
    brand-assets/
      cargo-contract.md
      community-badges.md
      ink.md
      stickers.md
    datastructures/
      custom.md
      mapping.md
      overview.md
      storage-in-metadata.md
      storage-layout.md
    examples/
      contracts.md
      dapps.md
    faq/
      faq.md
      migrating-from-ink-3-to-4.md
    frontend/
      overview.md
    getting-started/
      calling.md
      cargo-contract.md
      compiling.md
      creating.md
      deploying.md
      running.md
      setup.md
      troubleshooting.md
    inkubator/
      overview.md
    intro/
      how-it-works.md
      ink-vs-cosmwasm.md
      ink-vs-solidity.md
      intro.mdx
      migrate-to-parachain.md
      polkadot.md
      upcoming-events.md
      why-rust.md
      why-webassembly.md
    macros-attributes/
      anonymous.md
      chain-extension.md
      constructor.md
      contract.md
      default.md
      event.md
      implementation.md
      message.md
      namespace.md
      overview.md
      payable.md
      selector.md
      storage.md
      topic.md
    monthly-update/
      2022/
        03.md
        04.md
        05.md
        06.md
        07.md
        08.md
        09.md
        10.md
        11.md
        12.md
      2023/
        01.md
        02.md
        03.md
      archive.md
      overview.md
    testnet/
      faucet.md
      Faucet.tsx
      overview.md
    third-party-tools/
      contract-wizard/
        index.md
      swanky/
        cli.md
        Figure.tsx
        index.md
        node.md
      ink-analyzer.md
      inkathon.mdx
      openbrush.md
      subwallet.md
  version-v6/
    background/
      contracts-vs-rollups.md
      ink-vs-cosmwasm.md
      ink-vs-solidity.md
      migrate-to-parachain.md
      polkadot-sdk.md
      why-riscv.md
      why-rust.md
    basics/
      metadata/
        ink-format.md
        metadata.md
        solidity-format.md
      contract-template.md
      contract-verification.md
      cross-contract-calling.md
      env-functions.md
      environment.md
      events.md
      gas.md
      mutating-values.md
      reading-values.md
      selectors.md
      storing-values.md
      trait-definitions.md
      upgradeability.md
      xcm.md
    datastructures/
      custom.md
      mapping.md
      overview.md
      storage-in-metadata.md
      storage-layout.md
      storagevec.md
    debugging/
      decoding.md
      events.md
      overview.md
      pre-compiles.md
      replays.md
      return_value.md
      sandbox.md
      tracing.md
    faq/
      faq.md
      migrating-from-ink-3-to-4.md
      migrating-from-ink-4-to-5.md
      migrating-from-ink-5-to-6.md
    frontend/
      overview.md
    getting-started/
      calling.md
      cargo-contract.md
      compiling.md
      creating.md
      deploying.md
      running.md
      setup.md
    intro/
      current-state.mdx
      intro.mdx
      polkadot-scalability-hackathon.mdx
    linter/
      rules/
        no_main.md
        non_fallible_api.md
        primitive_topic.md
        storage_never_freed.md
        strict_balance_equality.md
      overview.md
    macros-attributes/
      anonymous.md
      chain-extension.md
      constructor.md
      contract.md
      default.md
      event.md
      implementation.md
      message.md
      namespace.md
      overview.md
      payable.md
      selector.md
      storage.md
      topic.md
    standards/
      overview.md
    testing/
      testnet/
        faucet.md
        Faucet.tsx
        overview.md
      e2e.md
      overview.md
      sandbox.md
      testing-with-live-state.md
      unit-integration.md
```

# Files

## File: docs/basics/verification/contract-verification.md
````markdown
---
title: Contract Verification
slug: /basics/verification/contract-verification
hide_title: true
---

![Verification Title Picture](/img/title/verification.svg)

# Contract Verification

Contract verification is the process of matching a deployed ink! contract
with the source code and metadata generated when it was built.

The verification process for Rust-based smart contract languages is more
complex than EVM-based languages such as Solidity due to the Rust
compiler not providing deterministic builds of contracts.

In order to verify an ink! smart contract, the verification
process must recompile the contract in an identical host environment to
which it was originally built. The simplest way to do this is using a Docker
container.

Since ink! 5.0, `cargo-contract` provides the necessary tools to produce
a verifiable build and verify a binary against the reference contract.

:::note
Contract verification tools are available from `cargo-contract`
version 4.0 on. To install it, run

```
cargo install cargo-contract --locked --version ^4
```

:::

## Verifiable build

As mentioned earlier, due to the non-deterministic nature of Rust compilation,
smart contract developers are advised to build their project inside
a Docker container we provide. Luckily, `cargo contract build`
provides the `--verifiable` flag for this purpose.

The steps for the verifiable build production are:

1. [Install Docker Engine](https://docs.docker.com/engine/install/)
2. (Linux users) Make sure you complete the [post-installation step](https://docs.docker.com/engine/install/linux-postinstall/).
   This is required for the correct operation of the command.
3. Ensure Docker Engine is up and running, and the socket is accessible.
4. Simply run `cargo contract build --verifiable`.

This will pull the image with the version that corresponds to your `cargo-contract` crate version,
perform a build, and write artifacts in the standard output directory.

If everything is correct, you can verify the image version in the metadata file.
It should contain a key-value `image` after the `contract` information:

```json
  "contract": {
    "name": "flipper",
    "version": "4.3.0",
    "authors": [
      "Use Ink <ink@use.ink>"
    ]
  },
  "image": "paritytech/contracts-verifiable:4.0.0-alpha",
```

You are now ready to deploy your contract to a production chain.

:::note
The image is `amd64` based. Therefore, the build times can be significantly slower
on Apple Silicon machines. To overcome the issue enable _Rosetta for x86/amd64 emulation_
in _Settings_ → _Features in development_ tab in Docker Desktop App.
:::

## Verifying contract

Similarly to etherscan, you want to ensure that the given contract bundle
is indeed a copy of some well-known contract code.

There are two options when it comes to verification:

- Local bare-bones verification using `cargo contract verify`
- A third-party service [Sirato](./sirato.mdx)

`cargo contract verify` allows you to verify the given cargo project
against a reference contract bundle.

Simply run `cargo contract verify <path>`
in the cargo project directory.

If the reference contract was not build inside a docker container, the command
will compare the build info from the reference contract with the current environment
to ensure a match in environment.

:::warning
If you are not using standardized verifiable builds. It is your responsibility
to ensure deterministic environment both for build and verification of
smart contracts.
:::

If the build info from the `.contract` file matches the environment and a
docker `image` is present in metadata, `cargo contract` will build the
project inside the specified `image` docker container.
Otherwise, a local build is carried out.

Upon completion, the built contract bundle is compared to the reference one
and the result is returned.

## Advanced usage

If you would like to carry out other operations inside a deterministic environment
you can use our docker image. It is availble on [Docker Hub](https://hub.docker.com/repository/docker/paritytech/contracts-verifiable/general).
The entry point is set to `cargo contract` allowing you to specify other commands to be
executed.

:::tip
If you are building a multi-contract project,
make sure you are executing the build in the parent directory in order to mount the directory
of all contracts to be visible. Specify a relative manifest path to the root contract:

`cargo contract build --verifiable --manifest-path ink-project-a/Cargo.toml`
:::

You can find a Dockerfile and further documentation on image usage
in [the `cargo-contract` repository](https://github.com/use-ink/cargo-contract/tree/master/build-image)
````

## File: docs/basics/verification/sirato.mdx
````
---
title: Sirato 
slug: /basics/verification/sirato
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Verification Title Picture](/img/title/verification.svg)

# Sirato Verification Service

Web3 Labs have made available a public version of their
[verification service](https://github.com/web3labs/ink-verifier-server) 
to cater for the ink! and DotSama ecosystems. This can be used alongside 
the verifiable build image container to verify ink! smart contracts.

The following steps outline how to create a verifiable build and 
subsequently verify it using these services.

## Performing a verifiable build

You should already be familiar with using `cargo-contract` to 
[compile your contract](../../getting-started/compiling.md).

You will need to install the ink! verified image crate:
```
cargo install — git 
https://github.com/web3labs/ink-verifier-image.git
```

You can now perform a verified build by running the following 
command in the smart contracts project folder:
```
build-verifiable-ink -i ghcr.io/web3labs/ink-verifier .
```

:::note
Reproducable builds only work with cargo-contract >= 2.0.2 and 
contracts generated with that version onwards. To work around 
this you can use the signed metadata file instead.
:::

If you were to use the 
[flipper example](../../getting-started/creating.md) you would see 
output similar to the below:
```
...
 [5/5] Generating bundle

Original wasm size: 20.6K, Optimized: 1.4K

The contract was built in RELEASE mode.

Your contract artifacts are ready. You can find them in:
/build/package/src/target/ink

  - flipper.contract (code + metadata)
  - flipper.wasm (the contract's code)
  - flipper.json (the contract's metadata)
  adding: src/ (stored 0%)
  adding: src/Cargo.lock (deflated 75%)
  adding: src/Cargo.toml (deflated 52%)
  adding: src/lib.rs (deflated 72%)
  adding: flipper.contract (deflated 64%)
Verification package in /build/target/ink/package.zip
Archive:  /build/target/ink/package.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  2023-03-08 21:41   src/
   105695  2023-03-08 21:28   src/Cargo.lock
      573  2023-03-08 20:40   src/Cargo.toml
     5177  2023-03-08 20:40   src/lib.rs
     5278  2023-03-08 21:41   flipper.contract
---------                     -------
   116723                     5 files
```

If you have any issues running the build, you can built it yourself by 
running the following commands:
```
cd ../
git clone https://github.com/web3labs/ink-verifier-image.git
cd ink-verifier-image
docker build . -t ink-verifier:develop
cd ../flipper
build-verifiable-ink -t develop .
```

There will now be a package zipfile available which contains the contract 
source code, metadata and Wasm binary:
```
tree -L 3
.
├── Cargo.lock
├── Cargo.toml
├── lib.rs
└── target
    └── ink
        └── package.zip
```

Now that you have created the verified build, you can 
[deploy your contract](../../getting-started/deploying.md).

Once deployed, you will need to make a note of the contract's code hash in 
order to verify it.

## Verifying an ink! smart contract

### Using the verification service web app

The [ink! Verification Service](https://github.com/web3labs/ink-verifier-server)
is a RESTful web service created for verifying smart contracts deployed using
[pallet-contracts](https://crates.io/crates/pallet-contracts).

Web3 Labs host a public instance of the service at 
[ink-verifier.sirato.xyz](https://ink-verifier.sirato.xyz/). A Swagger interface 
to the service is also avilable at 
[ink-verifier.sirato.xyz/api/api-docs/](https://ink-verifier.sirato.xyz/api/api-docs/).

<img src={useBaseUrl('/img/verification-service-api.png')} alt="ink! Verification Service Swagger endpoint" />

The verification process entails the following steps:

1. A requestor uploads the source packge archive for a network and code hash
1. The server checks that:
   - The source code for the network and code hash is not already verified or 
     being verified
   - There is enough host resources to start a new verification
1. The server downloads the pristine Wasm byte code correspondening to the
   provided network and code hash
1. The server streams the archive if it is a compressed archive
1. The server moves the staging files to the processing directory
1. The server runs a container process for the verifier image to verify the 
   package in processing. See source code verification workflow for details
1. On the event of container exit the server moves the verified artificats to 
   the publish directory if the verification was successful, otherwise keeps a log in the errors directory

It works with any network that is defined in the 
[@polkadot/apps-config](https://github.com/polkadot-js/apps/tree/master/packages/apps-config/src/endpoints) 
package.

In order to verify a deployed contract using the service you will need to use 
the `/verify/{network}/{codeHash}` endpoint which is documented 
[here](https://ink-verifier.sirato.xyz/api/api-docs/#/default/post_verify__network___codeHash_).

Once a contract has been verified you can use the 
`/contract/{codeHash}/metadata.json` and `/contract/{codeHash}/src` endpoints 
to retrieve metadata and source code respectively.

### Using Sirato

Sirato Substrate is a smart contract explorer for ink! smart contracts. It 
integrates with the contract verification service allowing users to upload 
package files generated by the verifiable build image via the Sirato UI instead
of having to use the web endpoint.

In addition once a contract has been verified, details of any contract activity 
and events taking place on a parachain or Substrate chain are decoded for the 
user in Sirato.

For instance, in order to verify a contract deployed on the Rococo parachain,
you can head to the Sirato instance at 
[substrate.sirato.xyz](https://substrate.sirato.xyz/).

<img src={useBaseUrl('/img/sirato-substrate.png')} alt="Sirato Substrate" />

From there you can navigate to the deployed code by clicking on the Code 
reference that matches the code hash returned by the cargo contract instantiate 
call.

Alternatively, you can navigate directly by entering the URL 
`https://substrate.sirato.xyz/codes/0x<code-hash>`.

<img src={useBaseUrl('/img/sirato-contract-instance.png')} alt="Sirato contract instance view" />

Now click on the source code tab:

<img src={useBaseUrl('/img/sirato-package-upload.png')} alt="Sirato package upload page" />

Then upload the verified `package.zip` file that you generated earlier.

<img src={useBaseUrl('/img/sirato-package-upload-done.png')} alt="Sirato package upload complete" />

You can now start the verification process which kicks off a build of the 
provided resources.

<img src={useBaseUrl('/img/sirato-package-verify.png')} alt="Sirato package verification" />

Once the process has finished you will see the message 
`Contract successfully verified`.

<img src={useBaseUrl('/img/sirato-verify-complete.png')} alt="Sirato package verification complete" />

Clicking Browse verified files will display the associated metadata and 
source files for your contract.

<img src={useBaseUrl('/img/sirato-browse-verified.png')} alt="Sirato browse verified contract" />

If we then browse back to our contract instance, any methods or events will 
now be decoded.

<img src={useBaseUrl('/img/sirato-decoded-transaction.png')} alt="Sirato decoded contract transaction" />

We can verify this by invoking a method on the contract. We can now see the 
decoded method that was called in Sirato.

<img src={useBaseUrl('/img/sirato-decoded-transaction2.png')} alt="Another Sirato decoded contract transaction" />

### Unverified metadata upload

The verification service supports uploading signed contract metadata as an 
additional alternative to reproducible builds generated metadata. Please note 
that the signed metadata is not verified and the owner of the code hash is 
trusted.

This feature responds to:
1. The support for `build_info` data is only available from `cargo-contract` 
   2.0.2.
2. There is no official image or procedure regarding reproducible builds 
   yet.
3. We want to expand the service utility in the meantime.

Although it is a far from ideal way to bind the metadata to a given code 
hash it prevents trivial exploitation by:
- Verifying that the signature is from the owner account of the code hash.
- Verifying that the signed message matches the sha256 of the uploaded 
  metadata.json + the code hash of the uploaded contract bytecode.

To provide signed metadata, you will need to use
the `/upload/{network}/{codeHash}` endpoint which is documented
[here](https://ink-verifier.sirato.xyz/api/api-docs/#/default/post_upload__network___codeHash_)

For the request body you will need to sign this message using the account that 
uploaded the contract. You can use the [sign and verify tool](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/signing) 
in Polkadot.js. 

It is also possible to use Sirato for this, you can find instructions 
[here](https://github.com/web3labs/ink-verifier-server/blob/main/docs/TUTORIAL.md#s2---owner-signed-metadata).
````

## File: docs/basics/contract-template.md
````markdown
---
title: Contract Template
hide_title: true
slug: /basics/contract-template
---

![Macro Title Picture](/img/title/macro.svg)

# Contract Template

On this page we'll go over how to create a basic contract and explain
its elements.

## Creating a template

Change into your working directory and run:

```bash
cargo contract new foobar
```

This will create a new project folder named `foobar`.

```bash
cd foobar/
```

In the `lib.rs` file you find initial scaffolded code, which you can use as a starting point.

Quickly check that it compiles, and the trivial tests pass with:

```bash
cargo test
```

Also check that you can build the Wasm file by running:

```bash
cargo contract build
```

If everything looks good, then we are ready to start programming!

## Template Content

The template contains scaffolded code that provides a starting point
for writing an ink! contract. In the following we'll take a look
at what the files contain.
The files you get locally will look similar, just that we added
explanatory comments here.

### `Cargo.toml`

```toml
[package]
name = "foobar"
version = "0.1.0"
authors = ["[your_name] <[your_email]>"]
edition = "2021"

[dependencies]
# The `ink` crate contains the ink! eDSL and re-exports
# a number of other ink! specific crates. For example,
# `ink::env` is the `ink_env` crate that contains functions
# to interact with a contract's environment (querying information
# about a caller, the current block number, etc.).
ink = { version = "5", default-features = false }

[dev-dependencies]
# This developer dependency is for the End-to-End testing framework.
ink_e2e = { path = "../../crates/e2e" }

[lib]
name = "foobar"
path = "lib.rs"

[features]
default = ["std"]
std = [
    "ink/std",
]
ink-as-dependency = []

# This feature is just a convention, so that the end-to-end tests
# are only executed if `cargo test` is explicitly invoked with
# `--features e2e-tests`.
e2e-tests = []
```

### `lib.rs`

Every ink! contract is required to contain:

- Exactly one `#[ink(storage)]` struct.
- At least one `#[ink(constructor)]` function.
- At least one `#[ink(message)]` function.

The scaffolded code will look similar to the following, we've
changed the comments though to explain what is going on there
on a high level.

```rust
// If the `std` feature from the `Cargo.toml` is not enabled
// we switch on `no_std`, this has the effect of Rusts standard
// library not being included in our contract.
//
// The Rust standard library is OS-dependent and Wasm is
// architecture independent.
#![cfg_attr(not(feature = "std"), no_std)]

// This is the ink! macro, the starting point for your contract.
// Everything below it might look like Rust code, but it is actually
// run through a parser in ink!.
#[ink::contract]
pub mod flipper {
    /// This is the contract's storage.
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// A constructor that the contract can be initialized with.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            /* --snip-- */
        }

        /// An alternative constructor that the contract can be
        /// initialized with.
        #[ink(constructor)]
        pub fn new_default() -> Self {
            /* --snip-- */
        }

        /// A state-mutating function that the contract exposes to the
        /// outside world.
        ///
        /// By default functions are private, they have to be annotated
        /// with `#[ink(message)]` and `pub` to be available from the
        /// outside.
        #[ink(message)]
        pub fn flip(&mut self) {
            /* --snip-- */
        }

        /// A public contract function that has no side-effects.
        ///
        /// Note that while purely reading functions can be invoked
        /// by submitting a transaction on-chain, this is usually
        /// not done as they have no side-effects and the transaction
        /// costs would be wasted.
        /// Instead those functions are typically invoked via RPC to
        /// return a contract's state.
        #[ink(message)]
        pub fn get(&self) -> bool {
            /* --snip-- */
        }
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        /// This attribute denotes that the test is executed in
        /// a simulated, mocked blockchain environment. There are
        /// functions available to influence how the test environment
        /// is configured (e.g. setting an account to a specified balance).
        #[ink::test]
        fn default_works() {
            /* --snip-- */
        }

        /* --snip-- */
    }

    #[cfg(all(test, feature = "e2e-tests"))]
    mod e2e_tests {
        use super::*;
        use ink_e2e::build_message;

        type E2EResult<T> = std::result::Result<T, Box<dyn std::error::Error>>;

        /// With this attribute the contract will be compiled and deployed
        /// to a Substrate node that is required to be running in the
        /// background.
        ///
        /// We offer API functions that enable developers to then interact
        /// with the contract. ink! will take care of putting contract calls
        /// into transactions that will be submitted to the Substrate chain.
        ///
        /// Developers can define assertions on the outcome of their transactions,
        /// such as checking for state mutations, transaction failures or
        /// incurred gas costs.
        #[ink_e2e::test]
        async fn it_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            /* --snip-- */
        }

        /* --snip-- */
    }
}
```
````

## File: docs/basics/env-functions.md
````markdown
---
title: Environment Functions
slug: /basics/environment-functions
---

![Env Function Title Picture](/img/title/env-function.svg)

# Environment Functions

ink! exposes a number of handy environment functions.
A full overview [is found here](https://docs.rs/ink_env/5.0.0/ink_env/#functions).

In an `#[ink(constructor)]`  use `Self::env()` to access those,
in an `#[ink(message)]` use `self.env()`.
So e.g. `Self::env().caller()` or `self.env().caller()`.

Some handy functions include:

* [`caller()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.caller.html): Returns the address of the caller of the executed contract.
* [`account_id()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.account_id.html): Returns the account ID of the executed contract.
* [`balance()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.balance.html): Returns the balance of the executed contract.
* [`block_number()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.block_number.html): Returns the current block number.
* [`emit_event(…)`](https://docs.rs/ink_env/5.0.0/ink_env/fn.emit_event.html): Emits an event with the given event data.
* [`transfer(…)`](https://docs.rs/ink_env/5.0.0/ink_env/fn.transfer.html): Transfers value from the contract to the destination account ID.
* [`hash_bytes(…)`](https://docs.rs/ink_env/5.0.0/ink_env/fn.hash_bytes.html): Conducts the crypto hash of the given input and stores the result in output.
* […and many more](https://docs.rs/ink_env/5.0.0/ink_env/#functions).
````

## File: docs/basics/environment.md
````markdown
---
title: Chain Environment Types
slug: /basics/chain-environment-types
hide_title: true
---

![Environment Title Picture](/img/title/environment.svg)

# Chain Environment Types

:::caution
If you write a contract for a chain that deviates from the default
Substrate types, you have to make sure to configure that chain's
`Environment` for your contract!
:::

ink! defines a trait [`Environment`](https://use-ink.github.io/ink/ink_env/trait.Environment.html)
and also a default implementation of that trait ‒ [`DefaultEnvironment`](https://use-ink.github.io/ink/ink_env/enum.DefaultEnvironment.html).

These are the types that ink! uses, if no explicit steps are taken:

```rust
/// The fundamental types of the default configuration.
#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(feature = "std", derive(TypeInfo))]
pub enum DefaultEnvironment {}

impl Environment for DefaultEnvironment {
    const MAX_EVENT_TOPICS: usize = 4;

    type AccountId = ink_primitives::AccountId;
    type Balance = u128;
    type Hash = ink_primitives::Hash;
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = NoChainExtension;
}
```

The context here is that you can use ink! on any blockchain that was built with
the [Substrate](https://substrate.io) framework and includes the
[`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
module.

Chains built on Substrate can decide on their own which types they want
to use for e.g. the chain's block number or account id's. For example,
chains that intend to be compatible to Ethereum typically use the same
type as Ethereum for their `AccountId`.

Most Substrate chains stay with the default Substrate types though and
ink! just uses those by default as well. It is possible to configure
a different environment in the contract macro ([documentation here](https://use-ink.github.io/ink/ink/attr.contract.html#header-arguments))
though:

```rust
#[ink::contract(env = MyCustomTypes)]
```
````

## File: docs/basics/events.md
````markdown
---
title: Events
slug: /basics/events
hide_title: true
---

![Balloons 1 Title Picture](/img/title/balloons-1.svg)

# Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

![Contract execution via transaction](/img/events.svg)

## Example

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
#[ink::contract]
mod erc20 {
    /// Defines an event that is emitted
    /// every time value is transferred.
    #[ink(event)]
    pub struct Transferred {
        from: Option<AccountId>,
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self {
            let caller = Self::env().caller();
            Self::env().emit_event(Transferred {
                from: None,
                to: Some(caller),
                value: initial_supply,
            });
            Self { total_supply: initial_supply }
        }

        #[ink(message)]
        pub fn total_supply(&self) -> Balance {
            self.total_supply
        }
    }
}
```

See our [`ERC20 example contract`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) 
for an elaborate example which uses events.

## Event Definition

Since ink! version 5.0, events can be defined independently of the contract which emits them. 
Events can now be defined once and shared across multiple contracts. 

This is useful for events for contracts which conform to standards such as ERC-20: 
contract indexers/explorers are now able to group all e.g. `Transferred` events.

This is how an event definition looks:

```rust
use ink::primitives::AccountId;

#[ink::event]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,
    #[ink(topic)]
    to: Option<AccountId>,
    amount: u128,
}
```
> Note that generics are [not currently supported](https://github.com/use-ink/ink/issues/2044)
> , so the concrete types of `Environment` 
> specific types such as `AccountId` must match up with the types used in the contract.

This definition can exist within a contract definition module (inline events), in a different 
module in the same crate or even in a different crate to be shared by multiple contracts.

### Legacy syntax for inline Event definitions

Events defined within a `#[ink::contract]` module can continue to use the original syntax for an 
event definition, using the `#[ink(event)]` attribute. Under the covers this is simply expanded 
to the new top level `#[ink::event]` macro, so both events defined using the legacy style and 
using the new `event` attribute macro directly will behave exactly the same.

### Topics

When an event is emitted, 0 or more topics can be associated with it. The event is then indexed 
together with other events with the same topic value.

An event's fields can be annotated with `#[ink(topic)]` (see example), which will result in a 
topic derived from the value of that field being emitted together with the event.

Topics are by default a 32 byte array (`[u8; 32]`), although this is configurable on the 
Polkadot SDK runtime level. If the SCALE encoded bytes of a field value are `<= 32`, then the 
encoded bytes are used directly as the topic value. 

For example, in the common case of indexing a field of type `AccountId`, where the default 
`AccountId` type is 32 bytes in length, the topic value will be the encoded account id itself. This 
makes it easy to filter for all events which have a topic of a specific `AccountId`.

If however the size of the encoded bytes of the value of a field exceeds 32, then the encoded 
bytes will be hashed using the `Blake2x256` hasher.

> Topics are a native concept in the Polkadot SDK, and can be queried via [`EventTopics`](https://docs.rs/frame-system/latest/frame_system/pallet/storage_types/struct.EventTopics.html)

How to choose which fields to make topics? A good rule of thumb is to ask yourself if somebody 
might want to search for this topic. For this reason the `amount` in the example `Transferred` event
above was not made indexable ‒ there will most probably be a lot of different events with differing
amounts each.

#### Signature Topic

By default all events have a signature topic. This allows indexing of all events of the same 
type, emitted by different contracts. The `#[ink::event]` macro generates a signature topic at 
compile time by hashing the name of the event concatenated with the *names of the types* of the all 
the field 
names:
```
blake2b("Event(field1_type,field2_type)")`
```
So for our `Transferred` example it will be: 
```
blake2b("Transferred(Option<AccountId>,Option<AccountId>,u128)")`
```

:::caution
Important caveat: because the *name* of the field type is used, refactoring an event 
definition to use a type alias or a fully qualified type will change the signature topic, even
though the underlying type is the same. Two otherwise identical definitions of an event with the 
same name and same field types but different field type names will have different signature 
topics.
:::

When decoding events emitted from a contract, signature topics are now required to determine which 
type of event to decode into. 

#### Anonymous Events

Events annotated with `anonymous` will not have a signature topic generated and published with the
event.

For inline events, this can be done by marking the event with the `anonymous` attribute e.g.

```rust
#[ink(event, anonymous)]
pub struct Event { .. }
```
or
```rust
#[ink(event)]
#[ink(anonymous)]
pub struct Event { .. }
```

For events defined using the `#[ink::event]` macro, the `anonymous` flag needs to be added as an 
argument:

```rust
#[ink::event(anonymous)]
pub struct Event { .. }
```

Without a signature topic, indexers will not be able to index over the type of the event, which 
may be desirable for some contracts, and would be a small gas cost optimization if necessary.

However, when interacting with the contract from a client, no signature topic means that another 
way is required to determine the type of the event to be decoded into (i.e. how do we know it is 
a `Transferred` event, not an `Approval` event. One way would be to try decoding for each type 
of event defined in the metadata of the contract until one succeeds. If calling a specific 
`message`, it may be known up front what type of event that message will raise, so the client 
code could just decode into that event directly.

## Emitting Events in a Constructor

In a constructor events are emitted via `Self::env().emit_event()`.
See this example:

```rust
#[ink(constructor)]
pub fn new(initial_value: Balance) -> Self {
    let caller = Self::env().caller();
    let mut balances = HashMap::new();
    balances.insert(caller, initial_supply);

    Self::env().emit_event(Transferred {
        from: None,
        to: Some(caller),
        amount: initial_supply
    });

    Self { total_supply: initial_supply, balances }
}
```

## Emitting Events from Messages

In a message events are emitted via `self.env().emit_event()`:

```rust
#[ink(message)]
pub fn transfer(&mut self, to: AccountId, amount: Balance) -> Result {
    let from = self.env().caller();
    // implementation hidden
    self.env().emit_event(Transferred {
        from: Some(from),
        to: Some(to),
        amount
    });
    Ok(())
}
```

## Cost of using Events

When using events and topics, developers should be mindful of the costs associated. Firstly: if 
optimizing for contract size, using events will increase the size of the final code size. So 
minimizing or eliminating event usage where necessary will reduce contract size. The same can be 
said for the execution (aka gas) costs when using events. We recommend considering the cost of 
events when using them, and measuring the code size and gas costs with different usage patterns 
when optimizing.
````

## File: docs/basics/gas.md
````markdown
---
title: Gas
slug: /basics/gas
hide_title: true
---

![Gas Title Picture](/img/title/gas.svg)

## What is "Gas" in ink!?

For ink!, the term Gas refers to the resources used by a contract call.
It's important for smart contracts that the caller has to pay for any utilized resource.

Those resources can be either storage space (for storing data in the contract's storage)
or computational time (for executing the contract and its logic). The term Gas encompasses both
of these resources: `Gas = (refTime, proofSize)`.

The terms hereby refer to:

`refTime`: The amount of computational time that can be used for execution, in picoseconds.

`proofSize`: The amount of storage in bytes that a transaction is allowed to read.

The term `refTime` comes from "reference time", referring to Substrate's Weights system, where
computation time is benchmarked on reference hardware. You can read more details
[here](https://docs.polkadot.com/polkadot-protocol/glossary/#weight).

The term `proofSize` is only relevant for parachains on the [Polkadot](https://polkadot.network/)
or [Kusama](https://kusama.network/) networks.
_It can be ignored for standalone chains (like [Aleph Zero](https://alephzero.org/))._
On a high level, `proofSize` is the size of the proof that individual parachains send to
the Polkadot or Kusama relay chain to allow re-executing their block for validation
(this is called Proof of Validity).
Phrased differently: Layer-1 chains send a proof of validity to a Layer-0 chain to validate the block.
This Proof of Validity contains everything necessary to execute the block -- the code of each contract
that is executed plus the storage each contract reads and writes.

:::info
The terms above come from Substrate's "Weights V2" system.
For ink!, Gas is a synonym to the concept called "Weight" in the Substrate framework.
Blockchains that support ink! are built using Substrate which uses the concept of Weight
to describe the usage of resources.
The Weights concept is similar to what smart contract developers might know from other
ecosystems, but is more fine grained. It also tracks the utilized bandwidth, not just
execution. For ink! smart contracts the utilized bandwidth is the `proofSize` explained above.

We decided on using the term "Gas" to make onboarding easier for developers from other
smart contract ecosystems. So: `Gas = Weight = (refTime, proofSize)`.
:::
````

## File: docs/basics/metadata.md
````markdown
---
title: Metadata
hide_title: true
slug: /basics/metadata
---

![Metadata Title Picture](/img/title/metadata.svg)

# ink! Metadata

The ink! metadata is used to describe a contract in a language agnostic way. It is
intended to be used by third party tools (e.g. UIs, block explorers) in order to correctly
call contract functions and interpret events.

The ink! metadata is generated when a contract is built using `cargo-contract`, e.g
`cargo contract build`.

The metadata can be found in your contract's target directory under the name
`<contract-name>.json`.

:::note

The metadata is also contained in your `<contract-name>.contract` file. The difference is
that the `.contract` file also contains the Wasm binary of your contract.

:::

## `<contract-name>.json`
The metadata is defined by the following **required** keys:
- `source`: Information about the contract's Wasm code.
- `contract`: Metadata about the contract.
- `abi`: Raw JSON of the contract's abi metadata, generated during contract compilation.

It may _optionally_ contain the following keys:
- `user`: Additional user-defined metadata.

```json
{
  "source": {
    "hash": "...",
    "language": "...",
    "compiler": "..."
  },
  "contract": {
    "name": "...",
    "version": "...",
    "authors": [
      "..."
    ]
  },
  "spec": {
    "constructors": ["..."],
    "messages": ["..."]
  }
}
```

:::note

Notice that we don't have an `abi` key, but we instead use the `spec` field to specify
the contract's ABI. You can read more about that in the [ABI documentation](#abi).

:::

The following sections will dive deeper into how these sections are made up.

### `source`
This object contains information about how the contract was built.

It consists of the following **required** keys:
- `hash`: The hash of the contract's Wasm code.
- `language`: The language used to write the contract.
- `compiler`: The compiler used to compile the contract.

It may _optionally_ include the following keys:
- `wasm`: The actual Wasm code of the contract, for optionally bundling the code with the metadata.
- `build_info`: Extra information about the environment in which the contract was built.

```json
"source": {
  "hash": "0x157014494527fee27a82e49bbd9eea10c0713bb0566f6def37f4595db86236ff",
  "language": "ink! 5.1.0",
  "compiler": "rustc 1.66.0"
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/30ba1ec545d01c0479fe47c97d2c8911ab868d46/crates/metadata/src/lib.rs#L157).

:::

### `contract`
This object contains extra metadata about the contract.

The **required** keys include:
 - `name`: The name of the smart contract.
 - `version`: The version of the smart contract.
 - `authors`: The authors of the smart contract.

It can _optionally_ include the following keys:
 - `description`: The description of the smart contract.
 - `documentation`: Link to the documentation of the smart contract.
 - `repository`: Link to the code repository of the smart contract.
 - `homepage`: Link to the homepage of the smart contract.
 - `license`: The license of the smart contract.

```json
"contract": {
  "name": "flipper",
  "version": "5.0.0",
  "authors": [
    "Use Ink <ink@use.ink>"
  ]
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/30ba1ec545d01c0479fe47c97d2c8911ab868d46/crates/metadata/src/lib.rs#L432).

:::

### ABI
This is the specification of the contract.

Unlike the previous metadata sections the structure of the object stored here is not
defined. Instead, it is up to each programming language (e.g. ink!, ask!, Solidity) to
define their own metadata format which will then be stored here.

In this document we will focus on the ink! ABI.

The ink! metadata consists of the following **required** sections
 - `spec`: The description of the contract (e.g constructors, messages, events, etc.).
 - `storage`: The layout of the storage data structure
 - `types`: A read-only registry containing types in their portable form for
   serialization.
 - `version`: The version of the ink! metadata.

```json
"spec": { ... },
"storage": { ... },
"types": { ... },
"version": "..."
```

:::info

If you're interested in the code reference from `ink!`
see [here](https://github.com/use-ink/ink/blob/c8aa3ee41112b327d4f3cb3959f188945c8ccace/crates/metadata/src/lib.rs#L90).

:::

#### `spec`
The contract `spec` consists of the following **required** keys:
- `constructors`: The set of constructors of the contract.
    - `label`: The label of the constructor. In case of a trait provided constructor the
      label is prefixed with the trait label.
    - `selector`: The selector hash of the message.
    - `payable`: If the constructor accepts any `value` from the caller.
    - `default`: If the constructor is marked as default, useful for UIs.
    - `args`: The parameters of the deployment handler.
    - `docs`: The deployment handler documentation.
- `messages`: The external messages of the contract.
    - `label`: The label of the message. In case of trait provided messages and
      constructors the prefix by convention in ink! is the label of the trait.
    - `selector`: The selector hash of the message.
    - `mutates`: If the message is allowed to mutate the contract state.
    - `payable`: If the message accepts any `value` from the caller.
    - `default`: If the message is marked as default, useful for UIs.
    - `args`: The parameters of the message.
    - `return_type`: The return type of the message.
    - `docs`: The message documentation.
- `environment`: Configuration of the types that the host blockchain operates with. 
You can check default types in [Environment](./environment.md) section.
  - `accountId`: The type describing an account address.
  - `balance`: The type describing balance values.
  - `blockNumber`: The type describing a block number. 
  - `chainExtension`: The type describing the chain extension for the environment. 
For more information about usage and definition check [this section](../macros-attributes/chain-extension.md).
  - `maxEventTopics`: The maximum number of supported event topics provided by the runtime.
  - `timestamp`: the type describing a timestamp.
- `events`: The events of the contract.
    - `label`: The label of the event.
    - `args`: The event arguments.
    - `docs`: The event documentation.
- `docs`: The contract documentation.
- `lang_error`: The language specific error type.

:::note

While all these keys are required, they may be empty. For example, if a contract does not
define any events then the `events` key would contain an empty array `[]`.

:::

:::tip ink! 3.x Compatibility Note

The `lang_error` field was introduced as part of ink! 4.0. This represents an error which
comes from the smart contracting language itself, and not the contract nor the underlying
environment (e.g `pallet-contracts`).

All ink! messages and constructors now return a `Result` which uses this as the `Error`
variant (see the [`LangError`](https://docs.rs/ink/5.0.0/ink/enum.LangError.html) docs for more).

:::

```json
"spec": {
  "constructors": [
    {
      "args": [
        { ... }
      ],
      "docs": [
        "Creates a new flipper smart contract initialized with the given value."
      ],
      "label": "new",
      "payable": false,
      "default": false,
      "selector": "0x9bae9d5e"
    }
  ],
  "docs": [],
  "events": [],
  "lang_error": {
    "displayName": [
      "ink",
      "LangError"
    ],
    "type": 3
  },
  "messages": [
    {
      "args": [],
      "docs": [
        " Flips the current value of the Flipper's boolean."
      ],
      "label": "flip",
      "mutates": true,
      "payable": false,
      "default": false,
      "returnType": null,
      "selector": "0x633aa551"
    }
  ]
}
```

#### `storage`
This key describes the storage layout of an ink! contract. It tracks some of the
different structures which can be placed in storage.

It consists of the following _optional_ keys (depending on what data structures are used
by the contract):

- `root`: The root cell defines the storage key for all sub-trees
    - `root_key`: The root key of the sub-tree.
    - `layout`: The storage layout of the unbounded layout elements.
- `leaf`: The root cell defines the storage key for all sub-trees
    - `key`: The offset key into the storage.
    - `ty`: The type of the encoded entity.
- `hash`: A layout that hashes values into the entire storage key space.
    - `offset`: The key offset used by the strategy.
    - `strategy`: The hashing strategy to layout the underlying elements.
    - `layout`: The storage layout of the unbounded layout elements.
- `array`: An array of associated storage cells encoded with a given type.
    - `offset`: The offset key of the array layout. This is the same key as the element
      at index 0 of the array layout.
    - `len`: The number of elements in the array layout.
    - `layout`: The layout of the elements stored in the array layout.
- `struct`: A struct layout with fields of different types.
    - `name`: The name of the struct.
    - `fields`: The fields of the struct layout.
- `enum`: An enum layout with a discriminant telling which variant is layed out.
    - `name`: The name of the enum.
    - `dispatch_key`: The key where the discriminant is stored to dispatch the variants.
    - `variants`: The variants of the enum.

```json
"storage": {
  "root": {
    "layout": {
      "struct": {
        "fields": [
          {
            "layout": {
              "leaf": {
                "key": "0x00000000",
                "ty": 0
              }
            },
            "name": "value"
          }
        ],
        "name": "Flipper"
      }
    },
    "root_key": "0x00000000"
  }
}
```

#### `types`
This object contains the type registry for the smart contract. It consists of an array of
type objects, each of which is defined as follows:
- `id`: Numerical ID for referencing the type.
- `ty`: The definition of the type.
    - `path`: The unique path to the type. Can be empty for built-in types.
    - `params`: The generic type parameters of the type in use. Empty for non generic
      types.
    - `def`: The actual type definition.
    - `docs`: Documentation.

The type definition object (`def`) supports the following `primitive` types:
- `bool`, `char`, `str`, `u8`, `u16`, `u32`, `u64`, `u128`, `i8`, `i16`, `i32`, `i64`, `i128`.

It also supports a variety of complex built-in and user-defined types. However, we will
not dig into them here. If you are interested in learning more take a look at the
[`scale-info`](https://github.com/paritytech/scale-info) crate.

```json
"types": [
  {
    "id": 0,
    "type": {
      "def": {
        "primitive": "bool"
      }
    }
  }
]
```

Other parts of the metadata, such as the `storage` object, will reference individual
types from this type registry using the `id` key.

#### `version`
This indicates the version of the ABI format the generated metadata conforms to. This is
distinct from any concept of Rust's crate versioning.

```json
"version": "4"
```

:::tip ink! 3.x Compatibility Note

In version 3 of the ink! metadata the version was specified as a key which wrapped the
ABI (e.g `"V3": { ... }`). This is no longer the case with version 4.

:::

### `user`
This is an _optional_ field used to add user-defined metadata. Some examples of things
you may want to include here:
- `moon_phase`: Phase of the moon during which the smart contract works.
- `favorite_blockchain`: The favorite blockchain of the contract authors (answer: Polkadot!).
````

## File: docs/basics/mutating-values.md
````markdown
---
title: Mutating Storage Values
slug: /basics/mutating-values
hide_title: true
---

![Storage Mutating Title Picture](/img/title/storage-mutating.svg)

# Mutating Storage Values

It's time to modify some storage!

## Mutable and Immutable Functions

You may have noticed that the function template included `self` as the first parameter of the
contract functions. It is through `self` that you gain access to all your contract functions and
storage items.

If you are simply _reading_ from the contract storage, you only need to pass `&self`. But
if you want to _modify_ storage items, you will need to explicitly mark it as mutable,
`&mut self`.

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.my_number
    }

    #[ink(message)]
    pub fn my_setter(&mut self, new_value: u32) {
        self.my_number = new_value;
    }
}
```
````

## File: docs/basics/reading-values.md
````markdown
---
title: Reading Values from Storage
slug: /basics/reading-values
hide_title: true
---

![Storage Read Title Picture](/img/title/storage-read.svg)

# Reading Values from Storage

Reading from storage is where the fun begins!

## Contract Functions

As you can see in the contract template, all of your contract functions are part of your contract module.

```rust
impl MyContract {
    // Public and Private functions can go here
}
```

### Public and Private Functions

In Rust, you can make as many implementations as you want. As a stylistic choice, we recommend
breaking up your implementation definitions for your private and public functions:

```rust
impl MyContract {
    /// Public function
    #[ink(message)]
    pub fn my_public_function(&self) {
        /* --snip-- */
    }

    /// Private function
    fn my_private_function(&self) {
        /* --snip-- */
    }

    /* --snip-- */
}
```

You can also choose to split things up however is most clear for your project.

Note that all public functions must use the `#[ink(message)]` attribute.

## Getting a Value

We already showed you how to initialize a storage value in the chapter [Storing Values](./storing-values.md).
Getting the value is just as simple:

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.number
    }
}
```

In Rust, if the last expression in a function does not have a semicolon it will be the return value.
````

## File: docs/basics/selectors.md
````markdown
---
title: Selectors
hide_title: true
slug: /basics/selectors
---

![Selector Hex Title Picture](/img/title/selector-hex.svg)

# Selectors

Selectors in ink! are a language agnostic way of identifying constructors and messages.
They are four-byte hexadecimal strings which look something like: `0x633aa551`.

You can find the selector of an ink! constructor or message in your
[contract metadata](./metadata.md) by looking for the `selector` field of the dispatchable
you're interested in.

Here is an example of how you can grab the message name and selector from your contract
metadata using [`jq`](https://stedolan.github.io/jq/).

```
cat target/ink/flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"flip: 0x633aa551"
```

## Selector Calculation

If you do not have access to a contract's metadata, you can also calculate it yourself.

The algorithm ink! uses is fairly straightforward:
1. Get _just_ the name of the constructor or message
2. Compute the `BLAKE2` hash of the name
3. Take the first four bytes of the hash as the selector

Let's walk through a short example of what this looks like in practice. Consider the
following message:

```rust
#[ink(message)]
fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
    unimplemented!()
}
```

To calculate the selector we:
1. Grab the name of the message, `frobinate`
2. Compute `BLAKE2("frobinate") = 0x8e39d7f22ef4f9f1404fe5200768179a8b4f2b67799082d7b39f6a8ca82da8f1`
3. Grab the first four bytes, `0x8e39d7f2`

## Selector Calculation: ink! Traits

These rules change a bit if you define any messages using the `[ink::trait_definition]`
[macro](./trait-definitions.md). For our first step, instead of taking _just_ the
message name, we now also add the _trait name_ to the selector calculation.

```
cat target/ink/trait-flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"Flip::flip: 0xaa97cade"
```

Let's see what this would look like in practice. Consider the following trait:

```rust
#[ink::trait_definition]
pub trait Frobinate {
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool;
}

-- snip --

impl Frobinate for Contract {
    #[ink(message)]
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
        unimplemented!()
    }
}
```

To calculate the selector we:
1. Grab the name of the trait **and** the name of the message, `Frobinate::frobinate`
2. Compute `BLAKE2("Frobinate::frobinate") = 0x8915412ad772b2a116917cf75df4ba461b5808556a73f729bce582fb79200c5b`
3. Grab the first four bytes, `0x8915412a`

:::tip

Don't worry if you're not able to calculate the `BLAKE2` hash of a string by hand. You
can use [Shawn's Substrate Utilities](https://www.shawntabrizi.com/substrate-js-utilities/)
to do it for you!

:::
````

## File: docs/basics/storing-values.md
````markdown
---
title: Storing Values
slug: /basics/storing-values
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Storing Values

Here is how you store simple values in storage:

```rust
#[ink(storage)]
pub struct MyContract {
    // Store a bool
    my_bool: bool,
    // Store some number
    my_number: u32,
}
/* --snip-- */
```

## Supported Types

Substrate contracts may store types that are encodable and decodable with
[Parity Codec](https://github.com/paritytech/parity-codec) which includes most Rust common data
types such as `bool`, `u{8,16,32,64,128}`, `i{8,16,32,64,128}`, `String`, tuples, and arrays.

Furthermore, ink! provides [substrate](https://substrate.io/) specific types like `AccountId`, `Balance`, and `Hash` to smart contracts as if
they were primitive types.

### String, Vector and More

The [`ink_prelude`](https://docs.rs/ink_prelude/5.0.0/ink_prelude/index.html) crate provides an efficient approach to import commonly used Rust types such as `String` and `Vec`, ensuring safe usage within an ink! contract.

This simplifies the type referencing process between the `std` and `no_std` environments. Typically, these types are defined within the `std` crate in the `std` environment, and the `alloc` crate in the `no_std` environment. Given that ink! smart contract code is compiled in both environments (`no_std` for production and `std` for unit tests), developers might find themselves writing intricate conditional compilation macros. The `ink_prelude` crate conveniently re-exports these types, eliminating this complexity.

You can use the prelude definitions like this:

```rust
#[ink::contract]
mod MyContractWithStringsAndArrays {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;

    #[ink(storage)]
    pub struct MyContract {
        // Store some String
        my_string: String,
        // Store some u32 in a vec
        my_vector: Vec<u32>,
    }
    /* --snip-- */
}
```

### Mapping

ink! also provides a `Mapping` storage type. You can read more about it [here](../datastructures/mapping.md).

### Substrate Types

Here is an example of how you would store substrate types `AccountId`, `Balance` and `Hash`:

```rust
#[ink::contract]
mod MyContract {

    // Our struct will use those default ink! types
    #[ink(storage)]
    pub struct MyContract {
        // Store some AccountId
        my_account: AccountId,
        // Store some Balance
        my_balance: Balance,
        // Store some Hash
        my_hash: Hash,
    }
    /* --snip-- */
}
```

### Enum

Enum can be used as a datatype as well. It's use in the example in the [Struct](#struct) section.

```rust
pub enum Status {
    /// An auction has not started yet.
    NotStarted,
    /// We are in the starting period of the auction, collecting initial bids.
    OpeningPeriod,
    /// We are in the ending period of the auction, where we are taking snapshots
    /// of the winning bids.
}
```

### Struct

You can even combine all the above mentioned types in a custom `struct` which you can then store in the contract's storage.

```rust
mod MyContract {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;


    pub struct Auction {
        /// Branded name of the auction event.
        name: String,
        /// Some hash identifying the auction subject.
        subject: Hash,
        /// Auction status.
        status: Status, // Enum: Usage shown in next section
        /// Candle auction can have no winner.
        /// If auction is finalized, that means that the winner is determined.
        finalized: bool,
        /// vector
        vector: Vec<u8>,
    }

    #[ink(storage)]
    pub struct MyContract {
        // Store Auctions in a vec
        auctions: Vec<Auction>,
    }
}
```

The values of an enum should be referenced as `Status::OpeningPeriod`.

## Initializing Storage in Constructors

Constructors are how values get initialized.
Every ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:

Note that if you have a contract whose storage contains `Mapping'`s you will need to use
`ink_lang::utils::initialize_contract` in your constructor. See the
[`Mapping` documentation](../datastructures/mapping.md) for more details.

```rust
#[ink::contract]
mod mycontract {

    #[ink(storage)]
    pub struct MyContract {
        number: u32,
    }

    impl MyContract {
        /// Constructor that initializes the `u32` value to the given `init_value`.
        #[ink(constructor)]
        pub fn new(init_value: u32) -> Self {
            Self {
                number: init_value,
            }
        }

        /// Constructor that initializes the `u32` value to the `u32` default.
        #[ink(constructor)]
        pub fn default() -> Self {
            Self {
                number: Default::default(),
            }
        }
    /* --snip-- */
    }
}
```
````

## File: docs/basics/trait-definitions.md
````markdown
---
title: Trait Definitions
slug: /basics/trait-definitions
hide_title: true
---

![Text/trait Title Picture](/img/title/text/trait.svg)

Through the `#[ink::trait_definition]` proc. macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts.

This allows to define shared smart contract interfaces to different concrete implementations.
Note that this ink! trait definition can be defined anywhere, even in another crate!

See our [`ERC20-Trait example contract`](https://github.com/use-ink/ink-examples/blob/main/trait-erc20/lib.rs) 
for an elaborate example which uses trait definitions.

### Example

Defined in the `base_erc20.rs` module.

```rust
#[ink::trait_definition]
pub trait BaseErc20 {
    /// Returns the total supply.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    /// Transfers `amount` from caller to `to`.
    #[ink(message, payable)]
    fn transfer(&mut self, to: AccountId, amount: Balance);
}
```

An ink! smart contract definition can then implement this trait definition as follows:

```rust
#[ink::contract]
mod erc20 {
    use base_erc20::BaseErc20;

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }
    
    impl Erc20 {
        /// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            // implementation ...
        }
    }

    impl BaseErc20 for Erc20 {
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            // implementation ...
        }

        #[ink(message, payable)]
        fn transfer(&mut self, to: AccountId, amount: Balance) {
            // implementation ...
        }
    }
}
```

Calling the above `Erc20` explicitly through its trait implementation can be done just as if it was normal Rust code:

```rust
// --- Instantiating the ERC-20 contract:
//
let mut erc20 = <Erc20 as BaseErc20>::new(1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
let mut erc20 = Erc20::new(1000);

// --- Retrieving the total supply:
//
assert_eq!(<Erc20 as BaseErc20>::total_supply(&erc20), 1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
assert_eq!(erc20.total_supply(), 1000);
```

There are still many limitations to ink! trait definitions and trait implementations.
For example, it is not possible to define associated constants or types or have default implemented methods.
These limitations exist because of technical intricacies, however, please expect that many of those will be tackled in future ink! releases.




Marks trait definitions to ink! as special ink! trait definitions.

There are some restrictions that apply to ink! trait definitions that
this macro checks. Also ink! trait definitions are required to have specialized
structure so that the main [`#[ink::contract]`](https://docs.rs/ink/5.0.0/ink/attr.contract.html) macro can
properly generate code for its implementations.

# Example: Definition

```rust
type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;

#[ink::trait_definition]
pub trait Erc20 {
    /// Returns the total supply of the ERC-20 smart contract.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    // etc.
}
```

# Example: Implementation

Given the above trait definition you can implement it as shown below:

```rust
#[ink::contract]
mod base_erc20 {
    /// We somehow cannot put the trait in the doc-test crate root due to bugs.
    #[ink_lang::trait_definition]
    pub trait Erc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance;
    }

    #[ink(storage)]
    pub struct BaseErc20 {
        total_supply: Balance,
        // etc ..
    }

    impl BaseErc20 {
        /// Constructs a new ERC-20 compliant smart contract using the initial supply.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            Self { total_supply: initial_supply }
        }
    }

    impl Erc20 for BaseErc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            self.total_supply
        }

        // etc ..
    }
}
```
````

## File: docs/basics/upgradeability.md
````markdown
---
title: Upgradeable Contracts
slug: /basics/upgradeable-contracts
hide_title: true
---

![Upgradeable Contract Title Picture](/img/title/upgradeable-contract.svg)

# Upgradeable Contracts

Even though smart contracts are intended to be immutable by design,
it is often necessary to perform an upgrade of a smart contract. 

The developer may need to fix a critical bug or introduce a new feature.
ink! supports different upgrade strategies that we describe on this page.

## Proxy Forwarding

This method relies on the ability of contracts to proxy calls to other contracts.

### Properties

- Forwards any call that does not match a selector of itself to another contract.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the contract to which calls are forwarded.

```
User ---- tx ---> Proxy ----------> Implementation_v0
                     |
                      ------------> Implementation_v1
                     |
                      ------------> Implementation_v2
```

### Example

Our proxy contract will have these 2 storage fields:

```rust
#[ink(storage)]
pub struct Proxy {
    /// The `AccountId` of a contract where any call that does not match a
    /// selector of this contract is forwarded to.
    forward_to: AccountId,
    /// The `AccountId` of a privileged account that can update the
    /// forwarding address. This address is set to the account that
    /// instantiated this contract.
    admin: AccountId,
}
```

We then need a way to change the address of a contract to which we forward calls to
and the actual message selector to proxy the call:

```rust
impl Proxy {
    /// Changes the `AccountId` of the contract where any call that does
    /// not match a selector of this contract is forwarded to.
    ///
    /// # Note
    /// Only one extra message with a well-known selector `@` is allowed.
    #[ink(message, selector = @)]
    pub fn change_forward_address(&mut self, new_address: AccountId) {
        assert_eq!(
            self.env().caller(),
            self.admin,
            "caller {:?} does not have sufficient permissions, only {:?} does",
            self.env().caller(),
            self.admin,
        );
        self.forward_to = new_address;
    }

    /// Fallback message for a contract call that doesn't match any
    /// of the other message selectors.
    ///
    /// # Note:
    ///
    /// - We allow payable messages here and would forward any optionally supplied
    ///   value as well.
    /// - If the self receiver were `forward(&mut self)` here, this would not
    ///   have any effect whatsoever on the contract we forward to.
    #[ink(message, payable, selector = _)]
    pub fn forward(&self) -> u32 {
        ink::env::call::build_call::<ink::env::DefaultEnvironment>()
            .call(self.forward_to)
            .transferred_value(self.env().transferred_value())
            .call_flags(
                ink::env::CallFlags::default()
                    .set_forward_input(true)
                    .set_tail_call(true),
            )
            .invoke()
            .unwrap_or_else(|err| {
                panic!(
                    "cross-contract call to {:?} failed due to {:?}",
                    self.forward_to, err
                )
            });
        unreachable!(
            "the forwarded call will never return since `tail_call` was set"
        );
    }
}
```

:::tip

Take a look at the selector pattern in the attribute macro: by declaring `selector = _`
we specify that all other messages should be handled by this message selector.

:::

Using this pattern, you can introduce other message to your proxy contract.
Any messages that are not matched in the proxy contract 
will be forwarded to the specified contract address.

## Delegating execution to foreign Contract Code with `delegate_call`

Similar to proxy-forwarding we can delegate execution to another code hash uploaded on-chain.

### Properties 

- Delegates any call that does not match a selector of itself to another contract.
- Code is required to be uploaded on-chain, but is not required to be instantiated.
- State is stored in the storage of the original contract which submits the call.
- Storage layout must be identical between both contract codes.

```
                                (Storage of Contract A)
User ---- tx ---> Contract A ----------> Code_v0
                     |                     ^
                     |                     |
                     ⌊_____________________⌋
                    Storage is delegated to
```

### Example

Suppose we have defined of the caller contract as following:

```rust
#[ink(storage)]
pub struct Delegator {
    addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
    counter: i32,
}
```

Then let's define two messages that separately calls to update `addresses` and `counter` separately:

```rust
/// Increment the current value using delegate call.
#[ink(message)]
pub fn inc_delegate(&self, hash: Hash) {
    let selector = ink::selector_bytes!("inc");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(hash)
        // if the receiver is set to `&mut self`,
        // then any changes made in `inc_delegate()` before the delegate call
        // will be persisted, and any changes made within delegate call will be discarded.

        // Therefore, it is advised to use `&self` receiver with a mutating delegate call,
        // or `.set_tail_call(true)` to flag that any changes made by delegate call should be flushed into storage. 
        // .call_flags(CallFlags::default().set_tail_call(true))
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}

/// Adds entry to `addresses` using delegate call.
/// Note that we don't need `set_tail_call(true)` flag
/// because `Mapping` updates the storage instantly on-demand.
#[ink(message)]
pub fn add_entry_delegate(&mut self, hash: Hash) {
    let selector = ink::selector_bytes!("append_address_value");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(hash)
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}
```

ink! provides an intuitive call builder API for you to compose your call.
As you can see that `inc_delegate()` can be built a call in slightly different manner than `add_entry_delegate()`.
That's because if the delegated code modifies layout-full storage
(i.e. it contains at least non-`Lazy`, non-`Mapping` field),
either the receiver should be set to `&self` or the `.set_tail_call(true)` flag of `CallFlags` needs to be specified, and the storage layouts must match.

This is due to the way ink! execution call stack is operated. Non-`Lazy`, non-`Mapping` field are first loaded into the memory.
If `&mut self` receiver is used, then when delegate call is completed, the original state before the call will be persisted and flushed into the storage.
Therefore, `.set_tail_call(true)` needs to be set to indicate that, that delegate call's storage context is the final (i.e. _tail) one that needs to be flushed.
This also makes any code after the delegate call unreachable.
With `&self` receiver, `.set_tail_call(true)` is not required since no storage flushing happens at the end of the original caller's function.
(see [Stack Exchange Answer](https://substrate.stackexchange.com/a/3352/3098) for details on how changes are flushed into storage).



:::note Key compatibility
If the delegated code modifies `Lazy` or `Mapping` field, the keys must be identical and `.set_tail_call(true)` is optional 
regardless of the function receiver.
This is because `Lazy` and `Mapping` interact with the storage directly instead of loading and flushing storage states.
:::

Now let's look at the "delegatee" code:

```rust
#[ink::contract]
pub mod delegatee {
    use ink::storage::{
        traits::ManualKey,
        Mapping,
    };
    #[ink(storage)]
    pub struct Delegatee {
        // `ManualKey` must be the same as in the original contract.
        addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
        counter: i32,
        // Uncommenting below line will break storage compatibility.
        // flag: bool,
    }

    impl Delegatee {
        /// When using the delegate call. You only upload the code of the delegatee
        /// contract. However, the code and storage do not get initialized.
        ///
        /// Because of this. The constructor actually never gets called.
        #[allow(clippy::new_without_default)]
        #[ink(constructor)]
        pub fn new() -> Self {
            unreachable!(
                "Constructors are not called when upgrading using `set_code_hash`."
            )
        }

        /// Increments the current value.
        #[ink(message)]
        pub fn inc(&mut self) {
            self.counter = self.counter.checked_add(2).unwrap();
        }

        /// Adds current value of counter to the `addresses`
        #[ink(message)]
        pub fn append_address_value(&mut self) {
            let caller = self.env().caller();
            self.addresses.insert(caller, &self.counter);
        }
    }
}
```

As you can see, delegatee's code looks like a normal ink! Smart Contract with some important features:
- Storage layout is identical to the original contract's storage
- `addresses` mapping key is identical
- Constructor does not have any logic, as the code is never instantiated. (It can be, but plays no effect on the execution)

### Delegate dependency locks

In a delegator contract pattern, one contract delegates calls to another contract. 
Thus it depends upon the contract code to which it delegates. Since on-chain contract code
can be deleted by anybody if there are no instances of the contract on the chain, this would 
break the `delegator` contract. To prevent this, the `delegator` contract can utilize the 
`lock_delegate_dependency` and `unlock_delegate_dependency` host functions. Calling
`lock_delegate_dependency` will prevent the code at the given hash from being deleted e.g.

```rust
self.env().lock_delegate_dependency(&code_hash);
```

A subsequent call to `unlock_delegate_dependency` from within the `delegator` contract 
instance releases the lock from that contract, allowing that code at the given hash to be 
deleted if no other instances of the contract or delegate dependency locks exist.

```rust
self.env().lock_delegate_dependency(&code_hash);
```

Note that these two methods can be called by anybody executing the contract, so it is the 
responsibility of the contract developer to ensure correct access control.
You can take a look at our [`upgradeable-contracts/delegator`](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts#delegator)
example, which demonstrates the usage of these two functions.

## Note on the usage of wildcard selectors

When working with cross-contract calls, developers are required to be aware of the some important changes.


Since ink! 5 we have restricted the usage of the wildcard selector due to 
[security reasons](https://blog.openzeppelin.com/security-review-ink-cargo-contract#custom-selectors-could-facilitate-proxy-selector-clashing-attacks).

:::danger Beware
Due to [IIP-2](https://github.com/use-ink/ink/issues/1676), ink! only allows
to contain a single message with a well-known selector `@` when the other message
with the wildcard selector `_` is defined.
:::

See [example](https://github.com/use-ink/ink-examples/tree/main/wildcard-selector)
for illustration on how it can be used in practice.

## Note on `CallFlags`

`CallFlags` provide fine-grained control over the cross-contract execution.

Some useful properties:
- Re-entry is disable by default. It can be enabled with `.set_allow_reentry(true)` flag.
- The call execution context is returned to the caller by default. You can finish execution in the callee with `.set_tail_call(true)` flag.
- `.set_clone_input(true)` clones the input of the caller's messages. It can be used with when `.set_tail_call(false)`.
- `.set_forward_input(true)` consumes the input of the caller's message which can be used after.  It can be used with when `.set_tail_call(true)`. 



## Replacing Contract Code with `set_code_hash()`

Following [Substrate's runtime upgradeability](https://docs.substrate.io/maintain/runtime-upgrades/) 
philosophy, ink! also supports an easy way to update your contract code via the special function 
[`set_code_hash()`](https://use-ink.github.io/ink/ink_env/fn.set_code_hash.html).

### Properties

- Updates the contract code using `set_code_hash()`. 
This effectively replaces the code which is executed for the contract address.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the originally instantiated contract.


### Example

Just add the following function to the contract you want to upgrade in the future.

```rust 
/// Modifies the code which is used to execute calls to this contract address (`AccountId`).
///
/// We use this to upgrade the contract logic. We don't do any authorization here, any caller
/// can execute this method. In a production contract you would do some authorization here.
#[ink(message)]
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {
        panic!(
            "Failed to `set_code_hash` to {:?} due to {:?}",
            code_hash, err
        )
    });
    ink::env::debug_println!("Switched code hash to {:?}.", code_hash);
}
```

### Storage Compatibility

It is the developer's responsibility to ensure 
that the new contract's storage is compatible with the storage of the contract that is replaced.

:::danger Beware

You should not change the order in which the contract state variables are declared, nor their type!

Violating the restriction will not prevent a successful compilation,
but will result in **the mix-up of values** or **failure to read the storage correctly**.
This can be a result of severe errors in the application utilizing the contract.

:::


If the storage of your contract looks like this:
```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
    y: bool,
}
```

The procedures listed below will make it ***invalid***

Changing the order of variables:

```rust
#[ink(storage)]
pub struct YourContract {
    y: bool,
    x: u32,
}
```

Removing an existing variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
}
```

Changing the type of a variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u64,
    y: bool,
}
```

Introducing a new variable before any of the existing ones:

```rust
#[ink(storage)]
pub struct YourContract {
    z: Vec<u32>,
    x: u32,
    y: bool,
}
```

### A little note on the determinism of contract addresses

:::note

If your contract utilizes this approach, it no-longer holds a deterministic address assumption.
You can no longer assume that a contract address identifies a specific code hash.
Please refer to [the issue](https://github.com/paritytech/substrate/pull/10690#issuecomment-1025702389) 
for more details.

:::

## Examples

Examples of upgradable contracts can be found in the 
[ink! repository](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts).
````

## File: docs/basics/xcm.md
````markdown
---
title: XCM
slug: /basics/xcm
hide_title: true
---

![Xcm Title Picture](/img/title/xcm.svg)

# Cross-Consensus Message (XCM)

XCM allows for cross-chain communications, enabling ink! smart contract to interact with other chains.
You can learn more about XCM in the [Polkadot Wiki](https://wiki.polkadot.network/docs/learn/xcm).

As of ink! v5.1.0, two new functions, [`xcm_execute`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_execute.html) and [`xcm_send`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_send.html), have been introduced.
These functions enable sending and executing XCM from within ink! contracts.

:::info
In versions of ink! prior to v5.1.0, the [call_runtime](https://docs.rs/ink/5.1.0/ink/struct.EnvAccess.html#method.call_runtime) host function or a custom chain extension can be used to send or execute an XCM from ink! contracts.
:::

## `xcm_execute`

The [`xcm_execute`](https://docs.rs/ink/latest/ink/struct.EnvAccess.html#method.xcm_execute) function executes the XCM locally. It first checks the message to ensure that no barriers or filters will block the execution, and then executes it locally, using the contract's account as the origin.

The following code snippet demonstrates how to use `xcm_execute` to perform a [reserve-backed transfer](https://wiki.polkadot.network/docs/learn/xcm/journey/transfers-reserve#1-initiatereservewithdraw):

```rust
#[ink(message)]
pub fn reserve_transfer(&mut self, value: Balance) -> Result<(), RuntimeError> {
    // The beneficiary of the transfer.
    // Here, the beneficiary is the caller's account on the relay chain.
    let beneficiary: Location = AccountId32 {
        network: None,
        id: *self.env().caller().as_ref(),
    }.into();

    // Create an XCM message.
    let message: Xcm<()> = Xcm::builder_unsafe()

     // Withdraw the relay's native token derivative from the contract's account.
     .withdraw_asset((Parent, amount))

    // The initiate_reserve_withdraw instruction takes the derivative token from the holding register and burns it.
    // It then sends the nested XCM to the reserve in this example, the relay chain.
    // Upon receiving the XCM, the reserve will withdraw the asset from our chain's sovereign account, and deposit on the caller's account.
    .initiate_reserve_withdraw(
        All,
        Parent,
        Xcm::builder_unsafe()
            .buy_execution((Here, fee), Unlimited)
            .deposit_asset(All, beneficiary)
            .build(),
    )
    .build();

    self.env().xcm_execute(&VersionedXcm::V4(message))?;
    Ok(())
}
```

## `xcm_send`

The [`xcm_send`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_send.html) function enables sending XCM to be executed by another chain.
Messages sent originate from the contract's account. Consequently, the receiving chain will process the message using the contract's sovereign account as the origin.

The following example demonstrates how to use `xcm_send`. In this example, we send an XCM to the relay chain.
This XCM will execute using the contract's sovereign account as the origin of the call.
It will then transfer, some `value` from this account to the caller's account.

```rust
#[ink(message)]
pub fn send_funds(&mut self, value: Balance, fee: Balance) -> Result<(), RuntimeError> {
    // The destination of the XCM message. Assuming we run the contract on a parachain, the parent will be the relay chain.
    let destination: Location = Parent.into();

    // the asset to be sent, since we are sending the XCM to the relay chain,
    // this represents `value` amount of the relay chain's native asset.
    let assets: Asset = (Here, value).into();

    // The beneficiary of the asset.
    // Here, the beneficiary is the caller's account on the relay chain.
    let beneficiary: Location = AccountId32 {
        network: None,
        id: *self.env().caller().as_ref(),
    }.into();

    // Create an XCM message
    let message: Xcm<()> = Xcm::builder()

        // Withdraw the asset from the origin (the sovereign account of the contract on the relay chain)
        .withdraw_asset(assets.clone().into())

        // Buy execution to pay the fee on the relay chain
        .buy_execution((Here, fee).into(), WeightLimit::Unlimited)

        // Deposit the asset to the caller's account on the relay chain
        .deposit_asset(assets.into(), beneficiary)
        .build();

    // Send the constructed XCM message to the relay chain, using the xcm_send host function.
    self.env().xcm_send(
        &VersionedLocation::V4(destination),
        &VersionedXcm::V4(message),
    )?;

    Ok(())
}
```
````

## File: docs/brand-assets/cargo-contract.mdx
````
---
title: cargo-contract
slug: /brand-assets/cargo-contract
hide_table_of_contents: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

## `cargo-contract` Logo

The following is the logo for our command-line tool [`cargo-contract`](https://github.com/use-ink/cargo-contract).

<div className="black-container">
    <img src={useBaseUrl('/img/cargo-contract-logo.svg')} alt="cargo-contract logo" className="brand-asset" />
</div>

Download here: [`cargo-contract-logo.svg`](/img/cargo-contract-logo.svg).
````

## File: docs/brand-assets/community-badges.md
````markdown
---
title: Community Badges
slug: /brand-assets/community-badges
hide_table_of_contents: false
---

If you have a public repository with an ink! contract it would be awesome
if you could add one of those!

## Built _with_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)
```

## Built _for_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)
```
````

## File: docs/brand-assets/ink.mdx
````
---
title: ink!
slug: /brand-assets/ink
hide_table_of_contents: false
---

import useBaseUrl from '@docusaurus/useBaseUrl'

Our primary logo is our squid mascot (named "Squink") plus our text logo.

Please use this combined logo preferably.

## Black Version

<div className="white-container">
    <img src={useBaseUrl('/img/ink-logo-with-squid-black.svg')} alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-black.svg`](/img/ink-logo-with-squid-black.svg).

## White Version

<div className="black-container">
    <img src={useBaseUrl('/img/ink-logo-with-squid-white.svg')} alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-white.svg`](/img/ink-logo-with-squid-white.svg).

## Individual Logo Parts

### The ink! mascot: Squink

<div className="black-container">
    <img src={useBaseUrl('/img/ink-squink.svg')} alt="Squink ‒ the ink! mascot" className="brand-asset" />
</div>

Download here: [`ink-squink.svg`](/img/ink-squink.svg).

### Text Logo (black)

<div className="white-container">
    <img src={useBaseUrl('/img/text-black.svg')} alt="ink! logo in black" className="brand-asset" />
</div>

Download here: [`text-black.svg`](/img/text-black.svg).

### Text Logo (white)

<div className="black-container">
    <img src={useBaseUrl('/img/text-white.svg')} alt="ink! logo in white" className="brand-asset" />
</div>

Download here: [`text-white.svg`](/img/text-white.svg).

### Text Logo (glow)

<div className="black-container">
    <img src={useBaseUrl('/img/text-glow.svg')} alt="ink! logo glowing" className="brand-asset" />
</div>

Download here: [`text-glow.svg`](/img/text-glow.svg).
````

## File: docs/brand-assets/stickers.mdx
````
---
title: Stickers
slug: /brand-assets/stickers
hide_table_of_contents: false
---

import useBaseUrl from '@docusaurus/useBaseUrl'

<div>
    <img src={useBaseUrl('/img/stickers/ink-stickers-2022.svg')} alt="ink! Stickers" className="brand-asset-sticker" />
</div>

Download here: [`ink-stickers-2022.svg`](/img/stickers/ink-stickers-2022.svg).
````

## File: docs/datastructures/custom.md
````markdown
---
title: Custom Data Structures
slug: /datastructures/custom-datastructure
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Custom Data Structures

The `ink_storage` crate provides useful utilities and data structures to organize and
manipulate the contract's storage. However, contract authors should know that they can
also create their own custom data structures.

## Using custom types on storage
Any custom type wanting to be compatible with ink! storage must implement the
[`Storable`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/trait.Storable.html)
trait, so it can be SCALE
[`encoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Encode.html)
and
[`decoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Decode.html).
Additionally, the traits
[`StorageLayout`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/trait.StorageLayout.html)
and [`TypeInfo`](https://docs.rs/scale-info/2.3.1/scale_info/trait.TypeInfo.html)
are required as well. But don't worry, usually these traits can just be derived:

```rust
/// A custom type that we can use in our contract storage
#[ink::scale_derive(Encode, Decode, TypeInfo)]
#[cfg_attr(
    feature = "std",
    derive(ink::storage::traits::StorageLayout)
)]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Even better: there is a macro
[`#[ink::storage_item]`](https://docs.rs/ink_macro/5.0.0/ink_macro/attr.storage_item.html),
which derives all necessary traits for you. If there is no need to implement any special
behavior, the above code example can be simplified further as follows:

```rust
/// A custom type that we can use in our contract storage
#[ink::storage_item]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Naturally, you can as well implement any required trait manually. Please directly refer to
the relevant trait documentations for more information.

:::note

The `#[ink::storage_item]` macro is responsible for storage key calculation of 
non-[`Packed`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/trait.Packed.html) 
types. Without it, the key for non-`Packed` fields will be zero. Using this macro is 
necessary if you don't plan to use a
[`ManualKey`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/struct.ManualKey.html) 
on a non-`Packed` type.

Types with custom implementations of the ink! storage traits can still use this macro only 
for key calculation by disabling the derives: `#[ink::storage_item(derive = false)]`.

:::

## Generic storage fields

It is possible to use generic data types in your storage, as long as any generic type
satisfies the required storage trait bounds. In fact, we already witnessed this in the
previous sections about the
[`Mapping`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.Mapping.html).

Let's say you want a mapping where accessing a non-existent key should just return
it's default value, akin to how mappings work in Solidity. Additionally, you want to know
how many values there are in the mapping (its length). This could be implemented as a
thin wrapper around the ink! `Mapping` as follows:

```rust
/// Values for this map need to implement the `Default` trait.
/// Naturally, they also must be compatible with contract storage.
/// Note that the underlying `Mapping` type only supports `Packed` values.
#[ink::storage_item]
pub struct DefaultMap<K, V: Packed + Default> {
    values: Mapping<K, V>,
    length: u32,
}

impl<K: Encode, V: Packed + Default> DefaultMap<K, V> {
    /// Accessing non-existent keys will return the default value.
    pub fn get(&self, key: &K) -> V {
        self.values.get(key).unwrap_or_default()
    }

    /// Inserting into the map increases its length by one.
    pub fn set<I, U>(&mut self, key: I, value: &U)
    where
        I: scale::EncodeLike<K>,
        E: scale::EncodeLike<V> + Storable,
    {
        if self.values.insert(key, value).is_none() {
            self.length += 1
        }
    }

    /// Removing a value from the map decreases its length by one.
    pub fn remove(&mut self, key: &K) {
        if self.values.take(key).is_some() {
            self.length -= 1
        }
    }

    /// Return how many values the mapping contains
    pub fn len(&self) -> u32 {
        self.length
    }
}

/// `DefaultMap` is compatible with contract storage.
#[ink(storage)]
pub struct MyContract {
    my_map: DefaultMap<BlockNumber, Balance>,
}
```

:::caution

Generic data types may substantially increase your contracts overall code size, making it
more costly to store on-chain.

The reason for this is [Rust's monomorphization](https://rustwasm.github.io/twiggy/concepts/generic-functions-and-monomorphization.html).

:::
````

## File: docs/datastructures/mapping.md
````markdown
---
title: Working with Mapping
slug: /datastructures/mapping
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Working with Mapping

In this section we demonstrate how to work with ink! [`Mapping`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.Mapping.html).

Here is an example of a mapping from a user to a `Balance`:

```rust
#[ink(storage)]
pub struct MyContract {
    /// Assign a balance to every account.
    balances: ink::storage::Mapping<AccountId, Balance>,
}
```

This means that for a given key, you can store a unique instance of a value type. In this
case, each "user" gets credited their own balance.

## Example: Using a `Mapping`

The following example contract utilizes a `Mapping` so that anyone can deposit and withdraw
balance for their own account:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod mycontract {
    use ink::storage::Mapping;

    #[ink(storage)]
    pub struct MyContract {
        /// Assign a balance to every account ID
        balances: Mapping<AccountId, Balance>,
    }

    impl MyContract {
        /// Constructor to initialize the contract with an empty mapping.
        #[ink(constructor, payable)]
        pub fn new() -> Self {
            let balances = Mapping::default();
            Self { balances }
        }

        /// Retrieve the balance of the caller.
        #[ink(message)]
        pub fn get_balance(&self) -> Option<Balance> {
            let caller = self.env().caller();
            self.balances.get(caller)
        }

        /// Credit more money to the contract.
        #[ink(message, payable)]
        pub fn transfer(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap_or(0);
            let endowment = self.env().transferred_value();
            self.balances.insert(caller, &(balance + endowment));
        }

        /// Withdraw all your balance from the contract.
        pub fn withdraw(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap();
            self.balances.remove(caller);
            self.env().transfer(caller, balance).unwrap()
        }
    }
}

```

## Considerations when using the `Mapping` type

One of the main purposes of the ink! `Mapping` is to allow storing a lot of values.

:::note

There are many additional data structures accessible under `ink::prelude::collections`,
such as `HashMap` or `BTreeMap` (to name a few). Note that these data structures all exhibit
`Packed` storage loading behavior, as opposed to the ink! `Mapping`!

:::

### Storage loading behavior

Each `Mapping` value lives under it's own storage key. Briefly, this means that `Mapping`s
are lazily loaded in ink!. In other words, if your message only accesses a single key of a
mapping, it will not load the whole mapping but only the value being accessed.

```rust
// This causes only a single storage access and the decoding of a single "MyValue" struct,
// no matter how many elements there are inside the mapping.
let foo: MyValue = my_mapping.get(0)?;

for n in 0..5 {
    // This causes a storage access and a decoding operation for each loop iteration.
    // It is not possible to "fetch" all key/value pairs directly at once.
    let bar: MyValue = my_mapping.get(n)?;
}
```

Furthermore, it follows that mapping values do not have a contiguous storage layout, and it is
not possible to iterate over the contents of a map.

### Use fallible storage methods for dynamically sized values

Reading from or writing to a `Mapping` implies encoding or decoding
the according `Mapping` key and value. This happens transparently under the hood.
However, because the static buffer used to store the encoded data is of limited
size, it can fail and trap the contract.

:::note

The static buffer defaults to 16KB in size.

:::

This can be an issue for values with dynamically sized types.
It is recommended to use fallible storage methods (prefixed with `try_`) for
`Mapping`s containing dynamically sized values.

Consider a `Mapping` with `String` values like so:

```rust
#[ink(storage)]
pub struct MyContract {
    on_chain_log: Mapping<u64, String>,
    nonce: u64,
}
```

If the `String` overgrows the static buffer size, it will no longer fit into the mapping:

```rust
#[ink(message)]
pub fn do_something(&mut self, data: String) {
    let caller = self.env().caller();

    let log_message = format!("{caller:?}: {data}");

    // Panics if log_message overgrows the static buffer size!
    self.on_chain_log.insert(&self.nonce, &log_message);

    self.nonce += 1;
}
```

Instead, consider using the fallible `try_insert` method to handle the situation:

```rust
#[ink(message)]
pub fn do_something2(&mut self, data: String) {
    let caller = self.env().caller();

    let log_message = format!("{caller:?}: {data}");

    // `try_insert` will not panic but return an error instead.
    if self
        .on_chain_log
        .try_insert(&self.nonce, &log_message)
        .is_err()
    {
        // We get the chance to handle this problem properly:
        // Restrain the log message to a size guaranteed to fit.
        let log_message = format!("{caller:?}: <data omitted>");
        self.on_chain_log.insert(&self.nonce, &log_message);
    }

    self.nonce += 1;
}
```

We provide fallible `try_` versions for all storage operations on `Mapping`.

### Updating values

The attentive reader may have noticed that accessing mapping values via the `Mapping::get()`
method will result in an owned value (a local copy), as opposed to a direct reference
into the storage. Changes to this value won't be reflected in the contract's storage
"automatically". To avoid this common pitfall, the value must be inserted again at the same
key after it was modified. The `transfer` function from above example illustrates this:

```rust
pub fn transfer(&mut self) {
    let caller = self.env().caller();
    // `balance` is a local value and not a reference to the value on storage!
    let balance = self.balances.get(caller).unwrap_or(0);
    let endowment = self.env().transferred_value();
    // The following line of code would have no effect to the balance of the
    // caller stored in contract storage:
    //
    // balance += endowment;
    //
    // Instead, we use the `insert` function to write it back like so:
    self.balances.insert(caller, &(balance + endowment));
}
```
````

## File: docs/datastructures/overview.md
````markdown
---
title: Overview
slug: /datastructures/overview
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Overview

The `ink_storage` crate acts as the standard storage library for ink! smart contracts.
At the moment it provides two primitives for interacting with storage,
[`Mapping`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.Mapping.html)
and [`Lazy`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.Lazy.html).

`Mapping` is a mapping of key-value pairs directly to the contract storage. It is very
similar to traditional hash tables and comparable to the `mapping` type Solidity offers.
As a core ingredient to the ink! language, its main advantage is being simple and
lightweight: It favors being efficient in terms of gas costs and code size
over providing a lot of high-level functionality found in other implementations
like the `ink::prelude::collections::HashMap` type.
Overall, the ink! `Mapping` will be a solid choice for most contracts. Moreover, smart
contracts developers can implement advanced features themselves.

`Lazy` is a wrapper type that can be used over any other storage compatible type.
This allows smart contract developers fine-grained manual control over the layout of
the contract storage by assigning a separate storage cell for the field. For example,
it can be used to prevent the contract from eagerly loading large storage fields
during each contract call.
Conceivably, it may be desirable to change certain aspects on how your contract deals with
its storage variables. You can find out more about this in the section about the ink!
[Storage Layout](./storage-layout.mdx).
````

## File: docs/datastructures/storage-in-metadata.md
````markdown
---
title: Storage Metadata Format
slug: /datastructures/storage-in-metadata
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Storage Metadata Format

The storage layout of a contract is reflected inside the metadata. It allows third-party
tooling to work with contract storage and can also help to better understand the storage
layout of any given contract.

Given a contract with the following storage:

```rust
#[ink(storage)]
pub struct MyContract {
    balance: Balance,
    block: BlockNumber,
    lazy: Lazy<bool>,
}
```

The storage will be reflected inside the metadata as like follows:

```json
"root": {
  "layout": {
    "struct": {
      "fields": [
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 0
            }
          },
          "name": "balance"
        },
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 1
            }
          },
          "name": "block"
        },
        {
          "layout": {
            "root": {
              "layout": {
                "leaf": {
                  "key": "0xb1f4904e",
                  "ty": 2
                }
              },
              "root_key": "0xb1f4904e"
            }
          },
          "name": "lazy"
        }
      ],
      "name": "MyContract"
    }
  },
  "root_key": "0x00000000"
}
```

We observe that the storage layout is represented as a tree, where tangible storage values
end up inside a `leaf`. Because of
[`Packed`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/trait.Packed.html)
encoding, leafs can share the same storage key, and
in order to reach them you'd need to fetch and decode the whole storage cell under this key.

A `root_key` is meant to either be used to directly access a `Packed` storage field
or to serve as the base key for calculating the actual keys needed to access values in
non-`Packed` fields (such as `Mapping`s).

## Storage key calculation for ink! `Mapping` values

Base storage keys are always 4 bytes in size. However, the storage API of the contracts
pallet supports keys of arbitrary length. In order to reach a mapping value, the storage
key of said value is calculated at runtime.

The formula to calculate the base storage key `S` used to access a mapping value under the
key `K` for a mapping with base key `B` can be expressed as follows:

```
S = scale::encode(B) + scale::encode(K)
```

Where the base key `B` is the `root_key` (of type `u32`) found in the contract metadata.

In words, SCALE encode the base (root) key of the mapping and concatenate it with the
SCALE encoded key of the mapped value to obtain the actual storage key used to
access the mapped value.

Given the following contract storage, which maps accounts to a balance:

```rust
#[ink(storage)]
pub struct Contract {
    roles: Mapping<AccountId, Balance, ManualKey<0x12345678>>,
}
```

Now let's suppose we are interested in finding the balance for the account 
`5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY`. The storage key is calculated as follows:

1. SCALE encode the base key of the mapping (`0x12345678u32`), resulting in `0x78563412`
2. SCALE encode the `AccountId`, which will be 
   `0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.
   Note that you'll need to convert the SS58 into a `AccountId32` first.
3. Concatenating those two will result in the key 
   `0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.

```rust
let account_id = "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY";
let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
let storage_key = &(0x12345678u32, account).encode();
println!("0x{}", hex::encode(storage_key));
// 0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d
```

## Accessing storage items with the `contractsApi` runtime call API

There are two ways to query for storage fields of smart contracts from outside a contract.
Both methods are accessible via the [`polkadot-js`](https://polkadot.js.org/apps/) web UI.

The straight forward way to query a contracts storage is via a
[`runtime API`](https://polkadot.js.org/apps/#/runtime) call, using the `contractsApi`
endpoint provided by the contracts pallet. The endpoint provides a `getStorage` method,
which just expects a contract address and a storage key as arguments.

For example, to access the root storage struct under the key `0x00000000` of a contract,
just specify the contract's address and the storage key `0x00000000` as-is. The API call
will return the scale-encoded root storage struct of the contract.

## Accessing storage items with the `childState` RPC call API

Under the hood, each contract gets its own
[child trie](https://paritytech.github.io/substrate/master/frame_support/storage/child/index.html), where its storage items are actually stored.

Additionally, the contracts pallet uses the
[`Blake2 128 Concat`](https://paritytech.github.io/substrate/master/frame_support/struct.Blake2_128Concat.html)
[`Transparent hashing algorithm`](https://docs.substrate.io/build/runtime-storage/#transparent-hashing-algorithms)
to calculate storage keys for any stored item inside the child trie.
You'll need to account for that as well.

With that in mind, to directly access storage items of any on-chain contract using a
childState [`RPC call`](https://polkadot.js.org/apps/#/rpc), you'll need the following:
- The child trie ID of the contract, represented as a [`PrefixedStorageKey`](https://docs.rs/sp-storage/10.0.0/sp_storage/struct.PrefixedStorageKey.html)
- The hashed storage key of the storage field

### Finding the contracts child trie ID

The child trie ID is the `Blake2_256` hash of the contracts instantiation nonce
concatenated to it's `AccountId`. You can find it in
[`polkadot-js chainstate query interface`](https://polkadot.js.org/apps/#/chainstate),
where you need to execute the `contracts_contractInfoOf` state query.

It can also be calculate manually according to the following code snippet. The
instantiation note of the contract must be still be known. You can get it using the
`contracts_nonce` chain state query in polkadot-js UI.

```rust
use sp_core::crypto::Ss58Codec;
use parity_scale_codec::Encode;

// Given our contract ID is 5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4
let account: AccountId32 =
    Ss58Codec::from_string("5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4").unwrap();
// Given our instantiation nonce was 1
let nonce: u64 = 1;

// The child trie ID can be calculated as follows:
let trie_id = (&account, nonce).using_encoded(Blake2_256::hash);
```

### Calculate the `PrefixedStorageKey` from the child trie ID
A `PrefixedStorageKey` based on the child trie ID can be constructed using the `ChildInfo`
primitive as follows:

```rust
use sp_core::storage::ChildInfo;
let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
```

### Calculate the storage key using transparent hashing

Finally, we calculate the hashed storage key of the storage item we are wanting to access.
The algorithm is simple: `Blake2_128` hash the storage key and then concatenate the unhashed
key to the hash. Given you want to access the storage item under the `0x00000000`,
it will look like this in code:

```rust
use frame_support::Blake2_128Concat;

// The base key is 0x00000000
let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
```

### A full example

Let's recap the last few paragraphs into a full example. Given:

* A contract at address `5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4`
* With instantiation nonce of `1`
* The root storage struct is to be found at base key `0x00000000`

The following Rust program demonstrates how to calculate the `PrefixedStorageKey` of the
contracts child trie, as well as the hashed key for the storage struct, which can then be
used with the `chilstate` RPC endpoint function `getStorage` in polkadot-js to receive
the root storage struct of the contract:

```rust
use frame_support::{sp_runtime::AccountId32, Blake2_128Concat, Blake2_256, StorageHasher};
use parity_scale_codec::Encode;
use sp_core::{crypto::Ss58Codec, storage::ChildInfo};
use std::ops::Deref;

fn main() {
    // Find the child storage trie ID
    let account_id = "5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4";
    let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
    let instantiation_nonce = 1u64;
    let trie_id = (account, instantiation_nonce).using_encoded(Blake2_256::hash);
    assert_eq!(
        hex::encode(trie_id),
        "2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b"
    );

    // Calculate the PrefixedStorageKey based on the trie ID
    let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
    println!("0x{}", hex::encode(prefixed_storage_key.deref()));
    // 0x3a6368696c645f73746f726167653a64656661756c743a2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b

    // Calculate the storage key using transparent hashing
    let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
    println!("0x{}", hex::encode(&storage_key));
    // 0x11d2df4e979aa105cf552e9544ebd2b500000000
}
```
````

## File: docs/datastructures/storage-layout.mdx
````
---
title: Storage Layout
slug: /datastructures/storage-layout
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Storage Title Picture](/img/title/storage.svg)

# Storage Layout

Smart contract authors are given some flexibility in regards on how they want to organize
the storage layout of their contracts.
Let's dive deeper into the concepts behind ink! storage to get a better understanding
of some of its implications and limitations.

## Storage Organization

The following schema depicts the storage which is exposed
to ink! by the contracts pallet:

<div class="schema">
    <img src={useBaseUrl('/img/kv.svg')} alt="Storage Organization: Layout" />
</div>

Storage data is always encoded with the
[`SCALE`](https://docs.substrate.io/reference/scale-codec/) codec.
The storage API operates by storing and loading entries into and from a single storage
cells, where each storage cell is accessed under its own dedicated storage key. To some
extent, the storage API works similar to a traditional key-value database.

## Packed vs Non-Packed layout

Types that can be stored entirely under a single storage cell are considered
[`Packed`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/trait.Packed.html).
By default, ink! tries to store all storage struct fields under a single storage cell.
Consequentially, with a `Packed` storage layout, any message interacting with the contract
storage will always need to operate on the entire contract storage struct.

For example, if we have a somewhat small contract storage struct consisting of only a few
tiny fields, pulling everything from the storage inside every message is not
problematic. It may even be advantageous - especially if we expect most messages to
interact with most of the storage fields.

On the other hand, this can get problematic if we're storing a large `ink::prelude::vec::Vec`
in the contract storage but provide messages that do not need to read and write from this
`Vec`. In that scenario, each and every contract message bears runtime overhead by dealing
with that `Vec`, regardless whether they access it or not. This results in extra gas costs.
To solve this problem we need to turn our storage into a non-packed layout somehow.

:::caution

If any type exhibiting `Packed` layout gets large enough (an ever-growing `Vec` might be
a prime candidate for this), it will break your contract.
This is because for encoding and decoding storage items, there is a buffer with only limited
capacity (around 16KB in the default configuration) available. This means any contract
trying to decode more than that will trap! If you are unsure about the potential size a
data structure might get, consider using an ink! `Mapping`, which can store an arbitrary
number of elements, instead.

:::

## Eager Loading vs. Lazy Loading
ink! provides means of breaking the storage up into smaller pieces, which can be loaded
on demand, with the
[`Lazy`](https://use-ink.github.io/ink/ink/storage/struct.Lazy.html) primitive.
Wrapping any storage field inside a `Lazy` struct makes the storage
struct in which that field appears also
non-`Packed`, preventing it from being eagerly loaded during arbitrary storage operations:

<div class="schema">
    <img src={useBaseUrl('/img/storage-layout.svg')} alt="Storage Organization: Layout with a Lazy field" />
</div>

Note that in above illustration, the key of `0x12345678` just serves as an example; we'll
learn more about storage key calculation
[later in this chapter](#manual-vs-automatic-key-generation).

The following example demonstrates how we can solve the problem introduced in the above
section. You'll notice that for the lazily loaded storage field, we now work with getters
and setters to access and modify the underlying storage value:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod mycontract {
    use ink::prelude::vec::Vec;
    use ink::storage::Lazy;

    #[derive(Default)]
    #[ink(storage)]
    pub struct MyContract {
        tiny_value: Balance,
        /// This vector might get large and expensive to work with.
        /// We want to enforce a non-`Packed` storage layout.
        large_vec: Lazy<Vec<Balance>>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self::default()
        }

        /// Because `large_vec` is loaded lazily, this message is always cheap.
        #[ink(message)]
        pub fn get_balance(&self) -> Balance {
            self.tiny_value
        }

        /// Lazy fields like `large_vec` provide `get()` and `set()` storage operators.
        #[ink(message)]
        pub fn add_balance(&mut self, value: Balance) {
            let mut balances = self.large_vec.get_or_default();
            balances.push(value);
            self.large_vec.set(&balances);
        }
    }
}
```

:::caution

`ink::prelude::vec::Vec`'s are always loaded in their entirety. This is because all elements
of the `ink::prelude::vec::Vec` live under a single storage key. Wrapping the
`ink::prelude::vec::Vec` inside `Lazy`, like the
provided example above does, has no influence on its inner layout. If you are dealing with
large or sparse arrays on contract storage, consider using a `Mapping` instead.

:::

## Manual vs. Automatic Key Generation

By default, keys are calculated automatically for you, thanks to the
[`AutoKey`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/struct.AutoKey.html)
primitive. They'll be generated at compile time and ruled out for conflicts.
However, for non-`Packed` types like `Lazy` or the `Mapping`, the
[`ManualKey`](https://docs.rs/ink_storage_traits/5.0.0/ink_storage_traits/struct.ManualKey.html)
primitive allows manual control over the storage key of a field like so:

```rust
#[ink(storage)]
pub struct MyContract {
    /// The storage key for this field is always `0x0000007f`
    inner: Lazy<bool, ManualKey<127>>,
}
```

This may be advantageous: Your storage key will always stay the same, regardless of
the version of your contract or ink! itself (note that the key calculation algorithm may
change with future ink! versions).

:::tip

Using `ManualKey` instead of `AutoKey` might be especially desirable for upgradable
contracts, as using `AutoKey` might result in a different storage key for the same field
in a newer version of the contract. This may break your contract after an upgrade 😱!

:::

The storage key of the contracts root storage struct defaults to `0x00000000`.  However,
contract developers can set the key to an arbitrary 4 bytes value by providing it a
`ManualKey` like so:

```rust
/// Manually set the root storage key of `MyContract` to be `0xcafebabe`.
#[ink(storage)]
pub struct MyContract<KEY: StorageKey = ManualKey<0xcafebabe>> {
    value: bool,
}
```

## Considerations

It might be worthwhile to think about the desired storage layout of your contract. While
using a `Packed` layout will keep your contracts overall code size smaller, it can cause
unnecessarily high gas costs. Thus, we consider it a good practice to break up large
or complex storage layouts into reasonably sized distinct storage cells.

:::note

ink! `Mapping`s are always non-`Packed` and loaded lazily, one key-value pair at the time.

:::
````

## File: docs/datastructures/storagevec.md
````markdown
---
title: Working with StorageVec
slug: /datastructures/storagevec
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Working with `StorageVec`

In this section we demonstrate how to work with ink!'s
[`StorageVec`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.StorageVec.html).

## Example: Using a `StorageVec`

Here is an example of an append-only on-chain log:

```rust
#[ink(storage)]
pub struct MyContract {
    on_chain_log: ink::storage::StorageVec<String>,
}
```

The following example contract utilizes a `StorageVec` to log each operation on chain (similar to emitting events but the contract can access them).

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    use ink::prelude::{format, string::String};
    use ink::storage::StorageVec;

    #[ink(storage)]
    pub struct MyContract {
        on_chain_log: StorageVec<String>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                on_chain_log: Default::default(),
            }
        }

        /// Donate money to the contract.
        #[ink(message, payable)]
        pub fn donate(&mut self) {
            let caller = self.env().caller();
            let endowment = self.env().transferred_value();

            let log_message = format!("{caller:?} donated {endowment}");

            self.on_chain_log.push(&log_message);
        }

        /// How many donations had the contract so far?
        #[ink(message)]
        pub fn log_length(&self) -> u32 {
            self.on_chain_log.len()
        }

        /// What was the last donation to the contract?
        #[ink(message)]
        pub fn last_donation(&self) -> Option<String> {
            self.on_chain_log.peek()
        }
    }
}

```

## Difference between `StorageVec` and Rusts `Vec` type

Any Rust `Vec<T>` will exhibit `Packed` storage layout; where
`StorageVec` stores each value under it's own storage key.

Hence, any read or write from or to a `Vec` on storage will load
or store _all_ of its elements.

This can be undesirable:
The cost of reading or writing a _single_ element grows linearly
corresponding to the number of elements in the vector (its length).
Additionally, the maximum capacity of the _whole_ vector is limited by
the size of [ink!'s static buffer](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
used during ABI encoding and decoding (default 16 KiB).

`StorageVec` on the other hand allows to access each element individually.
Thus, it can theoretically grow to infinite size.
However, we currently limit the length at 2 ^ 32 elements. In practice,
even if the vector elements are single bytes, it'll allow to store
more than 4 GB data in blockchain storage.

### Caveats

Iterators are not provided. `StorageVec` is expected to be used to
store a lot elements, where iterating through the elements would be
rather inefficient. Manually iterating over the elements using a loop
is possible but considered an anti-pattern for most cases.

For the same reason, operations which would require re-ordering
stored elements are not supported. Examples include inserting and
deleting elements at arbitrary positions or sorting elements.

The decision whether to use `Vec<T>` or `StorageVec` can be seen as an
optimization problem with several factors:
* How large you expect the vector to grow
* The size of individual elements being stored
* How frequently reads, writes and iterations happen

For example, if a vector is expected to stay small but is frequently
iterated over. Choosing a `Vec<T>` instead of `StorageVec` will be
preferred as individual storage reads are much more expensive as
opposed to retrieving and decoding the whole collection with a single
storage read.

### Storage Layout

At given `StorageKey` `K`, the length of the `StorageVec` is hold.
Each element `E` is then stored under a combination of the `StorageVec`
key `K` and the elements index.

Given `StorageVec` under key `K`, the storage key `E` of the `N`th
element is calculated as follows:

`E = scale::Encode((K, N))`

## Considerations when using the `StorageVec` type

`StorageVec` is a `Lazy` type similar to `Mapping`.

Hence, the same considerations apply to `StorageVec` too:
- [Storage loading behavior](../datastructures/mapping.md#storage-loading-behavior)
- [Use fallible storage methods for dynamically sized values](../datastructures/mapping.md#use-fallible-storage-methods-for-dynamically-sized-values)
- [Updating values](../datastructures/mapping.md#updating-values)

## Rust Docs

See here for the Rust documentation of this data structure:
[`StorageVec`](https://docs.rs/ink_storage/5.0.0/ink_storage/struct.StorageVec.html).
````

## File: docs/examples/contracts.mdx
````
---
title: Smart Contract Examples
slug: /examples/smart-contracts
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Frontend Title Picture](/img/title/frontend.svg)

# Smart Contract Examples

We have a repository <a href="https://github.com/use-ink/ink-examples/tree/main">`ink-examples`</a>,
in which you find a number of contracts written in ink!.
Some of the most interesting ones:

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src={useBaseUrl('/img/icons/flipper.svg')} width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src={useBaseUrl('/img/icons/erc20.svg')} width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src={useBaseUrl('/img/icons/nft.svg')} width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br/>

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src={useBaseUrl('/img/icons/upgradable.svg')} width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src={useBaseUrl('/img/icons/multisig.svg')} width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src={useBaseUrl('/img/icons/rand-extension.svg')} width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>

<br/>

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator"><img src={useBaseUrl('/img/icons/delegator.svg')} width="100" /></a>
        <p>
            Cross-contract calls.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/trait-erc20"><img src={useBaseUrl('/img/icons/trait-erc20.svg')} width="100" /></a>
        <p>
            Implements an <code>Erc20</code> trait.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/trait-erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/dns"><img src={useBaseUrl('/img/icons/dns.svg')} width="100" /></a>
        <p>
            Simple <code>DomainNameService</code>.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/dns">» view example</a>
        </p>
    </div>
</div>

<br/>

If not noted otherwise in the readme, to build a single example navigate to the root of
the example and run:

```bash
cargo contract build
```

As a result you'll get a file `target/<example-name>.wasm` file, a `<example-name>.json` file
and a `<example-name>.contract` file in the `target/` folder of your contract.
The `.contract` file combines the Wasm and metadata into one file and needs to be used
when deploying the contract.

For further information, please have a look at the
[Deploy your Contract](../getting-started/deploying.md) section.
````

## File: docs/examples/dapps.md
````markdown
---
title: dApps
slug: /examples/dapps
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# dApps

We'll point to a couple full-stack dApp examples here.
These can serve as inspiration for how to create a frontend for your
smart contract.

Three popular libraries for building frontends are:

- [`@polkadot/api`](https://github.com/polkadot-js/api): a general purpose low-level TypeScript API for substrate.

- [`@polkadot/api-contract`](https://polkadot.js.org/docs/api-contract): a `pallet-contract` specific TypeScript API.

- [useInkathon](https://github.com/scio-labs/use-inkathon): a React hooks library for interacting with Wasm contracts and Substrate.

## INK!athon

[INK!athon](https://inkathon.xyz/) is a full-stack dApp boilerplate project consisting
of an ink! smart contract and a React frontend using the
[useInkathon](https://github.com/scio-labs/use-inkathon) hooks library.

## link!

link! is a URL shortener dApp. It consists of a frontend and an ink! contract.

link! uses [`polkadot-js/api`](https://github.com/polkadot-js/api) under the hood.
The entire source code (contract + frontend) is located here:
[https://github.com/use-ink/link](https://github.com/use-ink/link).

You can view an online demo of the dApp here: [https://tiny.ink](https://tiny.ink).

To create new short links you need `ROC` tokens from our testnet.
See [here](../testing/overview.md) for how to get those.
````

## File: docs/faq/faq.mdx
````
---
title: Frequently Asked Questions
hide: true
slug: /faq
hide_table_of_contents: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Faq Title Picture](/img/title/faq.svg)

# Frequently Asked Questions

### Who is "Squink"?

<img src={useBaseUrl('/img/ink-squink.svg')} alt="Squink ‒ the ink! mascot" className="squid" />
This little cute purple squid is Squink.<br/><br/>

Squink is the mascot of ink! and guides new users and adventurers through our presentations
workshops and tutorials. It also has a romance with Rust's mascot, Ferris.

Generally it is very friendly and open to learning new Rustaceans but be aware to never upset
it by taking away dots from the word ink! by spelling it incorrectly!
It really is into dots. Stories tell that it demanded the spelling of ink! with as many dots as possible.

<h3 id="correct-spelling">Is it "ink" or "ink!"? What does the "!" stand for?</h3>

The correct spelling is _ink!_ ‒ with a lowercase "i" and an exclamation mark at the end.
The history here is that:

* …in the very first iteration ink! was originally a [declarative Rust macro](https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming). A contract was invoked by writing `ink!{ … }`.
* …there is a real-world analogy here of writing a paper contract using ink.
* …we wanted to have as many DOTs as possible in the name 😉.
* …the symmetry of the top and bottom dot of i and ! is aesthetically pleasing 🌻.

So please don't make poor Squink cry having to read !ink, ink, Ink!, or Ink.

<center>
<img src={useBaseUrl('/img/sad-squid.svg')} alt="Squink ‒ the ink! mascot" width="300" />
</center>

### What's ink!'s relationship to Substrate/Polkadot?

- Substrate is a modular framework to build decentralized applications on top of blockchain technology.
- Polkadot is a layer-0 blockchain built using Substrate that allows to orchestrate an entire
fleet of other blockchains to join forces and communicate with each other.
- Blockchains built with Substrate can include the so-called `pallet-contracts` module in order to
allow instantiating and executing smart contracts.

ink! was built to allow users to write smart contracts in Rust targeting blockchains built by
Substrate that have the aforementioned `pallet-contracts` included.

While ink! is currently the most advanced smart contract language targeting Substrate blockchains it is
not the only possible choice for users. There is also a Solidity to Wasm compiler called Solang that also
allows to target Substrate chains and there are other languages in plan and discovery phase for the same
purpose.

On the Substrate side the same is true for the `pallet-contracts`. It is just a module that defines
the basic set of features required for executing smart contracts on the blockchain that includes it.
However, it is not necessarily the only solution to do exactly that. There is also the `evm-pallet`
to run smart contracts targeting the EVM as well as the experimental `actors-pallet` that allows to
execute smart contracts written in the actor style programming model.
Over time the Substrate community might come up with yet other pallets for smart contracts execution.

Please see our page [How it Works – Substrate](../intro/how-it-works.md) for more information.

### How to call other smart contracts on the same blockchain?

See the [Cross-contract calling](../basics/cross-contract-calling.md) section.

### How to call other smart contracts on another parachain?

This feature has not yet been implemented by the Substrate side.

### What is a contract's ABI or Metadata?

In ink! a smart contract's metadata is retrieved by using the `cargo-contract` CLI tool and
invoking `cargo contract build` which outputs a `.contract` file that includes both the compiled
`.wasm` of the ink! smart contract as well as the so-called metadata information of the same
smart contract.
The metadata is especially important for third party tools such as Polkadot JS Apps or the Contracts UI
and provides useful information about the contract's constructors, messages, events, function selectors,
documentation and comments of the aforementioned structures as well as how inputs and outputs shall
be encoded and decoded respectively etc.

### Can a re-entrancy bug occur in ink! contracts?

Yes. However, the Substrate team is well aware of the associated problems and already through about
possible future additions to eliminate re-entrancy attacks.

### How can my smart contract interact with the runtime?

See the [Chain Extensions](../macros-attributes/chain-extension.md) section for more information.

### How can I use ink! with a Substrate chain with a custom chain config?

Please see [this section](../macros-attributes/contract.md#env-impl-environment) in our documentation.

Detailed documentation is found in [the Rust docs](https://docs.rs/ink_macro/5.0.0/ink_macro/attr.contract.html#header-arguments)
for the `#[ink(contract)]` macro. It allows you to specify your environment a la
`#[ink::contract(env = MyEnvironment)]`.

### What does the `#![cfg_attr(not(feature = "std"), no_std)]` at the beginning of each contract mean?

The `#[cfg(..)]` or `#[cfg_attr(..)]` annotations are how Rust does conditional compilation.

ink! smart contracts can be compiled in two different modes.

Through `#![cfg_attr(not(feature = "std"), no_std)]` an ink! smart contract tells the Rust compiler
in which mode they are being compiled. This also plays a significant role in how ink! generates
the smart contract code.

The two modes are as follows:

1. Wasm mode: This is the mode chosen when compiling an ink! smart contract for deployment on a blockchain.
   The resulting binary is a `.wasm` file and as such it is not possible to use certain parts of Rust's standard
   library.
2. Off-chain mode: This is the mode chosen when trying to test an ink! smart contract using the off-chain
   environment. Off-chain environment testing is very useful to check if certain ink! constructors or messages
   are well behaving and allow for better debuggability than when trying to debug the same smart contract deployed
   on a chain.

### Overflow Safety?

Being written in Rust, ink! can provide compile-time overflow/underflow safety. Using a Rust compiler configuration, you can specify whether you want to support overflowing math, or if you want contract execution to panic when overflows occur. No need to continually import "Safe Math" libraries, although Rust also provides [integrated checked, wrapped, and saturated math functions](https://doc.rust-lang.org/std/primitive.u32.html).

:::note
There are some known issues regarding functionality of compiler level overflow checks and the resulting size of the Wasm blob. This feature may change or be iterated on in the future.
:::

### What is the difference between memory and storage?

In ink!, memory refers to computer memory, while storage refers to the on-chain storage
used by a contract instance. Memory is temporary and only lasts until the contract
execution is done, while storage is persistent and lasts over many contract executions.
The contract storage is built on top of the runtime storage, and access is considered to be slow.

### How do I print something to the console from the runtime?

Please see our page on [Contract Debugging](../testing/debugging.md).

### Why is Rust's standard library (stdlib) not available in ink!?

Rust's standard library consists of three different layers:

1. `core` library which defines everything that has no dependencies outside of Rust itself.
   Included are types such as `Option`, `Result` as well as a whole variety of modules,
   functions and macro.

   ink! smart contracts allow authors to use Rust's `core` crate.

2. `alloc` library which is depending on a global allocator and mainly defines collections
   that spill their elements on to the execution's heap memory.
   Examples for collections are `Box`, `String`, `Vec`, `HashMap`, `LinkedList` and modules
   such as `fmt`, `rc` (ref-counted pointers) or borrows.

   ink! smart contracts allow authors to use Rust's `alloc` crate.
   By default ink! authors use definitions from the `alloc` crate through `ink::prelude` crate.

3. `std` library is what people generally call Rust's standard library.

   > The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem.

   It requires several operating system capabilities in order to work correctly such as input and
   output systems for files, networking etc.

   Since the Wasm (a.k.a. `wasm32-unknown-unknown`) compilation target does not support Rust's
   standard library ink! authors cannot use it either for their own purposes. Instead the `pallet-contracts`
   tries to provide some common functionality that would otherwise be missing for common smart contract
   operations.

### How do I hash a value?

A number of crypto hashes are built into the [pallet-contracts](../intro/how-it-works.md) and
therefore very efficient to use. We currently support a handful of those, you
can view the complete list [here](https://docs.rs/ink_env/5.0.0/ink_env/hash/trait.CryptoHash.html).

If you have the urgent need for another crypto hash you could introduce it through
[Chain Extensions](../macros-attributes/chain-extension.md)
or make a proposal to include it into the default set of the `pallet-contracts`.

Using one of the built-in crypto hashes can be done as explained here:
* [`self.env().hash_bytes()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.hash_bytes.html)
* [`self.env().hash_encoded()`](https://docs.rs/ink_env/5.0.0/ink_env/fn.hash_encoded.html)

### Why is it not possible to use floating point data types in ink!? How do I implement returning a decimal number?

Floats are cool for all kinds of reasons, but they also have one important
drawback. Floating point arithmetic is non-deterministic which means that
different processors compute (slightly) different results for the same
operation. Although there is an IEEE spec, non-determinism can come from specific
libraries used, or even hardware. In order for the nodes in a blockchain network
to reach agreement on the state of the chain, all operations must be completely
deterministic. Hence we don't allow floating point data types in ink!.

Consequently it's not possible to return a decimal number from an ink! message.
What you should do instead is to have your user interface denominate the returned
number to decimals.

Note, that it's typical for blockchains to have the number of available tokens
defined as a non-floating number and determine the denomination in the user
interface. For example, 1 Bitcoin is equivalent to the smallest unit of 100,000,000
Satoshi and all Bitcoin implementations internally persist account balances in
Satoshi, not as a decimal number of Bitcoin.

### Why can't I just use the standard Rust data collections in ink!?

You can use them! They are exposed via the `ink_prelude` crate (e.g. `ink::prelude::vec::Vec`)
and you can return them from ink! messages and also persist them to storage.

_However, the Rust stdlib collections are not optimized for smart contract usage!_ So for example,
if you use them to persist your data on the chain they will always occupy a single storage cell
and thus always be loaded eagerly, in their entirety. This can be very costly! Just think about
a `Vec` or a `HashMap` where the smart contract might only need access to a few elements, rather
than the entire data collection.

### Why am I getting a `ContractTrapped` error when interacting with a contract?

When it does not constitute a deliberate assertion, like for example a permission check,
it is most likely a bug in your contract or in ink!.

A common source of `ContractTrapped` are Integer overflows, those can cause
your contract to trap as well.
There is a [known bug in the Rust compiler](https://github.com/rust-lang/rust/issues/78744)
with respect to safe math operations. As a workaround for this particular bug
try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations altogether, but unfortunately we are currently
not aware of a better workaround until the bug in the compiler is fixed.

If you don't find the issue you can also ask for help in our public
[Element](https://riot.im/app/#/room/#ink:matrix.parity.io) or
[Discord](https://discord.gg/j2DKRRbSJr) channel.


### What are the `Encode`, `Decode` and `TypeInfo` arguments in `#[ink::scale_derive(Encode, Decode, TypeInfo)]` ?

Substrate-based blockchains use the [SCALE codec](https://github.com/paritytech/parity-scale-codec)
to encode data.
As a consequence the data for every interaction with Substrate needs to
be SCALE-encodable ‒ i.e. it needs to implement either `scale::Encode`,
`scale::Decode`, or both. This affects e.g. data you want to return to a caller,
data that you want to take as input, or data you want to store on-chain.

ink! re-exports these traits and provides a useful macro `#[ink::scale_derive(Encode, Decode, TypeInfo)]` that allows to derive them
in a concise way.

A common error you might get when a necessary SCALE trait is not implemented
for a data structure could be along the lines of `the trait "WrapperTypeEncode"
is not implemented for "Foo"`.
For example, you might encounter this error if you try to store a custom data
structure in the contract's storage. Or e.g. when attempting to return
a custom error from an ink! message.

:::note
The error `the trait "WrapperTypeEncode" is not implemented for …` is also
a common error when a mismatching version of `parity-scale-codec` is used
in the contract opposed to the version used by ink!.
:::

The solution typically is to add a fitting implementation of the trait
for your data structure:

* `Encode` is used for encoding a data structure when it is e.g. returned
to a caller or when it is persisted to the contracts storage.

* `Decode` is used for the inverse, e.g. when reading from storage or
taking an input from a user (or another contract).

* `TypeInfo` is used to encode the information about the type that is
often used for the generation of metadata.

It's possible to derive those traits and oftentimes the simplest way
is to just derive the missing trait for the object for which its implementation
is missing using the ink! macro:

```rust
#[ink::scale_derive(Encode, Decode)]
struct MyCustomDataStructure { … }
```

### How do I use `String` in my contract?

In general, you should think twice if you really need `String`.
Smart contracts usually don't use strings; those are typically
used for user interactions and should live in your UI and not on the chain.

Minimizing storage usage of your contract is a best practice
and you should only persist items which you need to derive state transitions
in your contract.

If you still, for some reason, need to use `String`, then you should use
the `String` [from the ink! prelude](https://docs.rs/ink_prelude/5.0.0/ink_prelude/string/struct.String.html).

<h3 id="type-comparison">Getting a warning in <code>cargo-contract</code> about type compatibility?</h3>

ink! and Substrate both support the possibility of deciding to deviate
from the default types for `Balance`, `BlockNumber`, etc.
These types are called environment types.

If a chain decides on custom environment types, contract authors need
to specify these types that deviate from the ink! default environment in their
contracts. Otherwise, undefined behavior can occur when uploading a contract
with deviating types to a chain.

Custom environment types can be specified in ink! via the `#[contract(env = MyCustomEnvironment)]`
attribute. You can read more are about this [here](../macros-attributes/contract.md#env-impl-environment).

When using `cargo-contract` to interact with a chain you might get a warning along those lines:

```
Warning: This chain does not yet support checking for compatibility of your contract types.
```

This warning appears when the chain that you are targeting (via the `--url` cli flag)
does not contain a version of `pallet-contracts` that does support type comparison.
Type comparison is a feature that we introduced, it means we check that the environmental
types of your contract are equivalent to the environmental types of the chain that you are
targeting.
It's a safety feature to make sure that you are not accidentally deploying a contract with
e.g. `type Balance = u128` to a chain with a different `Balance` type.

The `cargo-contract` warning means this check for compatible types cannot be performed.
This check is only available on chains from `polkadot-1.2.0` on, specifically from
[this commit](https://github.com/paritytech/polkadot-sdk/commit/d8a74901462ffb49345af6db7c5a7a6e2b3c92ed).

If a chain indeed requires that contract developers have to use custom environment types,
this should be communicated prominently by them.
````

## File: docs/faq/migrating-from-ink-3-to-4.md
````markdown
---
title: Migrating from ink! 3.x to 4.0
slug: /faq/migrating-from-ink-3-to-4
---

![Migration 3.x To 4.0 Title Picture](/img/title/migration-3.x-to-4.0.svg)

We've made a couple of breaking changes from ink! 3.x to ink! 4.0.
On this page we outline how you can migrate existing clients and
contracts from 3.x to 4.0.

:::caution
This migration guide is only for your code base!

If you have an existing contract on-chain you cannot just
upgrade the code on-chain ‒ you also have to migrate your data,
since the way ink! 4.0 stores data and reads it (i.e. the storage
layout) changes from ink! 3.x to 4.0.
:::

## Compatibility

ink! 4.0 is compatible with:

- Stable Rust >= 1.63.0
- `scale` >=3
- `scale-info` >= 2.3
- `pallet-contracts` >= `polkadot-v0.9.37`
- `substrate-contracts-node` >= `v0.24.0`
- `polkadot-js/api` and `polkadot-js/api-contract` >= 9.10.2

## `cargo-contract` 2.0

Together with ink! 4.0 we've released `cargo-contract` 2.0.
You have to use this latest version of `cargo-contract` for ink! 4.0
contracts.
You can upgrade via:

```rust
cargo install cargo-contract --force --version 2
```

Make sure that e.g. your CI also uses `cargo-contract` 2 with ink! 4.
If you have wrapper scripts around `cargo-contract` you should
ensure that this version is enforced, otherwise users will get an error.

:::note
`cargo-contract` no longer requires `binaryen` or `wasm-opt` as an
external dependency. We required those because of `wasm-opt` tool
(which is part of `binaryen`). Fortunately we were able to find a way of
installing `wasm-opt` now as part of the `cargo-contract` installation
process.
:::

## Rust `stable` instead of `nightly`

ink! 4.0 and `cargo-contract` use `stable` Rust now.
This means no more `cargo +nightly contract` is required, you
can just use a stable Rust toolchain now (>= Rust 1.63).

## New entrance `ink` crate

The `ink_lang` crate has been replaced in [#1223](https://github.com/use-ink/ink/pull/1223)
by a new top level `ink` crate. All existing sub-crates are reexported and should be used via
the new `ink` crate, so e.g. `ink::env` instead of `ink_env`. Contract authors should now import
the top level `ink` crate instead of the individual crates.

### Migration

- In `Cargo.toml` Replace all individual `ink_*` crate dependencies with the `ink` crate.
- In the contract source:
  - Remove the commonly used `use ink_lang as ink` idiom.
  - Replace all usages of individual crates with reexports, e.g. `ink_env` ➜ `ink::env`.

## Storage API + Layout

With [#1331](https://github.com/use-ink/ink/pull/1331) the way `ink!` reads and writes
to a contract's storage changed. Storage keys are generated at compile-time, and user facing
abstractions which determine how contract data is laid out in storage are different now.

### Migration

- Initialize `Mapping` fields with `Mapping::default()` instead of `ink_lang::utils::initialize_contract` in
  constructors. See [`erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) and other examples which use a `Mapping`.
- `SpreadAllocate`, `SpreadLayout`, `PackedLayout`, `PackedAllocate` have been removed.

## Removal of `wee-alloc` support

ink! uses a bump allocator by default, additionally we supported another allocator
(`wee-alloc`) through a feature flag. `wee-alloc` is no longer maintained and
we removed support for it in [#1403](https://github.com/use-ink/ink/pull/1403).

## Removal of `eth_compatibility` crate

As part of [#1233](https://github.com/use-ink/ink/pull/1233)
the `eth_compatibility` crate was removed. The `ecdsa_to_eth_address()`
function from it can now be found [in the `ink_env` crate](https://docs.rs/ink_env/4.0.0/ink_env/fn.ecdsa_to_eth_address.html).

```rust
ink_env::ecdsa_to_eth_address(&pub_key, &mut output);
```

## `ink_storage::Mapping`

The function signature of `Mapping::insert(key, val)` changed to
`Mapping::insert(key, val) -> Option<u32>`.
The return value is the size of the pre-existing value at the specified key if any (in bytes).

Two new useful functions were added:

- [`Mapping::contains(key)`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.contains)
  in [#1224](https://github.com/use-ink/ink/pull/1224).
- [`Mapping::take()`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.take)
  to get a value while removing it from storage in [#1461](https://github.com/use-ink/ink/pull/1461).

In case you were working around those two functions you can now
use them directly; they are more gas-efficient than e.g. executing
a `get(key).is_none()` instead of `contains(key)`.

## Storage functions in `ink_env`

As part of [#1224](https://github.com/use-ink/ink/pull/1224) the return type
of [`ink_env::set_contract_storage()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.set_contract_storage.html)
was changed to return an `Option<u32>` instead of `()`.

A new function [`ink_env::take_contract_storage`](https://docs.rs/ink_env/4.0.0/ink_env/fn.take_contract_storage.html)
was introduced.

## Removal of `ink_env::random` function

We had to remove the [`ink_env::random`](https://docs.rs/ink_env/3.3.1/ink_env/fn.random.html)
function (in [#1442](https://github.com/use-ink/ink/pull/1442)).
This function allowed contract developers getting random entropy.
There is unfortunately no way how this can be done safely enough
with built-in Substrate primitives on-chain currently. We're
following the recommendation of our auditors to remove it.

The alternative right now is to provide random entropy off-chain to
the contract, to use a random entropy oracle, or to have a chain-extension
that does this, in case the chain has a possibility to do so.

We hope to bring this function back in a future release of ink!, the
best hope right now is that it could come back with
[Sassafras](https://wiki.polkadot.network/docs/learn-consensus#badass-babe-sassafras),
a block production protocol for future versions of Polkadot.

If you're interested in more information on this check out
[the Substrate PR](https://github.com/paritytech/substrate/pull/13204) which
deprecated the random interface of `pallet-contracts`.

## Constructors can now return `Result<Self, MyContractError>`

With [#1446](https://github.com/use-ink/ink/pull/1446) we introduced
the possibility for constructors to return either `Self` (as usual) or
`Result<Self, MyContractError>`.

This enables contract developers to bubble up encoded error objects to
clients/frontends about a failure. In ink! 3.x it was only possible to
panic in the constructor in case an error occurred, resulting in loss
of this information.

## Chain extension's `returns_result` removed

The `returns_result` flag has been removed from the `#[ink(extension = …)]` attribute in
[#1569](https://github.com/use-ink/ink/pull/1569).
We now infer this information at compile time. If `handle_status` is set to `true`,
the return type will still be wrapped into `Result` as before.

## Contract Metadata (ABI)

The most detailed way to grasp what changed is to look at
[this PR](https://github.com/use-ink/ink-docs/pull/138), which
updated the metadata page in our documentation.

### Add support for language level errors (`LangError`)

Under the hood, ink! now generates code that results in each message
and constructor returning a `Result<Message::Output, LangError>` (or
for constructors `Result<Constructor::Output, LangError>`).
This happens even if the message/constructor doesn't have a return type,
we default to the unit type `()` in that case.

A [`LangError`](https://docs.rs/ink/4.0.0/ink/enum.LangError.html)
is a type of error which doesn't originate from the contract itself,
nor from the underlying execution environment (so the Contracts pallet
in this case).

An example of where this would arise is if a caller tries to use a non-existent message
selector for a contract. Previously, the contract would trap and not allow the caller to
do any sort of error handling if it encountered a non-existent selector.

This change doesn't affect how you write a contract! It affects clients and
frontends though, since it breaks the API in two ways:

first, all contract messages now have a `Result` return type, and second a new field,
`lang_error`, will be introduced as part of the contract spec. The second change allows
other languages (such as Solang) to use an equivalent `LangError`.

<details>
  <summary>
    Click here for a snippet of the new metadata for the Flipper contract.
  </summary>
<p>

```json
"messages": [
  {
    "args": [],
    "docs": [
      " Flips the current value of the Flipper's boolean."
    ],
    "label": "flip",
    "mutates": true,
    "payable": false,
    "returnType": {
      "displayName": [
        "ink",
        "MessageResult"
      ],
      "type": 1
    },
    "selector": "0x633aa551"
  }],
"lang_error": {
  "displayName": [
    "ink",
    "LangError"
  ],
  "type": 3
},
{
  "id": 3,
  "type": {
    "def": {
      "variant": {
        "variants": [
          {
            "index": 1,
            "name": "CouldNotReadInput"
          }
        ]
      }
    },
    "path": [
      "ink_primitives",
      "LangError"
    ]
  }
}

```

</p>
</details>

### Version field

As part of [#1313](https://github.com/use-ink/ink/pull/1313) the ink! ABI was
changed to have a proper version field as part of the ink! metadata object.
This enables querying the ABI version in a less-ambiguous way.

Before:

```json
"source": {...},
"contract": {...},
"V3": {
  "spec": {...},
  "storage": {...},
  "types": {...}
}

```

After:

```json
{
  "source": {...},
  "contract": {...},
  "spec": {...},
  "storage": {...},
  "types": [...],
  "version": "4"
}
```

### The Storage Layout (`storage`)

The storage layout under the `storage` key changed for v4. If you have an application
that is using it consider reading the updated documentation:

- [General storage documentation](../../versioned_docs/version-v4/datastructures/overview.md)
- [Storage metadata format](../../versioned_docs/version-v4/datastructures/storage-in-metadata.md)

## Removal of `AccountId` `Default` implementation

In [#1255](https://github.com/use-ink/ink/pull/1255) we removed the `Default` trait
implementation on `AccountId`s.

The `Default` implementation of `AccountId` returned the zero-address, which is
problematic since the
[zero-address in the `sr25519` and `ed25519` curves has a known private key](https://substrate.stackexchange.com/questions/982/why-does-the-all-0-public-key-have-a-known-private-key-in-sr25519-and-ed25519).

Developers commonly reach for defaults, and the zero-address in particular, making it an
unsafe trait implementation to have given the consequences.

Imagine a developer sending tokens to the zero-address to be burned, only to find that
they've been stolen because the private key is known.

If you were previously using `AccountId`'s `Default` implementation in your code you
have a couple of different options for how to move forward. These will depend on what
exactly you were using the zero-address for.

If you were using it as a burn address:

- You can pick another address to use, assuming that you've actually picked a random
  address
- Consider a solution that involves reducing total issuance, instead of transferring
  tokens to a random address

If you were using it as a privileged account:

- Change the account
- Add checks to ensure that calls coming from the zero-address are rejected

You should also now consider dealing with `AccountId`'s as `Option<AccountId>`'s. This is
more idiomatic Rust, and also conveys the meaning of a "null" or "empty" address much
better.

## Updates to the `CallBuilder` and `CreateBuilder` APIs

There's been several changes to the
[`CallBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html)
and
[`CreateBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html)
APIs.

In [#1604](https://github.com/use-ink/ink/pull/1604) we renamed the
`CallBuilder::fire()` method to
[`CallBuilder::invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.invoke-2).
This brings more consistency across our APIs which were already using the `invoke`
terminology.

In [#1512](https://github.com/use-ink/ink/pull/1512) and [#1525](https://github.com/use-ink/ink/pull/1525)
we added support for handing
`LangError`s from the `CreateBuilder` and `CallBuilder`, respectively.

If you want to handle errors from either `Builder` you can use the new
[`CreateBuilder::try_instantiate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate)
or
[`CallBuilder::try_invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-1)
methods.

Because of the addition of those methods we also removed any error handling from the
non-`try_` methods in [#1602](https://github.com/use-ink/ink/pull/1602). This means
that the `CallBuilder::invoke()` and `CreateBuilder::instantiate()` methods return values
directly, and panic when they encounter an error.

Lastly, in [#1636](https://github.com/use-ink/ink/pull/1636) we added two methods to
the `CallBuilder` to streamline
[`Call`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.Call.html)
and
[`DelegateCall`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.DelegateCall.html)
workflows:

- For `Call` you can use
  [`CallBuilder::call()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.call) (this replaces `CallBuilder::callee()`)
- For `DelegateCall` you can use [`CallBuilder::delegate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.delegate)

## Removal of `[lib.crate-type]` and `[lib.name]` from contract manifest

Earlier versions of `cargo-contract` required that these two fields were specified in the
contract manifest explicitly, as follows:

```toml
[lib]
name = "flipper"
path = "lib.rs"
crate-type = [
    # Used for normal contract Wasm blobs.
    "cdylib",
    # Use to generate ABI
    "rlib",
]
```

However, with [cargo-contract#929](https://github.com/use-ink/cargo-contract/pull/929) we changed this behavior to:

- Use the contract name by default, removing the need for the `name` field
- Compile contracts as `rlib`s by default, and automatically changing to `cdylib` as
  needed

This means that your new manifest should look like:

```toml
[lib]
path = "lib.rs"
```
````

## File: docs/faq/migrating-from-ink-4-to-5.mdx
````
---
title: Migrating from ink! 4.x to 5.0
slug: /faq/migrating-from-ink-4-to-5
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Migration 4.x To 5.0 Title Picture](/img/title/migration-4.x-to-5.0.svg)

We've made a couple of breaking changes from ink! 4.x to ink! 5.0.
On this page we outline how you can migrate existing dApps and
contracts from 4.x to 5.0.

This release addresses the majority of issues raised in [the OpenZeppelin
security review](https://blog.openzeppelin.com/security-review-ink-cargo-contract).
In particular, we addressed the proxy selector clashing attack.

You can find the full changelog of the 5.0 release [here](https://github.com/use-ink/ink/blob/master/CHANGELOG.md#version-500).

:::caution
This migration guide only considers your code base! Not your storage data!

If you have an existing contract on-chain you might not be able to just
upgrade the code on-chain, you possibly also have to migrate your storage data.

The relevant change that you have to take into consideration is
[#1897](https://github.com/use-ink/ink/pull/1897).
A data migration may be required when your contract reads data from storage and truncates
the data when decoding it.
We've described this in more detail below, in the section
["Fail when decoding from storage and not all bytes consumed"](#fail-when-decoding-from-storage-and-not-all-bytes-consumed).
:::

## How to upgrade

* Change the dependency versions of `ink` and `ink_e2e` in your contracts `Cargo.toml` to `5`.
* Update your local `cargo-contract` installation to 4.0.
* Read through this page.

## Compatibility

### Substrate/Polkadot SDK

There are four new functions that are only compatible from particular releases upwards:
* v2 of `call` and `instantiate`: `>= polkadot-v1.8.0` and `substrate-contracts-node >= v0.39.0`
([explained here](#call-and-instantiate-v2)).
* `lock_delegate_dependency` and `unlock_delegate_dependency`:
`>= polkadot-v1.9.0` and `substrate-contracts-node >= v0.40.0` ([explained here](#upgradeable-contracts-delegate_dependency)).

These four functions are all opt-in! None of them are required to use ink! 5.0, they are only
required if you want to access the particular functionality they provide.
Please see the linked explainers for more details about them.

If you are not using any of those four functions, the same requirements as for ink! 4.0 holds:

* `pallet-contracts` >= `polkadot-v0.9.37`.
* `substrate-contracts-node` >= `v0.24.0`

### How do I find out if a chain is compatible with ink! 5?

You can query `contracts::palletVersion()` via the chain state RPCs. It has to
be `>= 9` for ink! 5.0 to be compatible, if you don't use any of the four functions
mentioned above.
For the above mentioned four functions please see the respective sections on this page,
there we explain how to find out if a chain supports them there.

You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » `contracts` » `palletVersion()` » Click on the `+` on the right.

<img src={useBaseUrl('/img/pallet-version.png')}  />


The following chains are in production and support ink! 5.0, if you are not using any of the
four functions mentioned above:

<div className="row">
    <div className="col text--center">
        <a href="https://alephzero.org">
            <img src= {useBaseUrl('/img/chains/aleph-zero.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://astar.network">
            <img src= {useBaseUrl('/img/chains/astar.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://shiden.astar.network">
            <img src= {useBaseUrl('/img/chains/shiden.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="http://phala.network">
            <img src= {useBaseUrl('/img/chains/phala.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org">
            <img src= {useBaseUrl('/img/chains/pendulum.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org/amplitude">
            <img src= {useBaseUrl('/img/chains/amplitude.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.ternoa.network/">
            <img src= {useBaseUrl('/img/chains/ternoa.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://krest.peaq.network/">
            <img src= {useBaseUrl('/img/chains/krest.svg')} className="chain" />
        </a>
    </div>
</div>

### `cargo-contract` 4.0

Together with ink! 5.0 we've released `cargo-contract` 4.0.

:::info
You have to use `cargo-contract` >= 4.0 for ink! 5.0 contracts!

You can upgrade via:

```rust
cargo install cargo-contract --version ^4
```
:::

Make sure that e.g. your CI also uses at least `cargo-contract` 4.0 with ink! v5.0.
If you have wrapper scripts around `cargo-contract`, you should
ensure that this version is enforced, otherwise users will get an error.

### Tooling & Libraries

* Stable Rust >= 1.75
* `cargo-contract` >= v4.0
* `polkadot-js/api` and `polkadot-js/api-contract` >= 10.12.1
* [`use-inkathon`](https://github.com/scio-labs/use-inkathon): upgrade the `polkadot-js/api` and `polkadot-js/api-contract` dependencies in your project to >= 10.12.1
* [ink!athon](https://inkathon.xyz/) >= 0.7.0
* [`typechain-polkadot`](https://github.com/Brushfam/typechain-polkadot) >= 1.2.0

## Important Changes

We had to introduce a number of changes that require you to manually upgrade
your contract from 4.x to 5.0. The steps to do this are explained in this section.

### `scale` dependencies were moved to `ink` entrance crate

This change was done to ensure that you always use the correct scale dependency versions
with an ink! version. The relevant PR is [#1890](https://github.com/use-ink/ink/pull/1890).

We removed the requirement for contracts to have direct dependencies on `parity-scale-codec`
and `scale-info` in their `Cargo.toml`.
You can now remove those dependencies from your contracts `Cargo.toml`:

```diff
ink = { version = "4.3", default-features = false }
-scale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }
-scale-info = { version = "2.6", default-features = false, features = ["derive"], optional = true }
```

Both crates have been re-exported from the `ink` umbrella crate: `ink::scale_info` and `ink::scale`.

We created a convenience macro to derive the re-exported traits `ink::scale::Encode`,
`ink::scale::Decode` and `ink::scale_info::TypeInfo`.

```rust
// Previously
#[scale::Encode, scale::Decode)]
#[cfg_attr(feature = "std", derive(::scale_info::TypeInfo))]
pub enum Error {}


// Now
#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Error {}
```

The documentation of the macro can be found [here](https://docs.rs/ink/5.0.0/ink/attr.scale_derive.html).

### Wildcard selectors: only one other message is allowed in the contract besides the wildcard selector

Following [our security review by OpenZeppelin](https://blog.openzeppelin.com/security-review-ink-cargo-contract),
we've tightened the usage of wildcard selectors.
With ink! 5.0 we allow only exactly one other contract message with a well-known reserved
selector to be defined. In ink! 4.x, more than one other message was allowed.

Read more in [the PR](https://github.com/use-ink/ink/pull/1708) and [IIP-2: Limit contracts with a wildcard selector to one other message](https://github.com/use-ink/ink/issues/1676).

The proposal is to restrict contracts with a wildcard selector to only have one other message
with a reserved/well-known selector. This guarantees that there are no selector clashes,
either by chance or malicious intent, and that the Proxy will only handle messages intended for it.

If a contract uses a wildcard selector `#[ink(message, payable, selector = _)]` it _MAY_ define one
other message. This message _MUST_ use the reserved selector `@`.
This selector _MUST_ only be used in conjunction with a wildcard selector.

```rust
/// Handles any message with no matching selector in this proxy contract
#[ink(message, selector = _)]
pub fn fallback(&self) {
    // forward call to the "logic" contract which actually executes the call
}

#[ink::scale_derive(Decode)]
pub enum ProxyMessage {
    UpgradeContract(Hash),
}

/// One other message allowed to handle messages.
/// Fails to compile unless `@` is used as the selector.
#[ink(message, selector = @)]
pub fn handler(&self, msg: ProxyMessage) {
  match msg {
    ProxyMessage(hash) => { }
  }
}

/// An additional message. Fails to compile when uncommented.
// #[ink(message)]
// pub fn additional_message(&self, msg: ProxyMessage) {
//    match msg {
//        ProxyMessage(hash) => ...
//    }
// }
```

### Events 2.0

In prior ink! versions, events were defined inside the `#[ink::contract]` macro.
With ink! 5.0 we decouple events from the `#[ink::contract]` macro,
allowing events to be shared between contracts.
We've updated [the Events documentation page](../basics/events.md) accordingly.

The syntax of defining events within the main `#[ink::contract]` macro will continue to work,
no code changes in existing contracts are required to update to the new syntax.

:::caution
The topic calculation changed in general, so also for events that are declared inside the
`#[ink::contract]` macro!

This is a breaking change for any client code which uses topics to filter events.

Please see [#1827](https://github.com/use-ink/ink/pull/1827) for details.
:::

#### Custom signature topics

In [#2031](https://github.com/use-ink/ink/pull/2031) we introduced an
optional attribute `signature_topic` to the `#[ink::event]` and `#[ink(event)]` macros.
It can be used to specify the signature topic for a specific event manually, instead of the
automatic topic calculation.

### No more unchecked arithmetic

Unchecked arithmetic operations in a contract are no longer supported for arithmetic
safety reasons. Compiling a contract that contains those will fail gracefully.

If you haven't already done, you now need to handle overflows that could occur.
Rust supports different possibilities of doing so (saturating, "wrap around",
and unchecked arithmetic operations) .
See [this](https://doc.rust-lang.org/book/ch03-02-data-types.html#scalar-types) section
of the Rust Programming Language for a thorough explanation on how to do safe arithmetic
operations in Rust.

This change was introduced in [#1831](https://github.com/use-ink/ink/pull/1831).

### Fail when decoding from storage and not all bytes consumed

If a contract previously relied on successful decoding which does not consume all bytes,
then recompiling with a version of ink! which includes this change will cause that contract
to trap at runtime when attempting to decode.

A simple example would be if a storage cell contains some bytes which were in the first place
an encoded `u32`. If the contract attempts to decode those into a `u8`
this would previously have succeeded, now the contract would trap.

Here's a code example of behavior that previously worked for ink! 4.x, but
would error now:

```rust
let key = 0u32;
let value = [0x42; 32];
ink::env::set_contract_storage(&key, &value);

// Only attempt to read the first byte (the `u8`) of the storage value data
let _loaded_value: Option<u8> = ink::env::get_contract_storage(&key)
    .map_err(|e| format!("get_contract_storage failed: {:?}", e))?;
```

We introduced this change in [#1897](https://github.com/use-ink/ink/pull/1897).

### [ink_e2e] API Changes

#### Builder API

In [#1917](https://github.com/use-ink/ink/pull/1917) we reworked the E2E API with
a builder API.
`instantiate`, `call` and `upload` will now return a builder instance. You can
specify optional arguments with builder methods, and submit the call for on-chain
execution with the `.submit()` method, or dry-run it with `dry_run()`.

```rust
let contract = client
    .instantiate("flipper", &ink_e2e::alice(), &mut constructor)
    .submit()
    .await
    .expect("instantiate failed");
let mut call_builder = contract.call_builder::<Flipper>();

let get = call_builder.get();
let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await;
assert!(matches!(get_res.return_value(), false));
```

#### Extra gas margin

As part of [#1917](https://github.com/use-ink/ink/pull/1917) we added the possibility
to specify a gas margin (in percentage) as part of the on-chain call.

There are cases when gas estimates may not necessarily be accurate enough due to the complexity
of the smart contract logic that adds additional overhead and gas consumption.
Therefore, it is helpful to allow to specify an extra portion of the gas to be added to the
limit (i.e. 5%, 10%).

The method `.extra_gas_portion(margin: u64)` method is part of the builder API:

* [`ink_e2e::InstantiateBuilder::extra_gas_portion`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/struct.InstantiateBuilder.html#method.extra_gas_portion)
* [`ink_e2e::CallBuilder::extra_gas_portion`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/struct.CallBuilder.html#method.extra_gas_portion)

#### Improved `call()` API

We removed the `build_message()` function with its unhandy callback.

```rust
// Previously
let first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)
    .call(|contract| contract.insert_balance(1_000));

// Now
let first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)
    .call().insert_balance(1_000));
```

See [#1782](https://github.com/use-ink/ink/pull/1782) for more details.

#### Removed `additional_contracts` parameter

`additional_contracts` parameter which is part of `#[ink_e2e:test]` has been removed in [#2098](https://github.com/use-ink/ink/pull/2098).
This information is now implied from the contract's manifest.
Simply, add the other contract as dependency with the `ink-as-a-dependency` feature enabled.
The test will detect the contract and build it as part of the test.

####
In [#2076](https://github.com/use-ink/ink/pull/2076), we've added a new
[`remove_code`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/trait.ContractsBackend.html#method.remove_code)
function to the E2E API:

```rust
let contract = client
    .remove_code(&ink_e2e::alice(), code_hash)
    // Submit the call for on-chain execution.
    .submit()
    .await
    .expect("remove failed");
```

### New Data Structure: `StorageVec`

We've added a `Vec`-like data structure, built on top of Mapping.

This allows to retrieve elements from a vector and grow it without
having to load and push all elements.
For `Vec`, the cost of reading or writing a single element grows linearly corresponding
to the number of elements in the vector (its length). Additionally, the maximum capacity
of the whole vector is limited by the size of [ink!'s static buffer](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
used during ABI encoding and decoding (default 16 KiB).
`StorageVec` on the other hand allows to access each element individually.

With a `Vec` it's possible to e.g. introduce a security issue in your contract
where an attacker can fill the `Vec`, making it very costly for other users to
access it or write to it.

You can find verbatim documentation on `StorageVec` [here](../datastructures/storagevec.md).
The page explains when to use `StorageVec` and when not.
The Rust docs can be found [here](https://docs.rs/ink/5.0.0/ink/storage/struct.StorageVec.html).

### Fallible methods for `Lazy`, `Mapping`, `StorageVec`

In [#1910](https://github.com/use-ink/ink/pull/1910) we added `try_*` methods for
reading and writing `Lazy` and `Mapping` values to and from storage.
The try methods correspond to `Mapping::{insert, get, take}`, `Lazy::{set, get}`.
For `StorageVec::{peek, get, set, pop, push}` we added `try_*` methods in
[#1995](https://github.com/use-ink/ink/pull/1995).

Please see the individual Rust docs for these new methods:

* [`StorageVec`](https://docs.rs/ink/5.0.0/ink/storage/struct.StorageVec.html)
* [`Lazy`](https://docs.rs/ink/5.0.0/ink/storage/struct.Lazy.html)
* [`Mapping`](https://docs.rs/ink/5.0.0/ink/storage/struct.Mapping.html). For `Mapping`, the encoded size of the key is also accounted for.

You should use the `try_*` methods for dynamically sized values, unless you made sure
otherwise they will fit into the static buffer. The [static buffer in ink!](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
is 16 kB by default.

We added a lint to `cargo-contract` 4.0 that will detect
potentially unsafe uses of methods for which there are safer alternatives:
[`non_fallible_api`](../linter/rules/non_fallible_api.md).

### Chain Extension API changed + Support for multiple chain extensions

With [#1958](https://github.com/use-ink/ink/pull/1958) we added support for interacting with
multiple chain extensions from ink!. This is a breaking change.

You can now e.g. have a contract that utilizes a PSP22 chain extension together with one
for random numbers.

The syntax for chain extension functions changed slightly:

```diff
-#[ink(extension = 0xfecb)]
+#[ink(function = 0xfecb)]
fn foo() {}
```

The argument type changed from `u32` to `u16`:

```diff
-/// `#[ink(extension = N: u32)]`
-Extension,
+/// `#[ink(function = N: u16)]`
+Function,
```

The top level macro `#[ink::chain_extension]` now _requires_ an `(extension = N: u16)` argument to support multiple chain extensions.
If you are using only one extension, the ID can be any `u16` number,
otherwise please consult the [`#[ink::chain_extension]` macro documentation](../macros-attributes/chain-extension.md)
```diff
-#[ink::chain_extension]
+#[ink::chain_extension(extension = 1)]
```

:::note
If the chain extension was not used in a tuple in the runtime configuration,
`extension = N: u16` can take any `u16` number.
:::

A migration in most cases should just be to rename `#[ink(extension = …)]` to
`#[ink(function = …)]`, and specifying `extension` argument in top level macro.

We added an example contract that illustrates the usage of multiple chain extensions
in one contract:
[`combined-extension`](https://github.com/use-ink/ink-examples/tree/main/combined-extension).

### `call` and `instantiate` v2

The functions to instantiate and call other contracts got an upgrade in the
`polkadot-v1.8.0` release (in the [`d250a6`](https://github.com/paritytech/polkadot-sdk/commit/d250a6e4270a77f28e2737a4faa3fb78c8ea7a85) commit),
The new v2 of them allows passing both `Weight` parts (`ref_time_limit` and `proof_size_limit`),
as well as the `storage_deposit_limit`.

The previous v1 `call` and `instantiate` functions only provided a single `gas_limit` parameter,
which was used as the value for `ref_time_limit`.
You can still use these `v1` versions.
For `call` on a call builder obtained through
[`build_call`](https://docs.rs/ink_env/5.0.0/ink_env/call/fn.build_call.html):

```
call_builder
  .call_v1()
  .gas_limit(ref_time_limit)
  .invoke();
```

For `instantiate` on [`build_create`](https://docs.rs/ink_env/5.0.0/ink_env/call/fn.build_create.html):

The new `v2` parameters can be set like so:

```rust
call_builder // or `create_builder`
  .ref_time_limit(ref_time_limit)
  .proof_size_limit(proof_size_limit)
  .storage_deposit_limit(storage_deposit_limit)
  .invoke();
```

You can find out if a chain supports the new `v2` functions for call/instantiate by
querying the `contracts::apiVersion` constant. It has to be `1`.
You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » Constants » `contracts` » `apiVersion` » Click on the `+` on the right.

<img src={useBaseUrl('/img/api-version-1.png')}  />

At the time of the ink! v5 release (March 2024) no parachain with ink! support
had upgraded to `polkadot-v1.8.0` yet.

Please note that if you are using trait definitions for cross-contract calls,
direct calls from the `contract_ref!` macro are only supported with the `call_v2`.
Otherwise, you need to get the `CallBuilder` from the structure
and build the call manually.

```rust
type Erc20Wrapper = contract_ref!(Erc20);
let erc20: Erc20Wrapper = new_erc20.into();
let erc20_builder = erc20.call();
erc20_builder.total_supply().call_v1().invoke()
```

### Metadata Changes

#### Events 2.0

See [#1827](https://github.com/use-ink/ink/pull/1827) for the full details.
Two fields werere added to the objects in the `events` array:
`module_path` and `signature_topic`.

Previously the order of the events in the `events` array was significant (i.e. the first
one had an implied index of `0`), and this index could be used to determine which event
to decode.
Now that is replaced by the `signature_topic`, and the order of the events in the metadata
no longer has any significance.

See the section "[Events 2.0](#events-20)" on this page for more info.

ink! 4.0:
```json
   "events": [
      {
        "args": [ ... ],
        "docs": [ ... ],
        "label": "Transfer"
      },
      ...
  ]
```

ink! 5.0:
```diff
    "events": [
      {
        "args": [ ... ],
        "docs": [ ... ],
        "label": "...",
+       "module_path": "erc20::erc20",
+       "signature_topic": "0xb5b61a3e6a21a16be4f044b517c28ac692492f73c5bfd3f60178ad98c767f4cb"
      },
      ...
  ]
```

#### New field: `staticBufferSize`

With [#1880](https://github.com/use-ink/ink/pull/1880) we added a `"staticBufferSize"` field to
the metadata file. The unit is bytes.

See the section "[Buffer size can be customized](#buffer-size-can-be-customized)" on this page for
more info.

Example:
```diff
      "maxEventTopics": 4,
+     "staticBufferSize": 16384,
      "timestamp": { ... }
```

#### Metadata storage keys encoding change

Storage keys used to access storage data are SCALE encoded. Previously,
the contract metadata used big endian encoding to represent storage keys.
With the ink! 5.0 release, these encoding formats have been aligned,
and SCALE encoding (little endian) is now used for the metadata storage keys.
This is a breaking change, and client tools that use the storage keys from contract
metadata will need to adapt accordingly.

Please see: [#2048](https://github.com/use-ink/ink/pull/2048) for details.

Example:
```diff
    "storage": {
        "root": {
        "layout": {
            "struct": {
            "fields": [
                {
                "layout": {
                    "leaf": {
-                   "key": "0x00000159",
+                   "key": "0x59010000",
                    "ty": 0
                    }
                },
                "name": "value"
                }
            ],
            "name": "Flipper"
            }
        },
-       "root_key": "0x00000159",
+       "root_key": "0x59010000",
        "ty": 1
        }
    },
```

## Interesting New Features

### End-To-End testing with a chain snapshot

With ink! 5.0 we introduce the possibility of running your tests against the
fork (i.e. snapshot) of a live chain.

See [this page](../testing/testing-with-live-state.md) in our documentation for details.

### New lints

The new lints are:
* [`no_main`](../linter/rules/no_main.md): enforces `no_main` for  contracts.
* [`primitive_topic`](../linter/rules/primitive_topic.md): no number types are allowed as event topics.
* [`storage_never_freed`](../linter/rules/storage_never_freed.md): what is written into storage can be removed again.
* [`strict_balance_equality`](../linter/rules/strict_balance_equality.md): detects usage of strict balance equality checks, a common smart contract vulnerability.
* [`non_fallible_api`](../linter/rules/non_fallible_api.md): detects the usage of potentially unsafe methods for which there are safer alternatives.

With `cargo-contract` 4.0 we added a couple new lints for common smart contract issues
and best practices.
You can run the linter via `cargo contract build --lint`.

Details on each lint can be found [here](../linter/overview.md).

### New `cargo-contract` commands

We added a bunch of helpful new commands to `cargo-contract` 4.0.
For all these commands you can also supply the `--help` cli flag to get more
info (e.g. `cargo contract storage --help`).

* `cargo contract verify`: contract verification ([#1404](https://github.com/use-ink/cargo-contract/pull/1404), [#1306](https://github.com/use-ink/cargo-contract/pull/1306))
* `cargo contract info` now outputs the language of the deployed contract, using a heuristic ([#1329](https://github.com/use-ink/cargo-contract/pull/1329))
* `cargo contract info --binary`: outputs the on-chain Wasm of the contract ([#1311](https://github.com/use-ink/cargo-contract/pull/1311/))
* `cargo contract info --all`: displays all addresses of deployed contracts on a particular chain ([#1319](https://github.com/use-ink/cargo-contract/pull/1319))
* `cargo contract storage`: displays the storage of an on-chain contract ([#1395](https://github.com/use-ink/cargo-contract/pull/1395), [#1414](https://github.com/use-ink/cargo-contract/pull/1414))

<img src={useBaseUrl('/img/cargo-contract-storage.png')}  /><br/>
<img src={useBaseUrl('/img/cargo-contract-info.png')}  />

### Alternative off-chain E2E testing backend support: DRink!

DRink! is a toolbox for ink! developers that allows for testing your contracts
without any running node.

It has a number of features that are pretty great:

- deploy and call your contracts synchronously, _without any delays_ related to block production or networking.
- enhanced debugging and call tracing.
- supports _arbitrary runtime_ configurations, including custom chain extensions and runtime calls.
- full control over runtime state, including block number, timestamp, etc.

See the [DRink!](https://github.com/inkdevhub/drink) page for more details.

### Contract Verification

We added a bunch of helpful documentation and `cargo-contract` commands for
contract verification. [Read more here](../basics/verification/contract-verification.md).

### We improved the contract example illustrating upgradeable contracts via `delegate_call`

See [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts)
for the contract example.

### Upgradeable Contracts: `delegate_dependency`

We've added support for two new host functions:

- `lock_delegate_dependency`: prevents the code at the given code hash from being removed.
- `unlock_delegate_dependency`: releases the lock on preventing the code from being removed
from the current contract.

Having a delegate dependency allows contracts to safely delegate to another `code_hash` with
the guarantee that it cannot be deleted.

We've updated the [`upgradeable-contracts/delegator`](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts#delegator)
example to demonstrate these new calls.
For that purpose we've also added a [`remove_code`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/trait.ContractsBackend.html#method.remove_code)
function to the E2E API.

These two functions are only available from `polkadot-1.8.0` on.
You can find out if a chain supports these new functions by
querying the `contracts::apiVersion` constant. It has to be `2`.
You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » Constants » `contracts` » `apiVersion` » Click on the `+` on the right.

<img src={useBaseUrl('/img/api-version-2.png')}  />

At the time of the ink! v5 release (March 2024) no parachain with ink! support
had upgraded to `polkadot-v1.8.0` yet.

### We made `set_code_hash` generic

The `self.env().set_code_hash()` method now accepts the `Hash` environment type instead
of a concrete `[u8; 32]`.

```rust
// Previously
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {});
}

// Now
pub fn set_code(&mut self, code_hash: Hash) {
    self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {});
}
```

More details in [#1906](https://github.com/use-ink/ink/pull/1906).

### Buffer size can be customized

With [#1869](https://github.com/use-ink/ink/pull/1869) we added a possibility
of setting a custom static buffer size for ink! to use.

ink! uses a static buffer for interacting with pallet-contracts, i.e. to move data
between `pallet-contracts` and a smart contract. The advantage of a static buffer
is that no gas-expensive heap allocations are necessary, all allocations are done
using simple pointer arithmetic.

The default static buffer size is 16 kB, which is enough for on-chain smart
contracts. However, the [Phala Network](https://phala.network/) parachain on Polkadot
allows the deployment of ink! contracts off-chain. Hence, for their chain certain high
computation contracts might require a larger buffer size.

### Stabilized `call_runtime`

We stabilized `call_runtime` in [#1749](https://github.com/use-ink/ink/pull/1749).
It can be used to call a runtime dispatchable from an ink! contract.

You can find a contract example and a comparison with chain extensions
[here](https://github.com/use-ink/ink-examples/tree/main/call-runtime).
We've added an example of how to end-to-end test
`call_runtime` [here](https://github.com/use-ink/ink-examples/tree/main/e2e-call-runtime).
````

## File: docs/funding-programs/overview.md
````markdown
---
title: Overview
hide_title: true
slug: /funding-programs
---

![Funding Programs Title Picture](/img/title/funding-programs.svg)

# Funding Programs

You want to develop a public good for the ink! ecosystem and are
looking for funding? On this page we list some pointers of where you can look.

## ink!ubator

ink!ubator is an initiative funded by the Polkadot Treasury's Bounty Program. It is designed to
kickstart the ink! ecosystem on Polkadot, Kusama, and other Substrate chains.

You can learn more [here](/inkubator).

## Ecosystem Development Funds

Nearly all chains that support ink! have some sort of ecosystem development program.
We've listed [chains that support ink! here](../intro/where-to-deploy.mdx).

## Treasuries

A number of chains that support ink! have a treasury. In the case of Polkadot the
treasury in on-chain with a governance process. Here, the community decides on
where to best allocate funds.

The [Polkadot](https://polkadot.polkassembly.io/) and [Kusama](https://kusama.polkassembly.io/)
treasuries are examples. A number of ink! related proposals have been funded by both treasuries.
````

## File: docs/getting-started/calling.md
````markdown
---
title: Call Your Contract
slug: /getting-started/calling-your-contract
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Call Your Contract

Now that your contract has been fully deployed, we can start interacting with it! Flipper only has
two functions: `flip()` and `get()`. We will show you what it's like to play with both of them.

## RPC calls vs. Transactions

There are two ways of calling a contract:

### Dry-run via RPC

Remote procedure calls, or RPC methods, are a way for an external program – for example, a browser
or front-end application – to communicate with a Substrate node. 
For example, you might use an RPC method to read a stored value, submit a transaction, or request
information about the chain a node is connected to.

If a user interface displays the value of a contract (e.g. the balance of an account in
an ERC-20 contract), then this is typically done via RPC. Specifically it is done by
executing a synchronous dry-run of the contract method and returning its result.
The following schema depicts this.

![Contract dry-run via RPC](/img/rpc.svg)

RPC calls don't require any tokens, they just require a connection to a node in the 
network. It's important to note that the execution won't result in any state mutations
on the blockchain, it really just is a dry-run.

### State mutating via submitting a Transaction 

The other method of executing a call to a contract is by submitting a transaction
on-chain. This requires tokens of the network to pay for the cost of the transaction.
The transaction will be put in a transaction pool and asynchronously processed.
The important implication here is that during submission of the transaction no result
is available. This is different from an RPC call.

The typical pattern for how a client can recognize the result of the contract call is
to have the contract emit an event and have the client actively listen for such an
event. Typically libraries (like `polkadot-js/api`) provide API functions to do just that.
The important take-away is that contract developers have to make sure that events
are emitted if they want clients to be able to pick up on them.

![Contract execution via transaction](/img/events.svg)

## Using the Contracts UI

### 1. `get()` function

We set the initial value of the Flipper contract
`value` to `false` when we instantiated the contract. Let's check that this is the case.

In the **Message to Send** section, select the "**get(): bool**" message and accept the default
values for the other options.

Press **"Read"** and confirm that it returns the value `false`:

![An image of Flipper RPC call with false](/img/flipper-false.png)

### 2. `flip()` function

So let's make the value turn `true` now!

The alternative message to send with the UI is `flip()`. Again, accept the default values for the other options and click **Call contract**

![An image of a Flipper transaction](/img/send-as-transaction.png)

If the transaction was successful, we should then be able to go back to the `get()` function and see our updated storage:

![An image of Flipper RPC call with true](/img/flipper-true.png)

## Using `cargo-contract`

Calling a contract can also be done via the command-line! 

### 1. `get()` function

```bash
cargo contract build
cargo contract upload --suri //Alice

cargo contract instantiate --execute --suri //Alice --args true
# The output of this command will contain the contract address,
# insert it in the command below.
# e.g  Contract 5DXR2MxThkyZvG3s4ubu9yRdNiifchZ9eNV8i6ErGx6u1sea


cargo contract call --contract <insert-contract-address> --message get --suri //Alice
```

### 2. `flip()` function

```bash
cargo contract call --contract <insert-contract-address> --message flip --execute --suri //Alice
```
````

## File: docs/getting-started/cargo-contract.md
````markdown
---
title: Install cargo-contract
slug: /cargo-contract-cli
---

`cargo-contract` is a command-line (CLI) tool which helps you set up and manage
WebAssembly smart contracts written with ink!.
You can find it [here on GitHub](https://github.com/use-ink/cargo-contract)
and [here on crates.io](https://crates.io/crates/cargo-contract).

The tool has a number of handy capabilities:

```
$ cargo contract       
Utilities to develop Wasm smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new          Setup and create a new smart contract project
  build        Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check        Check that the code builds as Wasm; does not output any `<name>.contract` artifact to the `target/` directory
  test         Test the smart contract off-chain
  upload       Upload contract code
  instantiate  Instantiate a contract
  call         Call a contract
  decode       Decodes a contracts input or output data (supplied in hex-encoding)
  help         Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help information
  -V, --version  Print version information
```

## Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

You can then use `cargo contract --help` to start exploring the commands made available to you.

## Usage

In order to initialize a new ink! project you can use:

```bash
cargo contract new flipper
```

This will create a folder `flipper` in your work directory.
The folder contains a scaffold `Cargo.toml` and a `lib.rs`, which both contain the necessary building blocks for using ink!.

The `lib.rs` contains our hello world contract ‒ the `Flipper`, which we explain in the next section.

In order to build the contract just execute these commands in the `flipper` folder:

```bash
cargo contract build
```

As a result you'll get the file `target/flipper.contract`. It's a JSON which bundles the contract's
metadata and its Wasm blob. This file needs to be used when deploying the contract.
You additionally get the individual `target/flipper.wasm` and `target/flipper.json` in the folder as well.
````

## File: docs/getting-started/compiling.md
````markdown
---
title: Compile Your Contract
slug: /getting-started/building-your-contract
hide_title: true
---

![Cargo Contract Title Picture](/img/title/cargo-contract.svg)

# Compile Your Contract

Run the following command in your `flipper` directory to compile your smart contract:

```bash
cargo contract build
```

This command will build the following for your contract:
a Wasm binary, a metadata file (which contains the
contract's ABI) and a `.contract` file which bundles both.

If all goes well, you should see a `target` folder which contains these files:

```
target
  └─ ink
    └─ flipper.contract
    └─ flipper.wasm
    └─ flipper.json
```

You can think of it this way: the raw Wasm binary contains just
the bytecode of your contract. Without further information it's
not possible to know what this bytecode refers to. For example,
which functions can be called in there and what their arguments
are. This additional information that describes what the raw Wasm
is about is called metadata ‒ data that describes other data.

<p>
    <img src="/img/metadata.svg"  />
</p>

The purpose of each file is:

- `flipper.wasm`: This is the raw contract bytecode that will be deployed on-chain.
- `flipper.json`: The isolated metadata, which is not stored on-chain.
  It's big and would take up too much space and costs.
  This file is used by e.g. a dApp user interface to know how to communicate with the on-chain contract.
- `flipper.contract`: Combines both the contract's bytecode and the metadata. This file
  is used when you are using a Developer UI like [Contracts UI](https://ui.use.ink).

Let's take a look at the structure of the `flipper.json`:

```json
{
  "source": {...},
  "contract": {...},
  "spec": {
    "constructors": [...],
    "docs": [],
    "events": [],
    "messages": [...],
  },
  "storage": {...},
  "types": [...],
  "version": "4"
}
```

This file describes all the interfaces that can be used to interact with your contract:

- `types` provides the custom **data types** used throughout the rest of the JSON.
- `storage` defines all the **storage** items managed by your contract and how to ultimately access them.
- `spec` stores information about the callable functions like **constructors** and **messages** a
  user can call to interact with the contract. It also has helpful information like the **events**
  that are emitted by the contract or any **docs**.

If you look closely at the constructors and messages, you will also notice a `selector` which
contains a 4-byte hash of the function name and is used to route your contract calls to the correct
functions.

You can also open up the `flipper.contract` file in any text editor. You'll notice that it's
nearly the same as the `flipper.json`. The only different is that the `.contract` file contains
an additional field with the hex-encoded Wasm bytecode of your contract:

```
{
    "source": {
        …
        "wasm": "0x006173…",
    },
    …
}
```

In the next section we will start a [Substrate Smart Contracts node](https://github.com/paritytech/substrate-contracts-node)
and configure the [Contracts UI](https://github.com/use-ink/contracts-ui) to interact with it.

## Debug vs. Release Build

By default, `cargo-contract` builds the contract in debug mode. This means
that the contract will e.g. print statements like

```rust
ink::env::debug_println!("magic number: {}", value);
```

to the node's console if debugging was enabled on the node ([instructions here](../faq/faq.mdx#how-do-i-print-something-to-the-console-from-the-runtime)).
To support functionality like this the debug build of a contract includes some
heavy-weight logic.

For contracts that are supposed to run in production you should always build the
contract with `--release`:

```bash
cargo contract build --release
```

This will ensure that nothing unnecessary is compiled into the Wasm blob, making
your contract faster and cheaper to deploy and execute.

:::info
With this behavior `cargo-contract` mirrors how `cargo` behaves for Rust programs:
the `--release` flag has to be passed explicitly to `cargo build`.
:::
````

## File: docs/getting-started/creating.md
````markdown
---
title: Creating an ink! Project
slug: /getting-started/creating-an-ink-project
hide_title: true
---

![Heart Title Picture](/img/title/heart.svg)

# Creating an ink! Project

ink! is an [Embedded Domain Specific Language](https://wiki.haskell.org/Embedded_domain_specific_language) (EDSL) that you can use to write WebAssembly based smart contracts in the Rust programming language.

ink! is just standard Rust in a well defined "contract format" with specialized `#[ink(…)]` attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Substrate compatible Wasm bytecode!

Use the ink! CLI to generate an initial smart contract with some scaffolding code.

Make sure you are in your working directory, and then run:

```bash
cargo contract new flipper
```

This command will create a new project folder named `flipper` with this content:

```
flipper
  └─ lib.rs                <-- Contract Source Code
  └─ Cargo.toml            <-- Rust Dependencies and ink! Configuration
  └─ .gitignore
```

## Contract Source Code

The ink CLI automatically generates the source code for the "Flipper" contract, which is about the simplest "smart" contract you can build. You can take a sneak peak as to what will come by looking at the source code here:
[Flipper Example Source Code](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

The Flipper contract is nothing more than a `bool` which gets flipped from `true` to `false` through the `flip()` function. 

## Testing Your Contract

You will see at the bottom of the source code there are simple test cases which verify the functionality of the contract. We can quickly test this code is functioning as expected using the **off-chain test environment** that ink! provides.

In your project folder run:

```bash
cargo test
```

To which you should see a successful test completion:

```bash
$ cargo test
running 2 tests
test flipper::tests::it_works ... ok
test flipper::tests::default_works ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
```

Now that we are feeling confident things are working, we can actually compile this contract to Wasm in the next step.
````

## File: docs/getting-started/deploying.md
````markdown
---
title: Deploy Your Contract
slug: /getting-started/deploy-your-contract
hide_title: true
---

![Rocket Title Picture](/img/title/rocket.svg)

# Deploy Your Contract

Now that we have generated the Wasm binary from our source code and connected to a local node, we want
to deploy this contract onto our Substrate blockchain.

Smart contract deployment on Substrate is a little different than on traditional smart contract
blockchains.

Whereas a completely new blob of smart contract source code is deployed each time you push a
contract on other platforms, Substrate opts to optimize this behavior. For example, the standard
ERC20 token has been deployed to Ethereum thousands of times, sometimes only with changes to the
initial configuration (through the Solidity `constructor` function). Each of these instances take
up space on the blockchain equivalent to the contract source code size, even though no code was
actually changed.

In Substrate, the contract deployment process is split into two steps:

1. Putting your contract code on the blockchain
2. Creating an instance of your contract

With this pattern, contract code like the ERC20 standard can be put on the blockchain one single
time, but instantiated any number of times. No need to continually upload the same source code over
and waste space on the blockchain.

## Using the Contracts UI

### 1. Upload Contract Code

Here we will upload the contract code and instantiate one copy of the contract on the blockchain
(which is usually why we upload the contract code in the first place):

- Go to https://ui.use.ink
- Click the **Add New Contract** button in the sidebar.
- Click the **Upload New Contract Code** button in the Add New Contract page.
- Choose an **Instantiation account** (e.g. ALICE).
- Give the contract a descriptive **Name** (e.g. Flipper Contract).
- Drag the `flipper.contract` file that contains the bundled Wasm blob and metadata into the drag
  & drop area. You will see the UI parse the metadata and enabling the button that takes you to the next step.
- Click the **Next** button

![Flipper Instantiate Contract 01](/img/contracts-ui-0.png)

### 2. Instantiate a Contract on the Blockchain

Smart contracts exist as an extension of the account system on the blockchain. Thus creating an
instance of this contract will create a new `AccountId` which will store any balance managed by the
smart contract and allow us to interact with the contract.

Now a screen displays the information that represents our smart contract. We are going to
instantiate a copy of the smart contract:

- Accept the default options for the contract **Deployment Constructor**.
- Accept the default options **Max Gas Allowed** of `200000`.
- Click on `Next`

![Flipper Instantiate Contract 02](/img/contracts-ui-1.png)

The transaction is now queued, review your data and click **Upload and Instantiate** or go back and modify your inputs.

![Flipper Instantiate Contract 03](/img/contracts-ui-2.png)

When you click **Upload and Instantiate** you should see
the extrinsic `instantiateWithCode` is processing, and a flurry of events appear including the
creation of a new account (`system.NewAccount`) and the instantiation of the contract
(`contracts.Instantiated`).
You will be redirected to a new page, where you can interact with the newly created contract instance.

![Flipper Instantiate Success](/img/contracts-ui-3.png)

## Using `cargo-contract`

Contracts can be deployed via the command-line as well. With `cargo-contract`
it's just a simple sequence of:

```bash
cargo contract build
cargo contract upload --suri //Alice
cargo contract instantiate --suri //Alice --args true
```
````

## File: docs/getting-started/running.md
````markdown
---
title: Run a Substrate Node
slug: /getting-started/running-substrate
hide_title: true
---

![Substrate Title Picture](/img/title/substrate.svg)

# Run a Substrate Node

The [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node)
is a simple Substrate blockchain which is configured to include the `contracts` module.
It's a comfortable option if you want to get a quickstart.

[After successfully installing `substrate-contracts-node`](./setup.md#installing-substrate-contracts-node),
you can start a local development chain by running:

```bash
substrate-contracts-node
```

**Note:** `substrate-contracts-node` uses the `--dev` flag by default. 
You may need to specify the `--dev` flag when you want to run a development chain with another binary (e.g using the Substrate Node Template).

![An image of the terminal starting a Substrate node](/img/substrate-contracts-node.png)

You can interact with your node using [the Contracts UI](https://contracts-ui.substrate.io).
Once you have the webpage open, you have to configure the UI to connect to the locally running node:

- Click on the dropdown selector at the top left corner.
- Choose "Local Node".

![Connect to local node](/img/contracts-ui-local-node.png)
````

## File: docs/getting-started/setup.md
````markdown
---
title: Setup
slug: /getting-started/setup
hide_title: true
---

![Setup Title Picture](/img/title/setup.svg)

# Setup

In case you are looking for a guided tutorial directed
towards beginners please check out our [Guided Tutorial](https://docs.substrate.io/tutorials/smart-contracts/).

## Rust & Cargo

A pre-requisite for compiling smart contracts is to have a stable Rust version and Cargo installed. Here's [an installation guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

## ink! CLI

The first tool we will be installing is [`cargo-contract`](https://github.com/use-ink/cargo-contract),
a CLI tool for helping setting up and managing WebAssembly smart contracts written with ink!.

You can find it [here on GitHub](https://github.com/use-ink/cargo-contract)
and [here on crates.io](https://crates.io/crates/cargo-contract).

The tool has a number of handy capabilities:

```
$ cargo contract       
Utilities to develop Wasm smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new          Setup and create a new smart contract project
  build        Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check        Check that the code builds as Wasm; does not output any `<name>.contract` artifact to the `target/` directory
  test         Test the smart contract off-chain
  upload       Upload contract code
  instantiate  Instantiate a contract
  call         Call a contract
  decode       Decodes a contracts input or output data (supplied in hex-encoding)
  help         Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help information
  -V, --version  Print version information
```

### Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

If everything worked, `cargo contract --help` should show you the above list of available commands.

## Installing `substrate-contracts-node`

The [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node) is
a simple Substrate blockchain which is configured to include the Substrate module for
smart contract functionality – the `contracts` pallet (see [How it Works](../intro/how-it-works.md) for more).
It's a comfortable option if you want to get a quickstart.

There are two ways of installing the node:

### (1) Download the Binary
This is the recommended method, you can
[download a binary from our releases page](https://github.com/paritytech/substrate-contracts-node/releases)
(Linux and Mac). 

### (2) Build it yourself

Alternatively you can build the node by yourself.
This can take quite a while though!

```bash
cargo install contracts-node
```
````

## File: docs/getting-started/troubleshooting.md
````markdown
---
title: Troubleshooting
slug: /getting-started/troubleshooting
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Troubleshooting

Here are solutions to some of the common problems you may come across:

### Unexpected Epoch Change

There is a known issue with the Substrate block production (BABE) on a running chain. If you stop your node for too long (closing the terminal, putting your computer to sleep, etc.), you will get the following error:

```bash
ClientImport("Unexpected epoch change")
```

To solve this you will need to restart your node with: `substrate-contracts-node`. At that point, you will
need to re-deploy any contracts and re-do any steps that you may have done before on your node. As
long as you keep your node running, you should face no issues.

### Old Contracts in Local Storage

**Contracts UI** uses its own local storage to track the contracts that you have deployed. This means
that if you deploy a contract using the UI, and then purge your Substrate node, you will be prompted to
reset your local storage and please do so. And then re-deploy any contracts and re-do any steps that
you may have done before on your node.


### Other Issues

If you run into any other issues during this tutorial, please [report an issue](https://github.com/substrate-developer-hub/substrate-docs/issues)!
````

## File: docs/intro/how-it-works.md
````markdown
---
title: How it Works – Substrate
hide_title: true
slug: /how-it-works
---

![Substrate Title Picture](/img/title/substrate.svg)

# How it Works – Substrate

ink! is a programming language for smart contracts; blockchains built with [the Substrate framework](http://substrate.io)
can choose from a number of smart contract languages which one(s) they want to support.
ink! is one of them. It is an opinionated language that we have built by extending the popular Rust programming language with functionality needed to make it smart contract compatible.

## How does ink! tie into Substrate?

[Substrate](https://substrate.io) is a framework for building blockchains – those can be standalone blockchains or blockchains connected to [Kusama](http://kusama.network) or [Polkadot](http://polkadot.network), so called _parachains_. Substrate contains a number of modules, in Substrate terminology those are called _pallets_. Substrate comes with a set of pallets for many requirements modern blockchains typically have – staking, fungible tokens, non-fungible tokens, governance, etc.

Substrate also ships with a module for smart contracts, this module is called `pallet-contracts`. If a parachain is developed in Substrate it can easily add smart contract functionality by including this pallet.

How does ink! come into play here? ink! is a programming language, specifically it is an embedded domain-specific language for the popular Rust programming language. This means that you can use all the normal Rust syntax plus some specifics that we added to make the language suitable for the smart contract world. The `pallet-contracts` takes these ink! contracts and executes them safely. So in short: _with ink! you can write smart contracts in Rust for blockchains built with Substrate that include `pallet-contracts`_.

![](/img/ink-pallet-contracts.png)

## How does the `pallet-contracts` work?

We intentionally designed `pallet-contracts` in a way that it is decoupled from the language that is used to write smart contracts. The pallet is only the execution environment and it takes WebAssembly files as input. Smart contracts for this pallet have to be compiled to the WebAssembly (Wasm) target architecture.

For contract developers this means they can use ink! for writing smart contracts, but can also decide on other languages. Right now three languages to choose from exist:

* [Parity's ink!](https://github.com/use-ink/ink) for Rust.
* [ask!](https://github.com/patractlabs/ask) for AssemblyScript.
* The [Solang](https://github.com/hyperledger-labs/solang) compiler for Solidity.

It's not hard to add new languages. There just needs to be a compiler for the language down to WebAssembly, then it's possible to implement the API of `pallet-contracts`. This API at the moment consists of about 50 functions for anything a smart contract may desire: storage access, cryptographic functionality, environmental information like block numbers, access to functions for getting random numbers or self-terminate the contract, etc. Not all of those have to be implemented in the language ‒ the ink! "Hello, World!" requires just six API functions. The following schema depicts this relationship:

![](/img/ink-substrate.png)

We think this design is more future-proof than some architectures found in competing ecosystems. There is no tight coupling between language and execution environment. WebAssembly is an industry standard and a multitude of programming languages can nowadays be compiled down to WebAssembly. If in, say ten years time, researchers come up with an innovative language for writing smart contracts (or a subset of an existing language) then as long as there is a WebAssembly compiler it will be easy to make this language compatible with `pallet-contracts`.

## Why include `pallet-contracts` on a parachain?

There are a couple use cases for including smart contract functionality on a parachain. We distinguish three big ones.

### Use Case 1: Smart Contracts as "first-class citizens"
The most obvious use case is a parachain which provides smart contracts as a “first-class citizen”, meaning smart contracts are the central value proposition of the chain.

Those chains typically take the off-the-shelf `pallet-contracts` and create some additional innovation on top of it. Examples of this are:

* [Astar](https://astar.network): a parachain team that has built a layer on top of `pallet-contracts` so that contract developers can earn a passive income whenever their contracts are being used.
* [Phala](https://www.phala.network): a parachain team that utilizes `pallet-contracts` in a trusted execution environment, enabling confidential smart contract execution and interoperability.
* [Aleph Zero](https://alephzero.org): uses the `pallet-contracts` in a zero-knowledge context.
* [t3rn](https://www.t3rn.io): uses `pallet-contracts` as a building block to enable multi-chain execution for smart contracts.

### Use Case 2: Smart Contracts as "second-class citizens"
There is another not so obvious use case for `pallet-contracts`: smart contracts as “second-class citizens” on an existing chain. By this we mean that the central value proposition of the chain has nothing to do with smart contracts, but it still includes them as an add-on.

We provide an API (called [chain extensions](../macros-attributes/chain-extension.md)) with which a parachain can expose certain parts of its business logic to smart contract developers. Through this, smart contract developers can utilize the business logic primitives of the chain to build a new application on top of it. Think for example of a decentralized exchange blockchain. This chain would in its simplest form have an order book to place bids and asks ‒ there is no need for taking untrusted, Turing-complete, programs from the outside. The parachain could decide to expose the order book into smart contracts though, giving external developers the option of building new applications that utilize the order book. For example, to upload trading algorithms as smart contracts to the chain.

Smart contracts here are an opportunity to up the user engagement and drive usage of the chain's native token. And the billing for utilizing the chain comes already built-in with the pallet ‒ users have to pay gas fees for the execution of their smart contract.

### Use Case 3: Smart Contracts as a first step into Polkadot or Kusama
A third big use case for `pallet-contracts` is to prototype an idea as a proof-of-concept smart contract before leasing a dedicated parachain slot on Polkadot or Kusama.

The time to develop a smart contract and deploy it is shorter than the onboarding story for a parachain. One can deploy a proof-of-concept smart contract first, see if it gains traction and the idea holds up to the real world. Only subsequently, once there is a need for e.g. cheaper transaction fees, more efficient execution, or a governance mechanism for the community, the smart contract could be migrated to a dedicated parachain runtime with its own slot. ink! contracts and Substrate runtimes are both written in Rust and share similar primitives, this enables a clear path to graduate from a smart contract to its own runtime. Developers can reuse large parts of their code, their tests, as well as frontend and client code.

![](/img/ink-gateway.jpg)

## Smart Contracts vs. Parachains
One of the first questions we typically get when somebody learns about Substrate, Polkadot, or Kusama is when to develop a parachain vs. when to develop a smart contract.

The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In Substrate terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains ‒ except for that they don't have to build their own security, are upgradable, and interoperable.

It's noteworthy that a parachain's state transition function doesn't get further validated ‒ it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

For smart contracts, on the other hand, an existing parachain has to include the `pallet-contracts` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-contracts` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-contracts` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract ‒ a smart contract sits on top of a parachain_.

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.

![](/img/smart-contract-vs-parachain.png)
````

## File: docs/intro/ink-vs-cosmwasm.md
````markdown
---
title: ink! vs. CosmWasm
slug: /ink-vs-cosmwasm
hide_title: true
---

![Cosmwasm Title Picture](/img/title/cosmwasm.svg)

# ink! vs. CosmWasm

This is a short comparison between [ink!](https://github.com/use-ink/ink/)
and [CosmWasm](https://github.com/CosmWasm/cosmwasm) meant to onboard
developers coming from the Cosmos ecosystem.

## Architecture

CosmWasm is modular, meaning that any blockchain using the Cosmos SDK can add smart
contract support to their chain. That is similar to the [Substrate](https://substrate.io/)
approach, where chains have the option to add `pallet-contracts` to their runtime.

Aside from that, the architecture philosophy is likely the point where CosmWasm and ink!
differ the most. CosmWasm follows the actor model design pattern, while ink! follows a
synchronous execution model. That means some fundamental differences in how the source
code is structured.

The main entry point functions of CosmWasm contracts are:

- `instantiate` which bootstraps the initial contract state (assuming it's already been
  deployed).
- `execute` which has the actor perform operations to its internal state.
- `query` which retrieves data from the actor’s internal state.

An ink! contract can have as many public dispatchables as the developer desires, and
differently from CosmWasm, it doesn’t rely on JSON schemas for defining how the messages
are structured.

Instead, ink! makes heavy usage of Rust macros. The main ink! macros are:

- `#[ink(constructor)]` which is called when the contract is deployed, and is responsible
  for bootstrapping the initial contract state into the storage. It is analogous to the
  CosmWasm `instantiate` function.
- `#[ink(storage)]` which annotates a struct that represents the contract's internal
  state.
- `#[ink(message)]` which marks a function as a public dispatchable, meaning that it is
  exposed in the contract interface to the outside world. This macro can make a function
  behave analogously to CosmWasm’s `execute` and `query` functions. This depends on how it
  affects the internal contract state and what the return types.
- `#[ink(event)]` and `#[ink(topic)]` which annotates a struct and its members as the
  events and topics that the contract might emit.

There are other ink! macros, for which details can be found at [Macros & Attributes](../macros-attributes/overview.md).

## Unit Testing

Unit testing in CosmWasm is quite similar to ink!. Both use the conventional Rust
`#[cfg(test)]` macro and set up a mock on-chain environment.

While CosmWasm unit tests have different modules for each of the three main entry-point
functions, ink! allows for a more generalised approach, where the `#[ink(test)]` macro is
used for each unit test.

You can read more about ink! unit tests [here](../testing/off-chain.md).

## Compiler

CosmWasm uses [cargo-wasm](https://docs.rs/crate/cargo-wasm/latest) as its main
compiler, while ink! uses [cargo-contract](https://github.com/use-ink/cargo-contract).
`cargo-contract` is developed specifically for building, testing, and deploying
ink! contracts.

# Local Development Network

In terms of local development networks, the [cosmos/gaia](https://github.com/cosmos/gaia)
repository acts as the basic template for a generic Cosmos node. With the addition of the
`x/wasm` module and some clean-up, this template repository becomes
[wasmd](https://github.com/CosmWasm/wasmd), the entry point for CosmWasm development.

In terms of Substrate, `substrate-node-template` is a basic generic template of a node.
Similar to `x/wasm`, [`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
is the module that adds WebAssembly smart contract functionality to the chain. Parity
provides the [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node),
which is analogous to `wasmd` - a basic template node for smart contract development.

## Testnets

For CosmWasm development and on-chain testing, `wasmd` can be operated as a local setup
(single or multiple nodes), or connected to the `cliffnet` public test network.

ink! contracts can be deployed on a few different options:

- Locally, on a single or multiple node setup of [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node).
- [Contracts on Rococo Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/explorer),
  which is connected to the [Rococo relay chain test network](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/explorer).
- [Astar Network’s Shibuya testnet](https://docs.astar.network/docs/build/introduction/astar_family/#shibuya-substrate).

## Development Workflow

### Dependencies and Environment Setup

The first step in CosmWasm development is to
[install dependencies and setup the environment](https://docs.cosmwasm.com/core/installation),
namely Rust, the WebAssembly target, `cargo-generate` and `cargo-run-script`.

For ink! you can also find [a setup guide](../getting-started/setup.md) which will help you
with dependencies, namely Rust, `cargo-contract` and `substrate-contracts-node`.

### Compile and Test

CosmWasm provides a template at the
[cw-template](https://github.com/CosmWasm/cw-template) repository. In order to generate a new project, all  you have to do is run:

```
$ cargo generate --git https://github.com/CosmWasm/cw-template.git --name PROJECT_NAME
```

Replacing `PROJECT_NAME` with the name of your project.

Similarly, ink! provides an
[`examples`](https://github.com/use-ink/ink-examples/tree/main) directory of its
main repository.

A contract can be compiled from its directory via:

```
$ cargo contract build
```

and tested via:

```
$ cargo test
```

### Deploy and Interact

CosmWasm contracts are deployed and instantiated with help of the `wasmd` executable. The
list of step is provided [here](https://docs.cosmwasm.com/wasmd).

It is possible to deploy and interact with ink! contracts using either a CLI
(`cargo-contract`), or a web UI ([`contracts-ui`](https://ui.use.ink)).

- [Instructions for `cargo-contract`](https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md)
- [Instructions for `contracts-ui`](../getting-started/deploying.md)
````

## File: docs/intro/ink-vs-solidity.md
````markdown
---
title: ink! vs. Solidity
hide_title: true
slug: /ink-vs-solidity
---

![Solidity Title Picture](/img/title/solidity.svg)

# ink! vs. Solidity

The following table gives a brief comparison of features between ink! and Solidity:

<div class="comparison">

|                       | ink!                        | Solidity      |
| :-------------------- | :-------------------------- | :------------ |
| Virtual Machine       | Any Wasm VM                 | EVM           |
| Encoding              | Wasm                        | EVM Byte Code |
| Language              | Rust                        | Standalone    |
| Overflow Protection   | Enabled by default          | Yes           |
| Constructor Functions | Multiple                    | Single        |
| Tooling               | Anything that supports Rust | Custom        |
| Versioning            | Semantic                    | Semantic      |
| Has Metadata?         | Yes                         | Yes           |
| Multi-File Project    | Planned                     | Yes           |
| Storage Entries       | Variable                    | 256 bits      |
| Supported Types       | Docs                        | Docs          |
| Has Interfaces?       | Yes (Rust Traits)           | Yes           |

</div>

## Converting a Solidity Contract to ink!

In the following, we'll explain how to convert a Solidity contract to ink!.

### 1. Generate a new ink! contract

Run the following command to generate the skeleton for an ink! contract.
The command will set up the boilerplate code for ink!'s "Hello, World!"
(the [`flipper`](https://github.com/use-ink/ink-examples/tree/main/flipper) contract)).

```
cargo contract new <contract-name>
```

### 2. Build the contract

```
cargo contract build
```

### 3. Convert Solidity class fields to Rust struct

Solidity is an object-oriented language, and uses classes. ink! (Rust) does not use classes.

An example Solidity class looks like:

<!-- Markdown syntax highlighting does not support Solidity. C++ seems to be the best match -->

```C++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract MyContract {
    bool private _theBool;
    event UpdatedBool(bool indexed _theBool);

    constructor(bool theBool) {
        require(theBool == true, "theBool must start as true");

        _theBool = theBool;
    }

    function setBool(bool newBool) public returns (bool boolChanged) {
        if (_theBool == newBool) { 
            boolChanged = false;  
        } else {
            boolChanged = true;
        }

        _theBool = newBool;

        // emit event
        emit UpdatedBool(newBool); 
    }
}
```

And the equivalent contract in ink! looks like:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    #[ink(storage)]
    pub struct MyContract {
        the_bool: bool, // class members become struct fields
    }

    #[ink(event)]
    pub struct UpdatedBool {
        #[ink(topic)] // -> indexed
        the_bool: bool,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new(the_bool: bool) -> Self {
            assert!(the_bool == true, "the_bool must start as true");
            Self { the_bool }
        }

        #[ink(message)] // functions become struct implementations
        pub fn set_bool(&mut self, new_bool: bool) -> bool {
            let bool_changed: bool;

            if self.the_bool == new_bool{
                bool_changed = false;
            }else{
                bool_changed = true;
            }

            self.the_bool = new_bool;

            self.env().emit_event(UpdatedBool {
                the_bool: new_bool
            });

            // return
            bool_changed
        }
    }
}
```

A few key differences are:

- Solidity class variables / members will be placed in the contract struct in ink!
- All class methods in Solidity are `impl`emented for the contract struct in ink!
- Solidity frequently prefixes variables with an underscore (`_name`). ink! / Rust only prefixes with an underscore for _unused_ variables.
- Solidity uses camelCase. ink! uses snake_case.
- In Solidity, the variable type comes before the variable name (e.g. bool myVar). While ink! specifies var type after the var name (e.g. my_var: bool)

### 4. Convert each function

- Start converting each function one by one.
    - A recommended approach is to, if possible, skip cross-contract calls at first and use mock data instead
    - This way off-chain unit tests can be written to test the core functionality
        - unit tests are off-chain and do not work with cross-contract calls
    - Once fully tested, start adding in cross-contract calls and perform on-chain manual + integration tests
- Ensure that function's visibility (public, private) are matched in ink!
- In Solidity, if a function returns a `bool success`, ink! will use a `Result<()>` instead (`Result::Ok` or `Result::Err`).

Solidity return example:
```c++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract Example {
    uint128 public data;

    constructor(){}

    function setData(uint128 newData) public returns (
        bool success, 
        string memory reason
        ) {

        if (newData == 0) {
            return (false, "Data should not be zero");
        }

        data = newData;
        return (true, "");
    }
}
```

The equivalent contract in ink!:
```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod example {
    #[ink(storage)]
    pub struct Example {
        data: u128,
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    #[derive(Debug, PartialEq, Eq)]
    pub enum Error {
        DataShouldNotBeZero,
    }

    pub type Result<T> = core::result::Result<T, Error>;

    impl Example {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self { data: 0 }
        }

        #[ink(message)]
        pub fn set_data(&mut self, new_data: u128) -> Result<()> {
            if new_data == 0 {
                return Err(Error::DataShouldNotBeZero);
            }

            self.data = new_data;
            Ok(())
        }
    }
}
```


## Best Practices + Tips

- If the Solidity contract uses a `string`, it is recommended to use a `Vec<u8>` to avoid the overhead of a `String`. See [here](https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract) for more details on why. The smart contract should only contain the information that strictly needs to be placed on the blockchain and go through consensus. The UI should be used for displaying strings.
- Double check all `.unwrap()`s performed. Solidity does not have as strict checking as ink! does. For example, a mapping field can be accessed as simple as `myMapping[someKey]`. ink!, however, requires `self.my_mapping.get(some_key).unwrap()`. A useful way to handle `None` cases is to use `.unwrap_or(some_val)`.
- Run the contracts node with `substrate-contracts-node -lerror,runtime::contracts=debug` for debug prints, and errors to be displayed in the nodes console.
- When passing parameters to a helper, it is recommended to pass references (even for primitives) as Wasm is more efficient with references.
  For example (see [erc20](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) example):

```rust
/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
#[ink(message)]
pub fn balance_of(&self, owner: AccountId) -> Balance {
    self.balance_of_impl(&owner)
}

/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
///
/// # Note
///
/// Prefer to call this method over `balance_of` since this
/// works using references which are more efficient in Wasm.
#[inline]
fn balance_of_impl(&self, owner: &AccountId) -> Balance {
    self.balances.get(owner).unwrap_or_default()
}
```

- Just as in Solidity, ink! does not have floating point numbers due to the non-deterministic nature. Instead, the frontend should add decimal points as needed.

## Syntax Equivalencies

### `public function`

```c++
// solidity
function fnName() public {}
// or
// by default, functions are public
function fnName() {}
```

```rust
// ink!
#[ink(message)]
pub fn fn_name(&self) {}
```

### `mapping declaration`

```c++
// solidity
mapping(address => uint128) private mapName;
```

```rust
//ink!
use ink::storage::Mapping;

#[ink(storage)]
pub struct ContractName {
    map_name: Mapping<AccountId, u128>,
}
```

### `mapping usage`

```c++
// solidity

// insert / update
aMap[aKey] = aValue;

// get
aMap[aKey]
```

```rust
// ink!

//insert / update
self.a_map.insert(&a_key, &a_value);

// get
self.a_map.get(a_key).unwrap()
```

### `struct`

```c++
// solidity
struct MyPerson{
    address person;
    u64 favNum;
}
```

```rust
// ink!
struct MyPerson {
    person: AccountId,
    fav_num: u64,
}
```

### `assertions / requires`

```c++
// solidity
require(someValue < 10, "someValue is not less than 10");
```

```rust
// ink!
assert!(some_value < 10, "some_value is not less than 10");
```

### `timestamp`

```c++
// solidity
block.timestamp
```

```rust
// ink!
self.env().block_timestamp()
```

### `contract caller`

```c++
// solidity
address caller = msg.sender;
```

```rust
// ink!
let caller: AccountId = self.env().caller();
```

### `contract's address`

```c++
// solidity
address(this)
```

```rust
// ink!
self.env().account_id()
```

### `bytes`

Solidity has a type `bytes`. `bytes` is (essentially) equivalent to an array of uint8. So, `bytes` in Solidity => `Vec<u8>` or `[u8; ...]` in ink!. See [here](https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity) for more details. If desired, a `bytes` struct can be created in ink! to replicate the `bytes` type in Solidity.

### `uint256`

Solidity uses `uint256` and `uint` to represent a 256-bit type.

Solidity is 256-bit / 32-byte word optimized. Meaning, using `uint256` in Solidity contracts will reduce gas usage -- but increase storage usage. The largest size ink! has built in is a `u128`. ink! compiles to Wasm. The largest primitive Wasm has is 64bit (due to most computers using 64bit). So, there is no benefit to using any larger primitive over a collection.

When porting a `uint256` from Solidity to ink!, it is recommended to, with discretion, determine the range of the value, and choose the appropriate size (u8, u16, u32, u64, u128). If a 256-bit hash value is required, ink! has a `Hash` primitive available. In the event a value needs to be 256-bit, it is recommended to use an array (e.g. `[u64; 4]`).

### `payable`

```c++
// solidity
function myFunction() payable returns (uint64) {}
```

```rust
#[ink(message, payable)]
pub fn my_function(&self) -> u64 {}
```

### `received deposit / payment`

```C++
// solidity
msg.value
```

```rust
// ink!
self.env().transferred_value()
```

### `contract balance`

```c++
// solidity
address(this).balance
```

```rust
// ink!
self.env().balance()
```

### `transfer tokens from contract`

```c++
// solidity
recipient.send(amount)
```

```rust
// ink!
if self.env().transfer(recipient, amount).is_err() {
    panic!("error transferring")
}
```

### `events & indexed`

```c++
// solidity

event MyCoolEvent(
    u128 indexed indexedValue,
    u128 notIndexedValue,
);

// emit event
emit MyCoolEvent(someValue, someOtherValue);
```

```rust
// ink!

#[ink(event)]
pub struct MyCoolEvent {
    #[ink(topic)]
    indexed_value: u128,

    not_indexed_value: u128,
}

// emit event
self.env().emit_event(MyCoolEvent {
    indexed_value: some_value,
    not_indexed_value: some_other_value
});
```

### `errors and returning`

Solidity has several error handling mechanisms: `assert`, `require`, `revert`, and `throw`. Each of these will revert the changed state when called. See [this article](https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e) for details on these.

ink! uses a `Result` enum (`Ok(T)`, `Err(E)`), `assert!` and `panic!`. [This Stack Exchange](https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts) answer and [GitHub discussion](https://github.com/use-ink/ink/issues/641) provide more details on these.

#### `throw`

Throw is deprecated in Solidity and would throw an invalid opcode error (no details) and revert the state. As an alternative to the `if...{throw;}` pattern in Solidity, a `Result::Err` should be returned for expected errors, and an `assert!` should be used for errors that should not occur.

#### `assert`

In Solidity, `assert` is used as internal guards against errors in the _code_. In general, properly functioning code should never hit a failing assert. `assert` in Solidity does not have error strings. In ink!, use `assert!`. `assert!` will `panic!` if it evaluates to _false_. The state will be reverted, and a `CalleeTrapped` will be returned. The (optional) error string will be printed to the debug buffer.

```rust
// ink!
assert!(caller == owner, "caller is not owner")
```

#### `require and revert`

In Solidity, `require` is used for general (normal) errors -- such as errors that occur based on user input. `require` does have the option for an error string. `revert` is very similar to `require` except that `revert` will be called in `if ... else` chains. Both `require` and `revert` will revert the chain state. In ink!, `if ... { return Err(Error::SomeError) }` should be used for `require` or `revert`. When a `Result::Err` is returned in ink!, then all state is reverted.

In general, `Result::Err` should be used when a _calling contract_ needs to know _why_ a function failed. Otherwise, `assert!` should be used as it has less overhead than a `Result`.

```c++
// Solidity
function myFunction(bool returnError) public pure {
    require(!returnError, "my error here");

    // or

    if returnError {
        revert("my error here");
    }
}
```

```rust
// ink!

#[derive(Debug, PartialEq, Eq)]
#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Error {
    /// Provide a detailed comment on the error
    MyError,
}

// result type
pub type Result<T> = core::result::Result<T, Error>;

// ...

#[ink(message)]
pub fn my_function(&self, return_error: bool) -> Result<()> {
    if return_error{
        return Err(Error::MyError)
    }
    Ok(())
}
```

### `nested mappings + custom / advanced structures`

In Solidity, it is easy to do nested mappings. It is not as straightforward in ink!.

imagine the following scenario

```c++
// solidity
contract Dao {
    struct Proposal {
        mapping (address => bool) votedYes
    }

    mapping (address => bool) public isWhitelisted;
    Proposal[] public proposals;
}
```

in ink! this _seems_ like it could be represented like so:

```rust
#[ink::contract]
mod dao {

    use ink::{
        prelude::vec::Vec,
        storage::Mapping,
    };

    #[ink(storage)]
    pub struct Proposal {
        voted_yes: Mapping<AccountId, bool>,
    }

    #[ink(storage)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self { 
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }
    }
}
```

However, this will cause an error due to the nested mapping. [This answer](https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract) explains in detail why nested mappings are not allowed

So, as of now, to get around this issue an alternate data structure will need to be used. A data-structure that can be interchanged with the `Mapping` syntax and with minimal additional implementations is the `BTreeMap`. `BTreeMap` is less efficient than `Mapping`, but is an easy workaround until nested mappings are allowed. This will be used in the nested struct. Additional `derive`s will need to be added to be compatible with the #[ink(storage)] struct (see below).

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod dao {

    use ink::{
        prelude::{
            collections::BTreeMap,
            vec::Vec,
        },
        storage::Mapping,
    };

    #[derive(Debug)]
    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub struct Proposal {
        voted_yes: BTreeMap<AccountId, bool>,
    }

    #[ink(storage)]
    #[derive(Debug)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self { 
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }

        #[ink(message)]
        pub fn add_proposal(&mut self) {
            self.proposals.push(Proposal {
                voted_yes: BTreeMap::new(),
            });
        }

        #[ink(message)]
        pub fn vote(&mut self, proposal_id: u32, vote: bool) {
            let proposal = self.proposals
                .get_mut(proposal_id as usize)
                .unwrap();
            
            proposal.voted_yes
                .insert(Self::env().caller(), vote);
        }        

        #[ink(message)]
        pub fn get_proposal(&self, proposal_id: u32) -> BTreeMap<AccountId, bool> {
            self.proposals
                .get(proposal_id as usize)
                .unwrap()
                .voted_yes
                .clone()
        }
    }
}
```

### `cross-contract calling`

In ink!, to do [cross-contract calling](../basics/cross-contract-calling.md), the contract will need to be added to the project. Ensure the contract is properly exporting its Structs. See the `erc20` contract example:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

// make the structs visible
pub use self::erc20::{
    Erc20,
    // this is necessary
    Erc20Ref,
};

#[ink::contract]
pub mod erc20 {}
```

In the new cross-called contract's Cargo.toml, add (or edit) the following:

```
[lib]
name = "erc20"
path = "lib.rs"
crate-type = [
	# Used for normal contract Wasm blobs.
	"cdylib",
    # Used for ABI generation. Necessary for importing as a dependency
    "rlib",
]

[features]
ink-as-dependency = []
```

`ink-as-dependency` "tells the ink! code generator to always or never compile the smart contract as if it was used as a dependency of another ink! smart contract" ([source](../basics/cross-contract-calling.md)).

Then, In the main contract's Cargo.toml, import the contract that will be cross-called.

```rust
erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }
```

And make sure to add it to the `std` field of the .toml file.

```rust
[features]
default = ["std"]
std = [
    # ...

    "erc20/std",
]
```

Now, import the cross-called-contract to the main contract:

```rust
// example
use erc20::Erc20Ref;
```

There are two methods to setup the other contract.

1. Instantiate the cross-called-contract in the main contract's constructor.  
   See [here](../basics/cross-contract-calling.md) for a tutorial, and [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator) for an example.
2. Or, add the `AccountId` of an already deployed contract.
   Here is an example constructor to set this up:

   ```rust
   use my_other_contract::MyOtherContractRef;
   // ...
   fn new(contract_id: AccountId) -> Self {
        // for already deployed contract
        let contract_ref: MyOtherContractRef =
            ink_env::call::FromAccountId::from_account_id(contract_id);
        Self {contract_ref}
   }
   ```

Now, to perform the cross-contract call:

```rust
{
    self.contract_ref.some_external_function(a_param);
}
```

Note: as of now (ink! v3.3.1), when using cross-contract calls, emitting events will not work and compile errors will occur. See [issue #1000](https://github.com/use-ink/ink/issues/1000). Furthermore, the compiler will throw an error saying that (for example) Erc20Ref does not implement `SpreadAllocate`. This [issue #1149](https://github.com/use-ink/ink/issues/1149) explains more and has a workaround. These issues will be fixed in [issue #1134](https://github.com/use-ink/ink/issues/1134).

### `submit generic transaction / dynamic cross-contract calling`
invokes function found at `callee` contract address, sends the `transferAmount` to the `callee`, and the `transactionData` payload.
```c++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract CallContract {

    constructor() {}

    function invokeTransaction(
        address payable callee, 
        uint transferAmount, 
        bytes4 functionSelector,
        string memory transactionData
    ) public returns(bool success, bytes memory message) {

        bytes memory _data = abi
            .encodePacked(functionSelector, transactionData);

        (success, message) = callee
            .call{value: transferAmount}(_data);

        return (success, message);
    }
}
```
The equivalant in Ink!: 
```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod call_contract {
    use ink::{
        env::call::{
            build_call, 
            Call, 
            ExecutionInput, 
            Selector
        },
        prelude::vec::Vec,
    };

    #[ink(storage)]
    #[derive(Default)]
    pub struct CallContract {}

    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]
    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
    pub enum Error {
        TransactionFailed,
    }
    type Result<T> = core::result::Result<T, Error>;


    impl CallContract{
        #[ink(constructor)]
        pub fn new() -> Self {
            Default::default()
        }

        #[ink(message, payable)]
        pub fn invoke_transaction(
            &mut self,
            callee: AccountId,
            transfer_amount: u128,
            function_selector: [u8; 4],
            transaction_data: Vec<u8>,
            gas_limit: Option<u64>,
        ) -> Result<()> {
        
            let transaction_result = build_call::<<Self as ::ink::env::ContractEnv>::Env>()
                .call_type(
                    Call::new(callee) // contract to call
                        .gas_limit(gas_limit.unwrap_or_default())
                        .transferred_value(transfer_amount), // value to transfer with call
                )
                .exec_input(
                    ExecutionInput::new(Selector::new(function_selector))
                        .push_arg(transaction_data), // SCALE-encoded parameters
                )
                .returns::<()>()
                .try_invoke();
            
            match transaction_result {
                Ok(Ok(_)) => Ok(()),
                _ => Err(Error::TransactionFailed),
            }
        }
    }
}
```

Note: the `function_selector` bytes can be found in the generated `target/ink/<contract-name>.json`.

## Limitations of ink! v4

- Multi-file projects are not supported with pure ink!
    - implementing traits / interfaces will not work
    - There are alternatives that do add this functionality such as OpenBrush
    
## Troubleshooting Errors

- `ERROR: Validation of the Wasm failed.`

```
ERROR: Validation of the Wasm failed.

ERROR: An unexpected panic function import was found in the contract Wasm.
This typically goes back to a known bug in the Rust compiler:
https://github.com/rust-lang/rust/issues/78744

As a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations, but unfortunately we are currently not
aware of a better workaround until the bug in the compiler is fixed.
```

**Solution**  
Add the following to the contract Cargo.toml:

```
[profile.release]
overflow-checks = false
```

- `"failed to load bitcode of module '...' "`

This happens when trying to import a contract for cross-contract calling.

**Solution**  
Ensure that the following is added to Cargo.toml contract import:`

```
features = ["ink-as-dependency"]
```

so the import would look like:

```
mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}
```

## unit testing (off-chain)

- Unit tests are an integral part of smart-contract development and ensuring your code works off-chain before testing on-chain.
- To run ink! tests, use the command `cargo test`. Add the `--nocapture` flag for debug prints to show. 
- From the contract module, make sure to make the contract struct and anything else that is going to be used in the unit tests public. For example:

```rust
// top of file
#![cfg_attr(not(feature = "std"), no_std, no_main)]


pub use self::mycontract::{
    MyContract
};
```

- Off-chain unit tests will not work with cross-contract calls.
  One workaround to ensure unit tests are still passing is to provide mock data.

An easy approach is to use conditional compiling with `#[cfg(test)]` and `#[cfg(not(test))]`.

Note: This solution may not be the best option. A more effective approach can be found in our current E2E test. Please refer to [the showcased example here](https://github.com/use-ink/ink-examples/tree/main/multi-contract-caller).

For example, here is a read-only ERC20 cross-contract call:

```rust
// only compiles when *not* running tests
#[cfg(not(test))]
fn get_token_balance(&self, caller: &AccountId) -> Balance {
    // calls the external ERC-20 contract
    self.token.balance_of(*caller)
}

// only compiles when running tests
#[cfg(test)]
fn get_token_balance(&self, _: &AccountId) -> Balance {
    // arbitrary value
    1
}
```

And if the cross-contract call _writes_ to storage, a mock field can be added to the contract struct. For example:

```rust
#[ink(storage)]
pub struct MyContract {
    #[cfg(test)]
    mock_field: SomeStruct, // will serve as a fake storage
}

...

// on-chain, performs cross-contract call
#[cfg(not(test))]
fn do_some_write(&mut self) {
    self.external_contract.write_to_field(0xDEADBEEF);
}


// testing environment only
#[cfg(test)]
fn do_some_write(&mut self) {
    self.mock_field.my_fake_storage_item = 0xDEADBEEF;
}
```

- useful code to interact and modify the contract environment for testing

[ink_env docs](https://docs.rs/ink_env/4.3.0/ink_env/index.html)

```rust
// get the default accounts (alice, bob, ...)
let accounts = ink::env::test::default_accounts::<ink::env::DefaultEnvironment>();
accounts.alice //usage example

// set which account calls the contract
ink::env::test::set_caller::<ink::env::DefaultEnvironment>(accounts.bob);

// get the contract's address
let callee = ink::env::account_id::<ink::env::DefaultEnvironment>();

// set the contracts address.
// by default, this is alice's account
ink::env::test::set_callee::<ink::env::DefaultEnvironment>(callee);

// transfer native currency to the contract
ink::env::test::set_value_transferred::<ink::env::DefaultEnvironment>(2);

// increase block number (and block timestamp).
// this can be placed in a loop to advance the block many times
ink::env::test::advance_block::<ink::env::DefaultEnvironment>();

// generate arbitrary AccountId
AccountId::from([0x01; 32]);

// generate arbitrary Hash
Hash::from([0x01; 32])

// macro for tests that are expected to panic.
#[should_panic]
```
````

## File: docs/intro/migrate-to-parachain.md
````markdown
---
title: Migrating an ink! contract to a Parachain Runtime
hide_title: true
slug: /migrate-ink-contracts-to-polkadot-frame-parachain
---

![Polkadot Title Picture](/img/title/polkadot.svg)

# Migrating an ink! contract to a Parachain Runtime

Smart contracts written in `ink!` are a great starting point for developing applications in the Polkadot ecosystem. Developers can go from an idea to a fully functioning web3 application "in production" in a matter of hours or days. This allows faster feedback on ideas, to validate whether there is user demand in the first place, and to easily iterate and refine the implementation.

For many applications, smart contracts are good enough. However, they are exposed to the inherent limitations of the smart contract execution environment: 
    
1. Sharing of blockspace with other smart contracts, volatile "gas" fees.
2. Default model enforces gas fees being paid by the end user.
3. Relative poor performance of interpreted smart contract (untrusted) code compared to pre-compiled Parachain runtime (trusted) code.
4. Limited access to the host chain environment and any special functionality provided by an extensive suite of customisable FRAME pallets.

Once a web3 application has proven it can work, the team may consider "upgrading" to a Parachain to unlock the full power of a dedicated App Chain. Compared to developing and deploying a smart contract, this requires considerably more time and expertise, which is why we encourage to start with `ink!` where possible, at least at the prototype stage.

Much of the difficulty in launching a parachain comes in configuring a node implementation, bootstrapping and maintaining a collator network, deploying to testnets, managing infrastructure, acquiring "Coretime" (previously via a slot auction). All of which is time consuming and costly. This is important to note because this guide will focus on the migration of the code from `ink!` to `FRAME`, which might be a learning curve but overall a minor part of the overall migration, and a one-off cost.

## Utilizing existing FRAME pallets

There is a rich library of FRAME pallets, which may provide a drop in replacement for some (or all) of your smart contract functionality. For example, for a [PSP22](../standards/overview.md) (similar to ERC20) fungible token contract, this could be replaced either by the native Parachain token itself via `pallet_balances` or by an asset on `pallet_assets`. Governance functions could be replaced by e.g. `pallet_democracy`, and so on. See [`polkadot-sdk`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame) for a range of pre-built pallets which can be used to handle some common functions.

## Similarities and differences between `ink!` and `FRAME`

### Similar

The biggest advantage we have when migrating from `ink!` to `FRAME` is that both are Rust based DSLs, in both cases actual Rust (or Rust-like)  code annotated with attributes expands into Rust code for handling all the boilerplate for integrating into their respective execution environments. Indeed the modern `FRAME 2.0` was originally inspired by the `ink!` approach of attribute macros annotating Rust code.

So we can assume that the developer performing the migration is already familiar with Rust and its development environment, which is already a huge headstart for developing with `FRAME`. 

Next we can assume some familiarity with the execution environment, after all a contract is running inside of `pallet_contracts` and is invoked in a similar way via a pallet dispatchable, has access to storage (sandboxed to the contract), and can emit events.

### Different

The biggest difference is that a contract is user uploaded and therefore untrusted code, so there are restrictions to what the contract is able to do and it will perform slower because it is interpreted. For example, a contract can only read and write from its own sandboxed storage.

Runtime code built using `FRAME` is trusted, can be pre-compiled and therefore executes significantly faster (though that may change if/when contracts are able to target [PolkaVM](https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811)). Pallets have direct access to other pallets and have full access to the Parachain storage, and the permissioning can be configured as desired.

Because `ink!` is executing in a more constrained environment, it is able to be much more opinionated and therefore a simpler language. Because execution is metered (pay as you go execution by the user), there is no need to worry about benchmarking for "weight" calculation. `FRAME` is more powerful, but necessarily more complicated.

## Example Migration

We'll use the [`DNS` example](https://github.com/use-ink/ink-examples/blob/main/dns/lib.rs) contract to demonstrate a migration.

### Setup

Start by cloning the [Parachain Template](https://github.com/paritytech/polkadot-sdk-parachain-template) which contains a [template pallet](https://github.com/paritytech/polkadot-sdk-parachain-template/blob/master/pallets/template/src/lib.rs) which we can modify.

Now we will move down the contract from top to bottom and begin the migration of code.

### Event Definitions

First thing we encounter are events. E.g.:

```rust
#[ink(event)]
pub struct Register {
    #[ink(topic)]
    name: Hash,
    #[ink(topic)]
    from: AccountId,
}
```

Each of these structs annotated with `#[ink(event)]` can be translated to a variant in the pallet `Error` enum annotated with `#[pallet::error]`. Any of the `ink!` environment type aliases (both `Hash` and `AccountId` in the above example) must be translated to their equivalent associated type on the `Config` trait e.g. `AccountId` -> `T::AccountId`. Also the `#[ink(topic)]` annotations must be removed: topics must be calculated manually when the event is emitted, and will be covered later. Remove the `#[pallet::generate_deposit(pub(super) fn deposit_event)]` and the final `Event` type will look like:


```rust=
#[pallet::event]
pub enum Event<T: Config> {
    Register {
        name: T::Hash,
        from: T::AccountId,
    },
    SetAddress {
        name: T::Hash,
        from: T::AccountId,
        old_address: Option<T::AccountId>,
        new_address: T::AccountId,
    },
    Transfer {
        name: T::Hash,
        from: T::AccountId,
        old_owner: Option<T::AccountId>,
        new_owner: T::AccountId,
    }
}
```

### Storage

The storage layout of the contract is defined by the following struct:

```rust=
#[ink(storage)]
pub struct DomainNameService {
    /// A hashmap to store all name to addresses mapping.
    name_to_address: Mapping<Hash, AccountId>,
    /// A hashmap to store all name to owners mapping.
    name_to_owner: Mapping<Hash, AccountId>,
    /// The default address.
    default_address: AccountId,
}
```
In `ink!`, the layout of the contract storage is defined by this top level `struct`. A brief recap of how this is used:
- Constructors must return an initialized instance of this struct, which is then written to storage. 
- Non mutable messages e.g. `#[ink(message)] fn message(&self, ..)` will load an instance of this struct and pass it as `&self`.
- Mutable messages e.g. `#[ink(message)] fn message(&mut self, ..)`, will load an instance of the struct and persist it if the message succeeds in executing.
- Fields of type `Mapping` or `Lazy` are not written directly into the same storage slot as the parent, but are wrappers around direct reads/writes to storage under many or a single key respectively.

In `FRAME`, all storage operations happen eagerly via "type aliases" annotated with `#[pallet::storage]`. So for each field in the `#[ink(storage)]` struct, we require a corresponding pallet storage definition.

`default_address: AccountId` translates to:

```rust
#[pallet::storage]
pub type DefaultAddress<T: Config> = StorageValue<_, T::AccountId>;
```

`name_to_address: Mapping<Hash, AccountId>,` translates to a `StorageMap` like so:

```rust=
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

`name_to_owner: Mapping<Hash, AccountId>,` also translates to a `StorageMap`:

```rust=
#[pallet::storage]
pub type NameToOwner<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

Reading and writing these storage values must all be done explicitly, in contrast with `ink!` which can do so automatically for non "lazy" values. When it comes to migrating the messages, this will be demonstrated.

### Error Definition

Simply copy across the variants of the `enum Error` to the equivalent `#[pallet::error]` definition. In our case we end up with:

```rust=
#[pallet::error]
pub enum Error<T> {
    /// Returned if the name already exists upon registration.
    NameAlreadyExists,
    /// Returned if caller is not owner while required to.
    CallerIsNotOwner,
}
```
Note that the `T` generic parameter is not used in this case, the `error` macro handles the generation of `PhantomData<T>`. If we use some environmental types we can use the `T` similar to the event definition.

### Constructors

In this example, the single constructor is simply initializing the storage to empty values. 

```rust=
 #[ink(constructor)]
pub fn new() -> Self {
    Default::default()
}
```
This code is executed when the contract instance was initialized.

Our use case is a migration, so we will assume that the existing data must be migrated from contract storage to the pallet storage. This will be covered in the [Data Migration](#data-migration) section.

No code migration is required then for this constructor.

### Messages

#### Mutable

There are 3 mutable messages (that can change the state of the contract): `register`, `set_address` and `transfer`. This guide will demonstrate `register`, and the other two can follow a similar pattern. The message is defined as so, with added numerical comments to show the translation to the equivalent `FRAME` code.

```rust=
#[ink(message)]
pub fn register(&mut self, name: Hash) -> Result<()> {
    // 1.
    let caller = self.env().caller();
    // 2.
    if self.name_to_owner.contains(name) {
        return Err(Error::NameAlreadyExists)
    }
    // 3.
    self.name_to_owner.insert(name, &caller);
    // 4.
    self.env().emit_event(Register { name, from: caller });
    // 5.
    Ok(())
}
```

Before proceeding, it is necessary to add a custom `deposit_event` function for raising events which accepts topics:

```rust=
impl<T: Config> Pallet<T> {
    fn deposit_event(topics: Vec<T::Hash>, event: Event<T>) {
        <frame_system::Pallet<T>>::deposit_event_indexed(
            &topics,
            <T as Config>::RuntimeEvent::from(event).into()
        )
    }
}
```
Now we can translate the `register` message into a "Dispatchable":

```rust=
#[pallet::call_index(0)]
#[pallet::weight(Weight::from_parts(10_000, 0)
    .saturating_add(T::DbWeight::get().reads(1))
    .saturating_add(T::DbWeight::get().writes(1)))]
pub fn register(origin: OriginFor<T>, name: T::Hash) -> DispatchResultWithPostInfo {
    // 1.
    let caller = ensure_signed(origin)?;
    // 2.
    ensure!(!NameToOwner::<T>::contains_key(&name), Error::<T>::NameAlreadyExists);
    // 3.
    <NameToOwner<T>>::insert(name, &caller);
    // 4.
    Self::deposit_event(
        &[name.clone(), T::Hashing::hash_of(&caller)],
        Event::Register { name, from: caller }
    );
    // 5.
    Ok(().into())
}
```
Compare the numbered annotations from the `ink!` contract message and the `FRAME` dispatchable, and you can see they are very similar, just different APIs for interacting with the environment and with storage.

For `4.`, in `FRAME` we need to generate the topic list manually which is done automatically in `ink!` via the annotations.

#### Weights

The `pallet::weight` attribute defines the `weight` of the dispatchable i.e. the amount of onchain resources it is estimated to consume. Because we are now writing trusted code, we can define this up front (no runtime gas metering). The number in the `weight` is typically generated via a benchmarking process. It is important to integrate this process and set a non-arbitrary value here before deploying to a production chain. Read more https://docs.substrate.io/build/tx-weights-fees/.

#### Immutable (read only) messages

`ink!` messages can return a value, which when executed as an RPC "dry-run" (not via a transaction), are used to read the state of contracts. Dispatchables in `FRAME` cannot return values directly. There are two ways to read the state from a FRAME pallet:

1. Reading from `#[pallet::storage]` items directly, client libraries will generate an API to do this from the runtime metadata. See e.g. [`subxt`](https://github.com/paritytech/subxt/blob/master/subxt/examples/storage_fetch.rs)
2. Via runtime APIs, RPC methods that can be wired up directly into query methods on a pallet. See https://docs.substrate.io/reference/runtime-apis/.

In our case, `1.` is good enough, so the following read only message:

```rust=
#[ink(message)]
pub fn get_address(&self, name: Hash) -> AccountId {
    self.get_address_or_default(name)
}

fn get_address_or_default(&self, name: Hash) -> AccountId {
    self.name_to_address
        .get(name)
        .unwrap_or(self.default_address)
}
```
Can be queried *without* any modifications to the `NameToAddress` storage type:

```rust=
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```
`subxt` would generate the following accessor for querying the storage:

```rust=
let storage_query = my_custom_chain::storage().dns().name_to_address(&name);

// Use that query to `fetch` a result. This returns an `Option<_>`, which will be
// `None` if no value exists at the given address. You can also use `fetch_default`
// where applicable, which will return the default value if none exists.
let result = api
    .storage()
    .at_latest()
    .await?
    .fetch(&storage_query)
    .await?;
```

### Data Migration

Data migration can be done at either genesis time or once the custom parachain is up and running. 

#### Retrieving the data from the contract

In both cases the first steps are to first download the current state of the contract at a fixed point in time, and then ensuring that no changes can be made to the contract after that. 

This could be done by using `set_code_hash` to update the source code of the contract to a special contract which allows only querying and downloading the state of the current contract, and no mutating messages.

An alternative would be querying the contract storage directly, but currently there are no good tools for this, and it would require some key calculation for retrieving the data at all storage locations. Additionally the contract would still need to be "frozen" somehow to ensure no changes can be made to the contract state.

#### Initializing the pallet 

Once the data has been downloaded and serialized, it can be used to initialize the state of the custom parachain runtime. This can be hardcoded in a `#[pallet::genesis_build]` impl block. See https://docs.substrate.io/reference/how-to-guides/basics/configure-genesis-state/.

Alternatively the state could be initialized via dispatchable extrinsic(s) which initialize the storage.

### Adjusting UIs

User interfaces will need to be adjusted to interact with a pallet rather than a contract. This should be relatively straightforward since client libraries usually have first-class support for interacting with Substrate pallets, and the signing etc. should already be integrated.
````

## File: docs/intro/polkadot.md
````markdown
---
title: Smart Contracts in Polkadot
hide_title: true
slug: /smart-contracts-polkadot
---

![Polkadot Title Picture](/img/title/polkadot.svg)

# Smart Contracts in Polkadot

One of the first questions we typically get when somebody learns about Substrate, Polkadot, or Kusama is when to develop a parachain vs. when to develop a smart contract.

The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In Substrate terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains ‒ except for that they don't have to build their own security, are upgradable, and interoperable.

It's noteworthy that a parachain's state transition function doesn't get further validated ‒ it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

For smart contracts, on the other hand, an existing parachain has to include the `pallet-contracts` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-contracts` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-contracts` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract ‒ a smart contract sits on top of a parachain_.

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.

![](/img/smart-contract-vs-parachain.png)
````

## File: docs/intro/where-to-deploy.mdx
````
---
title: Where to deploy?
slug: /where-to-deploy
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Rocket Title Picture](/img/title/rocket.svg)

# Supported Chains: Where can I deploy ink! contracts?

<div className="row" style={{ marginTop: -10 }}>
    <div className="col text--left">
        <h3><img src={useBaseUrl('/img/chains/production.svg')} className="chainHeader" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://alephzero.org">
            <img src= {useBaseUrl('/img/chains/aleph-zero.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://astar.network">
            <img src= {useBaseUrl('/img/chains/astar.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://shiden.astar.network">
            <img src= {useBaseUrl('/img/chains/shiden.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="http://phala.network">
            <img src= {useBaseUrl('/img/chains/phala.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org">
            <img src= {useBaseUrl('/img/chains/pendulum.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org/amplitude">
            <img src= {useBaseUrl('/img/chains/amplitude.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.ternoa.network/">
            <img src= {useBaseUrl('/img/chains/ternoa.svg')} className="chain" />
        </a>
    </div>

    <div className="col text--center">
        <a href="https://krest.peaq.network/">
            <img src= {useBaseUrl('/img/chains/krest.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= {useBaseUrl('/img/chains/mainnet-soon.svg')} className="chainHeader mainnetSoon" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://t3rn.io">
            <img src= {useBaseUrl('/img/chains/t3rn.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://enjin.io">
            <img src= {useBaseUrl('/img/chains/enjin.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://zeitgeist.pm">
            <img src= {useBaseUrl('/img/chains/zeitgeist.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.peaq.network">
            <img src= {useBaseUrl('/img/chains/peaq.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://bit.country">
            <img src= {useBaseUrl('/img/chains/bitcountry.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://github.com/yerbatech">
            <img src= {useBaseUrl('/img/chains/yerba.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= {useBaseUrl('/img/chains/on-testnet.svg')} className="chainHeader" /></h3>
        <a href="/testnet">
            <img src= {useBaseUrl('/img/chains/testnet.svg')} className="chain" />
        </a>
    </div>
    <div className="col">&nbsp;</div>
</div>
````

## File: docs/intro/why-rust.md
````markdown
---
title: Why Rust for Smart Contracts?
hide_title: true
slug: /why-rust-for-smart-contracts
---

![Rust Title Picture](/img/title/rust.svg)

# Why Rust for Smart Contracts?

ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.
If this doesn't already convince you, you find many more good reasons here:

* <span class="highlight">Rust is an ideal smart contract language:</span> It is type safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn’t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow.

* <span class="highlight">Rust ecosystem:</span> You gain from all of the support available to the Rust ecosystem for free. As the language develops, ink! will automatically gain access to new features and functionality, improving how you can write smart contracts in the future.

* <span class="highlight">Tooling:</span> Because ink! follows Rust standards, tools like rustfmt, clippy and rust-analyzer already work out of the box.
The same goes for code formatting and syntax highlighting in most modern text editors.
Also, Rust has an integrated test and benchmark runner,

* <span class="highlight">No overhead:</span> Minimal runtime.

* <span class="highlight">Safe & Efficient:</span> Zero-cost & safe abstractions.

* <span class="highlight">Productive:</span> Cargo + <a href="https://crates.io">crates.io</a> Ecosystem.

* <span class="highlight">1st class Wasm:</span> Rust provides the first class support for the WebAssembly.

* <span class="highlight">Small Size:</span> In the space-constrained blockchain world size is important. 
The Rust compiler is a great help for that, since it reorders struct fields in order 
to make each type as small as possible. Thus, Rust data structures are very compact,
in many cases even more compact than in C.
````

## File: docs/intro/why-webassembly.md
````markdown
---
title: Why WebAssembly for Smart Contracts?
hide_title: true
slug: /why-webassembly-for-smart-contracts
---

![Wasm Title Picture](/img/title/wasm.svg)

# Why WebAssembly for Smart Contracts?

We made a conscious decision for WebAssembly as the target architecture of ink!.
Our decision was made up by these reasons:

* <span class="highlight">High performance: </span>Wasm is high performance — it’s built to be as close to native machine code as possible while still being platform independent.

* <span class="highlight">Small size: </span>It facilitates small binaries to ship over the internet to devices with potentially slow internet connection.
This is a great fit for the space-constrained blockchain world.

* <span class="highlight">General VM & bytecode: </span>
It was developed so that code can be deployed in any browser with the same result.
Contrary to the EVM it was not developed towards a very specific use case,
this has the benefit of a lot of tooling being available and large
companies putting a lot of resources into furthering Wasm development.

* <span class="highlight">Efficient JIT execution: </span>
64 and 32-bit integer operation support that maps one-to-one with CPU instructions.

* <span class="highlight">Minimalistic: </span> Formal spec that fits on a single page.

* <span class="highlight">Deterministic execution: </span>
Wasm is easily made deterministic by removing floating point operations, which is necessary for consensus algorithms.

* <span class="highlight">Open Standards > Custom Solutions: </span>
Wasm is a standard for web browsers developed by W3C workgroup that includes Google, Mozilla, and others.
There’s been many years of work put into Wasm, both by compiler and standardization teams.

* <span class="highlight">Many languages available: </span> Wasm expands the family of languages available to smart contract developers to include Rust, C/C++, C#, Typescript, Haxe, and Kotlin. This means you can write smart contracts in whichever language you’re familiar with, though we’re partial to Rust due to its lack of runtime overhead and inherent security properties.

* <span class="highlight">Memory-safe, sandboxed, and platform-independent.</span>

* <span class="highlight">LLVM support: </span>
Supported by the LLVM compiler infrastructure project, meaning that Wasm benefits from over a decade of LLVM’s compiler optimization.

* <span class="highlight">Large companies involved: </span> Continually developed by major companies such as Google, Apple, Microsoft, Mozilla, and Facebook.
````

## File: docs/linter/rules/no_main.md
````markdown
---
title: no_main
hide_title: true
description: no_main lint documentation
---
# no_main
## What it does
Checks if a contract is annotated with the `no_main` inner attribute.

## Why is this necessary?
Contracts must be annotated with `no_main` inner attribute when compiled for on-chain
execution.

## Example

```rust
// Bad: Contract does not contain the `no_main` attribute,
// so it cannot be compiled to Wasm
#![cfg_attr(not(feature = "std"), no_std)]
#[ink::contract]
mod my_contract { /* ... */ }
```

Use instead:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]
#[ink::contract]
mod my_contract { /* ... */ }
```
````

## File: docs/linter/rules/non_fallible_api.md
````markdown
---
title: non_fallible_api
hide_title: true
description: non_fallible_api lint documentation
---
# non_fallible_api
## What it does

The lint detects potentially unsafe uses of methods for which there are safer alternatives.

## Why is this bad?

In some standard collections in ink!, there are two types of implementations: non-fallible
(e.g. `get`) and fallible (e.g. `try_get`). Fallible alternatives are considered safer,
as they perform additional checks for incorrect input parameters and return `Result::Err`
when they are used improperly. On the other hand, non-fallible methods do not provide these
checks and will panic on incorrect input, placing the responsibility on the user to
implement these checks.

For more context, see: [ink#1910](https://github.com/use-ink/ink/pull/1910).

## Example

Consider the contract that has the following `Mapping` field:

```rust
#[ink(storage)]
pub struct Example { map: Mapping<String, AccountId> }
```

The following usage of the non-fallible API is unsafe:

```rust
// Bad: can panic if `input_string` doesn't fit into the static buffer
self.map.insert(input_string, &self.sender);
```

It could be replaced with the fallible version of `Mapping::insert`:

```rust
// Good: returns Result::Err on incorrect input
self.map.try_insert(input_string, &self.sender);
```

Otherwise, the user could explicitly check the encoded size of the argument in their code:

```rust
// Good: explicitly checked encoded size of the input
if String::encoded_size(&input_string) < ink_env::BUFFER_SIZE {
  self.map.insert(input_string, &self.sender);
}
```
````

## File: docs/linter/rules/primitive_topic.md
````markdown
---
title: primitive_topic
hide_title: true
description: primitive_topic lint documentation
---
# primitive_topic
## What it does
Checks for ink! contracts that use the
[`#[ink(topic)]`](../../macros-attributes/topic.md) annotation with primitive number
types. Topics are discrete events for which it makes sense to filter. Typical examples of
fields that should be filtered are `AccountId`, `bool` or `enum` variants.

## Why is this bad?
It typically doesn't make sense to annotate types like `u32` or `i32` as a topic, if those
fields can take continuous values that could be anywhere between `::MIN` and `::MAX`. An
example of a case where it doesn't make sense at all to have a topic on the storage field
is something like `value: Balance` in the examle below.

## Example
```rust
// Bad
// It typically makes no sense to filter `Balance`, since its value may varies from `::MAX`
// to `::MIN`.
#[ink(event)]
pub struct Transaction {
    #[ink(topic)]
    src: Option<AccountId>,
    #[ink(topic)]
    dst: Option<AccountId>,
    #[ink(topic)]
    value: Balance,
}
```

Use instead:

```rust
// Good
// Filtering transactions based on source and destination addresses.
#[ink(event)]
pub struct Transaction {
    #[ink(topic)]
    src: Option<AccountId>,
    #[ink(topic)]
    dst: Option<AccountId>,
    value: Balance,
}
```
````

## File: docs/linter/rules/storage_never_freed.md
````markdown
---
title: storage_never_freed
hide_title: true
description: storage_never_freed lint documentation
---
# storage_never_freed
## What it does
This lint ensures that for every storage field with a collection type, when there is an
operation to insert new elements, there's also an operation for removing elements.

## Why is this bad?
When a user executes a contract function that writes to storage, they have to put a
deposit down for the amount of storage space used. Whoever frees up that storage at some
later point gets the deposit back. Therefore, it is always a good idea to make it possible
for users to free up their storage space.

## Example
In the following example there is a storage field with the `Mapping` type that has an
function that inserts new elements:

```rust
#[ink(storage)]
pub struct Transaction {
    values: Mapping<AccountId, AccountId>,
}

fn add_value(&mut self, k: &AccountId, v: &AccountId) {
    // ...
    self.values.insert(k, v);
    // ...
}
```

But, ideally, there also should be a function that allows the user to remove elements from
the Mapping freeing storage space:

```rust
fn del_value(&mut self, k: &AccountId) {
    // ...
    self.values.remove(k);
    // ...
}
```
````

## File: docs/linter/rules/strict_balance_equality.md
````markdown
---
title: strict_balance_equality
hide_title: true
description: strict_balance_equality lint documentation
---
# strict_balance_equality
## What it does
Looks for strict equalities with balance in ink! contracts.

## Why is this bad?
The problem with strict balance equality is that it is always possible to forcibly send
tokens to a contract. For example, using
[`terminate_contract`](https://use-ink.github.io/ink/ink_env/fn.terminate_contract.html).
In such a case, the condition involving the contract balance will work incorrectly, what
may lead to security issues, including DoS attacks and draining contract's gas.

## Known problems
There are many ways to implement balance comparison in ink! contracts. This lint is not
trying to be exhaustive. Instead, it addresses the most common cases that may occur in
real-world contracts and focuses on precision and lack of false positives.

## Example
Assume, there is an attacker contract that sends all its funds to the target contract when
terminated:

```rust
#[ink::contract]
pub mod attacker {
  // ...
  #[ink(message)]
  pub fn attack(&mut self, target: &AccountId) {
      self.env().terminate_contract(target);
  }
}
```

If the target contains a condition with strict balance equality, this may be manipulated by
the attacker:

```rust
#[ink::contract]
pub mod target {
  // ...
  #[ink(message)]
  pub fn do_something(&mut self) {
      if self.env().balance() != 100 { // Bad: Strict balance equality
          // ... some logic
      }
  }
}
```

This could be mitigated using non-strict equality operators in the condition with the
balance:

```rust
#[ink::contract]
pub mod target {
  // ...
  #[ink(message)]
  pub fn do_something(&mut self) {
      if self.env().balance() < 100 { // Good: Non-strict equality
          // ... some logic
      }
  }
}
```
````

## File: docs/linter/overview.md
````markdown
---
title: Overview
hide_title: true
description: An overview of ink! linter
---

![Text/linter Title Picture](/img/title/text/linter.svg)

# Overview
ink! includes the linter - a security tool designed to identify typical security issues in smart contracts. The linter is meant to seamlessly fit into the smart contracts development process, ensuring that contracts are thoroughly checked during the build phase before they are deployed to the blockchain.

## Installation
The linter is integrated to the contracts build process, therefore you should already have it installed if you are using [`cargo-contract`](https://github.com/use-ink/cargo-contract) of version `5.0.0` or later.

The linter requires two crates and a fixed Rust toolchain version. You can use
these commands to install the required dependencies:

```
export TOOLCHAIN_VERSION=nightly-2024-09-05
rustup install $TOOLCHAIN_VERSION
rustup component add rust-src --toolchain $TOOLCHAIN_VERSION
rustup run $TOOLCHAIN_VERSION cargo install cargo-dylint dylint-link
```

Note that the linter requires this specific version of the toolchain, since it uses the internal compiler API.

## Usage
The linter operates via `cargo-contract`.

By default, the linter is executed only for the RISC-V target, while for the WASM target, it is not executed unless specifically requested by the user.

To perform a build with extra code analysis, run the following command within the contract directory:

```
cargo contract build --lint
```

This command compiles the contract and applies all linting checks. You can find the complete list of lints along with their descriptions in this documentation.

## Suppressing linter warnings
To suppress linter warnings in your ink! smart-contract, you can use `allow` attributes. You can apply these attributes either to a particular piece of code or globally.

Here's how to suppress the specific linter warnings:

```rust
// Suppressing the `primitive_topic` lint globally
#[cfg_attr(dylint_lib = "ink_linting", allow(primitive_topic))]

#[ink(message)]
pub fn test(&mut self) {
    // Suppressing the `strict_balance_equality` lint in a specific place
    #[cfg_attr(dylint_lib = "ink_linting", allow(strict_balance_equality))]
    if self.env().balance() == 10 { /* ... */ }
}
```
````

## File: docs/macros-attributes/anonymous.md
````markdown
---
title: "#[ink(anonymous)]"
slug: /macros-attributes/anonymous
hide_title: true
---

![Text/anon Title Picture](/img/title/text/anon.svg)

Applicable to ink! events.

Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as 
topic upon emitting. Similar to anonymous events in Solidity. 

Anonymous events have similar semantics as in Solidity in that their event signature won't be 
included in their event topics serialization to reduce event emitting overhead. This is 
especially useful for user defined events.
    
The signature of the event is by default one of the topics of the event, except if you annotate the
event with `#[ink(anonymous)]`. The attribute implies that it is not possible to filter for 
specific anonymous events by the signature topic.

## Example

```rust
#[ink(event)]
#[ink(anonymous)]
pub struct MyEvent {
    #[ink(topic)]
    field_1: i32,
    field_2: bool,
}
```

The equivalent syntax for standalone `#[ink::event]` definitions (not defined inline in a 
contract) is:

```rust
#[ink::event(anonymous)]
pub struct MyEvent {
    #[ink(topic)]
    field_1: i32,
    field_2: bool,
}
```
````

## File: docs/macros-attributes/chain-extension.md
````markdown
---
title: "#[ink::chain_extension]"
slug: /macros-attributes/chain-extension
hide_title: true
---

![Text/chain Ext Title Picture](/img/title/text/chain-ext.svg)

In the default configuration of the `contracts-pallet` a smart contract can only interact with the runtime
via its well defined set of basic smart contract interface functions. This API already allows a whole variety of
interaction between the `contracts-pallet` and the executed smart contract. For example it is possible
to call and instantiate other smart contracts on the same chain, emit events, query context information
or run built-in cryptographic hashing procedures.

If this basic set of features is not enough for a particular Substrate built blockchain it is possible
to easily extend this API using the so-called chain extension feature.

<center>
  <img src="/img/venn.png" width="50%" />
</center>

With chain extensions you can expose parts of your runtime logic
to smart contract developers.

:::note
The ink! examples repository contains [the `rand-extension` example](https://github.com/use-ink/ink-examples/tree/main/rand-extension).
This is a complete example of a chain extension implemented in both ink! and Substrate.
:::

## Structure

The interface consists of an error code that indicates lightweight errors
as well as the definition of some chain extension methods.

The overall structure follows that of a simple Rust trait definition.
The error code is defined as an associated type definition of the trait definition.
The methods are defined as associated trait methods without implementation.

Chain extension methods must not have a `self` receiver such as `&self` or `&mut self`
and must have inputs and output that implement SCALE codec. Their return value follows
specific rules that can be altered using the `handle_status` attribute and
alternation between  `Result` and Non-`Result` types which are described in more detail below.

## Usage

Usually the chain extension definition using this proc. macro is provided
by the author of the chain extension in a separate crate.
ink! smart contracts using this chain extension simply depend on this crate
and use its associated environment definition in order to make use of
the methods provided by the chain extension.

## Macro Attributes

The macro supports only one required argument: `extension = N: u16`.
The runtime may have several chain extensions at the same time. The `extension`
identifier points to the corresponding chain extension in the runtime.
The value should be the same as during the definition of the chain extension.
You can consult the 
[chain extension module documentation](https://paritytech.github.io/polkadot-sdk/master/pallet_contracts/chain_extension/index.html)
if you are unsure how to find the chain extension code.
Otherwise, you should consult the target chain's documentation 
for specifications of any chain extensions it exposes.

:::note
If the chain extension is not used in a tuple in the runtime configuration, 
`extension = N: u16` can take any `u16` number.
:::

## Method Attributes

There are two different attributes with which the chain extension methods
can be flagged:

| Attribute | Required | Default Value | Description |
|:----------|:--------:|:--------------|:-----------:|
| `ink(function = N: u16)` | Yes | - | Determines the unique function ID within the chain extension. |
| `ink(handle_status = flag: bool)` | Optional | `true` | Assumes that the returned status code of the chain extension method always indicates success and therefore always loads and decodes the output buffer of the call. |

As with all ink! attributes multiple of them can either appear in a contiguous list:

```rust
type Access = i32;

#[ink::chain_extension(extension = 12)]
pub trait MyChainExtension {
    type ErrorCode = i32;

    #[ink(function = 5, handle_status = false)]
    fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

…or as multiple standalone ink! attributes applied to the same item:

```rust
type Access = i32;

#[ink::chain_extension(extension = 12)]
pub trait MyChainExtension {
  type ErrorCode = i32;

  #[ink(function = 5)]
  #[ink(handle_status = false)]
  fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

## Details: `handle_status`

Default value: `true`

By default all chain extension methods should return a `Result<T, E>` where `E: From<Self::ErrorCode>`.
The `Self::ErrorCode` represents the error code of the chain extension.
This means that a smart contract calling such a chain extension method first queries the returned
status code of the chain extension method and only loads and decodes the output if the returned
status code indicates a successful call.
This design was chosen as it is more efficient when no output besides the error
code is required for a chain extension call. When designing a chain extension try to utilize the
error code to return errors and only use the output buffer for information that does not fit in
a single `u32` value.

A chain extension method that is flagged with `handle_status = false` assumes that the returned error code
will always indicate success. Therefore it will always load and decode the output buffer and loses
the `E: From<Self::ErrorCode` constraint for the call.

Note that if a chain extension method does not return `Result<T, E>` where `E: From<Self::ErrorCode>`,
but `handle_status = true` it will still return a value of type `Result<T, Self::ErrorCode>`.

## Usage: `handle_status` + `Result<T, E>` return type

Use both `handle_status = false` and non-`Result` return type for the same chain extension method
if a call to it may never fail and never returns a `Result` type.

## Combinations

Due to the possibility to flag a chain extension method with `handle_status` and either (1) return `Result<T, E>`
or (2) return just `T`
there are 4 different cases with slightly varying semantics:

| `handle_status` | Returns `Result<T, E>` | Effects |
|:---------------:|:----------------:|:--------|
|`true` |`true` | The chain extension method is required to return a value of type `Result<T, E>` where `E: From<Self::ErrorCode>`. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. |
|`true` |`false`| The chain extension method may return any non-`Result` type. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. The actual return type of the chain extension method is still `Result<T, Self::ErrorCode>` when the chain extension method was defined to return a value of type `T`. |
|`false`|`true` | The chain extension method is required to return a value of type `Result<T, E>`. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |
|`false`|`false`| The chain extension method may return any non-`Result` type. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |

## Error Code

Every chain extension defines exactly one `ErrorCode` using the following syntax:

```rust
#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = MyErrorCode;

    // more definitions ...
}
```

The defined `ErrorCode` must implement `FromStatusCode` which should be implemented as a
more or less trivial conversion from the `u32` status code to a `Result<(), Self::ErrorCode>`.
The `Ok(())` value indicates that the call to the chain extension method was successful.

By convention an error code of `0` represents success.
However, chain extension authors may use whatever suits their needs.

## Example: Definition

In the below example a chain extension is defined that allows its users to read and write
from and to the runtime storage using access privileges:

```rust
/// Custom chain extension to read to and write from the runtime.
#[ink::chain_extension(extension = 12)]
pub trait RuntimeReadWrite {
    type ErrorCode = ReadWriteErrorCode;

    /// Reads from runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<Vec<u8>, Self::ErrorCode>`.
    #[ink(function = 1, returns_result = false)]
    fn read(key: &[u8]) -> Vec<u8>;

    ///
    /// Reads from runtime storage.
    ///
    /// Returns the number of bytes read and up to 32 bytes of the
    /// read value. Unused bytes in the output are set to 0.
    ///
    /// # Errors
    ///
    /// If the runtime storage cell stores a value that requires more than
    /// 32 bytes.
    ///
    /// # Note
    ///
    /// This requires `ReadWriteError` to implement `From<ReadWriteErrorCode>`
    /// and may potentially return any `Self::ErrorCode` through its return value.
    #[ink(function = 2)]
    fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;

    /// Writes into runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<(), Self::ErrorCode>`.
    #[ink(function = 3)]
    fn write(key: &[u8], value: &[u8]);

    /// Returns the access allowed for the key for the caller.
    ///
    /// # Note
    ///
    /// Assumes to never fail the call and therefore always returns `Option<Access>`.
    #[ink(function = 4, handle_status = false)]
    fn access(key: &[u8]) -> Option<Access>;

    /// Unlocks previously acquired permission to access key.
    ///
    /// # Errors
    ///
    /// If the permission was not granted.
    ///
    /// # Note
    ///
    /// Assumes the call to never fail and therefore does _NOT_ require `UnlockAccessError`
    /// to implement `From<Self::ErrorCode>` as in the `read_small` method above.
    #[ink(function = 5, handle_status = false)]
    fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum ReadWriteErrorCode {
  InvalidKey,
  CannotWriteToKey,
  CannotReadFromKey,
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum ReadWriteError {
  ErrorCode(ReadWriteErrorCode),
  BufferTooSmall { required_bytes: u32 },
}

impl From<ReadWriteErrorCode> for ReadWriteError {
  fn from(error_code: ReadWriteErrorCode) -> Self {
    Self::ErrorCode(error_code)
  }
}

impl From<scale::Error> for ReadWriteError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub struct UnlockAccessError {
  reason: String,
}

impl From<scale::Error> for UnlockAccessError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Access {
  ReadWrite,
  ReadOnly,
  WriteOnly,
}

impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
  fn from_status_code(status_code: u32) -> Result<(), Self> {
    match status_code {
      0 => Ok(()),
      1 => Err(Self::InvalidKey),
      2 => Err(Self::CannotWriteToKey),
      3 => Err(Self::CannotReadFromKey),
      _ => panic!("encountered unknown status code"),
    }
  }
}
```

All the error types and other utility types used in the chain extension definition
above are often required to implement various traits such as SCALE's `Encode` and `Decode`
as well as `scale-info`'s `TypeInfo` trait.

A full example of the above chain extension definition can be seen
[here](https://github.com/use-ink/ink/blob/017f71d60799b764425334f86b732cc7b7065fe6/crates/lang/macro/tests/ui/chain_extension/simple.rs).

## Example: Environment

In order to allow ink! smart contracts to use the above defined chain extension it needs
to be integrated into an `Environment` definition as shown below:

```rust
type RuntimeReadWrite = i32;

use ink::env::{Environment, DefaultEnvironment};

pub enum CustomEnvironment {}

impl Environment for CustomEnvironment {
    const MAX_EVENT_TOPICS: usize =
        <DefaultEnvironment as Environment>::MAX_EVENT_TOPICS;

    type AccountId = <DefaultEnvironment as Environment>::AccountId;
    type Balance = <DefaultEnvironment as Environment>::Balance;
    type Hash = <DefaultEnvironment as Environment>::Hash;
    type BlockNumber = <DefaultEnvironment as Environment>::BlockNumber;
    type Timestamp = <DefaultEnvironment as Environment>::Timestamp;

    type ChainExtension = RuntimeReadWrite;
}
```

Above we defined the `CustomEnvironment` which defaults to ink!'s `DefaultEnvironment`
for all constants and types but the `ChainExtension` type which is assigned to our newly
defined chain extension.

## Example: Usage

An ink! smart contract can use the above defined chain extension through the `Environment`
definition defined in the last example section using the `env` macro parameter as
shown below.

Note that chain extension methods are accessible through `Self::extension()` or
`self.extension()`. For example as in `Self::extension().read(..)` or `self.extension().read(..)`.

```rust
#[ink::contract(env = CustomEnvironment)]
mod read_writer {

    #[ink(storage)]
    pub struct ReadWriter {}

    impl ReadWriter {
        #[ink(constructor)]
        pub fn new() -> Self { Self {} }

        #[ink(message)]
        pub fn read(&self, key: Vec<u8>) -> Result<Vec<u8>, ReadWriteErrorCode> {
            self.env()
                .extension()
                .read(&key)
        }

        #[ink(message)]
        pub fn read_small(&self, key: Vec<u8>) -> Result<(u32, [u8; 32]), ReadWriteError> {
            self.env()
                .extension()
                .read_small(&key)
        }

        #[ink(message)]
        pub fn write(
            &self,
            key: Vec<u8>,
            value: Vec<u8>,
        ) -> Result<(), ReadWriteErrorCode> {
            self.env()
                .extension()
                .write(&key, &value)
        }

        #[ink(message)]
        pub fn access(&self, key: Vec<u8>) -> Option<Access> {
            self.env()
                .extension()
                .access(&key)
        }

        #[ink(message)]
        pub fn unlock_access(&self, key: Vec<u8>, access: Access) -> Result<(), UnlockAccessError> {
            self.env()
                .extension()
                .unlock_access(&key, access)
        }
    }

    /// Custom chain extension to read to and write from the runtime.
    #[ink::chain_extension(extension = 12)]
    pub trait RuntimeReadWrite {
          type ErrorCode = ReadWriteErrorCode;
          #[ink(function = 1)]
          fn read(key: &[u8]) -> Vec<u8>;
          #[ink(function = 2)]
          fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;
          #[ink(function = 3)]
          fn write(key: &[u8], value: &[u8]);
          #[ink(function = 4, handle_status = false)]
          fn access(key: &[u8]) -> Option<Access>;
          #[ink(function = 5, handle_status = false)]
          fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum ReadWriteErrorCode {
          InvalidKey,
          CannotWriteToKey,
          CannotReadFromKey,
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum ReadWriteError {
          ErrorCode(ReadWriteErrorCode),
          BufferTooSmall { required_bytes: u32 },
    }
    impl From<ReadWriteErrorCode> for ReadWriteError {
         fn from(error_code: ReadWriteErrorCode) -> Self {
             Self::ErrorCode(error_code)
         }
    }
    impl From<scale::Error> for ReadWriteError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub struct UnlockAccessError {
         reason: String,
    }
    impl From<scale::Error> for UnlockAccessError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }
    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum Access {
         ReadWrite,
         ReadOnly,
         WriteOnly,
    }
    impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
         fn from_status_code(status_code: u32) -> Result<(), Self> {
             match status_code {
                 0 => Ok(()),
                 1 => Err(Self::InvalidKey),
                 2 => Err(Self::CannotWriteToKey),
                 3 => Err(Self::CannotReadFromKey),
                 _ => panic!("encountered unknown status code"),
             }
         }
    }
    pub enum CustomEnvironment {}
    impl ink::env::Environment for CustomEnvironment {
         const MAX_EVENT_TOPICS: usize =
             <ink::env::DefaultEnvironment as ink::env::Environment>::MAX_EVENT_TOPICS;

         type AccountId = <ink::env::DefaultEnvironment as ink::env::Environment>::AccountId;
         type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;
         type Hash = <ink::env::DefaultEnvironment as ink::env::Environment>::Hash;
         type BlockNumber = <ink::env::DefaultEnvironment as ink::env::Environment>::BlockNumber;
         type Timestamp = <ink::env::DefaultEnvironment as ink::env::Environment>::Timestamp;

         type ChainExtension = RuntimeReadWrite;
    }
}
```

## Using Multiple Chain Extensions

It is possible to use multiple exposed chain extensions in the single environment of a smart contract.
The declaration procedure of the chain extension stays the same.

Suppose we want to combine two chain extension called `Psp22Extension` and `FetchRandom`, ink! provides
a useful macro [`ink::combine_extensions!`](https://docs.rs/ink/5.0.0/ink/macro.combine_extensions.html) that allows to construct the structure combining 
the aforementioned chain extensions like so:
```rust
ink::combine_extensions! {
    /// This extension combines the `FetchRandom` and `Psp22Extension` extensions.
    /// It is possible to combine any number of extensions in this way.
    ///
    /// This structure is an instance that is returned by the `self.env().extension()` call.
    pub struct CombinedChainExtension {
        /// The instance of the `Psp22Extension` chain extension.
        ///
        /// It provides you access to `PSP22` functionality.
        pub psp22: Psp22Extension,
        /// The instance of the `FetchRandom` chain extension.
        ///
        /// It provides you access to randomness functionality.
        pub rand: FetchRandom,
    }
}
```

The combined structure is called `CombinedChainExtension`, and we can refer to it 
when specifying the chain extension type in `Environment`:
```rust
type ChainExtension = CombinedChainExtension;
```

Each extension's method can be called by accessing it via the name of the field of `CombineChainExtension`:
```rust
self.env().extension().rand.<method_name_in_rand_ext>()
// or
self.env().extension().psp22.<method_name_in_psp22_ext>()
// e.g.
self.env().extension().psp22.total_supply()
```

:::note
The ink! repository contains the [full example](https://github.com/use-ink/ink-examples/tree/main/combined-extension) illustrating how to combine existing chain extensions 
and mock them for testing.
:::


## Mocking Chain Extension

You can mock chain extensions for unit testing purposes. 
This can be achieved by implementing the [`ink::env::test::ChainExtension`](https://docs.rs/ink_env/5.0.0/ink_env/test/trait.ChainExtension.html) trait.

```rust
/// Opaque structure
struct MockedPSP22Extension;

// Implementing 
impl ink::env::test::ChainExtension for MockedPSP22Extension {
    fn ext_id(&self) -> u16 {
        // It is identifier used by `psp22_extension::Psp22Extension` extension.
        // Must be the same as the once specified in `#[ink::chain_extension(extension = _)]`
        13
    }

    // Call dispatcher.
    // Call specific code based on the function id which is dispatched from the contract/
    fn call(&mut self, func_id: u16, _input: &[u8], output: &mut Vec<u8>) -> u32 {
        match func_id {
            // `func_id` of the `total_supply` function.
            // must match `#[ink(function = _)]` of the corresponding method
            0x162d => {
                ink::scale::Encode::encode_to(&TOTAL_SUPPLY, output);
                0
            },
            // Other functions
            _ => {
                1
            }
        }
    }
}
```

## Technical Limitations

- Due to technical limitations it is not possible to refer to the `ErrorCode` associated type
  using `Self::ErrorCode` anywhere within the chain extension and its defined methods.
  Instead chain extension authors should directly use the error code type when required.
  This limitation might be lifted in future versions of ink!.
- It is not possible to declare other chain extension traits as super traits or super
  chain extensions of another.
````

## File: docs/macros-attributes/constructor.md
````markdown
---
title: "#[ink(constructor)]"
slug: /macros-attributes/constructor
hide_title: true
---

![Text/constructor Title Picture](/img/title/text/constructor.svg)

Applicable to a method.

Flags a method (or multiple methods) for the ink! storage struct as constructor making it available to the API for instantiating the contract.

There must be at least one `#[ink(constructor)]` defined method.

Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
upon contract instantiation. A contract may define multiple such constructors which
allow users of the contract to instantiate a contract in multiple different ways.


## Example

```rust
#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 { ... }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self { .. }

        #[ink(constructor)]
        pub fn total_supply(&self) -> Balance { .. }

        // etc.
    }
}
```
````

## File: docs/macros-attributes/contract.md
````markdown
---
title: "#[ink::contract]"
hide_title: true
slug: /macros-attributes/contract
---

![Text/contract Title Picture](/img/title/text/contract.svg)

# \#[ink::contract]

The `#[ink::contract]` macro is the entry point for writing ink! smart contracts.

If you are a beginner trying to learn ink! we recommend you to check out
our extensive [ink! workshop](https://docs.substrate.io/tutorials/smart-contracts/).

## Description

The macro does analysis on the provided smart contract code and generates
proper code.

## Usage

### Header Arguments

The `#[ink::contract]` macro can be provided with some additional comma-separated
header arguments:

### `compile_as_dependency: bool`

Tells the ink! code generator to **always** or **never**
compile the smart contract as if it was used as a dependency of another ink!
smart contract.

Normally this flag is only really useful for ink! developers who
want to inspect code generation of ink! smart contracts.
The author is not aware of any particular practical use case for users that
makes use of this flag but contract writers are encouraged to disprove this.

Note that it is recommended to make use of the built-in crate feature
`ink-as-dependency` to flag smart contract dependencies listed in a contract's
`Cargo.toml` as actual dependencies to ink!.

**Usage Example:**
```rust
#[ink::contract(compile_as_dependency = true)]
mod my_contract {
    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** Depends on the crate feature propagation of `Cargo.toml`.

### `env: impl Environment`

Tells the ink! code generator which environment to use for the ink! smart contract.
The environment must implement the `Environment` (defined in `ink_env`) trait and provides
all the necessary fundamental type definitions for `Balance`, `AccountId` etc.

When using a custom `Environment` implementation for a smart contract all types
that it exposes to the ink! smart contract and the mirrored types used in the runtime
must be aligned with respect to SCALE encoding and semantics.

**Usage Example:**

Given a custom `Environment` implementation:
```rust
pub struct MyEnvironment;

impl ink::env::Environment for MyEnvironment {
    const MAX_EVENT_TOPICS: usize = 3;

    type AccountId = u64;
    type Balance = u128;
    type Hash = [u8; 32];
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = ::ink::env::NoChainExtension;
}
```
A user might implement their ink! smart contract using the above custom `Environment`
implementation as demonstrated below:

```rust
#[ink::contract(env = MyEnvironment)]
mod my_contract {
    pub struct MyEnvironment;

    impl ink::env::Environment for MyEnvironment {
        const MAX_EVENT_TOPICS: usize = 3;
        type AccountId = u64;
        type Balance = u128;
        type Hash = [u8; 32];
        type Timestamp = u64;
        type BlockNumber = u32;
        type ChainExtension = ::ink::env::NoChainExtension;
    }

    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** `DefaultEnvironment` defined in `ink_env` crate.

## Analysis

The `#[ink::contract]` macro fully analyses its input smart contract
against invalid arguments and structure.

Some example rules include but are not limited to:

- There must be exactly one `#[ink(storage)]` struct.

     This struct defines the layout of the storage that the ink! smart contract operates on.
     The user is able to use a variety of built-in facilities, combine them in various ways
     or even provide their own implementations of storage data structures.

     For more information visit the `ink_storage` crate documentation.

     **Example:**

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn construct() -> Self { Flipper { value: false } }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(constructor)]` defined method.

     Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
     upon contract instantiation. A contract may define multiple such constructors which
     allow users of the contract to instantiate a contract in multiple different ways.

     **Example:**

     Given the `Flipper` contract definition above we add an `#[ink(constructor)]`
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(message)]` defined method.

     Methods flagged with `#[ink(message)]` are special in that they are dispatchable
     upon contract invocation. The set of ink! messages defined for an ink! smart contract
     define its API surface with which users are allowed to interact.

     An ink! smart contract can have multiple such ink! messages defined.

     **Note:**

     - An ink! message with a `&self` receiver may only read state whereas an ink! message
       with a `&mut self` receiver may mutate the contract's storage.

     **Example:**

     Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message)]
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Payable Messages:**

     An ink! message by default will reject calls that additional fund the smart contract.
     Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
     flag to it. An example below:

     Note that ink! constructors are always implicitly payable and thus cannot be flagged
     as such.

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(payable)] // You can either specify payable out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, payable)] // ...or specify payable inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Controlling the messages selector:**

     Every ink! message and ink! constructor has a unique selector with which the
     message or constructor can be uniquely identified within the ink! smart contract.
     These selectors are mainly used to drive the contract's dispatch upon calling it.

     An ink! smart contract author can control the selector of an ink! message or ink!
     constructor using the `selector` flag. An example is shown below:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             #[ink(selector = "0xDEADBEEF")] // Works on constructors as well.
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(selector = "0xCAFEBABE")] // You can either specify selector out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, selector = "0xFEEDBEEF")] // ...or specify selector inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

## Interacting with the Contract Executor

The `ink_env` crate provides facilities to interact with the contract executor that
connects ink! smart contracts with the outer world.

For example it is possible to query the current call's caller via:

```rust
use ink_env;
ink::env::test::run_test::<ink::env::DefaultEnvironment, _>(|_| {
    let caller = ink::env::caller::<ink::env::DefaultEnvironment>();
    let _caller = caller;
    Ok(())
}).unwrap();
```

However, ink! provides a much simpler way to interact with the contract executor
via its environment accessor. An example below:

```rust
#[ink::contract]
mod greeter {
    #[ink(storage)]
    pub struct Greeter;

    impl Greeter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let caller = Self::env().caller();
            let message = format!("thanks for instantiation {:?}", caller);
            ink::env::debug_println(&message);
            Greeter {}
        }

        #[ink(message, payable)]
        pub fn fund(&mut self) {
            let caller = self.env().caller();
            let value = self.env().transferred_balance();
            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);
            ink::env::debug_println(&message);
        }
    }
}
```

## Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
 #[ink::contract]
 mod erc20 {
     /// Defines an event that is emitted every time value is transferred.
     #[ink(event)]
     pub struct Transferred {
         from: Option<AccountId>,
         to: Option<AccountId>,
         value: Balance,
     }

     #[ink(storage)]
     pub struct Erc20 {
         total_supply: Balance,
         // more fields ...
     }

     impl Erc20 {
         #[ink(constructor)]
         pub fn new(initial_supply: Balance) -> Self {
             let caller = Self::env().caller();
             Self::env().emit_event(Transferred {
                 from: None,
                 to: Some(caller),
                 value: initial_supply,
             });
             Self { total_supply: initial_supply }
         }

         #[ink(message)]
         pub fn total_supply(&self) -> Balance {
             self.total_supply
         }
     }
 }
```

## Example: Flipper

The below code shows the complete implementation of the so-called Flipper
ink! smart contract.
For us it acts as the "Hello, World!" of the ink! smart contracts because
it is minimal while still providing some more or less useful functionality.

It controls a single `bool` value that can be either `false` or `true`
and allows the user to flip this value using the `Flipper::flip` message
or retrieve the current value using `Flipper::get`.

```rust
#[ink::contract]
pub mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// Creates a new flipper smart contract initialized with the given value.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            Self { value: init_value }
        }

        /// Flips the current value of the Flipper's bool.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value of the Flipper's bool.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: docs/macros-attributes/default.md
````markdown
---
title: "#[ink(default)]"
slug: /macros-attributes/default
hide_title: true
---

![Text/default Title Picture](/img/title/text/default.svg)

Applicable to ink! messages and constructors.

Works as a hint for UIs to determine if constuctor/message should be picked as default.

At most one constructor or message can be marked as default.

## Example

```rust
#[ink(message, default)]
pub fn im_default(&self) {    
}
```
````

## File: docs/macros-attributes/event.md
````markdown
---
title: "#[ink::event]"
slug: /macros-attributes/event
hide_title: true
---

![Text/event2 Title Picture](/img/title/text/event2.svg)

Applicable on `struct` definitions.

Defines an ink! event. A contract can define multiple such ink! events.

Events can now be defined independently of contracts. The legacy syntax of events defined 
within a contract module using `#[ink(event)]` continues to be valid.

[See our section on Events](../basics/events.md) for a detailed description and examples.
````

## File: docs/macros-attributes/implementation.md
````markdown
---
title: "#[ink(impl)]"
slug: /macros-attributes/impl
hide_title: true
---

![Text/impl Title Picture](/img/title/text/impl.svg)

This attribute supports a niche case that is rarely needed.

Can be applied on ink! implementation blocks in order to make ink! aware
of them. This is useful if such an implementation block doesn't contain
any other ink! attributes, so it would be flagged by ink! as a Rust item.
Adding `#[ink(impl)]` on such implementation blocks makes them treated
as ink! implementation blocks thus allowing to access the environment
etc.

Note that ink! messages and constructors still need to be explicitly
flagged as such.

## Example

An implementation block can be defined as a trait implementation
for the ink! storage struct using the `#[ink(impl)]` annotation ‒ even
if none of its interior items have any ink! specific attributes on them:

```rust
use core::convert::TryFrom;

#[ink::contract]
mod my_module {
    #[ink(storage)]
    pub struct MyStorage {
        /* storage fields */
    }

    #[ink(impl)]
    impl MyStorage {
        fn my_method(&self) -> i32 {
            /* method implementation */
        }
    }

    impl MyStorage {
      #[ink(constructor)]
      pub fn my_constructor() -> Self {
          /* constructor implementation */
      }

      #[ink(message)]
      pub fn my_message(&self) {
          /* message implementation */
      }
    }
}
```
````

## File: docs/macros-attributes/message.md
````markdown
---
title: "#[ink(message)]"
slug: /macros-attributes/message
hide_title: true
---

![Text/message Title Picture](/img/title/text/message.svg)

Applicable to methods.

Flags a method for the ink! storage struct as message making it available to the API for calling the contract.

Note that all public functions must use the `#[ink(message)]` attribute

There must be at least one `#[ink(message)]` defined method.

Methods flagged with `#[ink(message)]` are special in that they are dispatchable
upon contract invocation. The set of ink! messages defined for an ink! smart contract
define its API surface with which users are allowed to interact.

An ink! smart contract can have multiple such ink! messages defined.

An ink! message with a `&self` receiver may only read state whereas an ink! message
with a `&mut self` receiver may mutate the contract's storage.

```rust
#[ink(message)]
pub fn purely_reading(&self, from: AccountId) {
    // actual implementation
}

#[ink(message)]
pub fn mutates_storage(&mut self, from: AccountId) {
    // actual implementation
}
```


## Messages Return Value

The return value of a message needs to implement `scale::Encode`.

It is notable that the collections under `ink_storage` ‒ such as e.g. `Vec` or `HashMap` ‒
don't implement `scale::Encode`. This means you can't just return a `Vec` from an ink! message.
This restriction is intentional ‒ returning a complete data structure with a potentially unbounded
content is an anti-pattern for smart contracts. Just think about the unpredictable gas costs.

If you _really really_ need to return a data structure in its entirety then use the ones from
`ink_prelude` (e.g. `ink_prelude::vec::Vec`). Those implement `scale::Encode`.


## Example

Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
as follows:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {

        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: docs/macros-attributes/namespace.md
````markdown
---
title: "#[ink(namespace = \"…\")]"
slug: /macros-attributes/namespace
hide_title: true
---

![Text/namespace Title Picture](/img/title/text/namespace.svg)

Applicable to ink! trait implementation blocks.

Applied on ink! trait implementation blocks to disambiguate other trait
implementation blocks with equal names.

## Example

```rust
#[ink(namespace = "my_namespace")]
impl MyTrait for MyStorage {
    #[ink(message)]
    fn my_message(&self) {}
}
```
    
This changes the resulting selectors of all the ink! messages and ink! constructors within the trait implementation.
Thus allowing disambiguation between trait implementations with overlapping message or constructor names.
````

## File: docs/macros-attributes/overview.md
````markdown
---
title: Overview
slug: /macros-attributes
hide_title: true
---

![Text/contract Title Picture](/img/title/text/contract.svg)

An ink! module is the module that is flagged by `#[ink::contract]` containing all the ink! definitions.
All ink! attributes are available to specify inside an ink! module.

## Merging Attributes

It is possible to merge attributes that share a common flagged entity.
The example below demonstrates this for a payable message with a custom selector.

```rust
#[ink(message)]
#[ink(payable)]
#[ink(selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
We can also write the above ink! message definition in the following way:
```rust
#[ink(message, payable, selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
````

## File: docs/macros-attributes/payable.md
````markdown
---
title: "#[ink(payable)]"
slug: /macros-attributes/payable
hide_title: true
---

![Text/payable Title Picture](/img/title/text/payable.svg)

Applicable to ink! messages.

Allows receiving value as part of the call of the ink! message.
ink! constructors are implicitly payable, due to the initial endowment which a contract requires.

An ink! message by default will reject calls that additional fund the smart contract.
Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
flag to it. An example below:

Note that ink! constructors are always implicitly payable and thus cannot be flagged
as such.

```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        #[ink(payable)] // You can either specify payable out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message, payable)] // or specify payable inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```

## Example

```rust
#[ink(message, payable)]
pub fn pay_me(&self) {
    let _transferred = self.env().transferred_value();
}
```

See the [`examples/contract-transfer`](https://github.com/use-ink/ink-examples/blob/main/contract-transfer/lib.rs) contract for a more extensive example.
````

## File: docs/macros-attributes/selector.md
````markdown
---
title: "#[ink(selector = S:u32)]"
slug: /macros-attributes/selector
hide_title: true
---

![Text/selector Title Picture](/img/title/text/selector.svg)

Applicable to ink! messages and ink! constructors.

By default ink! creates a selector for each message and constructor.
This is necessary since the contract is compiled to a Wasm blob and functions are invoked by invoking the
selector, which identifies a method ‒ method names are no longer available in these underlying layers.

Using this attribute it is possible to specify a concrete dispatch selector for the flagged entity. This allows a contract author to precisely control the selectors of their APIs making it possible to rename their API without breakage.

A selector must be a `u32` decodable integer. For example

- `selector = 0xCAFEBABE`
- `selector = 42`

An exception is the fallback selector `_`, allowing contract calls not matching any of the other message selectors to be dispatched to a fallback message. Fallback messages can be `payable`.

## Examples

```rust
#[ink(message, selector = 0xC0DECAFE)]
fn my_message_1(&self) {}

#[ink(message, selector = 42)]
fn my_message_2(&self) {}

#[ink(message, payable, selector = _)]
fn my_fallback(&self) {}
```
… then the selector of `my_message_1` is `[0xC0, 0xDE, 0xCA, 0xFE]` and the selector of `my_message_2` is `[0, 0, 0, 42]`
since setting the selector manually overrides the automatically generated selector.

## Controlling the messages selector

Every ink! message and ink! constructor has a selector with which the
message or constructor can be uniquely identified within the ink! smart contract.
Non-unique message or constructor selector lead to a compile time error.
These selectors are mainly used to drive the contract's dispatch upon calling it.

An ink! smart contract author can control the selector of an ink! message or ink!
constructor using the `selector` flag. An example is shown below:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        #[ink(selector = 0xDEADBEEF)] // Works on constructors as well.
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: initial_value }
        }

        #[ink(message)]
        #[ink(selector = 0xCAFEBABE)] // You can either specify selector out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        #[ink(message, selector = 0xC0DECAFE)] // ...or specify the selector inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: docs/macros-attributes/storage.md
````markdown
---
title: "#[ink(storage)]"
slug: /macros-attributes/storage
hide_title: true
---

![Text/storage Title Picture](/img/title/text/storage.svg)

Applicable on `struct` definitions. 

Applied on `struct` types in order to flag them for being
the contract's storage definition.
There can only be one ink! storage definition per contract.

There must be exactly one `#[ink(storage)]` struct.

This struct defines the layout of the storage that the ink! smart contract operates on.
The user is able to use a variety of built-in facilities, combine them in various ways
or even provide their own implementations of storage data structures.

For more information visit the `ink_storage` crate documentation.

## Example


```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn construct() -> Self { Flipper { value: false } }

        #[ink(message)]
        pub fn message(&self) {}
    }
}
```
````

## File: docs/macros-attributes/topic.md
````markdown
---
title: "#[ink(topic)]"
slug: /macros-attributes/topic
hide_title: true
---

![Text/topic Title Picture](/img/title/text/topic.svg)

Applied on fields of ink! event types to indicate that they are topics.

Tells the ink! codegen to provide a topic hash for the given field. Every ink! event can only have a limited number of such topic field.
The semantics are similar to indexed event arguments in Solidity.

## Example

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance
}
```
````

## File: docs/standards/overview.md
````markdown
---
title: Overview
slug: /standards/overview
hide_title: true
---

![Standards Title Picture](/img/title/standards.svg)

# Overview

Standards are maintained by the community initiative ink!hub.
You can find them here: [github.com/inkdevhub/standards](https://github.com/inkdevhub/standards).

## Wallet Support

<table className="wallet-table text--center">
    <tr>
        <th></th>
        <th className="text--left">Contract Interactions</th>
        <th className="text--left">Tokens (PSP-22)</th>
        <th className="text--left">NFTs (PSP-34)</th>
    </tr>
    <tr>
        <th>
            <a href="https://www.subwallet.app/" title="SubWallet" >
                <img src= "/img/wallets/subwallet.svg" className="wallet" alt="SubWallet" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
    </tr>
    <tr>
        <th>
            <a href="https://polkadot.js.org/extension/" title="Polkadot{.js}">
                <img src= "/img/wallets/polkadot-js.svg" className="wallet" alt="Polkadot{.js}" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <th>
            <a href="https://www.talisman.xyz/" title="Talisman">
                <img src= "/img/wallets/talisman.svg" className="wallet" alt="Talisman" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark"/></td>
        <td></td>
        <td></td>
    </tr>
</table>


## PSP-22

A standard for a fungible token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard fungible token interface for WebAssembly smart contracts, just like [EIP-20](https://github.com/ethereum/EIPs/edit/master/EIPS/eip-20.md) for the Ethereum ecosystem.

## PSP-34

A standard for a Non-Fungible Token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard Non-Fungible Token interface for WebAssembly smart contracts, just like [EIP-721](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md) for the Ethereum ecosystem.

## PSP-37

A standard for a Multi Token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard Multi Token interface for WebAssembly smart contracts, just like [EIP-1155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md) for the Ethereum ecosystem.
````

## File: docs/testing/testnet/faucet.md
````markdown
---
title: Faucet
slug: /faucet
hide_title: true
---

![Faucet Title Picture](/img/title/faucet.svg)

# Faucet

<!-- import Faucet from "./Faucet"; -->

There is a faucet for [Paseo](https://faucet.polkadot.io/).
By requesting funds from the link above you will receive `PAS`
tokens to your account on this parachain.

The polkadot-js UI will display them under [the "Accounts" tab for the Contracts parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpaseo.dotters.network#/accounts):
<img src="/img/pas-in-wallet.png" alt="Paseo testnet tokens in wallet" />
````

## File: docs/testing/testnet/Faucet.tsx
````typescript
import React, { useMemo, useState } from 'react'
import ReCAPTCHA from 'react-google-recaptcha'

const RECAPTCHA_SITE_KEY = '6LcgFI4nAAAAAATrEMoJ6zBacsx5udc1UhGFXemH'
const FAUCET_URL = 'https://rococo-faucet.parity-testnet.parity.io/drip/web'

const Faucet = () => {
  const [captcha, setCaptcha] = useState<string | null>(null)
  const acc = useMemo(() => {
    if (typeof window === 'undefined') return '';
    const params = new URLSearchParams(window?.location?.search);
    return params?.get('acc') || undefined;
  }, [])
  const [address, setAddress] = useState<string | undefined>(acc)
  const [hash, setHash] = useState<string>()
  const [error, setError] = useState<string>()
  const [inProgress, setInProgress] = useState(false)

  const handleRequest = async () => {
    try {
      setHash(undefined)
      setError(undefined)
      setInProgress(true)

      const body = {
        address,
        parachain_id: '1002',
        recaptcha: captcha,
      }

      const fetchResult = await fetch(FAUCET_URL, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
      })
      const result = await fetchResult.json()
      if ('error' in result) {
        setError(result.error)
      } else {
        setHash(result.hash)
      }
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e)
      setError('Hmm... something went wrong.')
    } finally {
      setInProgress(false)
    }
  }

  return (
    <div className="faucetContainer">
      <h3 className="faucetTitle">Get Testnet Tokens</h3>
      <div className="faucetPlantContainer">
        <img src="/img/plantOne.svg" alt="illustration of a sea grass plant" className="faucetPlantOne" />
        <img src="/img/plantTwo.svg" alt="illustration of a sea plant" className="faucetPlantTwo" />
      </div>
      <div className="faucetHeroContainer">
        <img src="/img/chest.svg" alt="treasure chest" className="faucetHeroImage" />
      </div>
      <form className="withHero">
        <fieldset>
          <label htmlFor="address-input">Your SS58 Address</label>
          <input
            className="addressInput"
            id="address-input"
            type="text"
            value={address}
            placeholder="e.g. 5HprbfKUFdN4qfweVbgRtqDPHfNtoi8NoWPE45e5bD5AEKiR"
            onChange={(e) => {
              setAddress(e.target.value)
              setError(undefined)
              setHash(undefined)
            }}
          />
        </fieldset>
        <ReCAPTCHA sitekey={RECAPTCHA_SITE_KEY} onChange={setCaptcha} />
        <button
          disabled={inProgress || !captcha || !address}
          onClick={async (e) => {
            e.preventDefault()
            await handleRequest()
          }}
        >
          {inProgress ? 'Requesting...' : 'Request'}
        </button>
      </form>

      <div className="faucetResultContainer">
        {hash && (
          <button
            className="faucet-success w-full border-none"
            onClick={() => window.open(`https://rococo.subscan.io/extrinsic/${hash}`, '_blank')}
          >
            <div className="faucet-success-ic">
              <p className="faucet-success-msg">Your funds have been sent!</p>
              <p className="faucet-success-cta">Click here to view the transaction</p>
            </div>
          </button>
        )}
        {error && <p className="error">{error}</p>}
      </div>
    </div>
  )
}

export default Faucet
````

## File: docs/testing/testnet/overview.md
````markdown
---
title: Contracts on Paseo
hide_title: true
slug: /testnet
---

![Testnet Title Picture](/img/title/testnet.svg)

# Contracts on Paseo

[Paseo](https://wiki.polkadot.network/docs/build-pdk#paseo-testnet) is a testnet for
Polkadot and Kusama parachains.

## How can I use it?
### (1) Create an Account

As a first step, you should create an account. This can be done via command-line
tools (e.g. `subxt`) or via a wallet (e.g. with the `polkadot-js` browser extension).
See [here](https://wiki.polkadot.network/docs/learn-account-generation) for a detailed guide.

### (2) Get Testnet Tokens

As a second step, you have to get `PAS` testnet tokens through the [Paseo Faucet](https://faucet.polkadot.io/).

Alternatively, you can use the [Matrix chat room](https://wiki.polkadot.network/docs/learn-DOT#getting-tokens-on-the-paseo-testnet).
You must send a message like this:

```
!drip <PASEO_ADDRESS>
```

If everything worked out, the `PAS` tokens will show up in your account.
In case you are using the `polkadot-js` frontend, you can see them under
[the "Accounts" tab for Paseo](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpaseo.dotters.network#/accounts).

<img src="/img/pas-in-wallet.png" alt="Paseo testnet tokens in wallet" />


### (3) Deploy Your Contract

Once you have `PAS` on Paseo you can deploy by following the instructions in the Pop Docs [here](https://learn.onpop.io/contracts/guides/deploy-on-pop-testnet#:~:text=Transfer%20from%20Paseo%20Relay%20Network%20to%20Pop%20Testnet).
The only difference is that instead of using the `Alice` account you will use the one you generated.
````

## File: docs/testing/debugging.md
````markdown
---
title: Debugging
slug: /basics/contract-debugging
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Contract Debugging

There are three ways to debug your ink! contract currently:

* You can write tests using one of the mechanisms described on the
  [Contract Testing](./overview.md) page.
* You can interact with your contract via a UI or command-line. This is
  described on the [Call Your Contract](../getting-started/calling.md) page.
* You can print debug statements in your contract. Those will appear
  on the Substrate node's `stdout`. This is described on this page.

### How do I print to the terminal console from ink!?

You can use those two macros:

* [`ink::env::debug_println!`](https://docs.rs/ink_env/5.0.0/ink_env/macro.debug_println.html)
* [`ink::env::debug_print!`](https://docs.rs/ink_env/5.0.0/ink_env/macro.debug_print.html)

There are things you could do to enable debug messages on the client console:

1. __Enable the feature `ink-debug` for the `ink_env` crate.__<br/>
   `cargo-contract` does this automatically for you (for versions `>= 0.13.0`), except if
   you compile a contract in `--release` mode.

1. __Set the log level of your node to `runtime::contracts=debug`.__<br/>
   For example, to have only errors and debug output show up for the `substrate-contracts-node`:

  ```
  substrate-contracts-node -lerror,runtime::contracts=debug
  ```

1. __Set the log level of your node to `runtime::contracts::strace` to trace host function calls.__<br/>
   These function calls logs will also be displayed in the `Debug message` panel of [Contracts UI](https://github.com/use-ink/contracts-ui).
   For example, to view these traces in addition to the logs described above:

  ```
  substrate-contracts-node -lerror,runtime::contracts=debug,runtime::contracts::strace=trace
  ```

## Example

The following code depicts how to print debug statements
from a message or constructor.

```rust
#[ink(constructor)]
fn new() -> Self {
    ink::env::debug_println!("created new instance at {}", Self::env().block_number());
    Self { }
}

#[ink(message)]
fn print(&self) {
   let caller = self.env().caller();
   let message = ink_prelude::format!("got a call from {:?}", caller);
   ink::env::debug_println!(&message);
}
```

:::note
Debug output is not printed for transactions!

It is only printed for RPC calls or off-chain tests.
:::

# Decode Data Payload

You can use a block explorer or an app like PolkadotJs to retrieve the data payload of a contract transaction, and then use [cargo-contract](https://github.com/use-ink/cargo-contract) to decode it.

```bash
# From your contract directory
cargo contract decode message -d fe5bd8ea01000000
```

This command will output the method name and parameters encoded in the data payload:

```
Decoded data: inc_by { n: 1 }
```

If the contract was called through a cross-contract interaction, the payload will not be available in the transaction. In such cases, you can use the approach described in the next section to access it.

# Replay and Debug a Block

To replay a transaction, you can use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to create a local fork of the chain and replay the block with trace-level logging.

Assuming you have a node that you can connect to at `$ENDPOINT` and the transaction you want to replay is in block `$BLOCK_HASH`, you can use the following command:

```bash
npx @acala-network/chopsticks@latest run-block \
--endpoint $ENDPOINT \
--block $BLOCK_HASH \
--runtime-log-level 5 \
| grep runtime::contracts
```

This command replays the block with trace-level logging enabled. By filtering the output with `runtime::contracts`, you can view all the contract calls in the block:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [246, 118, 44, 201]
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 1, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
```

From here, you can identify the call you are interested in and decode the data payload:

```bash
echo 254, 91, 216, 234, 1, 0, 0, 0 \
| tr ',' ' ' \
| xargs printf '%02x' \
| xargs cargo contract decode message -d
```

This command will output the following:

```
Decoded data: inc_by { n: 1 }
```

# Fork Node and Replay Transactions

You can also use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to start a local fork of your chain.

This command starts a fork beginning at block `$BLOCK_HASH`. You can connect to this fork using `ws://localhost:8000` to submit extrinsics via PolkadotJs or `cargo contract`:

```bash
npx @acala-network/chopsticks@latest \
--endpoint $ENDPOINT \
--block $BLOCK_HASH \
--runtime-log-level 5
```

Here, for example, you can re-run the transaction that we decoded in the previous section:

```bash
cargo contract call \
--contract $CONTRACT_ADDR \
--message inc_by --args 1 \
--suri //Alice \
--url ws://localhost:8000
```

Since trace-level logging is used, you will receive detailed information about all the host functions called during the execution of the contract:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 2, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           DEBUG: Execution finished with debug buffer: seal0::value_transferred(out_ptr: 65488, out_len_ptr: 65516) = Ok(())
seal0::input(out_ptr: 65536, out_len_ptr: 65524) = Ok(())
seal1::get_storage(key_ptr: 65536, key_len: 4, out_ptr: 65540, out_len_ptr: 65524) = Ok(Success)
seal2::set_storage(key_ptr: 65536, key_len: 4, value_ptr: 65540, value_len: 4) = Ok(4)
seal0::seal_return(flags: 0, data_ptr: 65536, data_len: 1) = Err(TrapReason::Return(ReturnData { flags: 0, data: [0] }))
```
````

## File: docs/testing/drink.md
````markdown
---
title: DRink!
hide_title: true
slug: /basics/contract-testing/drink
---

![Drink Title Picture](/img/title/drink.svg)

# DRink!

Apart from the core ink! testing framework, Aleph Zero also provides the [DRink!](https://github.com/inkdevhub/drink) library.
It offers an intermediate solution between integration and E2E testing.

Intuitively, DRink! maintains a full in-memory blockchain state and allows you to interact with it directly.
This gives a notably robust methodology in contrast to the off-chain engine facilitated by the `ink::test` macro.
Nevertheless, it is essential to note that the absence of the entire node layer makes the environment less realistic compared to the comprehensive setup employed in the end-to-end tests.

## Comparison to the other testing strategies

To better assess when DRink! performs better than other testing methods, it is crucial to gain a deeper understanding of the consequences of its unique design and the trade-offs it entails.

1. **Speed:** since DRink! doesn't spawn any node or background process, everything happens locally, within the testing thread.
This means that the execution can be synchronous and significantly faster than the E2E tests.
Therefore, its performance should be comparable to the unit or integration testing.
Also, there is no block production or finalization delay, which is a noticeable factor in the E2E tests.
Thanks to that, we can launch long-running simulations in a reasonable time.

2. **Testing multiple contracts:** since we are working with a full blockchain state, we can perform any interaction with the contracts, which includes working with mutliple contracts at the same time.
Of course, this is the same as in the E2E tests, but it is not possible in either the unit or integration tests.

3. **Working with arbitrary runtimes:** similarly to the E2E tests, where we can spawn any node with customized runtime (Polkadot's term for the state transition function), in DRink! tests we can work with any blockchain runtime we want.

4. **Full control over runtime state:** we hold the state of the blockchain and exercise full control over it, so we can easily manipulate it however we want.
This covers manipulating block number, timestamp, account balances, etc.
Some of these are also possible in the E2E tests, but usually they require more effort or overhead.

5. **Powerful features:** thanks to the unique design of DRink!, we can easily take advantage of some powerful, not available in other testing strategies, features:

   - **contract mocking:** you can mock any contract or message you want, specifying the default behavior or the exact return value.
   - **enhanced debugging and call tracing:** you can get more insights into the contract execution process, like stack trace, debug buffers and more.

Nevertheless, there are some drawbacks of DRink! as well:

1. **No node layer:** since we don't spawn any node, we don't have access to the node layer, which means that we can't test any node-related functionality, like RPC calls, block production, etc.

2. **Artificial, isolated environment:** this is the main trade-off of DRink!.
It might give a false sense of security, while in the real environment, the contract could behave differently.
The discrepancy can be mitigated by a careful and precise simulation and setup of the environment, but it is still a factor to consider.

3. **No typed contract API:** currently, DRink! works with string-encoded arguments and values, which means that we lose the type safety and convenience that was present in the other testing frameworks.
Fortunately, this is going to change soon, as there is an ongoing effort to integrate it with [ink-wrapper](https://github.com/Cardinal-Cryptography/ink-wrapper) library.

## When to use `DRink!`?

Usually, DRink! is a good choice for the development phase of your project.
When the iteration speed is crucial, and you want to quickly test your contracts, DRink! will offer a versatile, yet highly efficient testing environment.
However, you must not forget that it is not a replacement for the E2E tests, which should be run before the deployment to the production network, as well as in your CI/CD pipelines.

DRink! also comes in handy when you need to:
 - mock some parts of your contract suite
 - debug the execution process
 - launch long-running simulations, that would normally take a lot of time when relying on a real block-time

## How to use DRink!?

There are three ways to use DRink!:

### Directly as a library

This way you gain access to full DRink! power in your test suites.

`drink` library is continuously published to [crates.io](https://crates.io/crates/drink), so you can use it in your project with either `cargo add drink` or by adding the following line to your `Cargo.toml`:
```toml
drink = { version = "0.8" }
```

Then, you can write your tests like this:
```rust
#[cfg(test)]
mod tests {
    /// This will take care of building all contract dependencies in the compilation phase and gather all contract 
    /// bundles (metadata and the compiled code) into a single registry.
    #[drink::contract_bundle_provider]
    enum BundleProvider {}

   /// Within `drink::test` macro, you are provided with a `session` object, which is a wrapper around the
   /// blockchain state. You can use it to deploy contracts, call their methods, and more.
    #[drink::test]
    fn deploy_and_call_a_contract(mut session: Session) -> Result<(), Box<dyn Error>> {
        let result: bool = sesison
            .deploy_bundle_and(BundleProvider::local(), "new", &["true"], NO_SALT, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call("get", NO_ARGS, NO_ENDOWMENT)??;
        assert_eq!(result, false);
    }
}
```

You can check some helpful and verbose examples [here](https://github.com/inkdevhub/drink/tree/main/examples), including the [**quick start guide**](https://github.com/inkdevhub/drink/tree/main/examples/quick-start-with-drink).

### As an alternative backend to ink!'s E2E testing framework

DRink! is already integrated with the ink! framework and can be used as a drop-in replacement for the standard E2E testing environment.
Just use corresponding argument in the test macro:
```rust
#[ink_e2e::test(backend(runtime_only))]
```
to your test function and you have just switched from E2E testcase to DRink!-based one, that doesn't use any running node in the background!

For a full example check out [ink! repository](https://github.com/use-ink/ink-examples/tree/main/e2e-runtime-only-backend).

### With a command line tool

We provide a CLI which puts DRink! behind friendly TUI.
For more details, consult [its README](https://github.com/inkdevhub/drink/blob/main/drink-cli/README.md).

Similarly to `drink` library, `drink-cli` is published to [crates.io](https://crates.io/crates/drink-cli) as well.
You can install it with:
```shell
cargo install drink-cli
```
````

## File: docs/testing/e2e.md
````markdown
---
title: End-to-End (E2E) Tests
hide_title: true
slug: /basics/contract-testing/end-to-end-e2e-testing
---

![Testing1 Title Picture](/img/title/testing1.svg)

# End-to-End (E2E) Tests

E2E testing enables developers to write a test that will not only test the contract in an
isolated manner; instead the contract will be tested _together_ with all components that
will be involved on-chain – so from end to end. This way of testing resembles closely
how the contract will actually behave in production.

As part of the test, the contract will be compiled and deployed to a Substrate node that
is running in the background. ink! offers API functions that enable developers to then
interact with the contract via transactions that they create and submit to the blockchain.

You as a developer can define assertions on the outcome of their transactions, such as checking
for state mutations, transaction failures or incurred gas costs.

Your chain configuration will be tested together with the smart contract. And if your
chain has pallets that are involved with the smart contract execution, those will be
part of the test execution as well.

ink! does not put any requirements on the Substrate node in the background – for example,
you can run a node that contains a snapshot of a live network.

## Example

The following code example illustrates a basic E2E test for the
[flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

```rust
#[ink_e2e::test]
async fn default_works<Client: E2EBackend>(mut client: Client) -> E2EResult<()> {
    // When the function is entered, the contract was already
    // built in the background via `cargo contract build`.
    // The `client` object exposes an interface to interact
    // with the Substrate node.
    
    // given
    let mut constructor = FlipperRef::new_default();

    // when
    let contract = client
        .instantiate("flipper", &ink_e2e::bob(), &mut constructor)
        .submit()
        .await
        .expect("instantiate failed");
    let call_builder = contract.call_builder::<Flipper>();

    // then
    let get = call_builder.get();
    let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await?;
    assert!(matches!(get_res.return_value(), false));

    Ok(())
}
```

You can run the above test by going to the `flipper` folder in
[the ink! examples directory](https://github.com/use-ink/ink-examples/tree/main).

Before you can run the test, you have to install a Substrate
node with `pallet-contracts`. By default e2e tests require that you install [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node). You do not need to run it in the background since the node is started for each test independently.
To install the latest version:

```sh
cargo install contracts-node --git https://github.com/paritytech/substrate-contracts-node.git
```
If you want to run any other node with `pallet-contracts` you need to change `CONTRACTS_NODE` environment variable:

```sh
export CONTRACTS_NODE="YOUR_CONTRACTS_NODE_PATH"
```

And finally execute the following command to start e2e test execution.

```sh
cargo test --features e2e-tests
```
````

## File: docs/testing/off-chain.md
````markdown
---
title: Off-chain Tests
hide_title: true
slug: /basics/contract-testing/off-chain
---

![Testing1 Title Picture](/img/title/testing1.svg)

## Unit Tests

Testing contracts off-chain is done by `cargo test` and users can simply use the standard Rust
routines of creating unit test modules within the ink! project:

```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn my_test() { ... }
}
```

Test instances of contracts can be created with something like:

```rust
let contract = MyContract::my_constructor(a, b);
```

Messages can simply be called on the returned instance as if `MyContract::my_constructor` returns a
`Self` instance.

See the [flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

# Integration Tests

For integration tests, the test is annotated with our `#[ink::test]`
attribute instead of `#[test]`. Our attribute denotes that
the test is then executed in a simulated, mocked blockchain environment.
here are functions available to influence how the test environment
is configured (e.g. setting a specified balance of an account to
simulate how a contract would behave when interacting with it).

If you annotate a test with the `#[ink::test]` attribute it
will be executed in a simulated environment, similar to as it
would be run on-chain.
You then have fine-grained control over how a contract is called; 
for example you can influence the block advancement, the value transferred to it,
by which account it is called, which storage it is run with, etc..

See the [`examples/erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) contract on how to utilize those or [the documentation](https://docs.rs/ink/5.0.0/ink/attr.test.html) for details.

At the moment there are some known limitations to our off-chain environment,
and we are working on making it behave as close to the real chain environment
as possible.

:::note
One limitation of the off-chain testing framework is that it
currently only supports a `DefaultEnvironment`.

See [here](../basics/environment.md) for an explanation of what an environment is.
:::

## How do you find out if your test requires the off-chain environment?

Normally if the test recursively uses or invokes some contract methods that
call a method defined in `self.env()` or `Self::env()`.

An example is the following:

```rust
let caller: AccountId = self.env().caller();
```

## Example

```rust
#[cfg(test)]
mod tests {
    // Conventional unit test that works with assertions.
    #[ink::test]
    fn test1() {
        // test code comes here as usual
    }

    // Conventional unit test that returns some Result.
    // The test code can make use of operator-`?`.
    #[ink::test]
    fn test2() -> Result<(), ink::env::Error> {
        // test code that returns a Rust Result type
    }
}
```
````

## File: docs/testing/overview.md
````markdown
---
title: Overview
hide_title: true
slug: /basics/contract-testing/overview
---

![Testing1 Title Picture](/img/title/testing1.svg)

# Overview

ink! supports three different stages of testing: unit, integration
and end-to-end tests. On this page we'll explain what the purpose
of each stage is about and how to use it.

<img src="/img/testing.png" />

Generally you can think of those three types of testing as a pyramid
with the top being the most elaborate test. The End-to-End (E2E)
tests at the top will test the lower layers of the pyramid as part
of them.
````

## File: docs/testing/testing-with-live-state.md
````markdown
---
title: Testing with Chain Snapshots
hide_title: true
slug: /basics/contract-testing/chain-snapshot
---

![Blockchain Fork Title Picture](/img/title/blockchain-fork.svg)

# Test your Contract with a Chain Snapshot

On this page we explain how to test ink! contracts with the
fork of an existing chain. We'll take a snapshot of an existing
chain for this purpose. The snapshot contains the chains full state,
but can be modified locally without affecting the live chain. 
We'll use the [Chopsticks](https://github.com/AcalaNetwork/chopsticks)
tool for this purpose.

This is a powerful workflow that you can use to e.g.

* Test a contract upgrade or migration locally before running it in production.
* Debug the behavior of an on-chain contract with on-chain state locally.
* Get detailed debug info and replay blocks as you want.
* …and much more!

In the first section of this page we explain the general concept, using a local
`substrate-contracts-node` that will play the role of our "live chain".
The `substrate-contracts-node` is just for exemplary purposes, you can also 
apply the exact same workflow to production chains like Astar, Aleph Zero,
Pendulum and others.

## General Concept

First you need a node that has produced some blocks with state. We'll
use `substrate-contracts-node` for this purpose.
[See here](../getting-started/running.md) for how to run it.

You should get output similar to:

```
$ substrate-contracts-node
2023-09-26 07:58:28.885  INFO main sc_cli::runner: Substrate Contracts Node    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: ✌️  version 0.30.0-124c159ba94    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: ❤️  by Parity Technologies <admin@parity.io>, 2021-2023    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 📋 Chain specification: Development    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 🏷  Node name: chilly-desire-6458    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 👤 Role: AUTHORITY    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 💾 Database: ParityDb at /tmp/substrateoKCAts/chains/dev/paritydb/full    
2023-09-26 07:58:38.723  INFO main sc_rpc_server: Running JSON-RPC server: addr=127.0.0.1:9944, allowed origins=["*"]  
```

Note that the node is running on port 9944.

Next, we'll create some state and produce a bunch of blocks. You can do this by deploying [our
`flipper` example](https://github.com/use-ink/ink-examples/tree/main/flipper):

```
cd ink-examples/flipper/
cargo contract build --release
cargo contract instantiate --suri //Alice --args true -x
```

You can check that the contract exists by querying its state via `cargo-contract`:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

### Setup Chopsticks

We will now set up [Chopsticks](https://github.com/AcalaNetwork/chopsticks),
a powerful tool in our ecosystem that allows us to create a parallel reality
of an existing network.

We will run it and have it mirror the `substrate-contracts-node` that is already running
on our machine from the previous step.

The following schema illustrates the setup that we will create:

<img className="schema2" width title="Test your smart contract on a Chopsticks branch" src="/img/test-smart-contract-with-chain-snapshot.svg" alt="Chain Snapshot" />

Clone chopsticks:

```
git clone https://github.com/AcalaNetwork/chopsticks
```

Modify the `dev.yml` config file in the cloned repository (or create one from scratch) :

```
endpoint: ws://127.0.0.1:9944
mock-signature-host: true
block: 1
db: ./db.sqlite
```

:::info
In the example above chopsticks will be mirroring up until block 1 from the
`substrate-contracts-node`.

For production chains (like Aleph Zero or Astar) you would want to use a different
block number and different endpoint. The Chopsticks repository already contains a
wide number of configurations for ink! production chains (see [here](https://github.com/AcalaNetwork/chopsticks/tree/master/configs)).
If you don't find a fitting configuration there, see the section
"[Application to Production Chains](#application-to-production-chains)".
:::

You can either run chopsticks locally by following the instructions
[here](https://github.com/AcalaNetwork/chopsticks#install), or
you can run it using npx:

```
npx @acala-network/chopsticks@latest --config=configs/dev.yml
```

You should get output similar to:

```
npx @acala-network/chopsticks@latest --config=configs/dev.yml
[08:22:31.231] INFO (rpc/3037748): Development RPC listening on port 8000
```

The Chopsticks node is running on port 8000.
If you now execute the `cargo-contract` storage command against this node, you'll see
that the `flipper` contract exists there as well:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:8000
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

Chopsticks has branched off from the live chain.
You can now submit transactions to the Chopsticks node on port 8000,
without affecting the node/chain on port 9944.

### Run ink! E2E Tests

Recap: We have our "live" `substrate-contracts-node` running on port 9944
and our test node with the branched state running on port 8000.

Next we would like to run some tests against the contract on our forked chain. 
Our `flipper/lib.rs` contains a test that illustrates how to do this.
The test reads an environment variable `CONTRACT_ADDR_HEX` that refers to
the `flipper` on-chain address.

Here's the code for it:

```rust
#[ink_e2e::test]
#[ignore]
async fn e2e_test_deployed_contract<Client: E2EBackend>(
    mut client: Client,
) -> E2EResult<()> {
    // given
    let addr = std::env::var("CONTRACT_ADDR_HEX")
        .unwrap()
        .replace("0x", "");
    let acc_id = hex::decode(addr).unwrap();
    let acc_id = AccountId::try_from(&acc_id[..]).unwrap();

    // when
    // Invoke `Flipper::flip()` from Bob's account
    let call_builder = ink_e2e::create_call_builder::<Flipper>(acc_id);
    let flip = call_builder.flip();
    let _flip_res = client.call(&ink_e2e::bob(), &flip).submit().await?;
    
    // then
    let get = call_builder.get();
    let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await?;
    assert!(matches!(get_res.return_value(), false));
    Ok(())
}
```

The test is marked as `#[ignore]`, as it requires the pre-conditions that we went through
above to succeed.

:::info
You can convert SS58 addresses to hex using [the `subkey` tool](https://crates.io/crates/subkey):

```
subkey inspect <YOUR-SS58>
```
:::

Here's the process to execute the above test:

```
# Address of your on-chain contract
export CONTRACT_HEX=0x2c75f0aa09dbfbfd49e6286a0f2edd3b4913f04a58b13391c79e96782f5713e3

# This env variable needs to be set to reference the Chopsticks node.
# If this env variable is not set, `ink_e2e` will spawn a new node
# process (typically of `substrate-contracts-node`) for each test.
export CONTRACTS_NODE_URL=ws://127.0.0.1:8000

cargo test --features e2e-tests e2e_test_deployed_contract -- --ignored
```

You will get output similar to the following:

```
running 1 tests
test flipper::e2e_tests::e2e_test_deployed_contract ... ok
```

If you query the contract storage on our Chopsticks fork, you'll see that the E2E test
flipped the boolean:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:8000
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: false } |
+-------+----------+--------+-------------------------+
```

On the "original" `substrate-contracts-node` chain the boolean will be untouched.

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:9944
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

Success! We just ran an ink! end-to-end test against the snapshot of a chain!

## Application to Production Chains

You can apply the workflow explained above to ink! production chains.

You would want to use a different block number and different endpoint.
The Chopsticks repository already contains a wide number of configurations for
ink! production chains (see [here](https://github.com/AcalaNetwork/chopsticks/tree/master/configs)).

If a pre-made config for chain you want to fork from is not available, you can just
modify the `dev.yml`. You can use [polkadot-js/apps](https://polkadot.js.org/apps) to
the URL of an endpoint to use:

<img src="/img/polkadot-js-rpc-endpoint.png"  />
````

## File: docs/third-party-tools/swanky/cli.md
````markdown
---
sidebar_position: 1
# Display h2 to h5 headings
toc_min_heading_level: 2
toc_max_heading_level: 4
slug: /getting-started/swanky/cli
---

import Figure from './Figure'
import Tabs from '@theme/Tabs'
import TabItem from '@theme/TabItem'

# Swanky CLI

Swanky CLI is a Node.js based CLI application that abstracts away and extends the functionality of Polkadot.js, `cargo contract`, and other Wasm developer tools.
It aims to ease development of and interaction with Wasm smart contracts and provides simple tools to bootstrap contract environment (project) with contract and integration tests templates, manage local node and accounts, language agnostic compile, deploy contracts to both local and remote networks, compatibility checks between the contract pallet and compiler...

With all of the features mentioned above, even more is in active or planned development. The whole project is public, and everyone is welcome to contribute or suggest features:

- [Swanky CLI repo](https://github.com/AstarNetwork/swanky-cli)
- [Swanky CLI project](https://github.com/orgs/AstarNetwork/projects/3)

:::info
Templates provided in the current version of swanky-cli, as well as environment and supported tools target ink! v4, and use `cargo contract` v2
:::

## Installing

The CLI can be installed and used in different ways:

- using a preconfigured environment of a dev-container
- downloading a precompiled binary
- as an npm package

:::caution
Note that using the precompiled binaries, NPM, or compiling it yourself requires you to have the [local environment set up](https://docs.astar.network/docs/build/environment/ink_environment) correctly
:::

### Dev container (Recommended)

Using [dev container](https://github.com/inkdevhub/swanky-dev-container) is the recommended method to use `swanky-cli`, it includes all the environment setup and will support auto-updates in the future.

To run your project in the dev container follow the steps on [swanky-dev-container Github](https://github.com/AstarNetwork/swanky-dev-container).

### Download the precompiled binaries

1. Download the correct archive for your platform from the [releases section of swanky-cli github page](https://github.com/AstarNetwork/swanky-cli/releases).

2. Extract the archive to the appropriate location, for example the `software` directory.

3. Add the `swanky` executable to your path variable by creating a symbolic link to it from a common `bin` directory or somewhere similar.

<Tabs>
<TabItem value="MacOS" label="MacOS" default>

```sh
ln -s /Users/my_name/software/swanky-cli/bin/swanky /usr/local/bin
```

</TabItem>
<TabItem value="Debian/Ubuntu" label="Debian/Ubuntu">

```sh
ln -s /home/my_name/swanky-cli/bin/swanky /usr/local/bin
```

</TabItem>
</Tabs>

### Globally with npm

This approach may seem simpler, but due to the nature of `Node.js` dependency management, may result in version inconsistency or other errors.

```sh-session
$ npm install -g @astar-network/swanky-cli
```

or

```sh-session
$ npx @astar-network/swanky-cli [command]
```

## Using swanky-cli

If you're using a dev container, or have followed the installation instructions, you should have `swanky` command available in your terminal.

Running it without any arguments (or with `-h`/`--help`) will provide you with a list of top-level commands and the app version.

Passing `help` as an argument and providing it `-n`/`--nested-commands` flag will show full list of commands, including nested ones:

```bash
swanky help --nested-commands
```

<Figure caption="Full list of commands" src={require('./assets/help.png').default} width="65%" />

Note that every command and subcommand also supports `-h`/`--help` flags to display their usage instructions.

Likewise, most of the commands support `-v` /`--verbose` flag, which you can use to get more detailed output (useful for debugging and reporting errors).

### Bootstrap a new project

Using the `swanky init` command, you'll be prompted for a series of answers to define your project and the first smart contract within it.

After gathering all the required information, the app will proceed to check your environment, scaffold the project, download and install (optionally) swanky node and the project dependencies.

```
swanky init PROJECT_NAME
```

<Figure caption="Init process" src={require('./assets/init.png').default} width="65%" />

The resulting folder structure should look something like this:

<Figure caption="Folder structure" src={require('./assets/folder-structure.png').default} width="65%" />

_Resources:_

- [_`swanky init` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#quick-start)
- [_available templates_](https://github.com/AstarNetwork/swanky-cli/tree/master/src/templates)

### Check dependencies and compatibility

You can quickly check the presence and versions of required dependencies by running `swanky check` command.

<Figure caption="Verify dependencies" src={require('./assets/check.png').default} width="65%" />

:::info
For now, you will need to be be in a project folder to run this command.

This command will be updated to fix that, and provide more useful information.
:::

_Resources:_

- [_`swanky check` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

### Manage accounts

Create and list accounts used for contract interaction.

These are the accounts stored inside your `swanky.config.json`, so the command needs to be ran from within the project directory.

During account creation you'll have an option of passing your own mnemonic, or have Swanky generate one for you by passing `-g` flag.

You can also mark the account as "production" which will require you to set a password and encrypt the mnemonic.

Be careful not to use a dev account on live networks, as their mnemonic is stored in plain text in the config!

<Figure caption="Creating and listing accounts" src={require('./assets/acc-create.png').default} width="65%" />

:::tip
Newly generated accounts that are not the preconfigured dev accounts (Alice, Bob, Charlie...) will have no funds initially, so you'll have to transfer some manually.
:::

_Resources:_

- [_`swanky account` command usage manual_](https://github.com/AstarNetwork/swanky-cli#swanky-account-create)
                                            

### Interact with contracts

`swanky contract` command offers several subcommands for different interactions with your contracts.

<Figure caption="Different `contract` subcommands" src={require('./assets/contract-commands.png').default} width="65%" />

The command names are self explanatory, and to get more detailed information on using a specific command, you can use the help flag with it:

```
swanky contract SUB_COMMAND --help
```

#### Compile

Depending on the contracts definition in `swanky.config.json`, calling `swanky contract compile CONTRACT_NAME` will run either cargo-contract or ask! compiler (via npm script).

If you have multiple contracts and wish to compile them all at once, you can pass the `--all` flag instead of the contract name.

Likewise, if you're compiling for production, you need to pass the `--prod` flag.

<Figure caption="Compile all contracts" src={require('./assets/compile.png').default} width="65%"/>

_Resources:_

- [_`swanky account` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

#### Get detailed contract description

Compiling the contract will generate it's metadata too.

Swanky provides `contract explain CONTRACT_NAME` command to get a more human friendly version of that metadata:

<Figure caption="Getting contract metadata information" src={require('./assets/contract-explain.png').default} width="65%"/>

_Resources:_

- [_`contract compile` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

#### Run E2E tests

You can test your contracts using [Mocha](https://mochajs.org/) framework and [Chai](https://www.chaijs.com/) assertions.

:::note
Please note these tests are not ink! E2E tests, but are written in TypeScript, and require a local node to be running.

You can get more information on ink! E2E test framework in the [ink! documentation](../../testing/e2e.md).
:::
A contract template will provide you with a simple test as well, which you can use as a starting point.
The tests utilize [@polkadot/api](https://polkadot.js.org/docs/api/) library, and contract types generated by [typechain-polkadot](https://github.com/727-Ventures/typechain-polkadot).
The types are generated during the compile step and copied to `test/*/typedContract/` directory, along with the contract artifacts in the `test/*/artifacts/` directory. If you need only the types generated
(if you for example deleted or edited them), you can do that without going through the whole compilation step by using `swanky contract typegen` command.

Running `swanky contract test CONTRACT_NAME` will detect all `*.test.ts` files in the `test/contract_name/` directory, and run them sequentially, or in all directories inside `test/` if you pass the `-a`/`--all` flag.

<Figure caption="Run tests for a contract" src={require('./assets/test.png').default} width="65%"/>

:::tip
Running the tests programmatically may throw warnings about duplicate dependencies on `@polkadot/*` libraries.
This occurs because those libraries are included in swanky app itself, as well as in the test files.
Apart from the warning text spamming, no negative consequence of this has been observed.

If you want to avoid the warnings anyway, you can run tests as a yarn/npm command:

`yarn test` or

`npm run test`
:::

Web based report will be generated and stored in `artifacts/` directory. You can copy the path of the reports and use the `serve` app to view them in browser. (`serve` is included in swanky-dev-container)

```
serve PATH_TO_REPORTS
```

<Figure caption="Web based test report" src={require('./assets/test-report.png').default} width="65%"/>

_Resources:_

- [_`swanky contract test` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-test-contractname)

#### Deploy your contract

When your contract is compiled and tested, you can deploy it to a local node or a remote network.

You will need to supply account you wish to deploy the contract from (`-account`), max amount of gas to be used (`-g`), and any arguments required by your contract's constructor (`-a`).

By default, your contract will be deployed to a local node, but you can pass a custom network via `-n`/`--network` flag. Available networks are configured in `swanky.config.json` file.

<Figure caption="Deploying the contract" src={require('./assets/deploy.png').default} width="65%"/>

Successfully running the `deploy` command will print out the address your contract is deployed to, as well as save it into `swanky.config.json`

_Resources:_

- [_`swanky contract deploy` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-deploy-contractname)

#### Run queries and transactions

Once your contract is deployed, you can call it from the CLI using `query` or `tx` commands.

Use `query` for read-only calls, and `tx` for the calls that change the chain state and require signing (and a gas fee).

Both commands require `CONTRACT_NAME` and `MESSAGE_NAME` parameters, and for `tx` a caller account needs to be provided too. (`-a`/`--account`).

If the message you're calling requires arguments to be passed, you can do that using `-p`/`--param` flag.

<Figure caption="Calling a query on a contract" src={require('./assets/contract-query.png').default} width="65%"/>

<Figure caption="Calling a transaction on a contract" src={require('./assets/contract-tx.png').default} width="65%"/>

Result of a `query` is straight forward, `OK` followed by what ever the response is.

The transaction (`tx`) is a bit more raw though. Important to note are the `dispatchError` and `internalError` fields, plus the `status` field.
If the errors are `undefined`, and the status `finalized`, your transaction has been successful.

:::tip
Gas fee for `tx` is calculated and applied automatically, but you can provide a gas limit manually by using the `-g`/`--gas` flag.

Keep in mind that the transaction will fail if you provide too low a value.
:::

_Resources:_

- [_`swanky contract query` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-query-contractname-messagename)
- [_`swanky contract tx` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-tx-contractname-messagename)

#### Add a new contract from template

You can create additional contracts in the same project, using the `contract new` command and selecting from predefined templates.

The contract will be referred by `name` when using the relevant contract commands, and you can check the details in `swanky.config.json`

<Figure caption="Adding a new contract" src={require('./assets/contract-new.png').default} width="65%"/>

_Resources:_

- [_`swanky contract new` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-new-contractname)

### Interact with a local node

If you have chosen to download and use the Swanky Node during init step, you can use `swanky node` commands to start and manage it.

Simply running `swanky node start` will start the node, and the node will preserve the state across restarts.

If you want to reset the node state, use the `swanky node purge` command.

<Figure caption="Starting the swanky node" src={require('./assets/node-start.png').default} width="65%"/>

:::info
Note that node needs to be running if you are using a default local network with `deploy`, `query` and `tx` commands.
:::

:::caution
If you want to use an external UI to interact with the node, you might run into some CORS issues.

This can be solved by passing a custom array of whitelisted urls using the `--rpcCors` flag.
:::

_Resources:_

- [_`swanky node` commands usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-node-purge)

## Using plugins

Swanky CLI's functionality can be extended by the use of plugins, and it's a way to add new, case specific commands without modifying the core codebase.

One WIP example is the [Phala plugin](https://github.com/AstarNetwork/swanky-plugin-phala)

:::info
If you are interested in developing a plugin, you can refer to the Phala example, and the [Oclif plugin documentation](https://oclif.io/docs/plugins), or you can post a request in [swanky-cli repo](https://github.com/AstarNetwork/swanky-cli/issues)'s issues.
:::

_Resources:_

- [_`swanky plugin` commands usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-plugins)
````

## File: docs/third-party-tools/swanky/Figure.tsx
````typescript
import React from 'react'

type Props = {
  src: string
  caption: string
  width?: string
}

const Figure: React.FC<Props> = ({ src, caption, width = '460px' }) => {
  return (
    <center>
      <figure>
        <img src={src} alt={caption} width={width}></img>
        <figcaption>{caption}</figcaption>
      </figure>
    </center>
  )
}

export default Figure
````

## File: docs/third-party-tools/swanky/index.md
````markdown
---
title: Swanky Suite
slug: /getting-started/swanky
---

import Figure from './Figure'

# Swanky Suite

Swanky Suite aims to be an "all-in-one" tool for Wasm smart contract developers. It is based on existing tools like` cargo contract CLI` and `polkadot.js` but extends their functionality with many additional features such as smart contract templates, and an instant finality (Swanky) node, which reduces the contract development lifecycle.

Swanky Suite is a tool that provides Web3 Wasm dapps developers with an experience that is more in-line with what they're familiar with, compared to popular tooling for EVM.

Swanky Suite offers an extensible set of features, allowing developers to:

- Quickly spin up a local contract development node with instant finality (Swanky Node).
- Easily scaffold new projects using templates for both smart contracts and (soon) front-end dApps.
- Compile projects in various languages that target Wasm (ink! Ask-Lite).
- provide Typescript based integration testing simulating interaction from the client-side.
- Handle and manage network accounts.
- Deploy smart contracts within the Polkadot ecosystem to networks that support `pallet-contracts`.
- Make arbitrary calls to deployed smart contracts.

## Architecture Overview

The Swanky Suite consists of two parts, Swanky CLI and Swanky Node.

Source code for both Swanky CLI and Swanky Node are hosted on GitHub:

- [Swanky CLI](https://github.com/AstarNetwork/swanky-cli).
- [Swanky Node](https://github.com/AstarNetwork/swanky-node).

<Figure caption="The architecture envisioned for Swanky CLI and Swanky Node (Local developer node)" src={require('./assets/SwankySuiteAstar.png').default} width="100%"/>

:::note
The actual state deviates slightly from the above diagram as both the cli and the node are constantly iterated upon and updated, but it illustrates the general idea behind the suite.
:::

## Documentation and resources

[`swanky` CLI Github repo] with the latest documentation.

[`swanky-node` Github repo] with the latest documentation.

[`pallet-contracts`] documentation on Parity Github

[`pallet-contracts`]: https://github.com/paritytech/substrate/tree/master/frame/contracts
[`pallet-dapps-staking`]: https://github.com/AstarNetwork/astar-frame/tree/polkadot-v0.9.27/frame/dapps-staking
[`pallet-assets`]: https://github.com/paritytech/substrate/tree/master/frame/assets
[`swanky-node` github repo]: https://github.com/AstarNetwork/swanky-node
[`swanky` cli github repo]: https://github.com/AstarNetwork/swanky-cli
````

## File: docs/third-party-tools/swanky/node.md
````markdown
---
sidebar_position: 2
slug: /getting-started/swanky/node
---

# Swanky Node

Swanky Node is a Substrate based blockchain configured to enable `pallet-contracts` (a smart contract module), and other features that assist local development of Wasm smart contracts.

### Features

- [pallet-contracts](https://github.com/paritytech/substrate/tree/master/frame/contracts)
- `grandpa` & `aura` consensus were removed. Instead, `instant-seal` & `manual-seal` are used.
  Blocks are authored & finalized (1) as soon as a transaction get in the pool (2) when `engine_createBlock` `engine_finalizeBlock` RPC called respectively.
- `pallet-dapps-staking`
- `pallet-assets`
- `pallet-assets` chain extension
- `pallet-dapps-staking` chain extension

Swanky Node is optimized for local development, while removing unnecessary components such as P2P.
Additional features and pallets, such as to interact between (Contract ↔ Runtime), will be added in the future.

### Compatible ink! version

ink! `v4.0.0` or lower is supported.

### Installation

#### Download Binary

The easiest method of installation is by downloading and executing a precompiled binary from the [Release Page](https://github.com/AstarNetwork/swanky-node/releases)

#### Build Locally

If you would like to build the source locally, you should first complete the [basic Rust setup instructions](https://docs.astar.network/docs/build/environment/ink_environment#rust-and-cargo).
Once Rust is installed and configured, you will be able to build the node with:

```bash
cargo build --release
```

### Embedded Docs :book:

Once the project has been built, the following command can be used to explore all parameters and
subcommands:

```bash
./target/release/swanky-node -h
```

### Usage

This command will start the single-node development chain with a persistent state.

```bash
./target/release/swanky-node
```

If you would prefer to run the node in non-persistent mode, use tmp option.

```
./target/release/swanky-node --tmp
# or
./target/release/swanky-node --dev
```

Purge the development chain's state.

```bash
./target/release/swanky-node purge-chain
```

### Development Accounts

The **alice** development account will be the authority and sudo account as declared in the
[genesis state](https://github.com/AstarNetwork/swanky-node/blob/main/node/src/chain_spec.rs#L44).
While at the same time, the following accounts will be pre-funded:

- Alice
- Bob
- Charlie
- Dave
- Eve
- Ferdie
- Alice//stash
- Bob//stash
- Charlie//stash
- Dave//stash
- Eve//stash
- Ferdie//stash

### Show only Errors and Contract Debug Output

To print errors and contract debug output to the console log, supply `-lerror,runtime::contracts=debug` when starting the node.

```
./target/release/swanky-node -lerror,runtime::contracts=debug
```

Important: Debug output is only printed for RPC calls or off-chain tests ‒ not for transactions.

See the ink! [FAQ](../../faq/faq.mdx#how-do-i-print-something-to-the-console-from-the-runtime) for more details: How do I print something to the console from the runtime?.

### Connect with Polkadot.js Apps Portal

Once the Swanky Node is running locally, you will be able to connect to it from the **Polkadot-JS Apps** front-end,
in order to interact with your chain. [Click
here](https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944) connecting the Apps to your
local Swanky Node.

### Run in Docker

First, install [Docker](https://docs.docker.com/get-docker/) and
[Docker Compose](https://docs.docker.com/compose/install/).

Then run the following command to start a single node development chain.

```bash
mkdir .local # this is mounted by container
./scripts/docker_run.sh
```

This command will compile the code, and then start a local development network. You can
also replace the default command
(`cargo build --release && ./target/release/swanky-node --dev --ws-external`)
by appending your own. A few useful commands are shown below:

```bash
# Run Substrate node without re-compiling
./scripts/docker_run.sh ./target/release/swanky-node --ws-external

# Purge the local dev chain
./scripts/docker_run.sh ./target/release/swanky-node purge-chain

# Check whether the code is compilable
./scripts/docker_run.sh cargo check
```

### Consensus (Manual Seal & Instant Seal)

Unlike other blockchains, Swanky Node adopts block authoring and finality gadgets referred to as Manual Seal and Instant Seal, consensus mechanisms suitable for contract development and testing.

Manual seal - Blocks are authored whenever RPC is called.
Instant seal - Blocks are authored as soon as transactions enter the pool, most often resulting in one transaction per block.

Swanky Node enables both Manual seal and Instant seal.

#### Manual Sealing via RPC call

We can tell the node to author a block by calling the `engine_createBlock` RPC.

```bash
$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   '{
     "jsonrpc":"2.0",
      "id":1,
      "method":"engine_createBlock",
      "params": [true, false, null]
    }'
```

#### Params

- **Create Empty**
  `create_empty` is a Boolean value indicating whether empty blocks may be created. Setting `create-empty` to true does not mean that an empty block will necessarily be created. Rather, it means that the engine should go ahead creating a block even if no transactions are present. If transactions are present in the queue, they will be included regardless of the value of `create_empty`.

- **Finalize**
  `finalize` is a Boolean value indicating whether the block (and its ancestors, recursively) should be finalized after creation.

- **Parent Hash**
  `parent_hash` is an optional hash of a block to use as a parent. To set the parent, use the format `"0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764"`. To omit the parent, use `null`. When the parent is omitted the block will be built on the current best block. Manually specifying the parent is useful for constructing fork scenarios, and demonstrating chain reorganizations.

#### Finalizing Blocks Manually

In addition to finalizing blocks at the time of creating them, they may also be finalized later by using the RPC call `engine_finalizeBlock`.

```bash
$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   '{
     "jsonrpc":"2.0",
      "id":1,
      "method":"engine_finalizeBlock",
      "params": ["0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764", null]
    }'
```
````

## File: docs/third-party-tools/ink-analyzer.md
````markdown
---
title: ink! Analyzer
slug: /getting-started/ink-analyzer
---

[ink! analyzer](https://github.com/ink-analyzer) is a collection of modular and reusable libraries and tools for semantic analysis of ink! smart contract code.

ink! analyzer aims to improve ink! language support in [integrated development environments (IDEs)](https://en.wikipedia.org/wiki/Integrated_development_environment), [source code editors](https://en.wikipedia.org/wiki/Source-code_editor) and other development tools by providing modular and reusable building blocks for implementing language features (e.g. diagnostic errors, quick fixes, code completion suggestions, code/intent actions and hover content e.t.c) for the ink! programming language.

- Semantic Analyzer ([source code](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/analyzer), [crates.io](https://crates.io/crates/ink-analyzer), [docs.rs](https://docs.rs/ink-analyzer/latest/ink_analyzer/)).
- Language Server ([source code](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server), [binary/executable releases](https://github.com/ink-analyzer/ink-analyzer/releases), [crates.io](https://crates.io/crates/ink-lsp-server), [docs.rs](https://docs.rs/ink-lsp-server/latest/ink_lsp_server/)).
- Visual Studio Code Extension ([source code](https://github.com/ink-analyzer/ink-vscode), [VS Code Marketplace listing](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer), [VSIX releases](https://github.com/ink-analyzer/ink-vscode/releases)).

## Problem

While ink! developers can leverage Rust tooling and excellent IDE/code editor support via [rust-analyzer](https://rust-analyzer.github.io/) and [IntelliJ Rust](https://www.jetbrains.com/rust/) because ["ink! is just standard Rust in a well-defined "contract format" with specialized `#[ink(…)]` attribute macros"](../getting-started/creating.md),
relying on only generic Rust language support in IDEs, code editors and other development tools has some significant limitations for the developer experience including:

- No language support (e.g. diagnostic errors/warnings and quick fixes) for ink!'s domain specific semantic rules for smart contracts (e.g. exactly one `#[ink(storage)]` struct, at least one `#[ink(message)]` method and the same for `#[ink(constructor)]`, ink! attributes should be applied to items of the correct type e.t.c).
- Inconsistent editor experience with issues like no code completion and/or hover content for some ink! attribute arguments (e.g `#[ink(payable)]`) because [macro expansion/name resolution and trait resolution are hard problems for generic IDE/code editor tools](https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/#scope-and-purpose) (see also [https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html](https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html)).
- No language support (e.g. go to definition, find references and rename/refactor) for [ink! specific syntax like paths in ink! attribute argument values (e.g. `env` values)](https://github.com/use-ink/ink/blob/v4.2.1/crates/ink/ir/src/ast/mod.rs#L19-L25).

## Solution

To solve the above challenges and improve ink! language support in IDEs, code editors and other development tools, ink! analyzer creates two main components:
- [A modular domain-specific semantic analysis library for ink!](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/analyzer) built on a [resilient and lossless parser](https://analyze.ink/blog/introducing-ink-analyzer#1-semantic-analyzer).
- A [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/) [implementation](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server) built on top of the aforementioned semantic analysis library.

These two components can be reused to add ink! language support to multiple IDEs, code editors and other development tools.

In particular, a large number of IDEs and code editors support LSP servers either via configurable LSP clients or robust LSP client libraries/APIs/modules, including [Visual Studio Code, Visual Studio, Vim / Neovim, Emacs, Atom, Sublime Text, Acme, Lapce, Eclipse and many more](https://microsoft.github.io/language-server-protocol/implementors/tools/).

ink! analyzer makes it relatively easy for:
- Users to enable ink! language support for their IDE, code editor or other development tool if it has either a native/built-in or third-party LSP client that can be configured to launch an LSP server using an executable command (i.e. the path to an [installed ink! Language Server binary](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server#installation)) and can use stdio (standard in/standard out) as the message transport.
- Developers to either build extensions/plugins/integrations that add ink! language support to any tool with robust LSP client libraries/APIs/modules, or add first-class ink! language support to an existing LSP client (e.g. an open-source extension/plugin/integration).

In addition to [distributing compiled ink! Language Server (`ink-lsp-server`) binaries for most of the major platforms/architectures](https://github.com/ink-analyzer/ink-analyzer/releases),
ink! analyzer additionally distributes a [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer) that ships with a bundled ink! Language Server as a showcase and [reference implementation](https://github.com/ink-analyzer/ink-vscode) for the latter use case.

## Diving Deeper

To learn more about ink! analyzer, read the [introductory blog post](https://analyze.ink/blog/introducing-ink-analyzer) and/or check out the [ink! analyzer organization on GitHub](https://github.com/ink-analyzer) for source code, technical documentation, installation and usage instructions, and links to useful resources.

Issues, bug reports, PRs and feature requests are welcome at the respective GitHub repositories 🙂.
````

## File: docs/third-party-tools/inkathon.mdx
````
---
title: ink!athon dApp Boilerplate
slug: /getting-started/inkathon 
---

# ink!athon dApp Boilerplate

ink!athon is a starter kit for full-stack dApp development with ink! smart contracts and a React-based frontend in one place. With convenient helper scripts and a pre-configured project setup, it lets you scaffold any dApp quickly. It's developed by the same team that is behind [AZERO.ID](https://azero.id), where this boilerplate is used in production.

## Getting started

* Try out an interactive example deployment under [inkathon.xyz](https://inkathon.xyz).
* To get started with development, head over to the [ink!athon repository](https://github.com/scio-labs/inkathon) and check its README.

## Workshop Video

Get a quickstart into the boilerplate with this talk recording by [Dennis Zoma](https://twitter.com/dennis_zoma) at the sub0 Developer Conference in Lisbon 2023: **[Start Building dApps on ink!](https://www.youtube.com/watch?v=SoNLZfsd0mQ)** (46 min).

[![inkathon Workshop Video Preview Image](/img/inkathon-workshop-video-preview.jpg)](https://www.youtube.com/watch?v=SoNLZfsd0mQ)

## Architecture

The starter kit is set up as a monorepo with two packages.

* `packages/contracts`: ink! smart contracts with:
  * `Greeter` example contract
  * shorthand build & deploy scripts that export metadata and contract addresses
  * pre-configured `substrate-contracts-node`
  * extensible JS/TS `scripts/` setup
* `packages/frontend`: Next.js frontend with:
  * `polkadot-js/api` & `scio-labs/use-inkathon` dependencies 
  * pre-configured to import deployments & addresses from above
  * styling with tailwindcss and/or chakra-ui
  * components for balance checking, wallet connection, network information, and sample contract interaction

![inkathon Architecture Diagram](/img/inkathon-architecture.jpg)


## Community & Support

import { BigCTA } from '/src/components/BigCTA'

<BigCTA
  title="Telegram Group"
  emphasized="Join"
  cta="the conversation"
  url="https://t.me/inkathon"
/>
````

## File: docs/third-party-tools/subwallet.md
````markdown
---
title: SubWallet
slug: /getting-started/subwallet
---

# SubWallet

SubWallet is a comprehensive non-custodial wallet designed for the Polkadot, Substrate, and Ethereum ecosystems. It provides support for importing, managing, and interacting with various [smart contract types](https://docs.subwallet.app/main/#token-standard-support), including **PSP22** and **PSP34**.

## Installation

SubWallet is available on multiple platforms:

- **Browser extension:** Available for Chrome, Firefox, Edge, and Brave.
- **Mobile app:** Available for [Android](https://apps.apple.com/us/app/subwallet-polkadot-wallet/id1633050285) and [iOS](https://play.google.com/store/apps/details?id=app.subwallet.mobile).
- **Web Dashboard:** Accessible through [Web Dashboard](https://web.subwallet.app/).

## Getting Started

1. [Install SubWallet](https://docs.subwallet.app/main/extension-user-guide/getting-started/install-subwallet)
2. [Create or Import Wallet](https://docs.subwallet.app/main/extension-user-guide/account-management/create-a-new-account-with-seed-phrase)
3. [Import Tokens](https://docs.subwallet.app/main/extension-user-guide/import-and-manage-customized-assets/import-and-manage-customized-tokens) (e.g., **PSP22**)
4. [Import NFTs](https://docs.subwallet.app/main/extension-user-guide/import-and-manage-customized-assets/import-nft) (e.g., **PSP34**)
5. [Transfer Tokens](https://docs.subwallet.app/main/extension-user-guide/receive-and-transfer-assets/transfer-tokens/single-chain-transfer) (e.g., **PSP22**)
6. [Transfer NFTs](https://docs.subwallet.app/main/extension-user-guide/receive-and-transfer-assets/transfer-nft) (e.g., **PSP34**)

## Documentation

- [GitHub Repository](https://github.com/Koniverse/SubWallet-Extension/)
- [User Manual](https://docs.subwallet.app/)

For more information, visit the official [SubWallet website](https://www.subwallet.app/).
````

## File: versioned_docs/version-v3/basics/cargo-toml.md
````markdown
---
title: Cargo.toml
slug: /basics/cargo-toml
---

TODO go through a typical Cargo.toml and explain what the dependencies mean
````

## File: versioned_docs/version-v3/basics/contract-template.md
````markdown
---
title: Contract Template
slug: /basics/contract-template
---

Change into your working directory and run:

```bash
cargo contract new foobar
```

This will create a new project folder named `foobar`.

```bash
cd foobar/
```

In the `lib.rs` file you find initial scaffolded code, which you can use as a starting point.

Quickly check that it compiles and the trivial tests pass with:

```bash
cargo +nightly test
```

Also check that you can build the Wasm file by running:

```bash
cargo +nightly contract build
```

If everything looks good, then we are ready to start programming!
````

## File: versioned_docs/version-v3/basics/cross-contract-calling.md
````markdown
---
title: Cross-Contract Calling
slug: /basics/cross-contract-calling
---

In ink! contracts it is possible to call ink! messages and ink! constructors. So ink! constructors allow
delegation and ink! messages can easily call other ink! messages.
Given another ink! contract like, we can call any of its functions.

See our [`delegator example contract`](https://github.com/use-ink/ink-examples/blob/main/delegator/lib.rs) 
for an elaborate example which uses cross-contract calling.

### How it Works

In order to deploy the delegator smart contract we first
have to manually put the code of the other contract, receive
its code hash from the signalled event and put their code hash
into our calling smart contract.

The calling contract looks like this:

```rust
use other_contract::OtherContract;

//--snip--
#[ink(storage)]
struct MyContract {
    /// The other contract.
    other_contract: OtherContract,
}

impl MyContract {
    /// Instantiate `MyContract with the given
    /// sub-contract codes and some initial value.
    #[ink(constructor)]
    pub fn new(
        other_contract_code_hash: Hash,
    ) -> Self {
        let other_contract = OtherContract::new(1337)
            .endowment(total_balance / 4)
            .code_hash(other_contract_code_hash)
            .instantiate()
            .expect("failed at instantiating the `OtherContract` contract");
        Self {
            other_contract
        }
    }

    /// Calls the other contract.
    #[ink(message)]
    pub fn call_other_contract(&self) -> i32 {
        self.other_contract.get_value()
    }
}
//--snip--
```

It's `Cargo.toml` contains
```toml
other_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }
```

The `other_contract/Cargo.toml` contains this:

```toml
[features]
ink-as-dependency = []
```

Tells the ink! code generator to **always** or **never**
compile the smart contract as if it was used as a dependency of another ink!
smart contract.

The `other_contract/lib.rs`:

```rust
#[ink::contract]
pub mod other_contract {
    /// Storage for the other contract.
    #[ink(storage)]
    pub struct OtherContract {
        value: i32,
    }

    impl OtherContract {
        /// Initializes the contract.
        #[ink(constructor)]
        pub fn new(value: i32) -> Self {
            Self { value }
        }

        /// Returns the current state.
        #[ink(message)]
        pub fn get_value(&self) -> i32 {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v3/basics/env-functions.md
````markdown
---
title: Environment Functions
slug: /basics/environment-functions
---

ink! exposes a number of handy environment functions.
A full overview [is found here](https://docs.rs/ink_env/3.3.1/ink_env/#functions).

In an `#[ink(constructor)]`  use `Self::env()` to access those,
in an `#[ink(message)]` use `self.env()`.
So e.g. `Self::env().caller()` or `self.env().caller()`.

Some handy functions include:

* [`caller()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.caller.html): Returns the address of the caller of the executed contract.
* [`account_id()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.account_id.html): Returns the account ID of the executed contract.
* [`balance()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.balance.html): Returns the balance of the executed contract.
* [`block_number()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.block_number.html): Returns the current block number.
* [`random()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.random.html): Returns a random hash seed.
* [`emit_event(…)`](https://docs.rs/ink_env/3.3.1/ink_env/fn.emit_event.html): Emits an event with the given event data.
* [`transfer(…)`](https://docs.rs/ink_env/3.3.1/ink_env/fn.transfer.html): Transfers value from the contract to the destination account ID.
* [`hash_bytes(…)`](https://docs.rs/ink_env/3.3.1/ink_env/fn.hash_bytes.html): Conducts the crypto hash of the given input and stores the result in output.
* […and many more](https://docs.rs/ink_env/3.3.1/ink_env/#functions).
````

## File: versioned_docs/version-v3/basics/events.md
````markdown
---
title: Events
slug: /basics/events
---

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
use ink_lang as ink;

#[ink::contract]
mod erc20 {
    /// Defines an event that is emitted
    /// every time value is transferred.
    #[ink(event)]
    pub struct Transferred {
        from: Option<AccountId>,
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self {
            let caller = Self::env().caller();
            Self::env().emit_event(Transferred {
                from: None,
                to: Some(caller),
                value: initial_supply,
            });
            Self { total_supply: initial_supply }
        }

        #[ink(message)]
        pub fn total_supply(&self) -> Balance {
            self.total_supply
        }
    }
}
```

See our [`ERC20 example contract`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) 
for an elaborate example which uses events.

## Event Definition

This is how an event definition looks:

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance

}
```

Add the `#[ink(topic)]` attribute tag to each item in your event that you want to have indexed.
A good rule of thumb is to ask yourself if somebody might want to search for this topic.
For this reason the `amount` in the exemplary event above was not
made indexable ‒ there will most probably be a lot of different events with
differing amounts each.

The signature of the event is by default one of the topics of the event, except
if you annotate the event with `#[ink(anonymous)]`.
See [here](../macros-attributes/anonymous.md) for details on this attribute.


## Emitting Events in a Constructor

In a constructor events are emitted via `Self::env().emit_event()`.
See this example:

```rust
#[ink(constructor)]
pub fn new(initial_value: Balance) -> Self {
    let caller = Self::env().caller();
    let mut balances = HashMap::new();
    balances.insert(caller, initial_supply);

    Self::env().emit_event(Transferred {
        from: None,
        to: Some(caller),
        amount: initial_supply
    });

    Self { total_supply: initial_supply, balances }
}
```

## Emitting Events from Messages

In a message events are emitted via `self.env().emit_event()`:

```rust
#[ink(message)]
pub fn transfer(&mut self, to: AccountId, amount: Balance) -> Result {
    let from = self.env().caller();
    // implementation hidden
    self.env().emit_event(Transferred {
        from: Some(from),
        to: Some(to),
        amount
    });
    Ok(())
}
```
````

## File: versioned_docs/version-v3/basics/metadata.md
````markdown
---
title: Metadata
slug: /metadata
---

# ink! Metadata

The ink! metadata is used to describe a contract in a language agnostic way. It is
intended to be used by third party tools (e.g UIs, block explorers) in order to correctly
call contract functions and interpret events.

The ink! metadata is generated when a contract is built using `cargo-contract`, e.g
`cargo +nightly contract build`.

The metadata can be found in your contract's target directory under the name
`metadata.json`.

:::note

The metadata is also contained in your `$contract_name.contract` file. The difference is
that the `.contract` file also contains the Wasm binary of your contract.

:::

## metadata.json
The metadata is defined by the following **required** keys:
- `source`: Information about the contract's Wasm code.
- `contract`: Metadata about the contract.
- `abi`: Raw JSON of the contract's abi metadata, generated during contract compilation.

It may _optionally_ contain the following keys:
- `user`: Additional user-defined metadata.

```json
{
  "source": {
    "hash": "...",
    "language": "...",
    "compiler": "..."
  },
  "contract": {
    "name": "...",
    "version": "...",
    "authors": [
      "..."
    ]
  },
  "V3": {
    "spec": {...},
    "storage": {...},
    "types": {...}
  }
}
```

:::note

Notice that we don't have an `abi` key, but we instead use the metadata version as the name
of the key (`V3` in this case). You can read more about that in the [ABI documentation](#abi).

:::


The following sections will dive deeper into how these sections are made up.

### `source`
This object contains information about how the contract was built.

It consists of the following **required** keys:
- `hash`: The hash of the contract's Wasm code.
- `language`: The language used to write the contract.
- `compiler`: The compiler used to compile the contract.

It may _optionally_ include the following keys:
- `wasm`: The actual Wasm code of the contract, for optionally bundling the code with the metadata.

```json
"source": {
  "hash": "0x157014494527fee27a82e49bbd9eea10c0713bb0566f6def37f4595db86236ff",
  "language": "ink! 3.1.0",
  "compiler": "rustc 1.63.0-nightly"
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/45fbc0b43ac9e676107ad9a03f8d7a0a01d84c50/metadata/lib.rs#L127).

:::

### `contract`
This object contains extra metadata about the contract.

The **required** keys include:
 - `name`: The name of the smart contract.
 - `version`: The version of the smart contract.
 - `authors`: The authors of the smart contract.

It can _optionally_ include the following keys:
 - `description`: The description of the smart contract.
 - `documentation`: Link to the documentation of the smart contract.
 - `repository`: Link to the code repository of the smart contract.
 - `homepage`: Link to the homepage of the smart contract.
 - `license`: The license of the smart contract.

```json
"contract": {
  "name": "flipper",
  "version": "3.1.0",
  "authors": [
    "Use Ink <ink@use.ink>"
  ]
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/45fbc0b43ac9e676107ad9a03f8d7a0a01d84c50/metadata/lib.rs#L395).

:::

### ABI
This is the specification of the contract.

Unlike the previous metadata sections the structure of the object stored here is not
defined. Instead, it is up to each programming language (e.g ink!, ask!, Solidity) to
define their own metadata format which will then be stored here.

In this document we will focus on the ink! ABI.

The ABI starts with the version number of the ink! metadata. In our example below we are
using the ink! version 3 metadata, denoted by the `V3` key.

:::note
The version of the ABI is distinct from any concept of Rust's crate versioning.
:::

```json
"V3": {
  "spec": { ... },
  "storage": { ... },
  "types": { ... }
}
```

The ink! metadata consists of the following **required** sections
 - `spec`: The description of the contract (e.g constructors, messages, events, etc.).
 - `storage`: The layout of the storage data structure
 - `types`: A read-only registry containing types in their portable form for
   serialization.

:::info

If you're interested in the code reference from `ink!`
see [here](https://github.com/use-ink/ink/blob/80d302eb9b9cddb726200a9a86c71ae344d1b042/crates/metadata/src/lib.rs#L91).

:::

#### `spec`
The contract `spec` consists of the following **required** keys:
- `constructors`: The set of constructors of the contract.
    - `label`: The label of the constructor. In case of a trait provided constructor the
      label is prefixed with the trait label.
    - `selector`: The selector hash of the message.
    - `payable`: If the constructor accepts any `value` from the caller.
    - `args`: The parameters of the deployment handler.
    - `docs`: The deployment handler documentation.
- `messages`: The external messages of the contract.
    - `label`: The label of the message. In case of trait provided messages and
      constructors the prefix by convention in ink! is the label of the trait.
    - `selector`: The selector hash of the message.
    - `mutates`: If the message is allowed to mutate the contract state.
    - `payable`: If the message accepts any `value` from the caller.
    - `args`: The parameters of the message.
    - `return_type`: The return type of the message.
    - `docs`: The message documentation.
- `events`: The events of the contract.
    - `label`: The label of the event.
    - `args`: The event arguments.
    - `docs`: The event documentation.
- `docs`: The contract documentation.

:::note

While all these keys are required, they may be empty. For example, if a contract does not
define any events then the `events` key would contain an empty array `[]`.

:::

```json
"spec": {
  "constructors": [
    {
      "args": [
        { ... }
      ],
      "docs": [
        "Creates a new flipper smart contract initialized with the given value."
      ],
      "label": "new",
      "payable": false,
      "selector": "0x9bae9d5e"
    }
  ],
  "docs": [],
  "events": [],
  "messages": [
    {
      "args": [],
      "docs": [
        " Flips the current value of the Flipper's boolean."
      ],
      "label": "flip",
      "mutates": true,
      "payable": false,
      "returnType": null,
      "selector": "0x633aa551"
    }
  ]
}
```

#### `storage`
This key describes the storage layout of an ink! contract. It tracks some of the
different structures which can be placed in storage.

It consists of the following
_optional_ keys (depending on what data structures are used by the contract):
- `cell`: An encoded cell.
    - `key`: The offset key into the storage.
    - `ty`: The type of the encoded entity.
- `hash`: A layout that hashes values into the entire storage key space.
    - `offset`: The key offset used by the strategy.
    - `strategy`: The hashing strategy to layout the underlying elements.
    - `layout`: The storage layout of the unbounded layout elements.
- `array`: An array of associated storage cells encoded with a given type.
    - `offset`: The offset key of the array layout. This is the same key as the element
      at index 0 of the array layout.
    - `len`: The number of elements in the array layout.
    - `cells_per_elem`: The number of cells each element in the array layout consists of.
    - `layout`: The layout of the elements stored in the array layout.
- `struct`: A struct layout with fields of different types.
    - `fields`: The fields of the struct layout.
- `enum`: An enum layout with a discriminant telling which variant is layed out.
    - `dispatch_key`: The key where the discriminant is stored to dispatch the variants.
    - `variants`: The variants of the enum.

```json
"storage": {
  "struct": {
    "fields": [
      {
        "layout": {
          "cell": {
            "key": "0x0000000000000000000000000000000000000000000000000000000000000000",
            "ty": 0
          }
        },
        "name": "value"
      }
    ]
  }
}
```

#### `types`
This object contains the type registry for the smart contract. It consists of an array of
type objects, each of which is defined as follows:
- `id`: Numerical ID for referencing the type.
- `ty`: The definition of the type.
    - `path`: The unique path to the type. Can be empty for built-in types.
    - `params`: The generic type parameters of the type in use. Empty for non generic
      types.
    - `def`: The actual type definition.
    - `docs`: Documentation.

The type definition object (`def`) supports the following `primitive` types:
- `bool`, `char`, `str`, `u8`, `u16`, `u32`, `u64`, `u128`, `i8`, `i16`, `i32`, `i64`, `i128`.

It also supports a variety of complex built-in and user-defined types. However, we will
not dig into them here. If you are interested in learning more take a look at the
[`scale-info`](https://github.com/paritytech/scale-info) crate.

```json
"types": [
  {
    "id": 0,
    "type": {
      "def": {
        "primitive": "bool"
      }
    }
  }
]
```

Other parts of the metadata, such as the `storage` object, will reference individual
types from this type registry using the `id` key.

### `user`
This is an _optional_ field used to add user-defined metadata. Some examples of things
you may want to include here:
- `moon_phase`: Phase of the moon during which the smart contract works.
- `favorite_blockchain`: The favorite blockchain of the contract authors (answer: Polkadot!).
````

## File: versioned_docs/version-v3/basics/mutating-values.md
````markdown
---
title: Mutating Storage Values
slug: /basics/mutating-values
---

It's time to modify some storage!

## Mutable and Immutable Functions

You may have noticed that the function template included `self` as the first parameter of the
contract functions. It is through `self` that you gain access to all your contract functions and
storage items.

If you are simply _reading_ from the contract storage, you only need to pass `&self`. But
if you want to _modify_ storage items, you will need to explicitly mark it as mutable,
`&mut self`.

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.my_number
    }

    #[ink(message)]
    pub fn my_setter(&mut self, new_value: u32) {
        self.my_number = new_value;
    }
}
```
````

## File: versioned_docs/version-v3/basics/reading-values.md
````markdown
---
title: Reading Values from Storage
slug: /basics/reading-values
---

Reading from storage is where the fun begins!

## Contract Functions

As you can see in the contract template, all of your contract functions are part of your contract module.

```rust
impl MyContract {
    // Public and Private functions can go here
}
```

### Public and Private Functions

In Rust, you can make as many implementations as you want. As a stylistic choice, we recommend
breaking up your implementation definitions for your private and public functions:

```rust
impl MyContract {
    /// Public function
    #[ink(message)]
    pub fn my_public_function(&self) {
        /* --snip-- */
    }

    /// Private function
    fn my_private_function(&self) {
        /* --snip-- */
    }

    /* --snip-- */
}
```

You can also choose to split things up however is most clear for your project.

Note that all public functions must use the `#[ink(message)]` attribute.

## Getting a Value

We already showed you how to initialize a storage value in the chapter [Storing Values](./storing-values.md).
Getting the value is just as simple:

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.number
    }
}
```

In Rust, if the last expression in a function does not have a semicolon, then it will be the return value.
````

## File: versioned_docs/version-v3/basics/storing-values.md
````markdown
---
title: Storing Values
slug: /basics/storing-values
---

Here is how you store simple values in storage:

```rust
#[ink(storage)]
pub struct MyContract {
    // Store a bool
    my_bool: bool,
    // Store some number
    my_number: u32,
}
/* --snip-- */
```

## Supported Types

Substrate contracts may store types that are encodable and decodable with
[Parity Codec](https://github.com/paritytech/parity-codec) which includes most Rust common data
types such as `bool`, `u{8,16,32,64,128}`, `i{8,16,32,64,128}`, `String`, tuples, and arrays.

ink! provides Substrate specific types like `AccountId`, `Balance`, and `Hash` to smart contracts as if
they were primitive types. 


ink! also provides a `Mapping` storage type. You can read more about it [here](../datastructures/mapping.md).

Here is an example of how you would store an `AccountId` and `Balance`:

```rust
// We are importing the default ink! types
use ink_lang as ink;

#[ink::contract]
mod MyContract {

    // Our struct will use those default ink! types
    #[ink(storage)]
    pub struct MyContract {
        // Store some AccountId
        my_account: AccountId,
        // Store some Balance
        my_balance: Balance,
    }
    /* --snip-- */
}
```

Here is an example of a structure storing `String` and  `Hash` values. 

```rust
pub struct Auction {
    /// Branded name of the auction event.
    name: String,
    /// Some hash identifying the auction subject.
    subject: Hash,
    /// Auction status.
    status: Status, // Enum: Usage shown in next section
    /// Candle auction can have no winner.
    /// If auction is finalized, that means that the winner is determined.
    finalized: bool,
    /// vector
    vector: Vec<u8>,
}
```

## Use of enum 

Enum can be used as a datatype in `struct` as depicted above in `struct Auction`

```rust
pub enum Status {
    /// An auction has not started yet.
    NotStarted,
    /// We are in the starting period of the auction, collecting initial bids.
    OpeningPeriod,
    /// We are in the ending period of the auction, where we are taking snapshots
    /// of the winning bids. 
}
```

The values of an enum should be referenced as `Status::OpeningPeriod`.

## Initializing Storage in Constructors

Constructors are how values get initialized.
Every ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:

Note that if you have a contract whose storage contains `Mapping'`s you will need to use
`ink_lang::utils::initialize_contract` in your constructor. See the
[`Mapping` documentation](../datastructures/mapping.md) for more details.

```rust
use ink_lang as ink;

#[ink::contract]
mod mycontract {

    #[ink(storage)]
    pub struct MyContract {
        number: u32,
    }

    impl MyContract {
        /// Constructor that initializes the `u32` value to the given `init_value`.
        #[ink(constructor)]
        pub fn new(init_value: u32) -> Self {
            Self {
                number: init_value,
            }
        }

        /// Constructor that initializes the `u32` value to the `u32` default.
        #[ink(constructor)]
        pub fn default() -> Self {
            Self {
                number: Default::default(),
            }
        }
    /* --snip-- */
    }
}
```
````

## File: versioned_docs/version-v3/basics/testing.md
````markdown
---
title: Contract Testing
slug: /basics/contract-testing
---

## Unit Tests

Testing contracts off-chain is done by `cargo test` and users can simply use the standard routines
of creating unit test modules within the ink! project:

```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn my_test() { ... }
}
```

Test instances of contracts can be created with something like:

```rust
let contract = MyContract::my_constructor(a, b);
```

Messages can simply be called on the returned instance as if `MyContract::my_constructor` returns a
`Self` instance.

See the [flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).


## Off-chain Testing

ink! smart contracts can compile in several different modes.
There are two main compilation models using either
- on-chain mode: `no_std` + WebAssembly as target
- off-chain mode: `std`

We generally use the on-chain mode for actual smart contract deployment
whereas we use the off-chain mode for smart contract testing using the
off-chain environment provided by the `ink_env` crate.


The `#[ink::test]` proc. macro enables more elaborate off-chain testing.

If you annotate a test with this attribute it will be executed in a simulated
environment, similar to as it would be run on-chain.
You then have fine-grained control over how a contract is called; 
for example you can influence the block advancement, the value transferred to it,
by which account it is called, which storage it is run with, etc..

See the [`examples/erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) contract on how to utilize those or [the documentation](https://docs.rs/ink_lang/3.3.1/ink_lang/attr.test.html) for details.

At the moment there are some known limitations to our off-chain environment and we are working
on making it behave as close to the real chain environment as possible.

Defines a unit test that makes use of ink!'s off-chain testing capabilities.

If your unit test does not require the existence of an off-chain environment
it is fine to not use this macro since it bears some overhead with the test.

Note that this macro is not required to run unit tests that require ink!'s
off-chain testing capabilities but merely improves code readability.

## How do you find out if your test requires the off-chain environment?

Normally if the test recursively uses or invokes some contract methods that
call a method defined in `self.env()` or `Self::env()`.

An examples is the following:

```rust
let caller: AccountId = self.env().caller();
```

## Example

```rust
use ink_lang as ink;

#[cfg(test)]
mod tests {
    // Conventional unit test that works with assertions.
    #[ink::test]
    fn test1() {
        // test code comes here as usual
    }

    // Conventional unit test that returns some Result.
    // The test code can make use of operator-`?`.
    #[ink::test]
    fn test2() -> Result<(), ink_env::Error> {
        // test code that returns a Rust Result type
    }
}
```


## On-chain Testing

The easiest way to do on-chain testing is to
[run a local substrate node](../getting-started/running.md),
deploy your contract there and interact with it.

```rust
use ink_lang as ink;

#[ink::contract]
mod greeter {
    #[ink(storage)]
    pub struct Greeter;

    impl Greeter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let caller = Self::env().caller();
            let message = format!("thanks for instantiation {:?}", caller);
            ink_env::debug_println(&message);
            Greeter {}
        }

        #[ink(message, payable)]
        pub fn fund(&mut self) {
            let caller = self.env().caller();
            let value = self.env().transferred_balance();
            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);
            ink_env::debug_println(&message);
        }
    }
}
```
````

## File: versioned_docs/version-v3/basics/trait-definitions.md
````markdown
---
title: Trait Definitions
slug: /basics/trait-definitions
---

Through the `#[ink::trait_definition]` proc. macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts.

This allows to define shared smart contract interfaces to different concrete implementations.
Note that this ink! trait definition can be defined anywhere, even in another crate!

See our [`ERC20-Trait example contract`](https://github.com/use-ink/ink-examples/blob/main/trait-erc20/lib.rs)
for an elaborate example which uses trait definitions.

### Example

Defined in the `base_erc20.rs` module.

```rust
use ink_lang as ink;

#[ink::trait_definition]
pub trait BaseErc20 {
    /// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.
    #[ink(constructor)]
    fn new(initial_supply: Balance) -> Self;

    /// Returns the total supply.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    /// Transfers `amount` from caller to `to`.
    #[ink(message, payable)]
    fn transfer(&mut self, to: AccountId, amount: Balance);
}
```

An ink! smart contract definition can then implement this trait definition as follows:

```rust
use ink_lang as ink;

#[ink::contract]
mod erc20 {
    use base_erc20::BaseErc20;

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }

    impl BaseErc20 for Erc20 {
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            // implementation ...
        }

        #[ink(message)]
        fn total_supply(&self) -> Balance {
            // implementation ...
        }

        #[ink(message, payable)]
        fn transfer(&mut self, to: AccountId, amount: Balance) {
            // implementation ...
        }
    }
}
```

Calling the above `Erc20` explicitly through its trait implementation can be done just as if it was normal Rust code:

```rust
// --- Instantiating the ERC-20 contract:
//
let mut erc20 = <Erc20 as BaseErc20>::new(1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
let mut erc20 = Erc20::new(1000);

// --- Retrieving the total supply:
//
assert_eq!(<Erc20 as BaseErc20>::total_supply(&erc20), 1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
assert_eq!(erc20.total_supply(), 1000);
```

There are still many limitations to ink! trait definitions and trait implementations.
For example it is not possible to define associated constants or types or have default implemented methods.
These limitations exist because of technical intricacies, however, please expect that many of those will be tackled in future ink! releases.




Marks trait definitions to ink! as special ink! trait definitions.

There are some restrictions that apply to ink! trait definitions that
this macro checks. Also ink! trait definitions are required to have specialized
structure so that the main [`#[ink::contract]`](https://docs.rs/ink_lang/3.3.1/ink_lang/attr.contract.html) macro can
properly generate code for its implementations.

# Example: Definition

```rust
use ink_lang as ink;
type Balance = <ink_env::DefaultEnvironment as ink_env::Environment>::Balance;

#[ink::trait_definition]
pub trait Erc20 {
    /// Constructs a new ERC-20 compliant smart contract using the initial supply.
    #[ink(constructor)]
    fn new(initial_supply: Balance) -> Self;

    /// Returns the total supply of the ERC-20 smart contract.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    // etc.
}
```

# Example: Implementation

Given the above trait definition you can implement it as shown below:

```rust
use ink_lang as ink;

#[ink::contract]
mod base_erc20 {
    /// We somehow cannot put the trait in the doc-test crate root due to bugs.
    #[ink_lang::trait_definition]
    pub trait Erc20 {
        /// Constructs a new ERC-20 compliant smart contract using the initial supply.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self;

        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance;
    }

    #[ink(storage)]
    pub struct BaseErc20 {
        total_supply: Balance,
        // etc ..
    }

    impl Erc20 for BaseErc20 {
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            Self { total_supply: initial_supply }
        }

        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            self.total_supply
        }

        // etc ..
    }
}
```
````

## File: versioned_docs/version-v3/basics/upgradeability.md
````markdown
---
title: Upgradeable Contracts
slug: /basics/upgradeable-contracts
---

Even though smart contracts are intended to be immutable by design,
it is often necessary to perform an upgrade of a smart contract. 

The developer may need to fix a critical bug or introduce a new feature.

For this type of scenario, ink! has different upgrade strategies.
- [Proxy Forwarding](#proxy-forwarding)
  - [Properties](#properties)
- [Replacing Contract Code with `set_code_hash()`](#replacing-contract-code-with-set_code_hash)
  - [Properties](#properties-1)
  - [Storage Compatibility](#storage-compatibility)
  - [A little note on the determinism of contract addresses](#a-little-note-on-the-determinism-of-contract-addresses)
- [Examples](#examples)

## Proxy Forwarding

This method relies on the ability of contracts to proxy calls to other contracts.

### Properties

- Forwards any call that does not match a selector of itself to another contract.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the contract to which calls are forwarded.

```
User ---- tx ---> Proxy ----------> Implementation_v0
                     |
                      ------------> Implementation_v1
                     |
                      ------------> Implementation_v2
```

Our proxy contract will have these 2 storage fields:

```rust
#[ink(storage)]
pub struct Proxy {
    /// The `AccountId` of a contract where any call that does not match a
    /// selector of this contract is forwarded to.
    forward_to: AccountId,
    /// The `AccountId` of a privileged account that can update the
    /// forwarding address. This address is set to the account that
    /// instantiated this contract.
    admin: AccountId,
}
```

We then need a way to change the address of a contract to which we forward calls to
and the actual message selector to proxy the call:

```rust
impl Proxy {
    /// Changes the `AccountId` of the contract where any call that does
    /// not match a selector of this contract is forwarded to.
    #[ink(message)]
    pub fn change_forward_address(&mut self, new_address: AccountId) {
        assert_eq!(
            self.env().caller(),
            self.admin,
            "caller {:?} does not have sufficient permissions, only {:?} does",
            self.env().caller(),
            self.admin,
        );
        self.forward_to = new_address;
    }

    /// Fallback message for a contract call that doesn't match any
    /// of the other message selectors.
    ///
    /// # Note:
    ///
    /// - We allow payable messages here and would forward any optionally supplied
    ///   value as well.
    /// - If the self receiver were `forward(&mut self)` here, this would not
    ///   have any effect whatsoever on the contract we forward to.
    #[ink(message, payable, selector = _)]
    pub fn forward(&self) -> u32 {
        ink_env::call::build_call::<ink_env::DefaultEnvironment>()
            .call_type(
                Call::new()
                    .callee(self.forward_to)
                    .transferred_value(self.env().transferred_value())
                    .gas_limit(0),
            )
            .call_flags(
                ink_env::CallFlags::default()
                    .set_forward_input(true)
                    .set_tail_call(true),
            )
            .fire()
            .unwrap_or_else(|err| {
                panic!(
                    "cross-contract call to {:?} failed due to {:?}",
                    self.forward_to, err
                )
            });
        unreachable!(
            "the forwarded call will never return since `tail_call` was set"
        );
    }
}
```

:::tip

Take a look at the selector pattern in the attribute macro: by declaring `selector = _`
we specify that all other messages should be handled by this message selector.

:::

Using this pattern, you can introduce other message to your proxy contract.
Any messages that are not matched in the proxy contract 
will be forwarded to the specified contract address.

## Replacing Contract Code with `set_code_hash()`

Following [Substrate's runtime upgradeability](https://docs.substrate.io/maintain/runtime-upgrades/) 
philosophy, ink! also supports an easy way to update your contract code via the special function 
[`set_code_hash()`](https://use-ink.github.io/ink/ink_env/fn.set_code_hash.html).

### Properties

- Updates the contract code using `set_code_hash()`. 
This effectively replaces the code which is executed for the contract address.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the originally instantiated contract.

Just add the following function to the contract you want to upgrade in the future.

```rust 
/// Modifies the code which is used to execute calls to this contract address (`AccountId`).
///
/// We use this to upgrade the contract logic. We don't do any authorization here, any caller
/// can execute this method. In a production contract you would do some authorization here.
#[ink(message)]
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink_env::set_code_hash(&code_hash).unwrap_or_else(|err| {
        panic!(
            "Failed to `set_code_hash` to {:?} due to {:?}",
            code_hash, err
        )
    });
    ink_env::debug_println!("Switched code hash to {:?}.", code_hash);
}
```

### Storage Compatibility

It is the developer's responsibility to ensure 
that the new contract's storage is compatible with the storage of the contract that is replaced.

:::danger Beware

You should not change the order in which the contract state variables are declared, nor their type!

Violating the restriction will not prevent a successful compilation,
but will result in **the mix-up of values** or **failure to read the storage correctly**.
This can be a result of severe errors in the application utilizing the contract.

:::


If the storage of your contract looks like this:
```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
    y: bool,
}
```

The procedures listed below will make it ***invalid***

Changing the order of variables:

```rust
#[ink(storage)]
pub struct YourContract {
    y: bool,
    x: u32,
}
```

Removing an existing variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
}
```

Changing the type of a variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u64,
    y: bool,
}
```

Introducing a new variable before any of the existing ones:

```rust
#[ink(storage)]
pub struct YourContract {
    z: Vec<u32>,
    x: u32,
    y: bool,
}
```

### A little note on the determinism of contract addresses

:::note

If your contract utilizes this approach, it no-longer holds a deterministic address assumption.
You can no longer assume that a contract address identifies a specific code hash.
Please refer to [the issue](https://github.com/paritytech/substrate/pull/10690#issuecomment-1025702389) 
for more details.

:::

## Examples

Examples of upgradable contracts can be found in the 
[ink! repository](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts)
````

## File: versioned_docs/version-v3/brand-assets/cargo-contract.md
````markdown
---
title: cargo-contract
slug: /brand-assets/cargo-contract
hide_table_of_contents: true
---

## `cargo-contract` Logo

The following is the logo for our command-line tool [`cargo-contract`](https://github.com/use-ink/cargo-contract).

<div className="black-container">
    <img src="/img/cargo-contract-logo.svg" alt="cargo-contract logo" className="brand-asset" />
</div>

Download here: [`cargo-contract-logo.svg`](/img/cargo-contract-logo.svg).
````

## File: versioned_docs/version-v3/brand-assets/community-badges.md
````markdown
---
title: Community Badges
slug: /brand-assets/community-badges
hide_table_of_contents: false
---

If you have a public repository with an ink! contract it would be awesome
if you could add one of those!

## Built _with_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)
```

## Built _for_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)
```
````

## File: versioned_docs/version-v3/brand-assets/ink.md
````markdown
---
title: ink!
slug: /brand-assets/ink
hide_table_of_contents: false
---

Our primary logo is our squid mascot (named "Squink") plus our text logo.

Please use this combined logo preferably.

## Black Version

<div className="white-container">
    <img src="/img/ink-logo-with-squid-black.svg" alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-black.svg`](/img/ink-logo-with-squid-black.svg).

## White Version

<div className="black-container">
    <img src="/img/ink-logo-with-squid-white.svg" alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-white.svg`](/img/ink-logo-with-squid-white.svg).

## Individual Logo Parts

### The ink! mascot: Squink

<div className="black-container">
    <img src="/img/ink-squink.svg" alt="Squink ‒ the ink! mascot" className="brand-asset" />
</div>

Download here: [`ink-squink.svg`](/img/ink-squink.svg).

### Text Logo (black)

<div className="white-container">
    <img src="/img/text-black.svg" alt="ink! logo in black" className="brand-asset" />
</div>

Download here: [`text-black.svg`](/img/text-black.svg).

### Text Logo (white)

<div className="black-container">
    <img src="/img/text-white.svg" alt="ink! logo in white" className="brand-asset" />
</div>

Download here: [`text-white.svg`](/img/text-white.svg).

### Text Logo (glow)

<div className="black-container">
    <img src="/img/text-glow.svg" alt="ink! logo glowing" className="brand-asset" />
</div>

Download here: [`text-glow.svg`](/img/text-glow.svg).
````

## File: versioned_docs/version-v3/cargo-contract/call.md
````markdown
---
title: Call a Contract
slug: /cargo-contract-cli/call
---

TODO
````

## File: versioned_docs/version-v3/cargo-contract/deploy.md
````markdown
---
title: Deploy a Contract
slug: /cargo-contract-cli/deploy
---

TODO
````

## File: versioned_docs/version-v3/cargo-contract/instantiate.md
````markdown
---
title: Instantiate a Contract
slug: /cargo-contract-cli/instantiate
---

TODO

I am trying to deploy and instantiate a contract using a custom-built cargo-contract with the extrinsics feature. The 'deploy' and 'instantiate' commands require a "secret key uri" and "secret key password" that I don't know how to find for my canvas devnet. Can somebody help me understand what these are and how to obtain them?

You probably just need to the key for some account with enough funds to deploy and instantiate the contract...I don't think the key is specific to the node in any way
If you're running the Canvas node in dev mode, these are the accounts that are pre-funded https://github.com/paritytech/canvas-node/blob/master/node/src/chain_spec.rs#L76
People typically use Alice...her information is here https://docs.substrate.io/v3/tools/subkey/#well-known-keys I guess you'd just leave the password blank
So the secret key URI will be bottom drive obey lake curtain smoke basket hold race lonely fit walk//Alice I think
````

## File: versioned_docs/version-v3/cargo-contract/overview.md
````markdown
---
title: Overview
slug: /cargo-contract-cli
---

[![version][m1]][m2]

[m1]: https://img.shields.io/crates/v/cargo-contract.svg
[m2]: https://crates.io/crates/cargo-contract

`cargo-contract` is a CLI tool which helps you set up and manage
WebAssembly smart contracts written with ink!.
You can find it [here on GitHub](https://github.com/use-ink/cargo-contract)
and here on [crates.io](https://crates.io/crates/cargo-contract).

The tool has a number of handy capabilities:

```
cargo-contract 0.8.0
Utilities to develop Wasm smart contracts.

USAGE:
    cargo contract <SUBCOMMAND>

OPTIONS:
    -h, --help       Prints help information
    -V, --version    Prints version information

SUBCOMMANDS:
    new                  Setup and create a new smart contract project
    build                Compiles the contract, generates metadata, bundles both together in a '.contract' file
    check                Check that the code builds as Wasm; does not output any build artifact to the top level `target/` directory
    test                 Test the smart contract off-chain
    deploy               Upload the smart contract code to the chain
    instantiate          Instantiate a deployed smart contract
    help                 Prints this message or the help of the given subcommand(s)
```

## Installation

As a pre-requisite for the tool you need to install the [binaryen](https://github.com/WebAssembly/binaryen) package, which is used to optimize the WebAssembly bytecode of the contract.

Many package managers have it available nowadays ‒ e.g. it's a package for [Debian/Ubuntu](https://tracker.debian.org/pkg/binaryen),
[Homebrew](https://formulae.brew.sh/formula/binaryen) and [Arch Linux](https://archlinux.org/packages/community/x86_64/binaryen/).

After you've installed the package execute:

```bash
cargo install cargo-contract --force --locked
```

Use the `--force` to ensure you are updated to the most recent `cargo-contract` version.

You can then use `cargo contract --help` to start exploring the commands made available to you.

## Usage

In order to initialize a new ink! project you can use:

```bash
cargo contract new flipper
```

This will create a folder `flipper` in your work directory.
The folder contains a scaffold `Cargo.toml` and a `lib.rs`, which both contain the necessary building blocks for using ink!.

The `lib.rs` contains our hello world contract ‒ the `Flipper`, which we explain in the next section.

In order to build the contract just execute these commands in the `flipper` folder:
```bash
cargo contract build
```

As a result you'll get the file `target/flipper.contract`. It's a JSON which bundles the contract's
metadata and its Wasm blob. This file needs to be used when deploying the contract.
You additionally get the individual `target/flipper.wasm` and `target/metadata.json` in the folder as well.
````

## File: versioned_docs/version-v3/datastructures/custom.md
````markdown
---
title: Custom Data Structures
slug: /datastructures/custom-datastructure
---

While the `ink_storage` crate provides tons of useful utilities and data structures to organize and manipulate the contract's storage contract authors are not limited by its capabilities. By implementing the core `SpreadLayout`/`PackedLayout` traits (and the `StorageLayout` trait for supporting the metadata generated for the `.contract` bundle) users are able to define their very own custom storage data structures with their own set of requirement and features that work along the `ink_storage` data structures as long as they fulfill the mere requirements stated by those two traits.

A basic example of a custom struct is shown below:

``` rust
struct Inner {
    value: bool
}

#[ink(storage)]
pub struct MyContract {
    inner: Inner
}
```

Compiling the above will result in errors. While having an inner struct which holds only a boolean might not be the best idea, it serves well to illustrate how to implement the trait:

``` rust
impl SpreadLayout for Inner {
    const FOOTPRINT: u64 = 1;

    fn pull_spread(ptr: &mut KeyPtr) -> Self {
        Self {
            value: SpreadLayout::pull_spread(ptr),
        }
    }

    fn push_spread(&self, ptr: &mut KeyPtr) {
        SpreadLayout::push_spread(&self.value, ptr);
    }

    fn clear_spread(&self, ptr: &mut KeyPtr) {
        SpreadLayout::clear_spread(&self.value, ptr);
    }
}

```

You can check what each method does in the [trait's docs](https://docs.rs/ink_storage/3.3.1/ink_storage/traits/trait.SpreadLayout.html). Check how some data structures are implemented, such as [Mapping](https://docs.rs/ink_storage/3.3.1/src/ink_storage/lazy/mapping.rs.html#113).
````

## File: versioned_docs/version-v3/datastructures/mapping.md
````markdown
---
title: Working with Mapping
slug: /datastructures/mapping
---

In this section we want to demonstrate how to work with ink! [`Mapping`](https://docs.rs/ink_storage/3.3.1/ink_storage/struct.Mapping.html).

Here is an example of a mapping from a user to a number:

```rust
#[ink(storage)]
#[derive(SpreadAllocate)]
pub struct MyContract {
    // Store a mapping from AccountIds to a u32
    map: ink_storage::Mapping<AccountId, u32>,
}
```

This means that for a given key, you can store a unique instance of a value type. In this
case, each "user" gets their own number.

## Initializing a Mapping

In order to correctly initialize a `Mapping` we need two things:
1. An implementation of the [`SpreadAllocate`](https://docs.rs/ink_storage/3.3.1/ink_storage/traits/trait.SpreadAllocate.html) trait on our storage struct
2. The [`ink_lang::utils::initialize_contract`](https://docs.rs/ink_lang/3.3.1/ink_lang/utils/fn.initialize_contract.html) initializer

Not initializing storage before you use it is a common mistake that can break your smart
contract. If you do not initialize your `Mapping`'s correctly you may end up with
different `Mapping`'s operating on the same set of storage entries 😱.

```rust

#![cfg_attr(not(feature = "std"), no_std)]

use ink_lang as ink;

#[ink::contract]
mod mycontract {
    use ink_storage::traits::SpreadAllocate;

    #[ink(storage)]
    #[derive(SpreadAllocate)]
    pub struct MyContract {
        // Store a mapping from AccountIds to a u32
        map: ink_storage::Mapping<AccountId, u32>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new(count: u32) -> Self {
            // This call is required in order to correctly initialize the
            // `Mapping`s of our contract.
            ink_lang::utils::initialize_contract(|contract: &mut Self| {
                let caller = Self::env().caller();
                contract.map.insert(&caller, &count);
            })
        }

        #[ink(constructor)]
        pub fn default() -> Self {
            // Even though we're not explicitly initializing the `Mapping`,
            // we still need to call this
            ink_lang::utils::initialize_contract(|_| {})
        }

        // Grab the number at the caller's AccountID, if it exists
        #[ink(message)]
        pub fn get(&self) -> u32 {
            let caller = Self::env().caller();
            self.map.get(&caller).unwrap_or_default()
        }
    }
}
```
````

## File: versioned_docs/version-v3/datastructures/overview.md
````markdown
---
title: Overview
slug: /datastructures/overview
---

The `ink_storage` crate acts as the standard storage library for ink! smart contracts. At
the moment it only provides a single low-level primitive for interacting with storage,
the [`Mapping`](https://docs.rs/ink_storage/3.3.1/ink_storage/struct.Mapping.html).

The `Mapping` is a mapping of key-value pairs directly to the contract storage. Its main advantage
is to be simple and lightweight. As such, it does not provide any high-level
functionality, such as iteration or automatic clean-up. Smart contract authors will need
to implement any high level functionality themselves.

## Eager Loading

When executing a contract, all the fields of the `#[ink(storage)]` struct will be pulled
from storage, regardless of whether or not they are used during the message execution.

Smart contract authors should be aware of this behavior since it could potentially
affect their contract performance. For example, consider the following storage struct:

```rust
#[ink(storage)]
pub struct EagerLoading {
    a: i32,
    b: ink_prelude::vec::Vec<i32>,
}

impl EagerLoading {
    #[ink(message)]
    pub fn read_a(&self) {
        let a = self.a;
    }
}
```

In `EagerLoading::read_a()` we only read the `a` storage item. However, the `b` storage
item will still be loaded from storage. As a reminder, this means accessing the
underlying database and SCALE decoding the value. This can incur high costs, especially
as the number of elements in `b` grows.

:::note

Eager loading does **not** apply to `Mapping` fields, though, as key lookups in mappings
are done directly from contract storage.

:::
````

## File: versioned_docs/version-v3/datastructures/spread-storage-layout.md
````markdown
---
title: Spread Storage Layout
slug: /datastructures/spread-storage-layout
---

### Storage Organization

The following schema depicts the storage which is exposed
to ink! by the contracts pallet:

<div class="schema">
    <img src="/img/kv-3.x.svg" alt="Storage Organization: Layout" />
</div>

ink!'s storage operates by storing and loading entries into and from a single storage
cell. At the moment there is no way to customize this behavior. Depending on the data
we're dealing with, this can end up being good or bad.

For example, if we have a somewhat small `ink_prelude::vec::Vec` loading all the elements
at the same time can be advantageous - especially if we expect our message to interact
with most of them in a single call.

On the other hand, this can be problematic if we're loading a large `Vec` and only
operating on a few elements.

### Spreading

ink! spreads information to as many cells as possible. For example if you have the
following `#[ink(storage)]` struct every field will live in its own single storage cell.
Note that for `b` all 32 bytes will share the same cell!

```rust
#[ink(storage)]
pub struct Spread {
    a: i32,
    b: [u8; 32],
}
```

The following schema depicts the storage layout for a vector with three elements,
persisted to storage in a spread layout.

<div class="schema">
    <img src="/img/spread.svg" alt="Storage Organization: Spreading" />
</div>
````

## File: versioned_docs/version-v3/examples/overview.md
````markdown
---
title: Overview
slug: /examples
---

In our <a href="https://github.com/use-ink/ink-examples/tree/main">examples folder</a> you find a number of examples written in ink!.

Some of the most interesting ones:

* `delegator` ‒ Implements cross-contract calling.
* `trait-erc20` ‒ Defines a trait for `Erc20` contracts and implements it.
* `erc721` ‒ An exemplary implementation of `Erc721` NFT tokens.
* `dns` ‒  A simple `DomainNameService` smart contract.
* …and more, just rummage through the folder 🙃.

To build a single example navigate to the root of the example and run:
```bash
cargo contract build
```

As a result you'll get a file `target/flipper.wasm` file, a `metadata.json` file and a `<contract-name>.contract` file in the `target/` folder of your contract.
The `.contract` file combines the Wasm and metadata into one file and needs to be used when deploying the contract.

For further information, please have a look at the [Deploy your Contract](../getting-started/deploying.md) section or our [smart contracts workshop](https://docs.substrate.io/tutorials/smart-contracts/).
````

## File: versioned_docs/version-v3/faq/faq.md
````markdown
---
title: Frequently Asked Questions
slug: /faq
hide_table_of_contents: true
---

### Is it "ink" or "ink!"? What does the "!" stand for?

The correct spelling is _ink!_ ‒ with a lowercase "i" and an exclamation mark at the end.
The history here is that:

* …in the very first iteration ink! was originally a [declarative Rust macro](https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming). A contract was invoked by writing `ink!{ … }`.
* …there is a real-world analogy here of writing a paper contract using ink.
* …we wanted to have as many DOTs as possible in the name 😉.

So please don't make poor Squink cry having to read !ink, ink, Ink!, or Ink.

### Who is "Squink"?

<div class="squid-container">
<img src="/img/ink-squink.svg" alt="Squink ‒ the ink! mascot" height="90" className="squid" />
This little cute purple squid is Squink.

Squink is the mascot of ink! and guides new users and adventurers through our presentations
workshops and tutorials. It also has a romance with Rust's mascot, Ferris.

Generally it is very friendly and open to learning new Rustaceans but be aware to never upset
it by taking away dots from the word ink! by spelling it incorrectly!
It really is into dots. Stories tell that it demanded the spelling of ink! with as many dots as possible.
</div>

### What's ink!'s relationship to Substrate/Polkadot?

- Substrate is a modular framework to build decentralized applications on top of blockchain technology.
- Polkadot is a layer-0 blockchain built using Substrate that allows to orchestrate an entire
fleet of other blockchains to join forces and communicate with each other.
- Blockchains built with Substrate can include the so-called `contracts-pallet` module in order to
allow instantiating and executing smart contracts.

ink! was built to allow users to write smart contracts in Rust targeting blockchains built by
Substrate that have the aforementioned `contracts-pallet` included.

While ink! is currently the most advanced smart contract language targeting Substrate blockchains it is
not the only possible choice for users. There is also a Solidity to Wasm compiler called Solang that also
allows to target Substrate chains and there are other languages in plan and discovery phase for the same
purpose.

On the Substrate side the same is true for the `contracts-pallet`. It is just a module that defines
the basic set of features required for executing smart contracts on the blockchain that includes it.
However, it is not necessarily the only solution to do exactly that. There is also the `evm-pallet`
to run smart contracts targeting the EVM as well as the experimental `actors-pallet` that allows to
execute smart contracts written in the actor style programming model.
Over time the Substrate community might come up with yet other pallets for smart contracts execution. 

### How to call other smart contracts on the same blockchain?

See the [Cross-contract calling](../basics/cross-contract-calling.md) section.

### How to call other smart contracts on another parachain?

This feature has not yet been implemented by the Substrate side.

### What is a contract's ABI or Metadata?

In ink! a smart contract's metadata is retrieved by using the `cargo-contract` CLI tool and
invoking `cargo contract build` which outputs a `.contract` file that includes both the compiled
`.wasm` of the ink! smart contract as well as the so-called metadata information of the same
smart contract.
The metadata is especially important for third party tools such as Polkadot JS Apps or the Contracts UI
and provides useful information about the contract's constructors, messages, events, function selectors,
documentation and comments of the aforementioned structures as well as how inputs and outputs shall
be encoded and decoded respectively etc.

### Can a re-entrancy bug occur in ink! contracts?

Yes. However, the Substrate team is well aware of the associated problems and already through about
possible future additions to eliminate re-entrancy attacks.

### How can my smart contract interact with the runtime?

See the [Chain Extensions](../macros-attributes/chain-extension.md) section for more information.

### How can I use ink! with a Substrate chain with a custom chain config?

Please see [the `env_types` argument](https://docs.rs/ink_lang_macro/3.3.1/ink_lang_macro/attr.contract.html#header-arguments)
for the contract macro. It allows you to specify your environment a la 
`#[ink::contract(env = MyEnvironment)]`.

### What does the `#![cfg_attr(not(feature = "std"), no_std)]` at the beginning of each contract mean?

The `#[cfg(..)]` or `#[cfg_attr(..)]` annotations are how Rust does conditional compilation.

ink! smart contracts can be compiled in two different modes.

Through `#![cfg_attr(not(feature = "std"), no_std)]` an ink! smart contract tells the Rust compiler
in which mode they are being compiled. This also plays a significant role in how ink! generates
the smart contract code.

The two modes are as follows:

1. Wasm mode: This is the mode chosen when compiling an ink! smart contract for deployment on a blockchain.
   The resulting binary is a `.wasm` file and as such it is not possible to use certain parts of Rust's standard
   library.
2. Off-chain mode: This is the mode chosen when trying to test an ink! smart contract using the off-chain
   environment. Off-chain environment testing is very useful to check if certain ink! constructors or messages
   are well behaving and allow for better debuggability than when trying to debug the same smart contract deployed
   on a chain.

### Overflow Safety?

Being written in Rust, ink! can provide compile-time overflow/underflow safety. Using a Rust compiler configuration, you can specify whether you want to support overflowing math, or if you want contract execution to panic when overflows occur. No need to continually import "Safe Math" libraries, although Rust also provides [integrated checked, wrapped, and saturated math functions](https://doc.rust-lang.org/std/primitive.u32.html).

>Note: There are some known issues regarding functionality of compiler level overflow checks and the resulting size of the Wasm blob. This feature may change or be iterated on in the future.

### What is the difference between memory and storage?

In ink!, memory refers to computer memory, while storage refers to the on-chain storage
used by a contract instance. Memory is temporary and only lasts until the contract
execution is done, while storage is persistent and lasts over many contract executions.
The contract storage is built on top of the runtime storage, and access is considered to be slow.

### How do I print something to the console from the runtime?

You can use those two macros:
* [`ink_env::debug_println!`](https://docs.rs/ink_env/3.3.1/ink_env/macro.debug_println.html)
* [`ink_env::debug_print!`](https://docs.rs/ink_env/3.3.1/ink_env/macro.debug_print.html)

There are three things you have to do for the debug messages to show up on the console:

1. __Enable the feature `pallet-contracts/unstable-interface` in the target runtime.__<br/>
For `substrate-contracts-node` this is done by default [here](https://github.com/paritytech/substrate-contracts-node/blob/master/runtime/Cargo.toml).
  
1. __Enable the feature `ink-debug` for the `ink_env` crate.__<br/>
`cargo-contract` does this automatically for you (for versions `>= 0.13.0`), except if
you compile a contract in `--release` mode.

1. __Set the log level of your node to `runtime::contracts=debug`.__<br/>
  For example, to have only errors and debug output show up for the `substrate-contracts-node`: 
  ```
  substrate-contracts-node --dev -lerror,runtime::contracts=debug
  ```

__Important: Debug output is only printed for RPC calls or off-chain tests ‒ not for transactions!__

In your ink! message or constructor you can write the following:

```rust
#[ink(constructor)]
fn new() -> Self {
    ink_env::debug_println!("created new instance at {}", Self::env().block_number());
    Self { }
}

#[ink(message)]
fn print(&self) {
   let caller = self.env().caller();
   let message = ink_prelude::format!("got a call from {:?}", caller);
   ink_env::debug_println!(&message);
}
```


### Why is Rust's standard library (stdlib) not available in ink!?

Rust's standard library consists of three different layers:

1. `core` library which defines everything that has no dependencies outside of Rust itself.
   Included are types such as `Option`, `Result` as well as a whole variety of modules,
   functions and macro.

   ink! smart contracts allow authors to use Rust's `core` crate.

2. `alloc` library which is depending on a global allocator and mainly defines collections
   that spill their elements on to the execution's heap memory.
   Examples for collections are `Box`, `String`, `Vec`, `HashMap`, `LinkedList` and modules
   such as `fmt`, `rc` (ref-counted pointers) or borrows.

   ink! smart contracts allow authors to use Rust's `alloc` crate.
   By default ink! authors use definitions from the `alloc` crate through `ink_prelude` crate.

3. `std` library is what people generally call Rust's standard library.

   > The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem.

   It requires several operating system capabilities in order to work correctly such as input and
   output systems for files, networking etc.

   Since the Wasm (a.k.a. `wasm32-unknown-unknown`) compilation target does not support Rust's
   standard library ink! authors cannot use it either for their own purposes. Instead the `contracts-pallet`
   tries to provide some common functionality that would otherwise be missing for common smart contract
   operations.

### Why is `nightly` required for ink!?

ink! requires a `nightly` Rust compiler as of 2021-01 since it relies on a few unstable nightly features
around allocation handlers for `no_std` (no standard library) code.

As soon as the Rust team decides to stabilize these features ink! will be available for stable Rust.

### How do I hash a value?

A number of crypto hashes are built into the [contracts-pallet](../intro/how-it-works.md) and
therefore very efficient to use. We currently support a handful of those, you 
can view the complete list [here](https://docs.rs/ink_env/3.3.1/ink_env/hash/trait.CryptoHash.html).

If you have the urgent need for another crypto hash you could introduce it through
[Chain Extensions](../macros-attributes/chain-extension.md)
or make a proposal to include it into the default set of the `contracts-pallet`.

Using one of the built-in crypto hashes can be done as explained here:
* [`self.env().hash_bytes()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.hash_bytes.html)
* [`self.env().hash_encoded()`](https://docs.rs/ink_env/3.3.1/ink_env/fn.hash_encoded.html)

### Why is it not possible to use floating point data types in ink!? How do I implement returning a decimal number?

Floats are cool for all kinds of reasons, but they also have one important
drawback. Floating point arithmetic is non-deterministic which means that
different processors compute (slightly) different results for the same
operation. Although there is an IEEE spec, non-determinism can come from specific
libraries used, or even hardware. In order for the nodes in a blockchain network
to reach agreement on the state of the chain, all operations must be completely
deterministic. Hence we don't allow floating point data types in ink!.

Consequently it's not possible to return a decimal number from an ink! message.
What you should do instead is to have your user interface denominate the returned
number to decimals.

Note, that it's typical for blockchains to have the number of available tokens
defined as a non-floating number and determine the denomination in the user
interface. For example, 1 Bitcoin is equivalent to the smallest unit of 100,000,000
Satoshi and all Bitcoin implementations internally persist account balances in
Satoshi, not as a decimal number of Bitcoin.


### Why can't I just use the standard Rust data collections in ink!?

You can use them! They are exposed via the `ink_prelude` crate (e.g. `ink_prelude::vec::Vec`)
and you can return them from ink! messages and also persist them to storage.

_However, the Rust stdlib collections are not optimized for smart contract usage!_ So for example,
if you use them to persist your data on the chain they will always occupy a single storage cell
and thus always be loaded eagerly, in their entirety. This can be very costly! Just think about
a `Vec` or a `HashMap` where the smart contract might only need access to a few elements, rather
than the entire data collection.

### Why am I getting a `ContractTrapped` error when interacting with a contract?

When it does not constitute a deliberate assertion, like for example a permission check,
it is most likely a bug in your contract or in ink!. 

A common source of `ContractTrapped` are Integer overflows, those can cause
your contract to trap as well. 
There is a [known bug in the Rust compiler](https://github.com/rust-lang/rust/issues/78744)
with respect to safe math operations. As a workaround for this particular bug
try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations altogether, but unfortunately we are currently
not aware of a better workaround until the bug in the compiler is fixed.

If you don't find the issue you can also ask for help in our public 
[Element](https://riot.im/app/#/room/#ink:matrix.parity.io) or 
[Discord](https://discord.gg/j2DKRRbSJr) channel.


### What are the `scale::Encode` and `scale::Decode` traits?

Substrate-based blockchains use the [SCALE codec](https://github.com/paritytech/parity-scale-codec)
to encode data.
As a consequence the data for every interaction with Substrate needs to
be SCALE-encodable ‒ i.e. it needs to implement either `scale::Encode`,
`scale::Decode`, or both. This affects e.g. data you want to return to a caller,
data that you want to take as input, or data you want to store on-chain.

A common error you might get when a necessary SCALE trait is not implemented
for a data structure could be along the lines of `the trait "WrapperTypeEncode"
is not implemented for "Foo"`.
For example, you might encounter this error if you try to store a custom data
structure in the contract's storage. Or e.g. when attempting to return 
a custom error from an ink! message.

> Note: The error `the trait "WrapperTypeEncode" is not implemented for …` is also
> a common error when a mismatching version of `parity-scale-codec` is used
> in the contract opposed to the version used by ink!.

The solution typically is to add a fitting implementation of the trait
for your data structure:

* `Encode` is used for encoding a data structure when it is e.g. returned
to a caller or when it is persisted to the contracts storage.
  
* `Decode` is used for the inverse, e.g. when reading from storage or
taking an input from a user (or another contract).

It's possible to derive those traits and oftentimes the simplest way
is to just derive the missing trait for the object for which its implementation
is missing:

```rust
#[derive(scale::Encode, scale::Decode)]
struct MyCustomDataStructure { … }
```

### How do I use `String` in my contract?

In general, you should think twice if you really need `String`.
Smart contracts usually don't use strings; those are typically
used for user interactions and should live in your UI and not on the chain.

Minimizing storage usage of your contract is a best practice
and you should only persist items which you need to derive state transitions
in your contract.

If you still, for some reason, need to use `String`, then you should use
the `String` [from the ink! prelude](https://docs.rs/ink_prelude/3.4.0/ink_prelude/string/struct.String.html).
````

## File: versioned_docs/version-v3/getting-started/calling.md
````markdown
---
title: Call Your Contract
slug: /getting-started/calling-your-contract
---

Now that your contract has been fully deployed, we can start interacting with it! Flipper only has
two functions, `flip()` and `get()` so we will show you what it's like to play with both of them.

### 1. get() function

We set the initial value of the Flipper contract
`value` to `false` when we instantiated the contract. Let's check that this is the case.

In the **Message to Send** section, select the "**get(): bool**" message and accept the default
values for the other options.

Press **"Read"** and confirm that it returns the value `false`:

![An image of Flipper RPC call with false](./assets/flipper-false.png)

### 2. flip() function

So let's make the value turn `true` now!

The alternative message to send with the UI is `flip()`. Again, accept the default values for the other options and click **Call**

![An image of a Flipper transaction](./assets/send-as-transaction.png)

If the transaction was successful, we should then be able to go back to the `get()` function and see our updated storage:

![An image of Flipper RPC call with true](./assets/flipper-true.png)

Woohoo! You deployed your first smart contract!
````

## File: versioned_docs/version-v3/getting-started/compiling.md
````markdown
---
title: Compile Your Contract
slug: /getting-started/building-your-contract
---

Run the following command in your `flipper` directory to compile your smart contract:

```bash
cargo +nightly contract build
```

This command will build the following for your contract: a Wasm binary, a metadata file (which contains the
contract's ABI) and a `.contract` file which bundles both. This `.contract` file can be used to
deploy your contract to a chain. If all goes well, you should see a `target` folder which
contains these files:

```
target
  └─ ink
    └─ flipper.contract
    └─ flipper.wasm
    └─ metadata.json
```

Let's take a look at the structure of the `metadata.json`:

```json
{
  "metadataVersion": "0.1.0",
  "source": {...},
  "contracts": {...},
  "spec": {
    "constructors": [...],
    "docs": [],
    "events": [],
    "messages": [...],
  },
  "storage": {...},
  "types": [...]
}
```

This file describes all the interfaces that can be used to interact with your contract:

* `types` provides the custom **data types** used throughout the rest of the JSON.
* `storage` defines all the **storage** items managed by your contract and how to ultimately access them.
* `spec` stores information about the callable functions like **constructors** and **messages** a
user can call to interact with the contract. It also has helpful information like the **events**
that are emitted by the contract or any **docs**.
  
If you look closely at the constructors and messages, you will also notice a `selector` which
contains a 4-byte hash of the function name and is used to route your contract calls to the correct
functions.

In the next section we will start a [Substrate Smart Contracts node](https://github.com/paritytech/substrate-contracts-node)
and configure the [Contracts UI](https://github.com/use-ink/contracts-ui) to interact with it.
````

## File: versioned_docs/version-v3/getting-started/creating.md
````markdown
---
title: Creating an ink! Project
slug: /getting-started/creating-an-ink-project
---

ink! is an [Embedded Domain Specific Language](https://wiki.haskell.org/Embedded_domain_specific_language) (EDSL) that you can use to write WebAssembly based smart contracts in the Rust programming language.

ink! is just standard Rust in a well defined "contract format" with specialized `#[ink(…)]` attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Substrate compatible Wasm bytecode!

Use the ink! CLI to generate an initial smart contract with some scaffolding code.

Make sure you are in your working directory, and then run:

```bash
cargo contract new flipper
```

This command will create a new project folder named `flipper` with this content:

```
flipper
  └─ lib.rs                <-- Contract Source Code
  └─ Cargo.toml            <-- Rust Dependencies and ink! Configuration
  └─ .gitignore
```

## Contract Source Code

The ink CLI automatically generates the source code for the "Flipper" contract, which is about the simplest "smart" contract you can build. You can take a sneak peak as to what will come by looking at the source code here:

[Flipper Example Source Code](https://github.com/use-ink/ink/blob/v3.0.0-rc8/examples/flipper/lib.rs)

The Flipper contract is nothing more than a `bool` which gets flipped from `true` to `false` through the `flip()` function. 

## Testing Your Contract

You will see at the bottom of the source code there are simple test cases which verify the functionality of the contract. We can quickly test this code is functioning as expected using the **off-chain test environment** that ink! provides.

In your project folder run:

```bash
cargo +nightly test
```

To which you should see a successful test completion:

```bash
$ cargo +nightly test
    running 2 tests
    test flipper::tests::it_works ... ok
    test flipper::tests::default_works ... ok

    test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
```

Now that we are feeling confident things are working, we can actually compile this contract to Wasm in the next step.
````

## File: versioned_docs/version-v3/getting-started/deploying.md
````markdown
---
title: Deploy Your Contract
slug: /getting-started/deploy-your-contract
---

Now that we have generated the Wasm binary from our source code and connected to a local node, we want
to deploy this contract onto our Substrate blockchain.

Smart contract deployment on Substrate is a little different than on traditional smart contract
blockchains.

Whereas a completely new blob of smart contract source code is deployed each time you push a
contract on other platforms, Substrate opts to optimize this behavior. For example, the standard
ERC20 token has been deployed to Ethereum thousands of times, sometimes only with changes to the
initial configuration (through the Solidity `constructor` function). Each of these instances take
up space on the blockchain equivalent to the contract source code size, even though no code was
actually changed.

In Substrate, the contract deployment process is split into two steps:

1. Putting your contract code on the blockchain
2. Creating an instance of your contract

With this pattern, contract code like the ERC20 standard can be put on the blockchain one single
time, but instantiated any number of times. No need to continually upload the same source code over
and waste space on the blockchain.

### 1. Upload Contract Code

Here we will upload the contract code and instantiate one copy of the contract on the blockchain
(which is usually why we upload the contract code in the first place):

- Click the **Add New Contract** button in the sidebar.
- Click the **Upload New Contract Code** button in the Add New Contract page.
- Choose an **Instantiation account** (e.g. ALICE).
- Give the contract a descriptive **Name** (e.g. Flipper Contract).
- Drag the `flipper.contract` file that contains the bundled Wasm blob and metadata into the drag
  & drop area. You will see the UI parse the metadata and enabling the button that takes you to the next step.
- Click the **Next** button

![Flipper Instantiate Contract 01](./assets/flipper-instantiate-01.png)

### 2. Instantiate a Contract on the Blockchain

Smart contracts exist as an extension of the account system on the blockchain. Thus creating an
instance of this contract will create a new `AccountId` which will store any balance managed by the
smart contract and allow us to interact with the contract.

Now a screen displays the information that represents our smart contract. We are going to
instantiate a copy of the smart contract:

- Accept the default options for the contract **Deployment Constructor**.
- Accept the default options **Max Gas Allowed** of `200000`.
- Click on `Next`

![Flipper Instantiate Contract 02](./assets/flipper-instantiate-02.png)

The transaction is now queued, review your data and click **Upload and Instantiate** or go back and modify your inputs.

![Flipper Instantiate Contract 03](./assets/flipper-instantiate-03.png)

When you click **Upload and Instantiate** you should see
the extrinsic `instantiateWithCode` is processing, and a flurry of events appear including the
creation of a new account (`system.NewAccount`) and the instantiation of the contract
(`contracts.Instantiated`).
You will be redirected to a new page, where you can interact with the newly created contract instance.

![Flipper Instantiate Success](./assets/flipper-instantiate-04.png)
````

## File: versioned_docs/version-v3/getting-started/running.md
````markdown
---
title: Run a Substrate Node
slug: /getting-started/running-substrate
---

The [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node#note) is a simple Substrate
blockchain which is configured to include the `contracts` module.

It's a comfortable option if you want to get a quickstart.

[After successfully installing `substrate-contracts-node`](../getting-started/setup.md), you can start a local development chain by running:

```bash
substrate-contracts-node --dev
```

![An image of the terminal starting a Substrate node](./assets/start-substrate-node.png)

You should start to see blocks being produced by your node in your terminal.

You can interact with your node using the Contracts UI:

<a href="https://github.com/use-ink/contracts-ui">https://github.com/use-ink/contracts-ui</a>

Now configure the UI to connect to the locally running node:

- Click on the dropdown selector at top left corner.
- Choose the Local Node.

![Connect to local node](./assets/canvas-connect-to-local.png)
````

## File: versioned_docs/version-v3/getting-started/setup.md
````markdown
---
title: Setup
slug: /getting-started/setup
---

In case you are looking for a guided tutorial directed
towards beginners please check out our [Smart contract tutorial page](https://docs.substrate.io/tutorials/smart-contracts/).

## Rust & Cargo

A pre-requisite for compiling smart contracts is to have Rust and Cargo installed. Here's [an installation guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

## ink! CLI

The first tool we will be installing is [`cargo-contract`](https://github.com/use-ink/cargo-contract), a CLI tool for helping setting up and managing WebAssembly smart contracts written with ink!.

As a pre-requisite for the tool you need to install the [binaryen](https://github.com/WebAssembly/binaryen) package, which is used to optimize the WebAssembly bytecode of the contract.

Many package managers have it available nowadays ‒ e.g. there is a package for [Debian/Ubuntu](https://tracker.debian.org/pkg/binaryen),
[Homebrew](https://formulae.brew.sh/formula/binaryen) and [Arch Linux](https://archlinux.org/packages/community/x86_64/binaryen/).

If there's only an old version in your distributions package manager you can also [download a binary release directly](https://github.com/WebAssembly/binaryen/releases).

After you've installed the package execute:

```bash
cargo install cargo-contract --force --locked
```

Use the `--force` to ensure you are updated to the most recent `cargo-contract` version.

You can then use `cargo contract --help` to start exploring the commands made available to you.

Two other dependencies are needed to lint the ink! contract. This is done to warn users about using e.g. API's in a way that could lead to security issues.

```bash
cargo install cargo-dylint dylint-link
```

## Substrate Framework Pre-requisites

With ink! you can write smart contracts for blockchains built on Substrate.

Follow the
[official installation steps](https://substrate.dev/docs/en/knowledgebase/getting-started/) from the
Substrate Developer Hub Knowledge Base to set up all Substrate pre-requisites.
Once you have done this you will also need to run:

```bash
rustup component add rust-src --toolchain nightly
rustup target add wasm32-unknown-unknown --toolchain nightly
```

## Installing The Substrate Smart Contracts Node

The [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node) is a simple Substrate
blockchain which is configured to include the Substrate module for smart contract
functionality ‒ the `contracts` pallet (see [How it Works](../intro/how-it-works.md) for more).

It's a comfortable option if you want to get a quickstart.
You can [download a binary from our releases page](https://github.com/paritytech/substrate-contracts-node/releases)
(Linux and Mac). Alternatively you can build the node by yourself:

```bash
cargo install contracts-node --git https://github.com/paritytech/substrate-contracts-node.git --tag v0.23.0 --force --locked
```
````

## File: versioned_docs/version-v3/getting-started/troubleshooting.md
````markdown
---
title: Troubleshooting
slug: /getting-started/troubleshooting
---

Here are solutions to some of the common problems you may come across:

### Unexpected Epoch Change

There is a known issue with the Substrate block production (BABE) on a running chain. If you stop your node for too long (closing the terminal, putting your computer to sleep, etc.), you will get the following error:

```bash
ClientImport("Unexpected epoch change")
```

To solve this you will need to restart your node with: `substrate-contracts-node --dev`. At that point, you will
need to re-deploy any contracts and re-do any steps that you may have done before on your node. As
long as you keep your node running, you should face no issues.

### Old Contracts in Local Storage

**Contracts UI** uses its own local storage to track the contracts that you have deployed. This means
that if you deploy a contract using the UI, and then purge your Substrate node, you will be prompted to
reset your local storage and please do so. And then re-deploy any contracts and re-do any steps that
you may have done before on your node.


### Other Issues

If you run into any other issues during this tutorial, please [report an issue](https://github.com/substrate-developer-hub/substrate-docs/issues)!
````

## File: versioned_docs/version-v3/intro/how-it-works.md
````markdown
---
title: How it Works ‒ Substrate
slug: /how-it-works
---

<div class="schema">
    <img src="/img/how-it-works.svg" alt="How it Works" />
</div>

Substrate's [Framework for Runtime Aggregation of Modularized Entities (FRAME)](https://docs.substrate.io/v3/runtime/frame/) contains
a module  which implements an API for typical functions smart contracts need (storage, querying information about accounts, …).
This module is called the `contracts` pallet,
you can find its repository [here](https://github.com/paritytech/substrate/blob/master/frame/contracts/README.md).

The `contracts` pallet requires smart contracts to be uploaded to the blockchain as a Wasm blob.

ink! is a smart contract language which targets the API exposed by `contracts`.
Hence ink! contracts are compiled to Wasm.

When executing `cargo contract build` an additional file `metadata.json` is created.
It contains information about e.g. what methods the contract provides for others to call.
````

## File: versioned_docs/version-v3/intro/ink-vs-cosmwasm.md
````markdown
---
title: ink! vs. CosmWasm
slug: /ink-vs-cosmwasm
---

This is a short comparison between [ink!](https://github.com/use-ink/ink/)
and [CosmWasm](https://github.com/CosmWasm/cosmwasm) meant to onboard
developers coming from the Cosmos ecosystem.

# Architecture

CosmWasm is modular, meaning that any blockchain using the Cosmos SDK can add smart
contract support to their chain. That is similar to the [Substrate](https://substrate.io/)
approach, where chains have the option to add `pallet-contracts` to their runtime.

Aside from that, the architecture philosophy is likely the point where CosmWasm and ink!
differ the most. CosmWasm follows the actor model design pattern, while ink! follows a
synchronous execution model. That means some fundamental differences in how the source
code is structured.

The main entry point functions of CosmWasm contracts are:
- `instantiate` which bootstraps the initial contract state (assuming it's already been
  deployed).
- `execute` which has the actor perform operations to its internal state.
- `query` which retrieves data from the actor’s internal state.

An ink! contract can have as many public dispatchables as the developer desires, and
differently from CosmWasm, it doesn’t rely on JSON schemas for defining how the messages
are structured.

Instead, ink! makes heavy usage of Rust macros. The main ink! macros are:
- `#[ink(constructor)]` which is called when the contract is deployed, and is responsible
  for bootstrapping the initial contract state into the storage. It is analogous to the
  CosmWasm `instantiate` function.
- `#[ink(storage)]` which annotates a struct that represents the contract's internal
  state.
- `#[ink(message)]` which marks a function as a public dispatchable, meaning that it is
  exposed in the contract interface to the outside world. This macro can make a function
  behave analogously to CosmWasm’s `execute` and `query` functions. This depends on how it
  affects the internal contract state and what the return types.
- `#[ink(event)]` and `#[ink(topic)]` which annotates a struct and its members as the
  events and topics that the contract might emit.

There are other ink! macros, for which details can be found at [Macros & Attributes](../macros-attributes/overview.md).

# Unit Testing

Unit testing in CosmWasm is quite similar to ink!. Both use the conventional Rust
`#[cfg(test)]` macro and set up a mock on-chain environment.

While CosmWasm unit tests have different modules for each of the three main entry-point
functions, ink! allows for a more generalised approach, where the `#[ink(test)]` macro is
used for each unit test.

You can read more about ink! unit tests [here](../basics/testing.md#unit-tests).

# Compiler

CosmWasm uses [cargo-wasm](https://docs.rs/crate/cargo-wasm/latest) as its main
compiler, while ink! uses [cargo-contract](https://github.com/use-ink/cargo-contract).
`cargo-contract` is developed specifically for building, testing, and deploying
ink! contracts.

# Local Development Network

In terms of local development networks, the [cosmos/gaia](https://github.com/cosmos/gaia)
repository acts as the basic template for a generic Cosmos node. With the addition of the
`x/wasm` module and some clean-up, this template repository becomes
[wasmd](https://github.com/CosmWasm/wasmd), the entry point for CosmWasm development.

In terms of Substrate, `substrate-node-template` is a basic generic template of a node.
Similar to `x/wasm`, [`pallet-contracts`[(https://github.com/paritytech/substrate/tree/master/frame/contracts)
is the module that adds WebAssembly smart contract functionality to the chain. Parity
provides the [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node),
which is analogous to `wasmd` - a basic template node for smart contract development.

# Testnets

For CosmWasm development and on-chain testing, `wasmd` can be operated as a local setup
(single or multiple nodes), or connected to the `cliffnet` public test network.

ink! contracts can be deployed on a few different options:
- Locally, on a single or multiple node setup of [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node).
- [Contracts on Rococo Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/explorer),
  which is connected to the [Rococo relay chain test network](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/explorer).
- [Astar Network’s Shibuya testnet](https://docs.astar.network/docs/build/wasm).

# Development Workflow

## Dependencies

The first step in CosmWasm development is to
[install dependencies](https://docs.cosmwasm.com/docs/getting-started/installation),
namely Go, Rust and `wasmd`.

For ink! you can also find [a setup guide](../getting-started/setup.md) which will help you
with dependencies, namely Rust, `cargo-contract` and `substrate-contracts-node`.

## Environment Setup

The next step in the CosmWasm development workflow is
[setting up the environment](https://docs.cosmwasm.com/docs/getting-started/setting-env).
That consists mainly of configuring `wasmd` such that it has prefunded accounts that are able
to interact with the network.

When `substrate-contracts-node` is started with the `--dev` flag, it already contains well
known pre-funded accounts (`alice`, `bob`, etc.) which are ready to be used for development.

## Compile and Test

CosmWasm provides example contracts at the
[cw-contracts](https://github.com/InterWasm/cw-contracts) repository. After the
repository is cloned, from the contract directory it can be compiled via:
```
$ cargo wasm
```

and tested via:
```
$ cargo unit-test
```

Similarly, ink! provides an
[`examples`](https://github.com/use-ink/ink-examples/tree/main) directory of its
main repository.

A contract can be compiled from its directory via:
``` 
$ cargo +nightly contract build
```

and tested via:
```
$ cargo test
```

## Deploy and Interact

CosmWasm contracts are deployed and instantiated with help of the `wasmd` executable. The
list of step is provided [here](https://docs.cosmwasm.com/docs/getting-started/interact-with-contract).

It is possible to deploy and interact with ink! contracts using either a CLI
(`cargo-contract`), or a web UI ([`contracts-ui`](https://ui.use.ink)).

- [Instructions for `cargo-contract`](https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md)
- [Instructions for `contracts-ui`](../getting-started/deploying.md)
````

## File: versioned_docs/version-v3/intro/ink-vs-solidity.md
````markdown
---
title: ink! vs. Solidity
slug: /ink-vs-solidity
---

Here is a brief comparison of features between ink! and Solidity:

<div class="comparison">

|                       | ink!                        | Solidity      |
| :-------------------- | :-------------------------- | :------------ |
| Virtual Machine       | Any Wasm VM                 | EVM           |
| Encoding              | Wasm                        | EVM Byte Code |
| Language              | Rust                        | Standalone    |
| Overflow Protection   | Enabled by default          | Yes           |
| Constructor Functions | Multiple                    | Single        |
| Tooling               | Anything that supports Rust | Custom        |
| Versioning            | Semantic                    | Semantic      |
| Has Metadata?         | Yes                         | Yes           |
| Multi-File Project    | Planned                     | Yes           |
| Storage Entries       | Variable                    | 256 bits      |
| Supported Types       | Docs                        | Docs          |
| Has Interfaces?       | Yes (Rust Traits)           | Yes           |

</div>

## Solidity to ink! Guide

## Table of Contents

- [Solidity to ink! Guide](#solidity-to-ink-guide)
- [Table of Contents](#table-of-contents)
- [Converting a Solidity Contract to ink!](#converting-a-solidity-contract-to-ink)
  - [1. Generate New ink! Contract](#1-generate-new-ink-contract)
  - [2. Build ink! Contract](#2-build-ink-contract)
  - [3. Convert Solidity class fields to Rust struct](#3-convert-solidity-class-fields-to-rust-struct)
  - [4. Convert each function](#4-convert-each-function)
- [Best Practices + Tips](#best-practices--tips)
- [Syntax Equivalencies](#syntax-equivalencies)
  - [`public function`](#public-function)
  - [`mapping declaration`](#mapping-declaration)
  - [`mapping usage`](#mapping-usage)
  - [`struct`](#struct)
  - [`assertions / requires`](#assertions--requires)
  - [`timestamp`](#timestamp)
  - [`contract caller`](#contract-caller)
  - [`contract's address`](#contracts-address)
  - [`bytes`](#bytes)
  - [`uint256`](#uint256)
  - [`payable`](#payable)
  - [`received deposit / payment`](#received-deposit--payment)
  - [`contract balance`](#contract-balance)
  - [`transfer tokens from contract`](#transfer-tokens-from-contract)
  - [`events & indexed`](#events--indexed)
  - [`errors and returning`](#errors-and-returning)
    - [`throw`](#throw)
    - [`assert`](#assert)
    - [`require and revert`](#require-and-revert)
  - [`nested mappings + custom / advanced structures`](#nested-mappings--custom--advanced-structures)
  - [`cross-contract calling`](#cross-contract-calling)
  - [`submit generic transaction / dynamic cross-contract calling`](#submit-generic-transaction--dynamic-cross-contract-calling)
- [Limitations of ink! v3](#limitations-of-ink-v3)
- [Troubleshooting Errors](#troubleshooting-errors)
- [unit testing (off-chain)](#unit-testing-off-chain)

## Converting a Solidity Contract to ink!

### 1. Generate New ink! Contract

Run the following to generate ink! boilerplate code for ink!'s "Hello, World!" (the [`flipper`](https://github.com/use-ink/ink-examples/tree/main/flipper) contract))

```
cargo contract new <contract-name>
```

### 2. Build ink! Contract

```
cargo +nightly contract build
```

### 3. Convert Solidity class fields to Rust struct

Solidity is an object oriented language, and uses classes. ink! (Rust) does not use classes.

An example Solidity class looks like:

<!-- Markdown syntax highlighting does not support Solidity. C++ seems to be the best match -->

```c++
contract MyContract {
    bool private _theBool;
    event UpdatedBool(bool indexed _theBool);

    constructor(bool theBool_) {
        require(theBool_ == true, "theBool_ must start as true");

        _theBool = theBool_;
    }

    function setBool(bool newBool) public returns (bool boolChanged) {
        if _theBool == newBool{
               boolChanged = false;
        }else{
            boolChanged = true;
        }

        _theBool = newBool;
        //emit event
        UpdatedBool(newBool);
    }
}
```

And the equivalent contract in ink! looks like:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

use ink_lang as ink;

#[ink::contract]
mod mycontract {
    #[ink(storage)]
    pub struct MyContract {
        the_bool: bool, //class members become struct fields
    }

    #[ink(event)]
    pub struct UpdatedBool {
        #[ink(topic)] //-> indexed
        the_bool: bool,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new(the_bool: bool) -> Self {
            assert!(the_bool == true, "the_bool must start as true");
            Self { the_bool }
        }

        #[ink(message)] //functions become struct implementations
        pub fn set_bool(&mut self, new_bool: bool) -> bool{
            let bool_changed = true;

            if self.the_bool == new_bool{
                bool_changed = false;
            }else{
                bool_changed = true;
            }

            self.the_bool = new_bool;

            self.env().emit_event(UpdatedBool {
                the_bool: new_bool
            });

            //return
            bool_changed
        }
    }
}
```

A few key differences are:

- Solidity class variables / members will be placed in the contract struct in ink!
- All class methods in Solidity are `impl`emented for the contract struct in ink!
- Solidity frequently prefixes variables with an underscore (`_name`). ink! / Rust only prefixes with an underscore for _unused_ variables.
- Solidity uses camelCase. ink! uses snake_case.
- In Solidity, the variable type comes before the variable name (e.g. bool myVar). While ink! specifies var type after the var name (e.g. my_var: bool)

### 4. Convert each function

- Start converting each function one by one.
  - A recommended approach is to, if possible, skip cross-contract calls at first and use mock data instead
  - This way offchain unit tests can be written to test the core functionality
    - unit tests are offchain and do not work with cross-contract calls
  - Once fully tested, start adding in cross-contract calls and perform on-chain manual + integration tests
- Ensure that function's visibility (public, private) are matched in ink!
- In Solidity, if a function returns a `bool success`, ink! will use a `Result<()>` instead (`Result::Ok` or `Result::Err`).

  ```rust
  // ink!

  //result type
  pub type Result<T> = core::result::Result<T, Error>;

  // ...

  //public function that returns a Result
  #[ink(message)]
  pub fn my_function(&self) -> Result<()>{
      Ok(())
  }
  ```

## Best Practices + Tips

- If the Solidity contract uses a `string`, it is recommended to use a `Vec<u8>` to avoid the overhead of a `String`. See [here](https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract) for more details on why. The smart contract should only contain the information that strictly needs to be placed on the blockchain and go through consensus. The UI should be used for displaying strings.
- Double check all `.unwrap()`s performed. Solidity does not have as strict checking as ink! does. For example, a mapping field can be accessed as simple as `myMapping[someKey]`. ink!, however, requires `self.my_mapping.get(some_key).unwrap()`. A useful way to handle `None` cases is to use `.unwrap_or(some_val)`.
- Run the contracts node with `substrate-contracts-node --dev -lerror,runtime::contracts=debug` for debug prints, and errors to be displayed in the nodes console.
- When passing parameters to a helper, it is recommended to pass references (even for primitives) as Wasm is more efficient with references.
  For example (see [erc20](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) example):

```rust
/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
#[ink(message)]
pub fn balance_of(&self, owner: AccountId) -> Balance {
    self.balance_of_impl(&owner)
}

/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
///
/// # Note
///
/// Prefer to call this method over `balance_of` since this
/// works using references which are more efficient in Wasm.
#[inline]
fn balance_of_impl(&self, owner: &AccountId) -> Balance {
    self.balances.get(owner).unwrap_or_default()
}
```

- Just as in Solidity, ink! does not have floating point numbers due to the non-deterministic nature. Instead, the frontend should add decimal points as needed.

## Syntax Equivalencies

### `public function`

```c++
// solidity
function fnName() public {}
//or
//by default, functions are public
function fnName() {}
```

```rust
// ink!
#[ink(message)]
pub fn fn_name(&self) {}
```

### `mapping declaration`

```c++
// solidity
mapping(address => uint128) private mapName;
```

```rust
//ink!
use ink_storage::{
    traits::SpreadAllocate,
    Mapping,
};

#[ink(storage)]
#[derive(SpreadAllocate)]
pub struct ContractName {
    map_name: Mapping<AccountId, u128>,
}
```

when using a map in ink!, `ink_lang::utils::initialize_contract` must be used in the constructor. See [here](../datastructures/mapping.md) for more details.

### `mapping usage`

```c++
// solidity

//insert / update
aMap[aKey] = aValue;

// get
aMap[aKey]
```

```rust
// ink!

//insert / update
self.a_map.insert(&a_key, &a_value);

// get
self.a_map.get(a_key).unwrap()
```

### `struct`

```c++
// solidity
struct MyPerson{
    address person;
    u64 favNum;
}
```

```rust
// ink!
struct MyPerson {
    person: AccountId,
    fav_num: u64,
}
```

### `assertions / requires`

```c++
// solidity
require(someValue < 10, "someValue is not less than 10");
```

```rust
// ink!
assert!(some_value < 10, "some_value is not less than 10");
```

### `timestamp`

```c++
// solidity
block.timestamp
// or
now
```

```rust
// ink!
self.env().block_timestamp()
```

### `contract caller`

```c++
// solidity
address caller = msg.sender;
```

```rust
// ink!
let caller: AccountId = self.env().caller();
```

### `contract's address`

```c++
// solidity
address(this)
```

```rust
// ink!
self.env().account_id()
```

### `bytes`

Solidity has a type `bytes`. `bytes` is (essentially) equivalent to an array of uint8. So, `bytes` in Solidity => `Vec<u8>` or `[u8; ...]` in ink!. See [here](https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity) for more details. If desired, a `bytes` struct can be created in ink! to replicate the `bytes` type in Solidity.

### `uint256`

Solidity uses `uint256` and `uint` to represent a 256-bit type.

Solidity is 256-bit / 32-byte word optimized. Meaning, using `uint256` in Solidity contracts will reduce gas usage -- but increase storage usage. The largest size ink! has built in is a `u128`. ink! compiles to Wasm. The largest primitive Wasm has is 64bit (due to most computers using 64bit). So, there is no benefit to using any larger primitive over a collection.

When porting a `uint256` from Solidity to ink!, it is recommended to, with discretion, determine the range of the value, and choose the appropriate size (u8, u16, u32, u64, u128). If a 256-bit hash value is required, ink! has a `Hash` primitive available. In the event a value needs to be 256-bit, it is recommended to use an array (e.g. `[u64; 4]`).

### `payable`

```c++
// solidity
function myFunction() payable returns (uint64) {}
```

```rust
#[ink(message, payable)]
pub fn my_function() -> (u64) {}
```

### `received deposit / payment`

```C++
// solidity
msg.value
```

```rust
// ink!
self.env().transferred_value()
```

### `contract balance`

```c++
// solidity
this.balance
```

```rust
// ink!
self.env().balance()
```

### `transfer tokens from contract`

```c++
// solidity
recipient.send(amount)
```

```rust
//ink!
if self.env().transfer(recipient, amount).is_err() {
    panic!("error transferring")
}
```

### `events & indexed`

```c++
// solidity

event MyCoolEvent(
    u128 indexed indexedValue,
    u128 notIndexedValue,
);

//emit event
MyCoolEvent (someValue, someOtherValue)
```

```rust
// ink!

#[ink(event)]
pub struct MyCoolEvent {
    #[ink(topic)]
    indexed_value: u128,

    not_indexed_value: u128,
}

// emit event
self.env().emit_event(MyCoolEvent {
    indexed_value: some_value,
    not_indexed_value: some_other_value
});
```

### `errors and returning`

Solidity has several error handling mechanisms: `assert`, `require`, `revert`, and `throw`. Each of these will revert the changed state when called. See [this article](https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e) for details on these.

ink! uses a `Result` enum (`Ok(T)`, `Err(E)`), `assert!` and `panic!`. [This Stack Exchange](https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts) answer and [GitHub discussion](https://github.com/use-ink/ink/issues/641) provide more details on these.

#### `throw`

Throw is deprecated in Solidity and would throw an invalid opcode error (no details) and revert the state. As an alternative to the `if...{throw;}` pattern in Solidity, a `Result::Err` should be returned for expected errors, and an `assert!` should be used for errors that should not occur.

#### `assert`

In Solidity, `assert` is used as internal guards against errors in the _code_. In general, properly functioning code should never hit a failing assert. `assert` in Solidity does not have error strings. In ink!, use `assert!`. `assert!` will `panic!` if it evaluates to _false_. The state will be reverted, and a `CalleeTrapped` will be returned. The (optional) error string will be printed to the debug buffer.

```rust
// ink!
assert!(caller == owner, "caller is not owner")
```

#### `require and revert`

In Solidity, `require` is used for general (normal) errors -- such as errors that occur based on user input. `require` does have the option for an error string. `revert` is very similar to `require` except that `revert` will be called in `if ... else` chains. Both `require` and `revert` will revert the chain state. In ink!, `if ... { return Err(Error::SomeError) }` should be used for `require` or `revert`. When a `Result::Err` is returned in ink!, then all state is reverted.

In general, `Result::Err` should be used when a _calling contract_ needs to know _why_ a function failed. Otherwise, `assert!` should be used as it has less overhead than a `Result`.

```c++
// Solidity
function myFunction(bool returnError) public {
    require(!returnError, "my error here");

    //or

    if returnError {
        revert("my error here");
    }
}
```

```rust
//ink!

#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]
#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
pub enum Error {
    /// Provide a detailed comment on the error
    MyError,
}

// result type
pub type Result<T> = core::result::Result<T, Error>;

// ...
#[ink(message)]
pub fn my_function(&self, return_error: bool) -> Result<()> {
    if return_error{
        return Err(Error::MyError)
    }
    Ok(())
}

```

### `nested mappings + custom / advanced structures`

In Solidity, it is easy to do nested mappings. It is not as straightforward in ink!.

imagine the following scenario

```c++
// solidity
contract Dao {
    struct Proposal {
        mapping (address => bool) votedYes
    }

    mapping (address => bool) public isWhitelisted;
    Proposal[] public proposals;
}
```

in ink! this _seems_ like it could be represented like so:

```rust
#[ink::contract]
mod dao {

    #[derive(SpreadAllocate)]
    pub struct Proposal {
        voted_yes: Mapping<AccountId, bool>,
    }

    #[ink(storage)]
    #[derive(SpreadAllocate)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new(/*...*/) -> Self {
            //required for mappings
            ink_lang::utils::initialize_contract(|contract| {/*...*/})
        }
    }
}
```

However, this will cause an error due to the nested mapping. [This answer](https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract) explains in detail why nested mappings are not allowed

So, as of now, to get around this issue an alternate data structure will need to be used. A data-structure that can be interchanged with the `Mapping` syntax and with minimal additional implementations is the `BTreeMap`. `BTreeMap` is less efficient than `Mapping`, but is an easy workaround until nested mappings are allowed. This will be used in the nested struct. Additional `derive`s will need to be added to be compatible with the #[ink(storage)] struct (see below).

```rust
#[ink::contract]
mod dao {

    use ink_prelude::collections::BTreeMap;

    #[derive(
        scale::Encode,
        scale::Decode,
        SpreadLayout,
        PackedLayout,
        SpreadAllocate,
    )]
    #[cfg_attr(
        feature = "std",
        derive(scale_info::TypeInfo, ink_storage::traits::StorageLayout)
    )]
    pub struct Proposal {
        voted_yes: BTreeMap<AccountId, bool>,
    }

    #[ink(storage)]
    #[derive(SpreadAllocate)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new(/*...*/) -> Self {
            //required for mappings
            ink_lang::utils::initialize_contract(|contract| {/*...*/})
        }
    }
}
```

This almost works as expected. However, there is still one issue. `SpreadAllocate` (used with `Mapping`) requires that `Vec<Proposal>` implements `PackedAllocate`. To fix this, `Proposal` needs to implement `PackedAllocate`. See [here](https://docs.rs/ink_storage/3.3.1/ink_storage/traits/trait.PackedAllocate.html) for details + examples. See the following for this example:

```rust
    use ink_primitives::Key;

    pub struct Proposal {
        voted_yes: BTreeMap<AccountId, bool>,
    }

    impl ink_storage::traits::PackedAllocate for Proposal {
        fn allocate_packed(&mut self, at: &Key){
            PackedAllocate::allocate_packed(&mut *self, at)
        }
    }
```

### `cross-contract calling`

In ink!, to do [cross-contract calling](../basics/cross-contract-calling.md), the contract will need to be added to the project. Ensure the contract is properly exporting its Structs. See the `erc20` contract example:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

use ink_lang as ink;

//make the structs visible
pub use self::erc20::{
    Erc20,
    //this is necessary
    Erc20Ref,
};

#[ink::contract]
pub mod erc20 {}
```

In the new cross-called contract's Cargo.toml, add (or edit) the following:

```
[lib]
name = "erc20"
path = "lib.rs"
crate-type = [
	# Used for normal contract Wasm blobs.
	"cdylib",
    # Used for ABI generation. Necessary for importing as a dependency
    "rlib",
]

[features]
ink-as-dependency = []
```

`ink-as-dependency` "tells the ink! code generator to always or never compile the smart contract as if it was used as a dependency of another ink! smart contract" ([source](../basics/cross-contract-calling.md)).

Then, In the main contract's Cargo.toml, import the contract that will be cross-called.

```rust
erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }
```

And make sure to add it to the `std` field of the .toml file.

```rust
[features]
default = ["std"]
std = [
    # ...

    "erc20/std",
]
```

Now, import the cross-called-contract to the main contract:

```rust
// example
use erc20::Erc20Ref;
```

There are two methods to setup the other contract.

1. Instantiate the cross-called-contract in the main contract's constructor.
   See [here](../basics/cross-contract-calling.md) for a tutorial, and [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator) for an example.
2. Or, add the `AccountId` of an already deployed contract.
   Here is an example constructor to set this up:

   ```rust
   use my_other_contract::MyOtherContractRef;
   // ...
   fn new(contract_id: AccountId) -> Self {
        //for already deployed contract
        let contract_ref: MyOtherContractRef = ink_env::call::FromAccountId::from_account_id(contract_id);
        Self {contract_ref}
   }
   ```

Now, to perform the cross-contract call:

```rust
{
    self.contract_ref.some_external_function(a_param);
}
```

Note: as of now (ink! v3.3.1), when using cross-contract calls, emitting events will not work and compile errors will occur. See [issue #1000](https://github.com/use-ink/ink/issues/1000). Furthermore, the compiler will throw an error saying that (for example) Erc20Ref does not implement `SpreadAllocate`. This [issue #1149](https://github.com/use-ink/ink/issues/1149) explains more and has a workaround. These issues will be fixed in [issue #1134](https://github.com/use-ink/ink/issues/1134).

### `submit generic transaction / dynamic cross-contract calling`

```c++
// solidity

// invokes function found at`addr`, sends the `_amount` to the `addr`, and the `_transactionData` payload.
addr.call.value(_amount)(_transactionData)
```

```rust
// ink!

// ...

use ink_env::call::{
    build_call,
    Call,
    ExecutionInput,
    Selector,
};

/// A wrapper that allows us to encode a blob of bytes.
///
/// We use this to pass the set of untyped (bytes) parameters to the `CallBuilder`.
struct CallInput<'a>(&'a [u8]);

impl<'a> scale::Encode for CallInput<'a> {
    fn encode_to<T: Output + ?Sized>(&self, dest: &mut T) {
        dest.write(self.0);
    }
}

// ...

// see: https://github.com/use-ink/ink-examples/blob/main/multisig/lib.rs#L535
fn invoke_transaction(
    &mut self,
    callee: AccountId,
    transfer_amount: u128,
    function_selector: [u8; 4],
    transaction_data: Vec<u8>,
    gas_limit: u64) -> Result<()> {

    let result = build_call::<<Self as ::ink_lang::reflect::ContractEnv>::Env>()
        .call_type(
            Call::new()
                .callee(callee) //contract to call
                .gas_limit(*gas_limit)
                .transferred_value(transfer_amount), //value to transfer with call
        )
        .exec_input(
            ExecutionInput::new(Selector::from(*function_selector)).push_arg(CallInput(transaction_data)), //SCALE encoded parameters
        )
        .returns::<()>()
        .fire()
        .map_err(|_| Error::TransactionFailed);
    result
}

```

Note: the `function_selector` bytes can be found in the generated `target/ink/metadata.json`

## Limitations of ink! v3

- Multi-file projects are not supported with pure ink!
  - implementing traits / interfaces will not work
  - There are alternatives that do add this functionality such as OpenBrush
- Nested structs and data structures can be difficult to use
- Cross-contract calling prevents events from being emitted. See [here](https://github.com/use-ink/ink/issues/1000) for details.
- Cross-contract calling can not be tested offchain with unit tests. On-chain integration tests will need to be used.

## Troubleshooting Errors

- `ERROR: Validation of the Wasm failed.`

```
ERROR: Validation of the Wasm failed.

ERROR: An unexpected panic function import was found in the contract Wasm.
This typically goes back to a known bug in the Rust compiler:
https://github.com/rust-lang/rust/issues/78744

As a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations, but unfortunately we are currently not
aware of a better workaround until the bug in the compiler is fixed.
```

**Solution**
Add the following to the contract Cargo.toml:

```
[profile.release]
overflow-checks = false
```

- `"failed to load bitcode of module '...' "`

This happens when trying to import a contract for cross-contract calling.

**Solution**
Ensure that the following is added to Cargo.toml contract import:`

```
features = ["ink-as-dependency"]
```

so the import would look like:

```
mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}
```

## unit testing (off-chain)

- Unit tests are an integral part of smart-contract development and ensuring your code works off-chain before testing on-chain.
- To run ink! tests, do _not_ use `cargo +nightly contract test`. Use `cargo +nightly test`. Add the `--nocapture` flag for debug prints to show. See [here](https://substrate.stackexchange.com/questions/3197/how-to-understand-which-test-failed-in-ink) for more info why.
- From the contract module, make sure to make the contract struct and anything else that is going to be used in the unit tests public. For example:

```rust
// top of file
#![cfg_attr(not(feature = "std"), no_std)]

use ink_lang as ink;

pub use self::mycontract::{
    MyContract
};
```

- Off-chain unit tests will not work with cross-contract calls.
  One workaround to ensure unit tests are still passing is to provide mock data.

An easy approach is to use conditional compiling with `#[cfg(test)]` and `#[cfg(not(test))]`.

Note: this solution is not ideal. ink! v4.0 will provide much better solutions.

For example, here is a read-only ERC20 cross-contract call:

```rust
//only compiles when *not* running tests
#[cfg(not(test))]
fn get_token_balance(&self, caller: &AccountId) -> Balance {
    //calls the external ERC-20 contract
    self.token.balance_of(*caller)
}

//only compiles when running tests
#[cfg(test)]
fn get_token_balance(&self, _: &AccountId) -> Balance {
    //arbitrary value
    1
}
```

And if the cross-contract call _writes_ to storage, a mock field can be added to the contract struct. For example:

```rust
#[ink(storage)]
pub struct MyContract {
    #[cfg(test)]
    mock_field: SomeStruct, // will serve as a fake storage
}

...

//on-chain, performs cross-contract call
#[cfg(not(test))]
fn do_some_write(&mut self) {
    self.external_contract.write_to_field(0xDEADBEEF);
}


//testing environment only
#[cfg(test)]
fn do_some_write(&mut self) {
    self.mock_field.my_fake_storage_item = 0xDEADBEEF;
}
```

- useful code to interact and modify the contract environment for testing

[ink_env docs](https://use-ink.github.io/ink/ink_env/test/index.html)

```rust
// get the default accounts (alice, bob, ...)
let accounts = ink_env::test::default_accounts::<ink_env::DefaultEnvironment>();
accounts.alice //usage example

// set which account calls the contract
ink_env::test::set_caller::<ink_env::DefaultEnvironment>(accounts.bob);

//get the contract's address
let callee = ink_env::account_id::<ink_env::DefaultEnvironment>();

// set the contracts address.
// by default, this is alice's account
ink_env::test::set_callee::<ink_env::DefaultEnvironment>(callee);

// transfer native currency to the contract
ink_env::test::set_value_transferred::<ink_env::DefaultEnvironment>(2);

// increase block number (and block timestamp).
// this can be placed in a loop to advance the block many times
ink_env::test::advance_block::<ink_env::DefaultEnvironment>();

//generate arbitrary AccountId
AccountId::from([0x01; 32]);

//generate arbitrary Hash
Hash::from([0x01; 32])

//macro for tests that are expected to panic.
#[should_panic]
```
````

## File: versioned_docs/version-v3/intro/intro.mdx
````
---
title: Welcome!
slug: /
hide_table_of_contents: false
---

[![version][m1]][m2] [![stack-exchange][s1]][s2] [![github][g1]][g2]

[m1]: https://img.shields.io/github/v/release/use-ink/ink?label=ink!%20on%20GitHub&labelColor=white&color=blue
[m2]: https://github.com/use-ink/ink
[s1]: https://img.shields.io/badge/click-white.svg?logo=StackExchange&label=ink!%20Support%20on%20StackExchange&labelColor=white&color=blue
[s2]: https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes
[g1]: https://img.shields.io/twitter/follow/ink_lang?label=Follow
[g2]: https://twitter.com/ink_lang

<blockquote>
    <h2>
        ink! is a programming language for smart contracts.<br/>
        You can use it with blockchains built on the <a href="https://github.com/paritytech/substrate">Substrate</a> framework.
    </h2>
</blockquote>

## Learn More

<div className="row">
    <div className="col text--center">
        <a href="https://www.parity.io/blog/what-is-paritys-ink">
            <img src="/img/what-is-ink.png" width="200" style={{borderRadius: 15, border: "1px solid slategrey"}} />
        </a>
        <p>
            What is Parity's ink!?<br/>
            <a href="https://www.parity.io/blog/what-is-paritys-ink">
                » view page
            </a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://docs.substrate.io/tutorials/smart-contracts/">
            <img src="/img/tutorial.png" width="200" style={{borderRadius: 15, border: "1px solid slategrey"}} />
        </a>
        <p>
            Guided Beginners Tutorial<br/>
            <a href="https://docs.substrate.io/tutorials/smart-contracts/">
                » view tutorial
            </a>
        </p>
    </div>
</div>

## Our Pitch

<div className="row">
    <div className="col text--center">
        <img src="/img/icons/rust.svg" width="100" />
        <p>Inherent safety-guarantees with the Rust programming language.</p>
    </div>
    <div className="col text--center">
        <img src="/img/icons/ecosystem.svg" width="100" />
        <p>Ability to use all the normal Rust tooling ‒ clippy, crates.io, IDE’s, etc.</p>
    </div>
    <div className="col text--center">
        <img src="/img/icons/interop.svg" width="100" />
        <p>Interoperability with Solidity contracts.</p>
    </div>
</div>

<br/>&nbsp;<br/>

<div className="row">
    <div className="col text--center">
        <img src="/img/icons/migration-path.svg" width="100" />
        <p>Clear migration path for graduating to a parachain.</p>
    </div>
    <div className="col text--center">
        <img src="/img/icons/wasm.svg" width="100" />
        <p>Established industry standard for the compiler target.</p>
    </div>
    <div className="col text--center">
        <img src="/img/icons/substrate.svg" width="100" />
        <p>Native to Substrate. Complements your Substrate runtime perfectly.</p>
    </div>
</div>

## Smart Contract Examples

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src="/img/icons/flipper.svg" width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">
                » view example
            </a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src="/img/icons/erc20.svg" width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">
                » view example
            </a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src="/img/icons/nft.svg" width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">
                » view ERC-721
            </a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">
                » view ERC-1155
            </a>
        </p>
    </div>
</div>

<br/>

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src="/img/icons/upgradable.svg" width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">
                » view example
            </a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src="/img/icons/multisig.svg" width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">
                » view example
            </a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src="/img/icons/rand-extension.svg" width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">
                » view example
            </a>
        </p>
    </div>
</div>
````

## File: versioned_docs/version-v3/intro/why-rust.md
````markdown
---
title: Why Rust for Smart Contracts?
slug: /why-rust-for-smart-contracts
---

ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.
If this doesn't already convince you, you find many more good reasons here:

* <span class="highlight">Rust is an ideal smart contract language:</span> It is type safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn’t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow.

* <span class="highlight">Rust ecosystem:</span> You gain from all of support available to the Rust ecosystem for free. As the language develops, ink! will automatically gain access to new features and functionality, improving how you can write smart contracts in the future.

* <span class="highlight">Tooling:</span> Because ink! follows Rust standards, tools like rustfmt, clippy and rust-analyzer already work out of the box.
Same goes for code formatting and syntax highlighting in most modern text editors.
Also Rust has an integrated test and benchmark runner,

* <span class="highlight">No overhead:</span> Minimal runtime.

* <span class="highlight">Safe & Efficient:</span> Zero-cost & safe abstractions.

* <span class="highlight">Productive:</span> Cargo + <a href="https://crates.io">crates.io</a> Ecosystem.

* <span class="highlight">1st class Wasm:</span> Rust provides the first class support for the WebAssembly.

* <span class="highlight">Small Size:</span> In the space-constrained blockchain world size is important. 
The Rust compiler is a great help for that, since it reorders struct fields in order 
to make each type as small as possible. Thus Rust data structures are very compact,
in many cases even more compact than in C.
````

## File: versioned_docs/version-v3/intro/why-webassembly.md
````markdown
---
title: Why WebAssembly for Smart Contracts?
slug: /why-webassembly-for-smart-contracts
---

* <span class="highlight">High performance: </span>Wasm is high performance — it’s built to be as close to native machine code as possible while still being platform independent.

* <span class="highlight">Small size: </span>It facilitates small binaries to ship over the internet to devices with potentially slow internet connection.
This is a great fit for the space-constrained blockchain world.

* <span class="highlight">General VM & bytecode: </span>
It was developed so that code can be deployed in any browser with the same result.
Contrary to the EVM it was not developed towards a very specific use case,
this has the benefit of a lot of tooling being available and large
companies putting a lot of resources into furthering Wasm development.

* <span class="highlight">Efficient JIT execution: </span>
64 and 32-bit integer operation support that maps one-to-one with CPU instructions.

* <span class="highlight">Minimalistic: </span> Formal spec that fits on a single page.

* <span class="highlight">Deterministic execution: </span>
Wasm is easily made deterministic by removing floating point operations, which is necessary for consensus algorithms.

* <span class="highlight">Open Standards > Custom Solutions: </span>
Wasm is a standard for web browsers developed by W3C workgroup that includes Google, Mozilla, and others.
There’s been many years of work put into Wasm, both by compiler and standardization teams.

* <span class="highlight">Many languages available: </span> Wasm expands the family of languages available to smart contract developers to include Rust, C/C++, C#, Typescript, Haxe, and Kotlin. This means you can write smart contracts in whichever language you’re familiar with, though we’re partial to Rust due to its lack of runtime overhead and inherent security properties.

* <span class="highlight">Memory-safe, sandboxed, and platform-independent.</span>

* <span class="highlight">LLVM support: </span>
Supported by the LLVM compiler infrastructure project, meaning that Wasm benefits from over a decade of LLVM’s compiler optimization.

* <span class="highlight">Large companies involved: </span> Continually developed by major companies such as Google, Apple, Microsoft, Mozilla, and Facebook.
````

## File: versioned_docs/version-v3/macros-attributes/anonymous.md
````markdown
---
title: "#[ink(anonymous)]"
slug: /macros-attributes/anonymous
---

Applicable to ink! events.

Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as topic upon emitting. Very similar to anonymous events in Solidity. 

Anonymous events have similar semantics as in Solidity in that their
event signature won't be included in their event topics serialization
to reduce event emitting overhead. This is especially useful for user
defined events.
    
The signature of the event is by default one of the topics of the event, except
if you annotate the event with `#[ink(anonymous)]`.
The attribute implies that it is not possible to filter for specific anonymous events by name.
````

## File: versioned_docs/version-v3/macros-attributes/chain-extension.md
````markdown
---
title: "#[ink::chain_extension]"
slug: /macros-attributes/chain-extension
---

In the default configuration of the `contracts-pallet` a smart contract can only interact with the runtime
via its well defined set of basic smart contract interface. This API already allows a whole variety of
interaction between the `contracts-pallet` and the executed smart contract. For example it is possible
to call and instantiate other smart contracts on the same chain, emit events, query context information
or run built-in cryptographic hashing procedures.

If this basic set of features is not enough for a particular Substrate built blockchain it is possible
to easily extend this API using the so-called chain extension feature.

**Note:** The ink! repository contains [the `rand-extension` example](https://github.com/use-ink/ink-examples/tree/main/rand-extension).
This is a complete example of a chain extension implemented in both ink! and Substrate.


## Structure

The interface consists of an error code that indicates lightweight errors
as well as the definition of some chain extension methods.

The overall structure follows that of a simple Rust trait definition.
The error code is defined as an associated type definition of the trait definition.
The methods are defined as associated trait methods without implementation.

Chain extension methods must not have a `self` receiver such as `&self` or `&mut self`
and must have inputs and output that implement SCALE codec. Their return value follows
specific rules that can be altered using the `handle_status` and `returns_result` attributes
which are described in more detail below.

## Usage

Usually the chain extension definition using this proc. macro is provided
by the author of the chain extension in a separate crate.
ink! smart contracts using this chain extension simply depend on this crate
and use its associated environment definition in order to make use of
the methods provided by the chain extension.

## Attributes

There are three different attributes with which the chain extension methods
can be flagged:

| Attribute | Required | Default Value | Description |
|:----------|:--------:|:--------------|:-----------:|
| `ink(extension = N: u32)` | Yes | - | Determines the unique function ID of the chain extension method. |
| `ink(handle_status = flag: bool)` | Optional | `true` | Assumes that the returned status code of the chain extension method always indicates success and therefore always loads and decodes the output buffer of the call. |
| `ink(returns_result = flag: bool)` | Optional | `true` | By default chain extension methods are assumed to return a `Result<T, E>` in the output buffer. Using `returns_result = false` this check is disabled and the chain extension method may return any other type. |

As with all ink! attributes multiple of them can either appear in a contiguous list:
```rust
type Access = i32;
use ink_lang as ink;

#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = i32;

    #[ink(extension = 5, handle_status = false, returns_result = false)]
    fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

…or as multiple standalone ink! attributes applied to the same item:

```rust
type Access = i32;
use ink_lang as ink;

#[ink::chain_extension]
pub trait MyChainExtension {
  type ErrorCode = i32;

  #[ink(extension = 5)]
  #[ink(handle_status = false)]
  #[ink(returns_result = false)]
  fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

## Details: `handle_status`

Default value: `true`

By default all chain extension methods return a `Result<T, E>` where `E: From<Self::ErrorCode>`.
The `Self::ErrorCode` represents the error code of the chain extension.
This means that a smart contract calling such a chain extension method first queries the returned
status code of the chain extension method and only loads and decodes the output if the returned
status code indicates a successful call.
This design was chosen as it is more efficient when no output besides the error
code is required for a chain extension call. When designing a chain extension try to utilize the
error code to return errors and only use the output buffer for information that does not fit in
a single `u32` value.

A chain extension method that is flagged with `handle_status = false` assumes that the returned error code
will always indicate success. Therefore it will always load and decode the output buffer and loses
the `E: From<Self::ErrorCode` constraint for the call.

## Details: `returns_result`

Default value: `true`

By default chain extension methods are assumed to return a value of type `Result<T, E>` through the
output buffer. Using `returns_result = false` this check is disabled and the chain extension method may return
any other type.

Note that if a chain extension method is attributed with `returns_result = false`
and with `handle_status = true` it will still return a value of type `Result<T, Self::ErrorCode>`.

## Usage: `handle_status` + `returns_result`

Use both `handle_status = false` and `returns_result = false` for the same chain extension method
if a call to it may never fail and never returns a `Result` type.

## Combinations

Due to the possibility to flag a chain extension method with `handle_status` and `returns_result`
there are 4 different cases with slightly varying semantics:

| `handle_status` | `returns_result` | Effects |
|:---------------:|:----------------:|:--------|
|`true` |`true` | The chain extension method is required to return a value of type `Result<T, E>` where `E: From<Self::ErrorCode>`. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. |
|`true` |`false`| The chain extension method may return any non-`Result` type. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. The actual return type of the chain extension method is still `Result<T, Self::ErrorCode>` when the chain extension method was defined to return a value of type `T`. |
|`false`|`true` | The chain extension method is required to return a value of type `Result<T, E>`. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |
|`false`|`false`| The chain extension method may return any non-`Result` type. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |

## Error Code

Every chain extension defines exactly one `ErrorCode` using the following syntax:

```rust
use ink_lang as ink;

#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = MyErrorCode;

    // more definitions ...
}
```

The defined `ErrorCode` must implement `FromStatusCode` which should be implemented as a
more or less trivial conversion from the `u32` status code to a `Result<(), Self::ErrorCode>`.
The `Ok(())` value indicates that the call to the chain extension method was successful.

By convention an error code of `0` represents success.
However, chain extension authors may use whatever suits their needs.

## Example: Definition

In the below example a chain extension is defined that allows its users to read and write
from and to the runtime storage using access privileges:

```rust
use ink_lang as ink;

/// Custom chain extension to read to and write from the runtime.
#[ink::chain_extension]
pub trait RuntimeReadWrite {
    type ErrorCode = ReadWriteErrorCode;

    /// Reads from runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<Vec<u8>, Self::ErrorCode>`.
    /// #[ink(extension = 1, returns_result = false)]
    /// fn read(key: &[u8]) -> Vec<u8>;
    ///
    /// Reads from runtime storage.
    ///
    /// Returns the number of bytes read and up to 32 bytes of the
    /// read value. Unused bytes in the output are set to 0.
    ///
    /// # Errors
    ///
    /// If the runtime storage cell stores a value that requires more than
    /// 32 bytes.
    ///
    /// # Note
    ///
    /// This requires `ReadWriteError` to implement `From<ReadWriteErrorCode>`
    /// and may potentially return any `Self::ErrorCode` through its return value.
    #[ink(extension = 2)]
    fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;

    /// Writes into runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<(), Self::ErrorCode>`.
    #[ink(extension = 3, returns_result = false)]
    fn write(key: &[u8], value: &[u8]);

    /// Returns the access allowed for the key for the caller.
    ///
    /// # Note
    ///
    /// Assumes to never fail the call and therefore always returns `Option<Access>`.
    #[ink(extension = 4, returns_result = false, handle_status = false)]
    fn access(key: &[u8]) -> Option<Access>;

    /// Unlocks previously acquired permission to access key.
    ///
    /// # Errors
    ///
    /// If the permission was not granted.
    ///
    /// # Note
    ///
    /// Assumes the call to never fail and therefore does _NOT_ require `UnlockAccessError`
    /// to implement `From<Self::ErrorCode>` as in the `read_small` method above.
    #[ink(extension = 5, handle_status = false)]
    fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum ReadWriteErrorCode {
  InvalidKey,
  CannotWriteToKey,
  CannotReadFromKey,
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum ReadWriteError {
  ErrorCode(ReadWriteErrorCode),
  BufferTooSmall { required_bytes: u32 },
}

impl From<ReadWriteErrorCode> for ReadWriteError {
  fn from(error_code: ReadWriteErrorCode) -> Self {
    Self::ErrorCode(error_code)
  }
}

impl From<scale::Error> for ReadWriteError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub struct UnlockAccessError {
  reason: String,
}

impl From<scale::Error> for UnlockAccessError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum Access {
  ReadWrite,
  ReadOnly,
  WriteOnly,
}

impl ink_env::chain_extension::FromStatusCode for ReadWriteErrorCode {
  fn from_status_code(status_code: u32) -> Result<(), Self> {
    match status_code {
      0 => Ok(()),
      1 => Err(Self::InvalidKey),
      2 => Err(Self::CannotWriteToKey),
      3 => Err(Self::CannotReadFromKey),
      _ => panic!("encountered unknown status code"),
    }
  }
}
```

All the error types and other utility types used in the chain extension definition
above are often required to implement various traits such as SCALE's `Encode` and `Decode`
as well as `scale-info`'s `TypeInfo` trait.

A full example of the above chain extension definition can be seen
[here](https://github.com/use-ink/ink/blob/017f71d60799b764425334f86b732cc7b7065fe6/crates/lang/macro/tests/ui/chain_extension/simple.rs).

## Example: Environment

In order to allow ink! smart contracts to use the above defined chain extension it needs
to be integrated into an `Environment` definition as shown below:

```rust
type RuntimeReadWrite = i32;

use ink_env::{Environment, DefaultEnvironment};

pub enum CustomEnvironment {}

impl Environment for CustomEnvironment {
    const MAX_EVENT_TOPICS: usize =
        <DefaultEnvironment as Environment>::MAX_EVENT_TOPICS;

    type AccountId = <DefaultEnvironment as Environment>::AccountId;
    type Balance = <DefaultEnvironment as Environment>::Balance;
    type Hash = <DefaultEnvironment as Environment>::Hash;
    type BlockNumber = <DefaultEnvironment as Environment>::BlockNumber;
    type Timestamp = <DefaultEnvironment as Environment>::Timestamp;

    type ChainExtension = RuntimeReadWrite;
}
```

Above we defined the `CustomEnvironment` which defaults to ink!'s `DefaultEnvironment`
for all constants and types but the `ChainExtension` type which is assigned to our newly
defined chain extension.

## Example: Usage

An ink! smart contract can use the above defined chain extension through the `Environment`
definition defined in the last example section using the `env` macro parameter as
shown below.

Note that chain extension methods are accessible through `Self::extension()` or
`self.extension()`. For example as in `Self::extension().read(..)` or `self.extension().read(..)`.

```rust
use ink_lang as ink;

#[ink::contract(env = CustomEnvironment)]
mod read_writer {
    use ink_lang as ink;

    #[ink(storage)]
    pub struct ReadWriter {}

    impl ReadWriter {
        #[ink(constructor)]
        pub fn new() -> Self { Self {} }

        #[ink(message)]
        pub fn read(&self, key: Vec<u8>) -> Result<Vec<u8>, ReadWriteErrorCode> {
            self.env()
                .extension()
                .read(&key)
        }

        #[ink(message)]
        pub fn read_small(&self, key: Vec<u8>) -> Result<(u32, [u8; 32]), ReadWriteError> {
            self.env()
                .extension()
                .read_small(&key)
        }

        #[ink(message)]
        pub fn write(
            &self,
            key: Vec<u8>,
            value: Vec<u8>,
        ) -> Result<(), ReadWriteErrorCode> {
            self.env()
                .extension()
                .write(&key, &value)
        }

        #[ink(message)]
        pub fn access(&self, key: Vec<u8>) -> Option<Access> {
            self.env()
                .extension()
                .access(&key)
        }

        #[ink(message)]
        pub fn unlock_access(&self, key: Vec<u8>, access: Access) -> Result<(), UnlockAccessError> {
            self.env()
                .extension()
                .unlock_access(&key, access)
        }
    }

    /// Custom chain extension to read to and write from the runtime.
    #[ink::chain_extension]
    pub trait RuntimeReadWrite {
          type ErrorCode = ReadWriteErrorCode;
          #[ink(extension = 1, returns_result = false)]
          fn read(key: &[u8]) -> Vec<u8>;
          #[ink(extension = 2)]
          fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;
          #[ink(extension = 3, returns_result = false)]
          fn write(key: &[u8], value: &[u8]);
          #[ink(extension = 4, returns_result = false, handle_status = false)]
          fn access(key: &[u8]) -> Option<Access>;
          #[ink(extension = 5, handle_status = false)]
          fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum ReadWriteErrorCode {
          InvalidKey,
          CannotWriteToKey,
          CannotReadFromKey,
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum ReadWriteError {
          ErrorCode(ReadWriteErrorCode),
          BufferTooSmall { required_bytes: u32 },
    }
    impl From<ReadWriteErrorCode> for ReadWriteError {
         fn from(error_code: ReadWriteErrorCode) -> Self {
             Self::ErrorCode(error_code)
         }
    }
    impl From<scale::Error> for ReadWriteError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub struct UnlockAccessError {
         reason: String,
    }
    impl From<scale::Error> for UnlockAccessError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }
    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum Access {
         ReadWrite,
         ReadOnly,
         WriteOnly,
    }
    impl ink_env::chain_extension::FromStatusCode for ReadWriteErrorCode {
         fn from_status_code(status_code: u32) -> Result<(), Self> {
             match status_code {
                 0 => Ok(()),
                 1 => Err(Self::InvalidKey),
                 2 => Err(Self::CannotWriteToKey),
                 3 => Err(Self::CannotReadFromKey),
                 _ => panic!("encountered unknown status code"),
             }
         }
    }
    pub enum CustomEnvironment {}
    impl ink_env::Environment for CustomEnvironment {
         const MAX_EVENT_TOPICS: usize =
             <ink_env::DefaultEnvironment as ink_env::Environment>::MAX_EVENT_TOPICS;

         type AccountId = <ink_env::DefaultEnvironment as ink_env::Environment>::AccountId;
         type Balance = <ink_env::DefaultEnvironment as ink_env::Environment>::Balance;
         type Hash = <ink_env::DefaultEnvironment as ink_env::Environment>::Hash;
         type BlockNumber = <ink_env::DefaultEnvironment as ink_env::Environment>::BlockNumber;
         type Timestamp = <ink_env::DefaultEnvironment as ink_env::Environment>::Timestamp;

         type ChainExtension = RuntimeReadWrite;
    }
}
```

## Technical Limitations

- Due to technical limitations it is not possible to refer to the `ErrorCode` associated type
  using `Self::ErrorCode` anywhere within the chain extension and its defined methods.
  Instead chain extension authors should directly use the error code type when required.
  This limitation might be lifted in future versions of ink!.
- It is not possible to declare other chain extension traits as super traits or super
  chain extensions of another.
````

## File: versioned_docs/version-v3/macros-attributes/constructor.md
````markdown
---
title: "#[ink(constructor)]"
slug: /macros-attributes/constructor
---

Applicable to a method.

Flags a method (or multiple methods) for the ink! storage struct as constructor making it available to the API for instantiating the contract.

There must be at least one `#[ink(constructor)]` defined method.

Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
upon contract instantiation. A contract may define multiple such constructors which
allow users of the contract to instantiate a contract in multiple different ways.


## Example

```rust
use ink_lang as ink;

#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 { ... }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self { .. }

        #[ink(constructor)]
        pub fn total_supply(&self) -> Balance { .. }

        // etc.
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/contract.md
````markdown
---
title: "#[ink::contract]"
slug: /macros-attributes/contract
---

This macro is the entry point for writing ink! smart contracts.

If you are a beginner trying to learn ink! we recommend you to check out
our extensive [ink! workshop](https://docs.substrate.io/tutorials/smart-contracts/).

**Note:** In all below examples we will be using `ink_lang` crate aliased as just `ink`.
You can do this yourself by adding the following line to your code:
`use ink_lang as ink;`

# Description

The macro does analysis on the provided smart contract code and generates
proper code.

ink! smart contracts can compile in several different modes.
There are two main compilation modes using either
- on-chain mode: `no_std` + WebAssembly as target
- off-chain mode: `std`

We generally use the on-chain mode for actual smart contract deployment
whereas we use the off-chain mode for smart contract testing using the
off-chain environment provided by the `ink_env` crate.

# Usage

## Header Arguments

The `#[ink::contract]` macro can be provided with some additional comma-separated
header arguments:

### `compile_as_dependency: bool`

Tells the ink! code generator to **always** or **never**
compile the smart contract as if it was used as a dependency of another ink!
smart contract.

Normally this flag is only really useful for ink! developers who
want to inspect code generation of ink! smart contracts.
The author is not aware of any particular practical use case for users that
makes use of this flag but contract writers are encouraged to disprove this.

Note that it is recommended to make use of the built-in crate feature
`ink-as-dependency` to flag smart contract dependencies listed in a contract's
`Cargo.toml` as actual dependencies to ink!.

**Usage Example:**
```rust
use ink_lang as ink;

#[ink::contract(compile_as_dependency = true)]
mod my_contract {
    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** Depends on the crate feature propagation of `Cargo.toml`.

### `env: impl Environment`

Tells the ink! code generator which environment to use for the ink! smart contract.
The environment must implement the `Environment` (defined in `ink_env`) trait and provides
all the necessary fundamental type definitions for `Balance`, `AccountId` etc.

When using a custom `Environment` implementation for a smart contract all types
that it exposes to the ink! smart contract and the mirrored types used in the runtime
must be aligned with respect to SCALE encoding and semantics.

**Usage Example:**

Given a custom `Environment` implementation:
```rust
pub struct MyEnvironment;

impl ink_env::Environment for MyEnvironment {
    const MAX_EVENT_TOPICS: usize = 3;

    type AccountId = u64;
    type Balance = u128;
    type Hash = [u8; 32];
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = ::ink_env::NoChainExtension;
}
```
A user might implement their ink! smart contract using the above custom `Environment`
implementation as demonstrated below:

```rust
use ink_lang as ink;
#[ink::contract(env = MyEnvironment)]
mod my_contract {
    pub struct MyEnvironment;

    impl ink_env::Environment for MyEnvironment {
        const MAX_EVENT_TOPICS: usize = 3;
        type AccountId = u64;
        type Balance = u128;
        type Hash = [u8; 32];
        type Timestamp = u64;
        type BlockNumber = u32;
        type ChainExtension = ::ink_env::NoChainExtension;
    }

    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** `DefaultEnvironment` defined in `ink_env` crate.

## Analysis

The `#[ink::contract]` macro fully analyses its input smart contract
against invalid arguments and structure.

Some example rules include but are not limited to:

- There must be exactly one `#[ink(storage)]` struct.

     This struct defines the layout of the storage that the ink! smart contract operates on.
     The user is able to use a variety of built-in facilities, combine them in various ways
     or even provide their own implementations of storage data structures.

     For more information visit the `ink_storage` crate documentation.

     **Example:**

     ```rust
     use ink_lang as ink;

     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn construct() -> Self { Flipper { value: false } }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(constructor)]` defined method.

     Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
     upon contract instantiation. A contract may define multiple such constructors which
     allow users of the contract to instantiate a contract in multiple different ways.

     **Example:**

     Given the `Flipper` contract definition above we add an `#[ink(constructor)]`
     as follows:

     ```rust
     use ink_lang as ink;

     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(message)]` defined method.

     Methods flagged with `#[ink(message)]` are special in that they are dispatchable
     upon contract invocation. The set of ink! messages defined for an ink! smart contract
     define its API surface with which users are allowed to interact.

     An ink! smart contract can have multiple such ink! messages defined.

     **Note:**

     - An ink! message with a `&self` receiver may only read state whereas an ink! message
       with a `&mut self` receiver may mutate the contract's storage.

     **Example:**

     Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
     as follows:

     ```rust
     use ink_lang as ink;

     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message)]
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Payable Messages:**

     An ink! message by default will reject calls that additional fund the smart contract.
     Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
     flag to it. An example below:

     Note that ink! constructors are always implicitly payable and thus cannot be flagged
     as such.

     ```rust
     use ink_lang as ink;

     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(payable)] // You can either specify payable out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, payable)] // ...or specify payable inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Controlling the messages selector:**

     Every ink! message and ink! constructor has a unique selector with which the
     message or constructor can be uniquely identified within the ink! smart contract.
     These selectors are mainly used to drive the contract's dispatch upon calling it.

     An ink! smart contract author can control the selector of an ink! message or ink!
     constructor using the `selector` flag. An example is shown below:

     ```rust
     use ink_lang as ink;

     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             #[ink(selector = "0xDEADBEEF")] // Works on constructors as well.
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(selector = "0xCAFEBABE")] // You can either specify selector out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, selector = "0xFEEDBEEF")] // ...or specify selector inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

## Interacting with the Contract Executor

The `ink_env` crate provides facilities to interact with the contract executor that
connects ink! smart contracts with the outer world.

For example it is possible to query the current call's caller via:

```rust
use ink_env;
ink_env::test::run_test::<ink_env::DefaultEnvironment, _>(|_| {
    let caller = ink_env::caller::<ink_env::DefaultEnvironment>();
    let _caller = caller;
    Ok(())
}).unwrap();
```

However, ink! provides a much simpler way to interact with the contract executor
via its environment accessor. An example below:

```rust
use ink_lang as ink;

#[ink::contract]
mod greeter {
    #[ink(storage)]
    pub struct Greeter;

    impl Greeter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let caller = Self::env().caller();
            let message = format!("thanks for instantiation {:?}", caller);
            ink_env::debug_println(&message);
            Greeter {}
        }

        #[ink(message, payable)]
        pub fn fund(&mut self) {
            let caller = self.env().caller();
            let value = self.env().transferred_balance();
            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);
            ink_env::debug_println(&message);
        }
    }
}
```

## Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
 use ink_lang as ink;

 #[ink::contract]
 mod erc20 {
     /// Defines an event that is emitted every time value is transferred.
     #[ink(event)]
     pub struct Transferred {
         from: Option<AccountId>,
         to: Option<AccountId>,
         value: Balance,
     }

     #[ink(storage)]
     pub struct Erc20 {
         total_supply: Balance,
         // more fields ...
     }

     impl Erc20 {
         #[ink(constructor)]
         pub fn new(initial_supply: Balance) -> Self {
             let caller = Self::env().caller();
             Self::env().emit_event(Transferred {
                 from: None,
                 to: Some(caller),
                 value: initial_supply,
             });
             Self { total_supply: initial_supply }
         }

         #[ink(message)]
         pub fn total_supply(&self) -> Balance {
             self.total_supply
         }
     }
 }
```

## Example: Flipper

The below code shows the complete implementation of the so-called Flipper
ink! smart contract.
For us it acts as the "Hello, World!" of the ink! smart contracts because
it is minimal while still providing some more or less useful functionality.

It controls a single `bool` value that can be either `false` or `true`
and allows the user to flip this value using the `Flipper::flip` message
or retrieve the current value using `Flipper::get`.

```rust
use ink_lang as ink;

#[ink::contract]
pub mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// Creates a new flipper smart contract initialized with the given value.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            Self { value: init_value }
        }

        /// Flips the current value of the Flipper's bool.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value of the Flipper's bool.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/event.md
````markdown
---
title: "#[ink(event)]"
slug: /macros-attributes/event
---

Applicable on `struct` definitions.

Defines an ink! event. A contract can define multiple such ink! events.


[See our section on Events](../basics/events.md) for a detailed description and examples.
````

## File: versioned_docs/version-v3/macros-attributes/implementation.md
````markdown
---
title: "#[ink(impl)]"
slug: /macros-attributes/impl
---

This attribute supports a niche case that is rarely needed.

Can be applied on ink! implementation blocks in order to make ink! aware
of them. This is useful if such an implementation block doesn't contain
any other ink! attributes, so it would be flagged by ink! as a Rust item.
Adding `#[ink(impl)]` on such implementation blocks makes them treated
as ink! implementation blocks thus allowing to access the environment
etc.

Note that ink! messages and constructors still need to be explicitly
flagged as such.

## Example

An implementation block can be defined as a trait implementation
for the ink! storage struct using the `#[ink(impl)]` annotation ‒ even
if none of its interior items have any ink! specific attributes on them:

```rust
use core::convert::TryFrom;
use ink_lang_ir as ir;

#[ink::contract]
mod my_module {
    #[ink(storage)]
    pub struct MyStorage {
        /* storage fields */
    }

    #[ink(impl)]
    impl MyStorage {
        fn my_method(&self) -> i32 {
            /* method implementation */
        }
    }

    impl MyStorage {
      #[ink(constructor)]
      pub fn my_constructor() -> Self {
          /* constructor implementation */
      }

      #[ink(message)]
      pub fn my_message(&self) {
          /* message implementation */
      }
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/message.md
````markdown
---
title: "#[ink(message)]"
slug: /macros-attributes/message
---

Applicable to methods.

Flags a method for the ink! storage struct as message making it available to the API for calling the contract.

Note that all public functions must use the `#[ink(message)]` attribute

There must be at least one `#[ink(message)]` defined method.

Methods flagged with `#[ink(message)]` are special in that they are dispatchable
upon contract invocation. The set of ink! messages defined for an ink! smart contract
define its API surface with which users are allowed to interact.

An ink! smart contract can have multiple such ink! messages defined.

An ink! message with a `&self` receiver may only read state whereas an ink! message
with a `&mut self` receiver may mutate the contract's storage.

```rust
#[ink(message)]
pub fn purely_reading(&self, from: AccountId) {
    // actual implementation
}

#[ink(message)]
pub fn mutates_storage(&mut self, from: AccountId) {
    // actual implementation
}
```


## Messages Return Value

The return value of a message needs to implement `scale::Encode`.

It is notable that the collections under `ink_storage` ‒ such as e.g. `Vec` or `HashMap` ‒
don't implement `scale::Encode`. This means you can't just return a `Vec` from an ink! message.
This restriction is intentional ‒ returning a complete data structure with a potentially unbounded
content is an anti-pattern for smart contracts. Just think about the unpredictable gas costs.

If you _really really_ need to return a data structure in its entirety then use the ones from
`ink_prelude` (e.g. `ink_prelude::vec::Vec`). Those implement `scale::Encode`.


## Example

Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
as follows:

```rust
use ink_lang as ink;

#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {

        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/namespace.md
````markdown
---
title: "#[ink(namespace = \"…\")]"
slug: /macros-attributes/namespace
---

Applicable to ink! trait implementation blocks.

Applied on ink! trait implementation blocks to disambiguate other trait
implementation blocks with equal names.

## Example

```rust
#[ink(namespace = "my_namespace")]
impl MyTrait for MyStorage {
    #[ink(message)]
    fn my_message(&self) {}
}
```
    
This changes the resulting selectors of all the ink! messages and ink! constructors within the trait implementation.
Thus allowing disambiguation between trait implementations with overlapping message or constructor names.
````

## File: versioned_docs/version-v3/macros-attributes/overview.md
````markdown
---
title: Overview
slug: /macros-attributes
---

An ink! module is the module that is flagged by `#[ink::contract]` containing all the ink! definitions.
All ink! attributes are available to specify inside an ink! module.

## Merging Attributes

It is possible to merge attributes that share a common flagged entity.
The example below demonstrates this for a payable message with a custom selector.

```rust
#[ink(message)]
#[ink(payable)]
#[ink(selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
We can also write the above ink! message definition in the following way:
```rust
#[ink(message, payable, selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
````

## File: versioned_docs/version-v3/macros-attributes/payable.md
````markdown
---
title: "#[ink(payable)]"
slug: /macros-attributes/payable
---

Applicable to ink! messages.

Allows receiving value as part of the call of the ink! message.
ink! constructors are implicitly payable, due to the initial endowment which a contract requires.

An ink! message by default will reject calls that additional fund the smart contract.
Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
flag to it. An example below:

Note that ink! constructors are always implicitly payable and thus cannot be flagged
as such.

```rust
use ink_lang as ink;

#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        #[ink(payable)] // You can either specify payable out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message, payable)] // or specify payable inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```

## Example

```rust
#[ink(message, payable)]
pub fn pay_me(&self) {
    let _transferred = self.env().transferred_balance();
}
```

See the [`examples/contract-transfer`](https://github.com/use-ink/ink-examples/blob/main/contract-transfer/lib.rs) contract for a more extensive example.
````

## File: versioned_docs/version-v3/macros-attributes/selector.md
````markdown
---
title: "#[ink(selector = S:u32)]"
slug: /macros-attributes/selector
---

Applicable to ink! messages and ink! constructors.

By default ink! creates a selector for each message and constructor.
This is necessary since the contract is compiled to a Wasm blob and functions are invoked by invoking the
selector, which identifies a method ‒ method names are no longer available in these underlying layers.

Using this attribute it is possible to specify a concrete dispatch selector for the flagged entity. This allows a contract author to precisely control the selectors of their APIs making it possible to rename their API without breakage.

A selector must be a `u32` decodable integer. For example

- `selector = 0xCAFEBABE`
- `selector = 42`

An exception is the fallback selector `_`, allowing contract calls not matching any of the other message selectors to be dispatched to a fallback message. Fallback messages can be `payable`.

## Examples

```rust
#[ink(message, selector = 0xC0DECAFE)]
fn my_message_1(&self) {}

#[ink(message, selector = 42)]
fn my_message_2(&self) {}

#[ink(message, payable, selector = _)]
fn my_fallback(&self) {}
```
… then the selector of `my_message_1` is `[0xC0, 0xDE, 0xCA, 0xFE]` and the selector of `my_message_2` is `[0, 0, 0, 42]`
since setting the selector manually overrides the automatically generated selector.

## Controlling the messages selector

Every ink! message and ink! constructor has a selector with which the
message or constructor can be uniquely identified within the ink! smart contract.
Non-unique message or constructor selector lead to a compile time error.
These selectors are mainly used to drive the contract's dispatch upon calling it.

An ink! smart contract author can control the selector of an ink! message or ink!
constructor using the `selector` flag. An example is shown below:

```rust
use ink_lang as ink;

#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        #[ink(selector = 0xDEADBEEF)] // Works on constructors as well.
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: initial_value }
        }

        #[ink(message)]
        #[ink(selector = 0xCAFEBABE)] // You can either specify selector out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        #[ink(message, selector = 0xC0DECAFE)] // ...or specify the selector inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/storage.md
````markdown
---
title: "#[ink(storage)]"
slug: /macros-attributes/storage
---

Applicable on `struct` definitions.

Applied on `struct` types in order to flag them for being
the contract's storage definition.
There can only be one ink! storage definition per contract.

There must be exactly one `#[ink(storage)]` struct.

This struct defines the layout of the storage that the ink! smart contract operates on.
The user is able to use a variety of built-in facilities, combine them in various ways
or even provide their own implementations of storage data structures.

For more information visit the `ink_storage` crate documentation.

## Example

```rust
use ink_lang as ink;

#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn construct() -> Self { Flipper { value: false } }

        #[ink(message)]
        pub fn message(&self) {}
    }
}
```
````

## File: versioned_docs/version-v3/macros-attributes/topic.md
````markdown
---
title: "#[ink(topic)]"
slug: /macros-attributes/topic
---

Applied on fields of ink! event types to indicate that they are topics.

Tells the ink! codegen to provide a topic hash for the given field. Every ink! event can only have a limited number of such topic field.
The semantics are similar to indexed event arguments in Solidity.

## Example

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance
}
```
````

## File: versioned_docs/version-v3/testnet/overview.md
````markdown
---
title: Overview
slug: /testnet
hide_title: true
---

## Rococo Deployment

We have a live testnet named `Contracts` as a parachain on [Rococo](https://wiki.polkadot.network/docs/build-pdk#rococo-testnet) ‒
a testnet for Polkadot and Kusama parachains:

<div class="schema">
    <img src="/img/contracts-on-polkadot-js.png" alt="Smart contracts parachain on Rococo" />
</div>

You can interact with the network through Polkadot JS Apps,
[click here for a direct link to the `Contracts` parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/explorer).

Our parachain uses the Rococo relay chain's native token (ROC) instead of having its own token.
Due to this you'll need ROC in order to deploy contracts on our testnet.

As a first step, you should create an account. See [here](https://wiki.polkadot.network/docs/learn-account-generation)
for a detailed guide.

As a second step, you have to get ROC testnet tokens through the [Rococo Faucet](https://wiki.polkadot.network/docs/learn-DOT#getting-tokens-on-the-rococo-testnet).
This is a chat room in which you need to write:
```
!drip YOUR_SS_58_ADDRESS:1002
```
The number `1002` is the parachain id of `Contracts` on Rococo, by supplying it the faucet will teleport ROC
tokens directly to your account on the parachain.

If everything worked out, the teleported ROC tokens will show up under
[the "Accounts" tab for `Contracts`](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/accounts).

Once you have ROC on `Contracts` you can deploy a contract as you would normally.
If you're unsure about this, our [guided tutorial](https://docs.substrate.io/tutorials/smart-contracts//)
will clarify that for you in no time.


## What is the `Contracts` parachain?

It's a [Substrate](https://github.com/paritytech/substrate)
parachain for smart contracts.
We configured it to use Substrate's smart contracts module ‒ the
[`contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts) pallet ‒ in
a default configuration.

The code for this parachain can be found [in the `cumulus` repository](https://github.com/paritytech/cumulus/tree/master/parachains/runtimes/contracts/contracts-rococo).

The `pallet-contracts` takes smart contracts as WebAssembly blobs and defines an API
for everything a smart contract needs (storage access, …).
As long as a programming language compiles to WebAssembly and there exists an implementation
of this API in it, you can write a smart contract for this pallet ‒ and thus for our the `Contracts`
parachain ‒ in that language.

This is a list of languages you can currently choose from:

* [Polkadot's ink!](https://github.com/use-ink/ink) for Rust
* [ask!](https://github.com/patractlabs/ask) for Assembly Script
* The [Solang](https://github.com/hyperledger-labs/solang) compiler for Solidity

The following graphic depicts the idea:

<div class="schema">
    <img src="/img/pallet-contracts-overview.svg" alt="`pallet-contracts` Overview" />
</div>

There are also different user interfaces and command-line tools you can use to deploy
or interact with contracts:

* [Contracts UI](https://ui.use.ink)
* [polkadot-js](https://polkadot.js.org/apps/)
````

## File: versioned_docs/version-v3/third-party-tools/openbrush.md
````markdown
---
title: OpenBrush
slug: /getting-started/openbrush
---

[OpenBrush] is a library for smart contract development on ink! maintained by the
[Brushfam](https://github.com/Supercolony-net) team. 

It provides standard contracts based on [PSPs], as well as useful contracts and Rust macros to help you build ink! smart contracts.

Using OpenBrush is simple, you will only add the dependency to your `Cargo.toml` file. Here is an [example](https://learn.brushfam.io/docs/OpenBrush/smart-contracts/overview) of how to do it.

### Why use OpenBrush?

- To make contracts **interoperable** to do **safe** cross-contracts calls (by having the same function's signature among every contract)
- To ensure the usage of [Polkadot Standards Proposals][PSPs]
- To ensure the usage of the **latest and most secure** implementation
- Useful contracts that provide custom logic to be implemented in contracts
- To **save time** by not writing boilerplate code
- Useful features which can simplify development

### Which standard tokens and useful contracts does it provide?

- **PSP22** - Fungible Token (*ERC20 equivalent*) with extensions
- **PSP34** - Non-Fungible Token (*ERC721 equivalent*) with extensions
- **PSP37**: *ERC1155 equivalent* with extensions
- **Ownable** Restrict access to action for non-owners
- **Access Control**: Define a set of roles and restrict access to an action by roles
- **Reentrancy Guard**: Prevent reentrant calls to a function
- **Pausable**: Pause/Unpause the contract to disable/enable some operations
- **Timelock Controller**: Execute transactions with some delay
- **Payment Splitter**: Split the amount of native tokens between participants

### Generic Trait Implementation

More importantly, OpenBrush adds support for generic Trait implementation so you can split Trait and Impls into different files, which will increase the readability and maintainability of your smart-contract code base (see detailed description [here](https://learn.brushfam.io/docs/OpenBrush/smart-contracts/example/setup_project))

### Wrapper around Traits

Defining a Trait definition is sufficient (a contract that implements that Trait is not needed anymore) to call methods of that Trait from some contract in the network (do a cross contract call). It makes cross-contract calls easier.

### Documentation

- [OpenBrush Github repo](https://github.com/727-Ventures/openbrush-contracts)
- [Official Docs](https://learn.brushfam.io/docs/OpenBrush)
- [OpenBrush website](https://openbrush.io/)
- [Substrate Seminar (Youtube)](https://www.youtube.com/watch?v=I5OFGNVvzOc)
- [How to use modifiers](https://medium.com/supercolony/how-to-use-modifiers-for-ink-smart-contracts-using-openbrush-7a9e53ba1c76)

## Typechain-Polkadot

Another tool essential for ink! smart contracts development is [Typechain-Polkadot](https://github.com/727-Ventures/typechain-polkadot).

Typechain-Polkadot is used to generate Typescript wrappers around your smart-contract, which can be used in UI or in integration tests of your ink! smart contracts. It uses polkadot-api under the hood, but is especially useful because all calls and queries are typed, therefore the chance of getting some error during a call is mitigated.

## Sol2Ink

[Sol2Ink](https://github.com/727-Ventures/sol2ink) is a useful tool which can help you migrating from Solidity to ink! You will only pass the Solidity code of your smart contract to Sol2Ink and get the ink! contract in return. You can also use Sol2Ink to learn the differences between Solidity and ink! code and use it to help you learning to create ink! smart contracts.

[OpenBrush]: https://github.com/727-Ventures/openbrush-contracts
[PSPs]: https://github.com/w3f/PSPs
````

## File: versioned_docs/version-v4/basics/verification/contract-verification.md
````markdown
---
title: Contract Verification
slug: /basics/verification/contract-verification
hide_title: true
---

![Verification Title Picture](/img/title/verification.svg)

# Contract Verification

Contract verification is the process of matching a deployed ink! contract 
with the source code and metadata generated when it was built. 

The verification process for Rust-based smart contract languages is more
complex than EVM-based languages such as Solidity due to the Rust 
compiler not providing deterministic builds of contracts. 

In order to verify an ink! smart contract, the verification
process must recompile the contract in an identical host environment to
which it was originally built. The simplest way to do this is using a Docker
container.

Since ink! `4.0.0`, `cargo-contract` provides the necessary tools to produce 
a verifiable build and verify a binary against the reference contract.

:::note
Contract verification tools are currently available in `cargo-contract`
version `4.0.0-alpha`. To install it, run
```
cargo install cargo-contract --locked --version 4.0.0-alpha
```
:::

## Verifiable build

As mentioned earlier, due to the non-deterministic nature of Rust compilation,
smart contract developers are advised to build their project inside
a Docker container we provide. Luckily, `cargo contract build`
provides the `--verifiable` flag for this purpose.

The steps for the verifiable build production are:
1. [Install Docker Engine](https://docs.docker.com/engine/install/)
2. (Linux users) Make sure you complete the [post-installation step](https://docs.docker.com/engine/install/linux-postinstall/).
This is required for the correct operation of the command.
4. Ensure Docker Engine is up and running, and the socket is accessible.
3. Simply run `cargo contract build --verifiable`.

This will pull the image with the version that corresponds to your `cargo-contract` crate version,
perform a build, and write artifacts in the standard output directory.

If everything is correct, you can verify the image version in the metadata file.
It should contain a key-value `image` after the `contract` information:
```json
  "contract": {
    "name": "flipper",
    "version": "4.3.0",
    "authors": [
      "Use Ink <ink@use.ink>"
    ]
  },
  "image": "paritytech/contracts-verifiable:4.0.0-alpha",
```

You are now ready to deploy your contract to a production chain.

:::note
The image is `amd64` based. Therefore, the build times can be significantly slower
on Apple Silicon machines. To overcome the issue enable _Rosetta for x86/amd64 emulation_ 
in _Settings_ → _Features in development_ tab in Docker Desktop App.
:::

## Verifying contract

Similarly to etherscan, you want to ensure that the given contract bundle
is indeed a copy of some well-known contract code.

There are two options when it comes to verification:
* Local bare-bones verification using `cargo contract verify`
* A third-party service [Sirato](./sirato.md)

`cargo contract verify` allows you to verify the given cargo project
against a reference contract bundle. 

Simply run `cargo contract verify <path>` 
in the cargo project directory. 

If the reference contract was not build inside a docker container, the command
will compare the build info from the reference contract with the current environment
to ensure a match in environment.

:::warning
If you are not using standardized verifiable builds. It is your responsibility
to ensure deterministic environment both for build and verification of 
smart contracts.
:::

If the build info from the `.contract` file matches the environment and a
docker `image` is present in metadata, `cargo contract` will build the
 project inside the specified `image` docker container. 
Otherwise, a local build is carried out.

Upon completion, the built contract bundle is compared to the reference one
and the result is returned.

## Advanced usage

If you would like to carry out other operations inside a deterministic environment
you can use our docker image. It is availble on [Docker Hub](https://hub.docker.com/repository/docker/paritytech/contracts-verifiable/general).
The entry point is set to `cargo contract` allowing you to specify other commands to be
executed.

:::tip
If you are building a multi-contract project, 
make sure you are executing the build in the parent directory in order to mount the directory 
of all contracts to be visible. Specify a relative manifest path to the root contract: 

`cargo contract build --verifiable --manifest-path ink-project-a/Cargo.toml`
:::

You can find a Dockefile and further documentation on image usage 
in [the `cargo-contract` repository](https://github.com/use-ink/cargo-contract/tree/master/build-image)
````

## File: versioned_docs/version-v4/basics/verification/sirato.md
````markdown
---
title: Sirato 
slug: /basics/verification/sirato
hide_title: true
---

![Verification Title Picture](/img/title/verification.svg)

# Sirato Verification Service

Web3 Labs have made available a public version of their
[verification service](https://github.com/web3labs/ink-verifier-server) 
to cater for the ink! and DotSama ecosystems. This can be used alongside 
the verifiable build image container to verify ink! smart contracts.

The following steps outline how to create a verifiable build and 
subsequently verify it using these services.

## Performing a verifiable build

You should already be familiar with using `cargo-contract` to 
[compile your contract](../../getting-started/compiling.md).

You will need to install the ink! verified image crate:
```
cargo install — git 
https://github.com/web3labs/ink-verifier-image.git
```

You can now perform a verified build by running the following 
command in the smart contracts project folder:
```
build-verifiable-ink -i ghcr.io/web3labs/ink-verifier .
```

:::note
Reproducable builds only work with cargo-contract >= 2.0.2 and 
contracts generated with that version onwards. To work around 
this you can use the signed metadata file instead.
:::

If you were to use the 
[flipper example](../../getting-started/creating.md) you would see 
output similar to the below:
```
...
 [5/5] Generating bundle

Original wasm size: 20.6K, Optimized: 1.4K

The contract was built in RELEASE mode.

Your contract artifacts are ready. You can find them in:
/build/package/src/target/ink

  - flipper.contract (code + metadata)
  - flipper.wasm (the contract's code)
  - flipper.json (the contract's metadata)
  adding: src/ (stored 0%)
  adding: src/Cargo.lock (deflated 75%)
  adding: src/Cargo.toml (deflated 52%)
  adding: src/lib.rs (deflated 72%)
  adding: flipper.contract (deflated 64%)
Verification package in /build/target/ink/package.zip
Archive:  /build/target/ink/package.zip
  Length      Date    Time    Name
---------  ---------- -----   ----
        0  2023-03-08 21:41   src/
   105695  2023-03-08 21:28   src/Cargo.lock
      573  2023-03-08 20:40   src/Cargo.toml
     5177  2023-03-08 20:40   src/lib.rs
     5278  2023-03-08 21:41   flipper.contract
---------                     -------
   116723                     5 files
```

If you have any issues running the build, you can built it yourself by 
running the following commands:
```
cd ../
git clone https://github.com/web3labs/ink-verifier-image.git
cd ink-verifier-image
docker build . -t ink-verifier:develop
cd ../flipper
build-verifiable-ink -t develop .
```

There will now be a package zipfile available which contains the contract 
source code, metadata and Wasm binary:
```
tree -L 3
.
├── Cargo.lock
├── Cargo.toml
├── lib.rs
└── target
    └── ink
        └── package.zip
```

Now that you have created the verified build, you can 
[deploy your contract](../../getting-started/deploying.md).

Once deployed, you will need to make a note of the contract's code hash in 
order to verify it.

## Verifying an ink! smart contract

### Using the verification service web app

The [ink! Verification Service](https://github.com/web3labs/ink-verifier-server)
is a RESTful web service created for verifying smart contracts deployed using
[pallet-contracts](https://crates.io/crates/pallet-contracts).

Web3 Labs host a public instance of the service at 
[ink-verifier.sirato.xyz](https://ink-verifier.sirato.xyz/). A Swagger interface 
to the service is also avilable at 
[ink-verifier.sirato.xyz/api/api-docs/](https://ink-verifier.sirato.xyz/api/api-docs/).

<img src="/img/verification-service-api.png" alt="ink! Verification Service Swagger endpoint" />

The verification process entails the following steps:

1. A requestor uploads the source packge archive for a network and code hash
1. The server checks that:
   - The source code for the network and code hash is not already verified or 
     being verified
   - There is enough host resources to start a new verification
1. The server downloads the pristine Wasm byte code correspondening to the
   provided network and code hash
1. The server streams the archive if it is a compressed archive
1. The server moves the staging files to the processing directory
1. The server runs a container process for the verifier image to verify the 
   package in processing. See source code verification workflow for details
1. On the event of container exit the server moves the verified artificats to 
   the publish directory if the verification was successful, otherwise keeps a log in the errors directory

It works with any network that is defined in the 
[@polkadot/apps-config](https://github.com/polkadot-js/apps/tree/master/packages/apps-config/src/endpoints) 
package.

In order to verify a deployed contract using the service you will need to use 
the `/verify/{network}/{codeHash}` endpoint which is documented 
[here](https://ink-verifier.sirato.xyz/api/api-docs/#/default/post_verify__network___codeHash_).

Once a contract has been verified you can use the 
`/contract/{codeHash}/metadata.json` and `/contract/{codeHash}/src` endpoints 
to retrieve metadata and source code respectively.

### Using Sirato

Sirato Substrate is a smart contract explorer for ink! smart contracts. It 
integrates with the contract verification service allowing users to upload 
package files generated by the verifiable build image via the Sirato UI instead
of having to use the web endpoint.

In addition once a contract has been verified, details of any contract activity 
and events taking place on a parachain or Substrate chain are decoded for the 
user in Sirato.

For instance, in order to verify a contract deployed on the Rococo parachain,
you can head to the Sirato instance at 
[substrate.sirato.xyz](https://substrate.sirato.xyz/).

<img src="/img/sirato-substrate.png" alt="Sirato Substrate" />

From there you can navigate to the deployed code by clicking on the Code 
reference that matches the code hash returned by the cargo contract instantiate 
call.

Alternatively, you can navigate directly by entering the URL 
`https://substrate.sirato.xyz/codes/0x<code-hash>`.

<img src="/img/sirato-contract-instance.png" alt="Sirato contract instance view" />

Now click on the source code tab:

<img src="/img/sirato-package-upload.png" alt="Sirato package upload page" />

Then upload the verified `package.zip` file that you generated earlier.

<img src="/img/sirato-package-upload-done.png" alt="Sirato package upload complete" />

You can now start the verification process which kicks off a build of the 
provided resources.

<img src="/img/sirato-package-verify.png" alt="Sirato package verification" />

Once the process has finished you will see the message 
`Contract successfully verified`.

<img src="/img/sirato-verify-complete.png" alt="Sirato package verification complete" />

Clicking Browse verified files will display the associated metadata and 
source files for your contract.

<img src="/img/sirato-browse-verified.png" alt="Sirato browse verified contract" />

If we then browse back to our contract instance, any methods or events will 
now be decoded.

<img src="/img/sirato-decoded-transaction.png" alt="Sirato decoded contract transaction" />

We can verify this by invoking a method on the contract. We can now see the 
decoded method that was called in Sirato.

<img src="/img/sirato-decoded-transaction2.png" alt="Another Sirato decoded contract transaction" />

### Unverified metadata upload

The verification service supports uploading signed contract metadata as an 
additional alternative to reproducible builds generated metadata. Please note 
that the signed metadata is not verified and the owner of the code hash is 
trusted.

This feature responds to:
1. The support for `build_info` data is only available from `cargo-contract` 
   2.0.2.
2. There is no official image or procedure regarding reproducible builds 
   yet.
3. We want to expand the service utility in the meantime.

Although it is a far from ideal way to bind the metadata to a given code 
hash it prevents trivial exploitation by:
- Verifying that the signature is from the owner account of the code hash.
- Verifying that the signed message matches the sha256 of the uploaded 
  metadata.json + the code hash of the uploaded contract bytecode.

To provide signed metadata, you will need to use
the `/upload/{network}/{codeHash}` endpoint which is documented
[here](https://ink-verifier.sirato.xyz/api/api-docs/#/default/post_upload__network___codeHash_)

For the request body you will need to sign this message using the account that 
uploaded the contract. You can use the [sign and verify tool](https://polkadot.js.org/apps/?rpc=ws%3A%2F%2F127.0.0.1%3A9944#/signing) 
in Polkadot.js. 

It is also possible to use Sirato for this, you can find instructions 
[here](https://github.com/web3labs/ink-verifier-server/blob/main/docs/TUTORIAL.md#s2---owner-signed-metadata).
````

## File: versioned_docs/version-v4/basics/contract-template.md
````markdown
---
title: Contract Template
hide_title: true
slug: /basics/contract-template
---

![Macro Title Picture](/img/title/macro.svg)

# Contract Template

On this page we'll go over how to create a basic contract and explain
its elements.

## Creating a template

Change into your working directory and run:

```bash
cargo contract new foobar
```

This will create a new project folder named `foobar`.

```bash
cd foobar/
```

In the `lib.rs` file you find initial scaffolded code, which you can use as a starting point.

Quickly check that it compiles, and the trivial tests pass with:

```bash
cargo test
```

Also check that you can build the Wasm file by running:

```bash
cargo contract build
```

If everything looks good, then we are ready to start programming!

## Template Content

The template contains scaffolded code that provides a starting point
for writing an ink! contract. In the following we'll take a look
at what the files contain.
The files you get locally will look similar, just that we added
explanatory comments here.

### `Cargo.toml`

```toml
[package]
name = "foobar"
version = "0.1.0"
authors = ["[your_name] <[your_email]>"]
edition = "2021"

[dependencies]
# The `ink` crate contains the ink! eDSL and re-exports
# a number of other ink! specific crates. For example,
# `ink::env` is the `ink_env` crate that contains functions
# to interact with a contract's environment (querying information
# about a caller, the current block number, etc.).
ink = { version = "4.0.0-beta", default-features = false }

# Substrate blockchains use the SCALE codec for anything to
# do with data encoding/decoding. If an ink! contract is called
# the passed values have to be SCALE-encoded and return values
# have to be SCALE-decoded. All values that are put into a
# contract's storage are SCALE-encoded as well.
scale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }

# This crate is used to write information about a contract's
# types into the contract's metadata (i.e. its ABI). This is
# needed so that a client knows that a contract message requires
# e.g. an Array and that it has to SCALE-encode the value as an Array.
scale-info = { version = "2.3", default-features = false, features = ["derive"], optional = true }

[dev-dependencies]
# This developer dependency is for the End-to-End testing framework.
ink_e2e = { path = "../../crates/e2e" }

[lib]
name = "foobar"
path = "lib.rs"

# This setting typically specifies that you'd like the compiler to
# create a dynamic system library. For WebAssembly though it specifies
# that the compiler should create a `*.wasm` without a start function.
crate-type = [
    "cdylib",
]

[features]
default = ["std"]
std = [
    "ink/std",
    "scale/std",
    "scale-info/std",
]
ink-as-dependency = []

# This feature is just a convention, so that the end-to-end tests
# are only executed if `cargo test` is explicitly invoked with
# `--features e2e-tests`.
e2e-tests = []
```

### `lib.rs`

Every ink! contract is required to contain:

* Exactly one `#[ink(storage)]` struct.
* At least one `#[ink(constructor)]` function.
* At least one `#[ink(message)]` function.

The scaffolded code will look similar to the following, we've
changed the comments though to explain what is going on there
on a high level.

```rust
// If the `std` feature from the `Cargo.toml` is not enabled
// we switch on `no_std`, this has the effect of Rusts standard
// library not being included in our contract.
//
// The Rust standard library is OS-dependent and Wasm is
// architecture independent.
#![cfg_attr(not(feature = "std"), no_std)]

// This is the ink! macro, the starting point for your contract.
// Everything below it might look like Rust code, but it is actually
// run through a parser in ink!.
#[ink::contract]
pub mod flipper {
    /// This is the contract's storage.
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// A constructor that the contract can be initialized with.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            /* --snip-- */
        }

        /// An alternative constructor that the contract can be
        /// initialized with.
        #[ink(constructor)]
        pub fn new_default() -> Self {
            /* --snip-- */
        }

        /// A state-mutating function that the contract exposes to the
        /// outside world.
        ///
        /// By default functions are private, they have to be annotated
        /// with `#[ink(message)]` and `pub` to be available from the
        /// outside.
        #[ink(message)]
        pub fn flip(&mut self) {
            /* --snip-- */
        }

        /// A public contract function that has no side-effects.
        ///
        /// Note that while purely reading functions can be invoked
        /// by submitting a transaction on-chain, this is usually
        /// not done as they have no side-effects and the transaction
        /// costs would be wasted.
        /// Instead those functions are typically invoked via RPC to
        /// return a contract's state.
        #[ink(message)]
        pub fn get(&self) -> bool {
            /* --snip-- */
        }
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        /// This attribute denotes that the test is executed in
        /// a simulated, mocked blockchain environment. There are
        /// functions available to influence how the test environment
        /// is configured (e.g. setting an account to a specified balance).
        #[ink::test]
        fn default_works() {
            /* --snip-- */
        }

        /* --snip-- */
    }

    #[cfg(all(test, feature = "e2e-tests"))]
    mod e2e_tests {
        use super::*;
        use ink_e2e::build_message;

        type E2EResult<T> = std::result::Result<T, Box<dyn std::error::Error>>;

        /// With this attribute the contract will be compiled and deployed
        /// to a Substrate node that is required to be running in the
        /// background.
        ///
        /// We offer API functions that enable developers to then interact
        /// with the contract. ink! will take care of putting contract calls
        /// into transactions that will be submitted to the Substrate chain.
        ///
        /// Developers can define assertions on the outcome of their transactions,
        /// such as checking for state mutations, transaction failures or
        /// incurred gas costs.
        #[ink_e2e::test]
        async fn it_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            /* --snip-- */
        }

        /* --snip-- */
    }
}
```
````

## File: versioned_docs/version-v4/basics/debugging.md
````markdown
---
title: Contract Debugging
slug: /basics/contract-debugging
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Contract Debugging

There are three ways to debug your ink! contract currently:

* You can write tests using one of the mechanisms described on the
  [Contract Testing](./testing.md) page.
* You can interact with your contract via a UI or command-line. This is
  described on the [Call Your Contract](../getting-started/calling.md) page.
* You can print debug statements in your contract. Those will appear
  on the Substrate node's `stdout`. This is described on this page.

### How do I print to the terminal console from ink!?

You can use those two macros:

* [`ink::env::debug_println!`](https://docs.rs/ink_env/4.0.0/ink_env/macro.debug_println.html)
* [`ink::env::debug_print!`](https://docs.rs/ink_env/4.0.0/ink_env/macro.debug_print.html)

There are things you could do to enable debug messages on the client console:

1. __Enable the feature `ink-debug` for the `ink_env` crate.__<br/>
   `cargo-contract` does this automatically for you (for versions `>= 0.13.0`), except if
   you compile a contract in `--release` mode.

1. __Set the log level of your node to `runtime::contracts=debug`.__<br/>
   For example, to have only errors and debug output show up for the `substrate-contracts-node`:

  ```
  substrate-contracts-node -lerror,runtime::contracts=debug
  ```

1. __Set the log level of your node to `runtime::contracts::strace` to trace host function calls.__<br/>
   These function calls logs will also be displayed in the `Debug message` panel of [Contracts UI](https://github.com/use-ink/contracts-ui).
   For example, to view these traces in addition to the logs described above:

  ```
  substrate-contracts-node -lerror,runtime::contracts=debug,runtime::contracts::strace=trace
  ```

## Example

The following code depicts how to print debug statements
from a message or constructor.

```rust
#[ink(constructor)]
fn new() -> Self {
    ink::env::debug_println!("created new instance at {}", Self::env().block_number());
    Self { }
}

#[ink(message)]
fn print(&self) {
   let caller = self.env().caller();
   let message = ink_prelude::format!("got a call from {:?}", caller);
   ink::env::debug_println!(&message);
}
```

:::note
Debug output is not printed for transactions!

It is only printed for RPC calls or off-chain tests.
:::

# Decode Data Payload

You can use a block explorer or an app like PolkadotJs to retrieve the data payload of a contract transaction, and then use [cargo-contract](https://github.com/use-ink/cargo-contract) to decode it.

```bash
# From your contract directory
cargo contract decode message -d fe5bd8ea01000000
```

This command will output the method name and parameters encoded in the data payload:

```
Decoded data: inc_by { n: 1 }
```

If the contract was called through a cross-contract interaction, the payload will not be available in the transaction. In such cases, you can use the approach described in the next section to access it.

# Replay and Debug a Block

To replay a transaction, you can use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to create a local fork of the chain and replay the block with trace-level logging.

Assuming you have a node that you can connect to at `$ENDPOINT` and the transaction you want to replay is in block `$BLOCK_HASH`, you can use the following command:

```bash
npx @acala-network/chopsticks@latest run-block \
--endpoint $ENDPOINT \
--block $BLOCK_HASH \
--runtime-log-level 5 \
| grep runtime::contracts
```

This command replays the block with trace-level logging enabled. By filtering the output with `runtime::contracts`, you can view all the contract calls in the block:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [246, 118, 44, 201]
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 1, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
```

From here, you can identify the call you are interested in and decode the data payload:

```bash
echo 254, 91, 216, 234, 1, 0, 0, 0 \
| tr ',' ' ' \
| xargs printf '%02x' \
| xargs cargo contract decode message -d
```

This command will output the following:

```
Decoded data: inc_by { n: 1 }
```

# Fork Node and Replay Transactions

You can also use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to start a local fork of your chain.

This command starts a fork beginning at block `$BLOCK_HASH`. You can connect to this fork using `ws://localhost:8000` to submit extrinsics via PolkadotJs or `cargo contract`:

```bash
npx @acala-network/chopsticks@latest \
--endpoint $ENDPOINT \
--block $BLOCK_HASH \
--runtime-log-level 5
```

Here, for example, you can re-run the transaction that we decoded in the previous section:

```bash
cargo contract call \
--contract $CONTRACT_ADDR \
--message inc_by --args 1 \
--suri //Alice \
--url ws://localhost:8000
```

Since trace-level logging is used, you will receive detailed information about all the host functions called during the execution of the contract:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 2, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           DEBUG: Execution finished with debug buffer: seal0::value_transferred(out_ptr: 65488, out_len_ptr: 65516) = Ok(())
seal0::input(out_ptr: 65536, out_len_ptr: 65524) = Ok(())
seal1::get_storage(key_ptr: 65536, key_len: 4, out_ptr: 65540, out_len_ptr: 65524) = Ok(Success)
seal2::set_storage(key_ptr: 65536, key_len: 4, value_ptr: 65540, value_len: 4) = Ok(4)
seal0::seal_return(flags: 0, data_ptr: 65536, data_len: 1) = Err(TrapReason::Return(ReturnData { flags: 0, data: [0] }))
```
````

## File: versioned_docs/version-v4/basics/env-functions.md
````markdown
---
title: Environment Functions
slug: /basics/environment-functions
---

ink! exposes a number of handy environment functions.
A full overview [is found here](https://docs.rs/ink_env/4.0.0/ink_env/#functions).

In an `#[ink(constructor)]`  use `Self::env()` to access those,
in an `#[ink(message)]` use `self.env()`.
So e.g. `Self::env().caller()` or `self.env().caller()`.

Some handy functions include:

* [`caller()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.caller.html): Returns the address of the caller of the executed contract.
* [`account_id()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.account_id.html): Returns the account ID of the executed contract.
* [`balance()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.balance.html): Returns the balance of the executed contract.
* [`block_number()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.block_number.html): Returns the current block number.
* [`emit_event(…)`](https://docs.rs/ink_env/4.0.0/ink_env/fn.emit_event.html): Emits an event with the given event data.
* [`transfer(…)`](https://docs.rs/ink_env/4.0.0/ink_env/fn.transfer.html): Transfers value from the contract to the destination account ID.
* [`hash_bytes(…)`](https://docs.rs/ink_env/4.0.0/ink_env/fn.hash_bytes.html): Conducts the crypto hash of the given input and stores the result in output.
* […and many more](https://docs.rs/ink_env/4.0.0/ink_env/#functions).
````

## File: versioned_docs/version-v4/basics/environment.md
````markdown
---
title: Chain Environment Types
slug: /basics/chain-environment-types
hide_title: true
---

![Environment Title Picture](/img/title/environment.svg)

# Chain Environment Types

:::caution
If you write a contract for a chain that deviates from the default
Substrate types, you have to make sure to configure that chain's
`Environment` for your contract!
:::

ink! defines a trait [`Environment`](https://use-ink.github.io/ink/ink_env/trait.Environment.html)
and also a default implementation of that trait ‒ [`DefaultEnvironment`](https://use-ink.github.io/ink/ink_env/enum.DefaultEnvironment.html).

These are the types that ink! uses, if no explicit steps are taken:

```rust
/// The fundamental types of the default configuration.
#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(feature = "std", derive(TypeInfo))]
pub enum DefaultEnvironment {}

impl Environment for DefaultEnvironment {
    const MAX_EVENT_TOPICS: usize = 4;

    type AccountId = ink_primitives::AccountId;
    type Balance = u128;
    type Hash = ink_primitives::Hash;
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = NoChainExtension;
}
```

The context here is that you can use ink! on any blockchain that was built with
the [Substrate](https://substrate.io) framework and includes the
[`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
module.

Chains built on Substrate can decide on their own which types they want
to use for e.g. the chain's block number or account id's. For example,
chains that intend to be compatible to Ethereum typically use the same
type as Ethereum for their `AccountId`.

Most Substrate chains stay with the default Substrate types though and
ink! just uses those by default as well. It is possible to configure
a different environment in the contract macro ([documentation here](https://use-ink.github.io/ink/ink/attr.contract.html#header-arguments))
though:

```rust
#[ink::contract(env = MyCustomTypes)]
```
````

## File: versioned_docs/version-v4/basics/events.md
````markdown
---
title: Events
slug: /basics/events
hide_title: true
---

![Balloons 1 Title Picture](/img/title/balloons-1.svg)

# Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

![Contract execution via transaction](/img/events.svg)

## Example

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
#[ink::contract]
mod erc20 {
    /// Defines an event that is emitted
    /// every time value is transferred.
    #[ink(event)]
    pub struct Transferred {
        from: Option<AccountId>,
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self {
            let caller = Self::env().caller();
            Self::env().emit_event(Transferred {
                from: None,
                to: Some(caller),
                value: initial_supply,
            });
            Self { total_supply: initial_supply }
        }

        #[ink(message)]
        pub fn total_supply(&self) -> Balance {
            self.total_supply
        }
    }
}
```

See our [`ERC20 example contract`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) 
for an elaborate example which uses events.

## Event Definition

This is how an event definition looks:

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance

}
```

Add the `#[ink(topic)]` attribute tag to each item in your event that you want to have indexed.
A good rule of thumb is to ask yourself if somebody might want to search for this topic.
For this reason the `amount` in the exemplary event above was not
made indexable ‒ there will most probably be a lot of different events with
differing amounts each.

The signature of the event is by default one of the topics of the event, except
if you annotate the event with `#[ink(anonymous)]`.
See [here](../macros-attributes/anonymous.md) for details on this attribute.


## Emitting Events in a Constructor

In a constructor events are emitted via `Self::env().emit_event()`.
See this example:

```rust
#[ink(constructor)]
pub fn new(initial_value: Balance) -> Self {
    let caller = Self::env().caller();
    let mut balances = HashMap::new();
    balances.insert(caller, initial_supply);

    Self::env().emit_event(Transferred {
        from: None,
        to: Some(caller),
        amount: initial_supply
    });

    Self { total_supply: initial_supply, balances }
}
```

## Emitting Events from Messages

In a message events are emitted via `self.env().emit_event()`:

```rust
#[ink(message)]
pub fn transfer(&mut self, to: AccountId, amount: Balance) -> Result {
    let from = self.env().caller();
    // implementation hidden
    self.env().emit_event(Transferred {
        from: Some(from),
        to: Some(to),
        amount
    });
    Ok(())
}
```
````

## File: versioned_docs/version-v4/basics/metadata.md
````markdown
---
title: Metadata
hide_title: true
slug: /basics/metadata
---

![Metadata Title Picture](/img/title/metadata.svg)

# ink! Metadata

The ink! metadata is used to describe a contract in a language agnostic way. It is
intended to be used by third party tools (e.g. UIs, block explorers) in order to correctly
call contract functions and interpret events.

The ink! metadata is generated when a contract is built using `cargo-contract`, e.g
`cargo contract build`.

The metadata can be found in your contract's target directory under the name
`<contract-name>.json`.

:::note

The metadata is also contained in your `<contract-name>.contract` file. The difference is
that the `.contract` file also contains the Wasm binary of your contract.

:::

## `<contract-name>.json`
The metadata is defined by the following **required** keys:
- `source`: Information about the contract's Wasm code.
- `contract`: Metadata about the contract.
- `abi`: Raw JSON of the contract's abi metadata, generated during contract compilation.

It may _optionally_ contain the following keys:
- `user`: Additional user-defined metadata.

```json
{
  "source": {
    "hash": "...",
    "language": "...",
    "compiler": "..."
  },
  "contract": {
    "name": "...",
    "version": "...",
    "authors": [
      "..."
    ]
  },
  "spec": {
    "constructors": ["..."],
    "messages": ["..."]
  }
}
```

:::note

Notice that we don't have an `abi` key, but we instead use the `spec` field to specify
the contract's ABI. You can read more about that in the [ABI documentation](#abi).

:::

The following sections will dive deeper into how these sections are made up.

### `source`
This object contains information about how the contract was built.

It consists of the following **required** keys:
- `hash`: The hash of the contract's Wasm code.
- `language`: The language used to write the contract.
- `compiler`: The compiler used to compile the contract.

It may _optionally_ include the following keys:
- `wasm`: The actual Wasm code of the contract, for optionally bundling the code with the metadata.
- `build_info`: Extra information about the environment in which the contract was built.

```json
"source": {
  "hash": "0x157014494527fee27a82e49bbd9eea10c0713bb0566f6def37f4595db86236ff",
  "language": "ink! 4.0.0",
  "compiler": "rustc 1.66.0"
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/30ba1ec545d01c0479fe47c97d2c8911ab868d46/crates/metadata/src/lib.rs#L157).

:::

### `contract`
This object contains extra metadata about the contract.

The **required** keys include:
 - `name`: The name of the smart contract.
 - `version`: The version of the smart contract.
 - `authors`: The authors of the smart contract.

It can _optionally_ include the following keys:
 - `description`: The description of the smart contract.
 - `documentation`: Link to the documentation of the smart contract.
 - `repository`: Link to the code repository of the smart contract.
 - `homepage`: Link to the homepage of the smart contract.
 - `license`: The license of the smart contract.

```json
"contract": {
  "name": "flipper",
  "version": "4.0.0-beta.1",
  "authors": [
    "Use Ink <ink@use.ink>"
  ]
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/30ba1ec545d01c0479fe47c97d2c8911ab868d46/crates/metadata/src/lib.rs#L432).

:::

### ABI
This is the specification of the contract.

Unlike the previous metadata sections the structure of the object stored here is not
defined. Instead, it is up to each programming language (e.g. ink!, ask!, Solidity) to
define their own metadata format which will then be stored here.

In this document we will focus on the ink! ABI.

The ink! metadata consists of the following **required** sections
 - `spec`: The description of the contract (e.g constructors, messages, events, etc.).
 - `storage`: The layout of the storage data structure
 - `types`: A read-only registry containing types in their portable form for
   serialization.
 - `version`: The version of the ink! metadata.

```json
"spec": { ... },
"storage": { ... },
"types": { ... },
"version": "..."
```

:::info

If you're interested in the code reference from `ink!`
see [here](https://github.com/use-ink/ink/blob/c8aa3ee41112b327d4f3cb3959f188945c8ccace/crates/metadata/src/lib.rs#L90).

:::

#### `spec`
The contract `spec` consists of the following **required** keys:
- `constructors`: The set of constructors of the contract.
    - `label`: The label of the constructor. In case of a trait provided constructor the
      label is prefixed with the trait label.
    - `selector`: The selector hash of the message.
    - `payable`: If the constructor accepts any `value` from the caller.
    - `default`: If the constructor is marked as default, useful for UIs.
    - `args`: The parameters of the deployment handler.
    - `docs`: The deployment handler documentation.
- `messages`: The external messages of the contract.
    - `label`: The label of the message. In case of trait provided messages and
      constructors the prefix by convention in ink! is the label of the trait.
    - `selector`: The selector hash of the message.
    - `mutates`: If the message is allowed to mutate the contract state.
    - `payable`: If the message accepts any `value` from the caller.
    - `default`: If the message is marked as default, useful for UIs.
    - `args`: The parameters of the message.
    - `return_type`: The return type of the message.
    - `docs`: The message documentation.
- `environment`: Configuration of the types that the host blockchain operates with. 
You can check default types in [Environment](../basics/environment.md) section.
  - `accountId`: The type describing an account address.
  - `balance`: The type describing balance values.
  - `blockNumber`: The type describing a block number. 
  - `chainExtension`: The type describing the chain extension for the environment. 
For more information about usage and definition check [this section](../macros-attributes/chain-extension.md).
  - `maxEventTopics`: The maximum number of supported event topics provided by the runtime.
  - `timestamp`: the type describing a timestamp.
- `events`: The events of the contract.
    - `label`: The label of the event.
    - `args`: The event arguments.
    - `docs`: The event documentation.
- `docs`: The contract documentation.
- `lang_error`: The language specific error type.

:::note

While all these keys are required, they may be empty. For example, if a contract does not
define any events then the `events` key would contain an empty array `[]`.

:::

:::tip ink! 3.x Compatibility Note

The `lang_error` field was introduced as part of ink! 4.0. This represents an error which
comes from the smart contracting language itself, and not the contract nor the underlying
environment (e.g `pallet-contracts`).

All ink! messages and constructors now return a `Result` which uses this as the `Error`
variant (see the [`LangError`](https://docs.rs/ink/4.0.0/ink/enum.LangError.html) docs for more).

:::

```json
"spec": {
  "constructors": [
    {
      "args": [
        { ... }
      ],
      "docs": [
        "Creates a new flipper smart contract initialized with the given value."
      ],
      "label": "new",
      "payable": false,
      "default": false,
      "selector": "0x9bae9d5e"
    }
  ],
  "docs": [],
  "events": [],
  "lang_error": {
    "displayName": [
      "ink",
      "LangError"
    ],
    "type": 3
  },
  "messages": [
    {
      "args": [],
      "docs": [
        " Flips the current value of the Flipper's boolean."
      ],
      "label": "flip",
      "mutates": true,
      "payable": false,
      "default": false,
      "returnType": null,
      "selector": "0x633aa551"
    }
  ]
}
```

#### `storage`
This key describes the storage layout of an ink! contract. It tracks some of the
different structures which can be placed in storage.

It consists of the following _optional_ keys (depending on what data structures are used
by the contract):

- `root`: The root cell defines the storage key for all sub-trees
    - `root_key`: The root key of the sub-tree.
    - `layout`: The storage layout of the unbounded layout elements.
- `leaf`: The root cell defines the storage key for all sub-trees
    - `key`: The offset key into the storage.
    - `ty`: The type of the encoded entity.
- `hash`: A layout that hashes values into the entire storage key space.
    - `offset`: The key offset used by the strategy.
    - `strategy`: The hashing strategy to layout the underlying elements.
    - `layout`: The storage layout of the unbounded layout elements.
- `array`: An array of associated storage cells encoded with a given type.
    - `offset`: The offset key of the array layout. This is the same key as the element
      at index 0 of the array layout.
    - `len`: The number of elements in the array layout.
    - `layout`: The layout of the elements stored in the array layout.
- `struct`: A struct layout with fields of different types.
    - `name`: The name of the struct.
    - `fields`: The fields of the struct layout.
- `enum`: An enum layout with a discriminant telling which variant is layed out.
    - `name`: The name of the enum.
    - `dispatch_key`: The key where the discriminant is stored to dispatch the variants.
    - `variants`: The variants of the enum.

```json
"storage": {
  "root": {
    "layout": {
      "struct": {
        "fields": [
          {
            "layout": {
              "leaf": {
                "key": "0x00000000",
                "ty": 0
              }
            },
            "name": "value"
          }
        ],
        "name": "Flipper"
      }
    },
    "root_key": "0x00000000"
  }
}
```

#### `types`
This object contains the type registry for the smart contract. It consists of an array of
type objects, each of which is defined as follows:
- `id`: Numerical ID for referencing the type.
- `ty`: The definition of the type.
    - `path`: The unique path to the type. Can be empty for built-in types.
    - `params`: The generic type parameters of the type in use. Empty for non generic
      types.
    - `def`: The actual type definition.
    - `docs`: Documentation.

The type definition object (`def`) supports the following `primitive` types:
- `bool`, `char`, `str`, `u8`, `u16`, `u32`, `u64`, `u128`, `i8`, `i16`, `i32`, `i64`, `i128`.

It also supports a variety of complex built-in and user-defined types. However, we will
not dig into them here. If you are interested in learning more take a look at the
[`scale-info`](https://github.com/paritytech/scale-info) crate.

```json
"types": [
  {
    "id": 0,
    "type": {
      "def": {
        "primitive": "bool"
      }
    }
  }
]
```

Other parts of the metadata, such as the `storage` object, will reference individual
types from this type registry using the `id` key.

#### `version`
This indicates the version of the ABI format the generated metadata conforms to. This is
distinct from any concept of Rust's crate versioning.

```json
"version": "4"
```

:::tip ink! 3.x Compatibility Note

In version 3 of the ink! metadata the version was specified as a key which wrapped the
ABI (e.g `"V3": { ... }`). This is no longer the case with version 4.

:::

### `user`
This is an _optional_ field used to add user-defined metadata. Some examples of things
you may want to include here:
- `moon_phase`: Phase of the moon during which the smart contract works.
- `favorite_blockchain`: The favorite blockchain of the contract authors (answer: Polkadot!).
````

## File: versioned_docs/version-v4/basics/mutating-values.md
````markdown
---
title: Mutating Storage Values
slug: /basics/mutating-values
hide_title: true
---

![Storage Mutating Title Picture](/img/title/storage-mutating.svg)

# Mutating Storage Values

It's time to modify some storage!

## Mutable and Immutable Functions

You may have noticed that the function template included `self` as the first parameter of the
contract functions. It is through `self` that you gain access to all your contract functions and
storage items.

If you are simply _reading_ from the contract storage, you only need to pass `&self`. But
if you want to _modify_ storage items, you will need to explicitly mark it as mutable,
`&mut self`.

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.my_number
    }

    #[ink(message)]
    pub fn my_setter(&mut self, new_value: u32) {
        self.my_number = new_value;
    }
}
```
````

## File: versioned_docs/version-v4/basics/reading-values.md
````markdown
---
title: Reading Values from Storage
slug: /basics/reading-values
hide_title: true
---

![Storage Read Title Picture](/img/title/storage-read.svg)

# Reading Values from Storage

Reading from storage is where the fun begins!

## Contract Functions

As you can see in the contract template, all of your contract functions are part of your contract module.

```rust
impl MyContract {
    // Public and Private functions can go here
}
```

### Public and Private Functions

In Rust, you can make as many implementations as you want. As a stylistic choice, we recommend
breaking up your implementation definitions for your private and public functions:

```rust
impl MyContract {
    /// Public function
    #[ink(message)]
    pub fn my_public_function(&self) {
        /* --snip-- */
    }

    /// Private function
    fn my_private_function(&self) {
        /* --snip-- */
    }

    /* --snip-- */
}
```

You can also choose to split things up however is most clear for your project.

Note that all public functions must use the `#[ink(message)]` attribute.

## Getting a Value

We already showed you how to initialize a storage value in the chapter [Storing Values](./storing-values.md).
Getting the value is just as simple:

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.number
    }
}
```

In Rust, if the last expression in a function does not have a semicolon it will be the return value.
````

## File: versioned_docs/version-v4/basics/selectors.md
````markdown
---
title: Selectors
hide_title: true
slug: /basics/selectors
---

# Selectors

Selectors in ink! are a language agnostic way of identifying constructors and messages.
They are four-byte hexadecimal strings which look something like: `0x633aa551`.

You can find the selector of an ink! constructor or message in your
[contract metadata](./metadata.md) by looking for the `selector` field of the dispatchable
you're interested in.

Here is an example of how you can grab the message name and selector from your contract
metadata using [`jq`](https://stedolan.github.io/jq/).

```
cat target/ink/flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"flip: 0x633aa551"
```

## Selector Calculation

If you do not have access to a contract's metadata, you can also calculate it yourself.

The algorithm ink! uses is fairly straightforward:
1. Get _just_ the name of the constructor or message
2. Compute the `BLAKE2` hash of the name
3. Take the first four bytes of the hash as the selector

Let's walk through a short example of what this looks like in practice. Consider the
following message:

```rust
#[ink(message)]
fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
    unimplemented!()
}
```

To calculate the selector we:
1. Grab the name of the message, `frobinate`
2. Compute `BLAKE2("frobinate") = 0x8e39d7f22ef4f9f1404fe5200768179a8b4f2b67799082d7b39f6a8ca82da8f1`
3. Grab the first four bytes, `0x8e39d7f2`

## Selector Calculation: ink! Traits

These rules change a bit if you define any messages using the `[ink::trait_definition]`
[macro](./trait-definitions.md). For our first step, instead of taking _just_ the
message name, we now also add the _trait name_ to the selector calculation.

```
cat target/ink/trait-flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"Flip::flip: 0xaa97cade"
```

Let's see what this would look like in practice. Consider the following trait:

```rust
#[ink::trait_definition]
pub trait Frobinate {
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool;
}

-- snip --

impl Frobinate for Contract {
    #[ink(message)]
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
        unimplemented!()
    }
}
```

To calculate the selector we:
1. Grab the name of the trait **and** the name of the message, `Frobinate::frobinate`
2. Compute `BLAKE2("Frobinate::frobinate") = 0x8915412ad772b2a116917cf75df4ba461b5808556a73f729bce582fb79200c5b`
3. Grab the first four bytes, `0x8915412a`

:::tip

Don't worry if you're not able to calculate the `BLAKE2` hash of a string by hand. You
can use [Shawn's Substrate Utilities](https://www.shawntabrizi.com/substrate-js-utilities/)
to do it for you!

:::
````

## File: versioned_docs/version-v4/basics/storing-values.md
````markdown
---
title: Storing Values
slug: /basics/storing-values
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Storing Values

Here is how you store simple values in storage:

```rust
#[ink(storage)]
pub struct MyContract {
    // Store a bool
    my_bool: bool,
    // Store some number
    my_number: u32,
}
/* --snip-- */
```

## Supported Types

Substrate contracts may store types that are encodable and decodable with
[Parity Codec](https://github.com/paritytech/parity-codec) which includes most Rust common data
types such as `bool`, `u{8,16,32,64,128}`, `i{8,16,32,64,128}`, `String`, tuples, and arrays.

Furthermore, ink! provides [substrate](https://substrate.io/) specific types like `AccountId`, `Balance`, and `Hash` to smart contracts as if
they were primitive types.

### String, Vector and More

The [`ink_prelude`](https://docs.rs/ink_prelude/4.3.0/ink_prelude/index.html) crate provides an efficient approach to import commonly used Rust types such as `String` and `Vec`, ensuring safe usage within an ink! contract.

This simplifies the type referencing process between the `std` and `no_std` environments. Typically, these types are defined within the `std` crate in the `std` environment, and the `alloc` crate in the `no_std` environment. Given that ink! smart contract code is compiled in both environments (`no_std` for production and `std` for unit tests), developers might find themselves writing intricate conditional compilation macros. The `ink_prelude` crate conveniently re-exports these types, eliminating this complexity.

You can use the prelude definitions like this:

```rust
#[ink::contract]
mod MyContractWithStringsAndArrays {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;

    #[ink(storage)]
    pub struct MyContract {
        // Store some String
        my_string: String,
        // Store some u32 in a vec
        my_vector: Vec<u32>,
    }
    /* --snip-- */
}
```

### Mapping

ink! also provides a `Mapping` storage type. You can read more about it [here](../datastructures/mapping.md).

### Substrate Types

Here is an example of how you would store substrate types `AccountId`, `Balance` and `Hash`:

```rust
#[ink::contract]
mod MyContract {

    // Our struct will use those default ink! types
    #[ink(storage)]
    pub struct MyContract {
        // Store some AccountId
        my_account: AccountId,
        // Store some Balance
        my_balance: Balance,
        // Store some Hash
        my_hash: Hash,
    }
    /* --snip-- */
}
```

### Enum

Enum can be used as a datatype as well. It's use in the example in the [Struct](#struct) section.

```rust
pub enum Status {
    /// An auction has not started yet.
    NotStarted,
    /// We are in the starting period of the auction, collecting initial bids.
    OpeningPeriod,
    /// We are in the ending period of the auction, where we are taking snapshots
    /// of the winning bids.
}
```

### Struct

You can even combine all the above mentioned types in a custom `struct` which you can then store in the contract's storage.

```rust
mod MyContract {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;


    pub struct Auction {
        /// Branded name of the auction event.
        name: String,
        /// Some hash identifying the auction subject.
        subject: Hash,
        /// Auction status.
        status: Status, // Enum: Usage shown in next section
        /// Candle auction can have no winner.
        /// If auction is finalized, that means that the winner is determined.
        finalized: bool,
        /// vector
        vector: Vec<u8>,
    }

    #[ink(storage)]
    pub struct MyContract {
        // Store Auctions in a vec
        auctions: Vec<Auction>,
    }
}
```

The values of an enum should be referenced as `Status::OpeningPeriod`.

## Initializing Storage in Constructors

Constructors are how values get initialized.
Every ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:

Note that if you have a contract whose storage contains `Mapping'`s you will need to use
`ink_lang::utils::initialize_contract` in your constructor. See the
[`Mapping` documentation](../datastructures/mapping.md) for more details.

```rust
#[ink::contract]
mod mycontract {

    #[ink(storage)]
    pub struct MyContract {
        number: u32,
    }

    impl MyContract {
        /// Constructor that initializes the `u32` value to the given `init_value`.
        #[ink(constructor)]
        pub fn new(init_value: u32) -> Self {
            Self {
                number: init_value,
            }
        }

        /// Constructor that initializes the `u32` value to the `u32` default.
        #[ink(constructor)]
        pub fn default() -> Self {
            Self {
                number: Default::default(),
            }
        }
    /* --snip-- */
    }
}
```
````

## File: versioned_docs/version-v4/basics/testing.md
````markdown
---
title: Contract Testing
hide_title: true
slug: /basics/contract-testing
---

![Testing1 Title Picture](/img/title/testing1.svg)

# Contract Testing

ink! supports three different stages of testing: unit, integration
and end-to-end tests. On this page we'll explain what the purpose
of each stage is about and how to use it.

<img src="/img/testing.png" />

Generally you can think of those three types of testing as a pyramid
with the top being the most elaborate test. The End-to-End (E2E)
tests at the top will test the lower layers of the pyramid as part
of them.

## Unit Tests

Testing contracts off-chain is done by `cargo test` and users can simply use the standard Rust
routines of creating unit test modules within the ink! project:

```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn my_test() { ... }
}
```

Test instances of contracts can be created with something like:

```rust
let contract = MyContract::my_constructor(a, b);
```

Messages can simply be called on the returned instance as if `MyContract::my_constructor` returns a
`Self` instance.

See the [flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

## Off-chain Tests

For integration tests, the test is annotated with our `#[ink::test]`
attribute instead of `#[test]`. Our attribute denotes that
the test is then executed in a simulated, mocked blockchain environment.
here are functions available to influence how the test environment
is configured (e.g. setting a specified balance of an account to
simulate how a contract would behave when interacting with it).

If you annotate a test with the `#[ink::test]` attribute it
will be executed in a simulated environment, similar to as it
would be run on-chain.
You then have fine-grained control over how a contract is called; 
for example you can influence the block advancement, the value transferred to it,
by which account it is called, which storage it is run with, etc..

See the [`examples/erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) contract on how to utilize those or [the documentation](https://docs.rs/ink/4.0.0/ink/attr.test.html) for details.

At the moment there are some known limitations to our off-chain environment,
and we are working on making it behave as close to the real chain environment
as possible.

:::note
One limitation of the off-chain testing framework is that it
currently only supports a `DefaultEnvironment`.

See [here](./environment.md) for an explanation of what an environment is.
:::

### How do you find out if your test requires the off-chain environment?

Normally if the test recursively uses or invokes some contract methods that
call a method defined in `self.env()` or `Self::env()`.

An example is the following:

```rust
let caller: AccountId = self.env().caller();
```

### Example

```rust
#[cfg(test)]
mod tests {
    // Conventional unit test that works with assertions.
    #[ink::test]
    fn test1() {
        // test code comes here as usual
    }

    // Conventional unit test that returns some Result.
    // The test code can make use of operator-`?`.
    #[ink::test]
    fn test2() -> Result<(), ink::env::Error> {
        // test code that returns a Rust Result type
    }
}
```

## End-to-End (E2E) Tests

E2E testing enables developers to write a test that will not only test the contract in an
isolated manner; instead the contract will be tested _together_ with all components that
will be involved on-chain – so from end to end. This way of testing resembles closely
how the contract will actually behave in production.

As part of the test, the contract will be compiled and deployed to a Substrate node that
is running in the background. ink! offers API functions that enable developers to then
interact with the contract via transactions that they create and submit to the blockchain.

You as a developer can define assertions on the outcome of their transactions, such as checking
for state mutations, transaction failures or incurred gas costs.

Your chain configuration will be tested together with the smart contract. And if your
chain has pallets that are involved with the smart contract execution, those will be
part of the test execution as well.

ink! does not put any requirements on the Substrate node in the background – for example,
you can run a node that contains a snapshot of a live network.

### Example

The following code example illustrates a basic E2E test for the
[flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

```rust
#[ink_e2e::test]
async fn default_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
    // When the function is entered, the contract was already
    // built in the background via `cargo contract build`.
    // The `client` object exposes an interface to interact
    // with the Substrate node.
    
    // given
    let constructor = FlipperRef::new_default();

    // when
    let contract_acc_id = client
        .instantiate("flipper", &ink_e2e::bob(), constructor, 0, None)
        .await
        .expect("instantiate failed")
        .account_id;

    // then
    let get = build_message::<FlipperRef>(contract_acc_id.clone())
        .call(|flipper| flipper.get());
    let get_res = client
        .call(&ink_e2e::bob(), get, 0, None)
        .await
        .expect("get failed");
    assert!(matches!(get_res.return_value(), false));

    Ok(())
}
```

You can run the above test by going to the `flipper` folder in
[the ink! examples directory](https://github.com/use-ink/ink-examples/tree/main).

Before you can run the test, you have to install a Substrate
node with `pallet-contracts`. By default e2e tests require that you install [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node). You do not need to run it in the background since the node is started for each test independently.
To install the latest version:

```sh
cargo install contracts-node --git https://github.com/paritytech/substrate-contracts-node.git
```
If you want to run any other node with `pallet-contracts` you need to change `CONTRACTS_NODE` environment variable:

```sh
export CONTRACTS_NODE="YOUR_CONTRACTS_NODE_PATH"
```

And finally execute the following command to start e2e test execution.

```sh
cargo test --features e2e-tests
```
````

## File: versioned_docs/version-v4/basics/trait-definitions.md
````markdown
---
title: Trait Definitions
slug: /basics/trait-definitions
hide_title: true
---

![Text/trait Title Picture](/img/title/text/trait.svg)

Through the `#[ink::trait_definition]` proc. macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts.

This allows to define shared smart contract interfaces to different concrete implementations.
Note that this ink! trait definition can be defined anywhere, even in another crate!

See our [`ERC20-Trait example contract`](https://github.com/use-ink/ink-examples/blob/main/trait-erc20/lib.rs) 
for an elaborate example which uses trait definitions.

### Example

Defined in the `base_erc20.rs` module.

```rust
#[ink::trait_definition]
pub trait BaseErc20 {
    /// Returns the total supply.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    /// Transfers `amount` from caller to `to`.
    #[ink(message, payable)]
    fn transfer(&mut self, to: AccountId, amount: Balance);
}
```

An ink! smart contract definition can then implement this trait definition as follows:

```rust
#[ink::contract]
mod erc20 {
    use base_erc20::BaseErc20;

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }
    
    impl Erc20 {
        /// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            // implementation ...
        }
    }

    impl BaseErc20 for Erc20 {
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            // implementation ...
        }

        #[ink(message, payable)]
        fn transfer(&mut self, to: AccountId, amount: Balance) {
            // implementation ...
        }
    }
}
```

Calling the above `Erc20` explicitly through its trait implementation can be done just as if it was normal Rust code:

```rust
// --- Instantiating the ERC-20 contract:
//
let mut erc20 = <Erc20 as BaseErc20>::new(1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
let mut erc20 = Erc20::new(1000);

// --- Retrieving the total supply:
//
assert_eq!(<Erc20 as BaseErc20>::total_supply(&erc20), 1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
assert_eq!(erc20.total_supply(), 1000);
```

There are still many limitations to ink! trait definitions and trait implementations.
For example, it is not possible to define associated constants or types or have default implemented methods.
These limitations exist because of technical intricacies, however, please expect that many of those will be tackled in future ink! releases.




Marks trait definitions to ink! as special ink! trait definitions.

There are some restrictions that apply to ink! trait definitions that
this macro checks. Also ink! trait definitions are required to have specialized
structure so that the main [`#[ink::contract]`](https://docs.rs/ink/4.0.0/ink/attr.contract.html) macro can
properly generate code for its implementations.

# Example: Definition

```rust
type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;

#[ink::trait_definition]
pub trait Erc20 {
    /// Returns the total supply of the ERC-20 smart contract.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    // etc.
}
```

# Example: Implementation

Given the above trait definition you can implement it as shown below:

```rust
#[ink::contract]
mod base_erc20 {
    /// We somehow cannot put the trait in the doc-test crate root due to bugs.
    #[ink_lang::trait_definition]
    pub trait Erc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance;
    }

    #[ink(storage)]
    pub struct BaseErc20 {
        total_supply: Balance,
        // etc ..
    }

    impl BaseErc20 {
        /// Constructs a new ERC-20 compliant smart contract using the initial supply.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            Self { total_supply: initial_supply }
        }
    }

    impl Erc20 for BaseErc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            self.total_supply
        }

        // etc ..
    }
}
```
````

## File: versioned_docs/version-v4/basics/upgradeability.md
````markdown
---
title: Upgradeable Contracts
slug: /basics/upgradeable-contracts
hide_title: true
---

![Upgradeable Contract Title Picture](/img/title/upgradeable-contract.svg)

# Upgradeable Contracts

Even though smart contracts are intended to be immutable by design,
it is often necessary to perform an upgrade of a smart contract. 

The developer may need to fix a critical bug or introduce a new feature.
ink! supports different upgrade strategies that we describe on this page.

## Proxy Forwarding

This method relies on the ability of contracts to proxy calls to other contracts.

### Properties

- Forwards any call that does not match a selector of itself to another contract.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the contract to which calls are forwarded.

```
User ---- tx ---> Proxy ----------> Implementation_v0
                     |
                      ------------> Implementation_v1
                     |
                      ------------> Implementation_v2
```

### Example

Our proxy contract will have these 2 storage fields:

```rust
#[ink(storage)]
pub struct Proxy {
    /// The `AccountId` of a contract where any call that does not match a
    /// selector of this contract is forwarded to.
    forward_to: AccountId,
    /// The `AccountId` of a privileged account that can update the
    /// forwarding address. This address is set to the account that
    /// instantiated this contract.
    admin: AccountId,
}
```

We then need a way to change the address of a contract to which we forward calls to
and the actual message selector to proxy the call:

```rust
impl Proxy {
    /// Changes the `AccountId` of the contract where any call that does
    /// not match a selector of this contract is forwarded to.
    ///
    /// # Note
    /// Only one extra message with a well-known selector `@` is allowed.
    #[ink(message, selector = @)]
    pub fn change_forward_address(&mut self, new_address: AccountId) {
        assert_eq!(
            self.env().caller(),
            self.admin,
            "caller {:?} does not have sufficient permissions, only {:?} does",
            self.env().caller(),
            self.admin,
        );
        self.forward_to = new_address;
    }

    /// Fallback message for a contract call that doesn't match any
    /// of the other message selectors.
    ///
    /// # Note:
    ///
    /// - We allow payable messages here and would forward any optionally supplied
    ///   value as well.
    /// - If the self receiver were `forward(&mut self)` here, this would not
    ///   have any effect whatsoever on the contract we forward to.
    #[ink(message, payable, selector = _)]
    pub fn forward(&self) -> u32 {
        ink::env::call::build_call::<ink::env::DefaultEnvironment>()
            .call(self.forward_to)
            .transferred_value(self.env().transferred_value())
            .call_flags(
                ink::env::CallFlags::default()
                    .set_forward_input(true)
                    .set_tail_call(true),
            )
            .invoke()
            .unwrap_or_else(|err| {
                panic!(
                    "cross-contract call to {:?} failed due to {:?}",
                    self.forward_to, err
                )
            });
        unreachable!(
            "the forwarded call will never return since `tail_call` was set"
        );
    }
}
```

:::tip

Take a look at the selector pattern in the attribute macro: by declaring `selector = _`
we specify that all other messages should be handled by this message selector.

:::

Using this pattern, you can introduce other message to your proxy contract.
Any messages that are not matched in the proxy contract 
will be forwarded to the specified contract address.

## Delegating execution to foreign Contract Code with `delegate_call`

Similar to proxy-forwarding we can delegate execution to another code hash uploaded on-chain.

### Properties 

- Delegates any call that does not match a selector of itself to another contract.
- Code is required to be uploaded on-chain, but is not required to be instantiated.
- State is stored in the storage of the original contract which submits the call.
- Storage layout must be identical between both contract codes.

```
                                (Storage of Contract A)
User ---- tx ---> Contract A ----------> Code_v0
                     |                     ^
                     |                     |
                     ⌊_____________________⌋
                    Storage is delegated to
```

### Example

Suppose we have defined of the caller contract as following:

```rust
#[ink(storage)]
pub struct Delegator {
    addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
    counter: i32,
}
```

Then let's define two messages that separately calls to update `addresses` and `counter` separately:

```rust
/// Increment the current value using delegate call.
#[ink(message)]
pub fn inc_delegate(&self, hash: Hash) {
    let selector = ink::selector_bytes!("inc");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(hash)
        // if the receiver is set to `&mut self`,
        // then any changes made in `inc_delegate()` before the delegate call
        // will be persisted, and any changes made within delegate call will be discarded.

        // Therefore, it is advised to use `&self` receiver with a mutating delegate call,
        // or `.set_tail_call(true)` to flag that any changes made by delegate call should be flushed into storage. 
        // .call_flags(CallFlags::default().set_tail_call(true))
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}

/// Adds entry to `addresses` using delegate call.
/// Note that we don't need `set_tail_call(true)` flag
/// because `Mapping` updates the storage instantly on-demand.
#[ink(message)]
pub fn add_entry_delegate(&mut self, hash: Hash) {
    let selector = ink::selector_bytes!("append_address_value");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(hash)
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}
```

ink! provides an intuitive call builder API for you to compose your call.
As you can see that `inc_delegate()` can be built a call in slightly different manner than `add_entry_delegate()`.
That's because if the delegated code modifies layout-full storage
(i.e. it contains at least non-`Lazy`, non-`Mapping` field),
either the receiver should be set to `&self` or the `.set_tail_call(true)` flag of `CallFlags` needs to be specified, and the storage layouts must match.

This is due to the way ink! execution call stack is operated. Non-`Lazy`, non-`Mapping` field are first loaded into the memory.
If `&mut self` receiver is used, then when delegate call is completed, the original state before the call will be persisted and flushed into the storage.
Therefore, `.set_tail_call(true)` needs to be set to indicate that, that delegate call's storage context is the final (i.e. _tail) one that needs to be flushed.
This also makes any code after the delegate call unreachable.
With `&self` receiver, `.set_tail_call(true)` is not required since no storage flushing happens at the end of the original caller's function.
(see [Stack Exchange Answer](https://substrate.stackexchange.com/a/3352/3098) for details on how changes are flushed into storage).



:::note Key compatibility
If the delegated code modifies `Lazy` or `Mapping` field, the keys must be identical and `.set_tail_call(true)` is optional 
regardless of the function receiver.
This is because `Lazy` and `Mapping` interact with the storage directly instead of loading and flushing storage states.
:::

Now let's look at the "delegatee" code:

```rust
#[ink::contract]
pub mod delegatee {
    use ink::storage::{
        traits::ManualKey,
        Mapping,
    };
    #[ink(storage)]
    pub struct Delegatee {
        // `ManualKey` must be the same as in the original contract.
        addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
        counter: i32,
        // Uncommenting below line will break storage compatibility.
        // flag: bool,
    }

    impl Delegatee {
        /// When using the delegate call. You only upload the code of the delegatee
        /// contract. However, the code and storage do not get initialized.
        ///
        /// Because of this. The constructor actually never gets called.
        #[allow(clippy::new_without_default)]
        #[ink(constructor)]
        pub fn new() -> Self {
            unreachable!(
                "Constructors are not called when upgrading using `set_code_hash`."
            )
        }

        /// Increments the current value.
        #[ink(message)]
        pub fn inc(&mut self) {
            self.counter = self.counter.checked_add(2).unwrap();
        }

        /// Adds current value of counter to the `addresses`
        #[ink(message)]
        pub fn append_address_value(&mut self) {
            let caller = self.env().caller();
            self.addresses.insert(caller, &self.counter);
        }
    }
}
```

As you can see, delegatee's code looks like a normal ink! Smart Contract with some important features:
- Storage layout is identical to the original contract's storage
- `addresses` mapping key is identical
- Constructor does not have any logic, as the code is never instantiated. (It can be, but plays no effect on the execution)


## Note on the usage of wildcard selectors

When working with cross-contract calls, developers are required to be aware of the some important changes.


Since ink! 5 we have restricted the usage of the wildcard selector due to 
[security reasons](https://blog.openzeppelin.com/security-review-ink-cargo-contract#custom-selectors-could-facilitate-proxy-selector-clashing-attacks).

:::danger Beware
Due to [IIP-2](https://github.com/use-ink/ink/issues/1676), ink! only allows
to contain a single message with a well-known selector `@` when the other message
with the wildcard selector `_` is defined.
:::

See [example](https://github.com/use-ink/ink-examples/tree/main/wildcard-selector)
for illustration on how it can be used in practice.

## Note on `CallFlags`

`CallFlags` provide fine-grained control over the cross-contract execution.

Some useful properties:
- Re-entry is disable by default. It can be enabled with `.set_allow_reentry(true)` flag.
- The call execution context is returned to the caller by default. You can finish execution in the callee with `.set_tail_call(true)` flag.
- `.set_clone_input(true)` clones the input of the caller's messages. It can be used with when `.set_tail_call(false)`.
- `.set_forward_input(true)` consumes the input of the caller's message which can be used after.  It can be used with when `.set_tail_call(true)`. 



## Replacing Contract Code with `set_code_hash()`

Following [Substrate's runtime upgradeability](https://docs.substrate.io/maintain/runtime-upgrades/) 
philosophy, ink! also supports an easy way to update your contract code via the special function 
[`set_code_hash()`](https://use-ink.github.io/ink/ink_env/fn.set_code_hash.html).

### Properties

- Updates the contract code using `set_code_hash()`. 
This effectively replaces the code which is executed for the contract address.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the originally instantiated contract.


### Example

Just add the following function to the contract you want to upgrade in the future.

```rust 
/// Modifies the code which is used to execute calls to this contract address (`AccountId`).
///
/// We use this to upgrade the contract logic. We don't do any authorization here, any caller
/// can execute this method. In a production contract you would do some authorization here.
#[ink(message)]
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {
        panic!(
            "Failed to `set_code_hash` to {:?} due to {:?}",
            code_hash, err
        )
    });
    ink::env::debug_println!("Switched code hash to {:?}.", code_hash);
}
```

### Storage Compatibility

It is the developer's responsibility to ensure 
that the new contract's storage is compatible with the storage of the contract that is replaced.

:::danger Beware

You should not change the order in which the contract state variables are declared, nor their type!

Violating the restriction will not prevent a successful compilation,
but will result in **the mix-up of values** or **failure to read the storage correctly**.
This can be a result of severe errors in the application utilizing the contract.

:::


If the storage of your contract looks like this:
```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
    y: bool,
}
```

The procedures listed below will make it ***invalid***

Changing the order of variables:

```rust
#[ink(storage)]
pub struct YourContract {
    y: bool,
    x: u32,
}
```

Removing an existing variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
}
```

Changing the type of a variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u64,
    y: bool,
}
```

Introducing a new variable before any of the existing ones:

```rust
#[ink(storage)]
pub struct YourContract {
    z: Vec<u32>,
    x: u32,
    y: bool,
}
```

### A little note on the determinism of contract addresses

:::note

If your contract utilizes this approach, it no-longer holds a deterministic address assumption.
You can no longer assume that a contract address identifies a specific code hash.
Please refer to [the issue](https://github.com/paritytech/substrate/pull/10690#issuecomment-1025702389) 
for more details.

:::

## Examples

Examples of upgradable contracts can be found in the 
[ink! repository](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts).
````

## File: versioned_docs/version-v4/brand-assets/cargo-contract.md
````markdown
---
title: cargo-contract
slug: /brand-assets/cargo-contract
hide_table_of_contents: true
---

## `cargo-contract` Logo

The following is the logo for our command-line tool [`cargo-contract`](https://github.com/use-ink/cargo-contract).

<div className="black-container">
    <img src="/img/cargo-contract-logo.svg" alt="cargo-contract logo" className="brand-asset" />
</div>

Download here: [`cargo-contract-logo.svg`](/img/cargo-contract-logo.svg).
````

## File: versioned_docs/version-v4/brand-assets/community-badges.md
````markdown
---
title: Community Badges
slug: /brand-assets/community-badges
hide_table_of_contents: false
---

If you have a public repository with an ink! contract it would be awesome
if you could add one of those!

## Built _with_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)
```

## Built _for_ ink!
### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/built-for-ink-flat.svg)](https://github.com/use-ink/ink)
```
````

## File: versioned_docs/version-v4/brand-assets/ink.md
````markdown
---
title: ink!
slug: /brand-assets/ink
hide_table_of_contents: false
---

Our primary logo is our squid mascot (named "Squink") plus our text logo.

Please use this combined logo preferably.

## Black Version

<div className="white-container">
    <img src="/img/ink-logo-with-squid-black.svg" alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-black.svg`](/img/ink-logo-with-squid-black.svg).

## White Version

<div className="black-container">
    <img src="/img/ink-logo-with-squid-white.svg" alt="The ink! logo with Squink" className="brand-asset" />
</div>

Download here: [`ink-logo-with-squid-white.svg`](/img/ink-logo-with-squid-white.svg).

## Individual Logo Parts

### The ink! mascot: Squink

<div className="black-container">
    <img src="/img/ink-squink.svg" alt="Squink ‒ the ink! mascot" className="brand-asset" />
</div>

Download here: [`ink-squink.svg`](/img/ink-squink.svg).

### Text Logo (black)

<div className="white-container">
    <img src="/img/text-black.svg" alt="ink! logo in black" className="brand-asset" />
</div>

Download here: [`text-black.svg`](/img/text-black.svg).

### Text Logo (white)

<div className="black-container">
    <img src="/img/text-white.svg" alt="ink! logo in white" className="brand-asset" />
</div>

Download here: [`text-white.svg`](/img/text-white.svg).

### Text Logo (glow)

<div className="black-container">
    <img src="/img/text-glow.svg" alt="ink! logo glowing" className="brand-asset" />
</div>

Download here: [`text-glow.svg`](/img/text-glow.svg).
````

## File: versioned_docs/version-v4/brand-assets/stickers.md
````markdown
---
title: Stickers
slug: /brand-assets/stickers
hide_table_of_contents: false
---

<div>
    <img src="/img/stickers/ink-stickers-2022.svg" alt="ink! Stickers" className="brand-asset-sticker" />
</div>

Download here: [`ink-stickers-2022.svg`](/img/stickers/ink-stickers-2022.svg).
````

## File: versioned_docs/version-v4/datastructures/custom.md
````markdown
---
title: Custom Data Structures
slug: /datastructures/custom-datastructure
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Custom Data Structures

The `ink_storage` crate provides useful utilities and data structures to organize and
manipulate the contract's storage. However, contract authors should know that they can
also create their own custom data structures.

## Using custom types on storage
Any custom type wanting to be compatible with ink! storage must implement the
[`Storable`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.Storable.html)
trait, so it can be SCALE
[`encoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Encode.html)
and
[`decoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Decode.html).
Additionally, the traits
[`StorageLayout`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.StorageLayout.html)
and [`TypeInfo`](https://docs.rs/scale-info/2.3.1/scale_info/trait.TypeInfo.html)
are required as well. But don't worry, usually these traits can just be derived:

```rust
/// A custom type that we can use in our contract storage
#[derive(scale::Decode, scale::Encode)]
#[cfg_attr(
    feature = "std",
    derive(scale_info::TypeInfo, ink::storage::traits::StorageLayout)
)]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Even better: there is a macro
[`#[ink::storage_item]`](https://docs.rs/ink_macro/4.0.0/ink_macro/attr.storage_item.html),
which derives all necessary traits for you. If there is no need to implement any special
behavior, the above code example can be simplified further as follows:

```rust
/// A custom type that we can use in our contract storage
#[ink::storage_item]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Naturally, you can as well implement any required trait manually. Please directly refer to
the relevant trait documentations for more information.

:::note

The `#[ink::storage_item]` macro is responsible for storage key calculation of 
non-[`Packed`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.Packed.html) 
types. Without it, the key for non-`Packed` fields will be zero. Using this macro is 
necessary if you don't plan to use a
[`ManualKey`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/struct.ManualKey.html) 
on a non-`Packed` type.

Types with custom implementations of the ink! storage traits can still use this macro only 
for key calculation by disabling the derives: `#[ink::storage_item(derive = false)]`.

:::

## Generic storage fields

It is possible to use generic data types in your storage, as long as any generic type
satisfies the required storage trait bounds. In fact, we already witnessed this in the
previous sections about the
[`Mapping`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html).

Let's say you want a mapping where accessing a non-existent key should just return
it's default value, akin to how mappings work in Solidity. Additionally, you want to know
how many values there are in the mapping (its length). This could be implemented as a
thin wrapper around the ink! `Mapping` as follows:

```rust
/// Values for this map need to implement the `Default` trait.
/// Naturally, they also must be compatible with contract storage.
/// Note that the underlying `Mapping` type only supports `Packed` values.
#[ink::storage_item]
pub struct DefaultMap<K, V: Packed + Default> {
    values: Mapping<K, V>,
    length: u32,
}

impl<K: Encode, V: Packed + Default> DefaultMap<K, V> {
    /// Accessing non-existent keys will return the default value.
    pub fn get(&self, key: &K) -> V {
        self.values.get(key).unwrap_or_default()
    }

    /// Inserting into the map increases its length by one.
    pub fn set<I, U>(&mut self, key: I, value: &U)
    where
        I: scale::EncodeLike<K>,
        E: scale::EncodeLike<V> + Storable,
    {
        if self.values.insert(key, value).is_none() {
            self.length += 1
        }
    }

    /// Removing a value from the map decreases its length by one.
    pub fn remove(&mut self, key: &K) {
        if self.values.take(key).is_some() {
            self.length -= 1
        }
    }

    /// Return how many values the mapping contains
    pub fn len(&self) -> u32 {
        self.length
    }
}

/// `DefaultMap` is compatible with contract storage.
#[ink(storage)]
pub struct MyContract {
    my_map: DefaultMap<BlockNumber, Balance>,
}
```

:::caution

Generic data types may substantially increase your contracts overall code size, making it
more costly to store on-chain.

The reason for this is [Rust's monomorphization](https://rustwasm.github.io/twiggy/concepts/generic-functions-and-monomorphization.html).

:::
````

## File: versioned_docs/version-v4/datastructures/mapping.md
````markdown
---
title: Working with Mapping
slug: /datastructures/mapping
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Working with Mapping

In this section we demonstrate how to work with ink! [`Mapping`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html).

Here is an example of a mapping from a user to a `Balance`:

```rust
#[ink(storage)]
pub struct MyContract {
    /// Assign a balance to every account.
    balances: ink::storage::Mapping<AccountId, Balance>,
}
```

This means that for a given key, you can store a unique instance of a value type. In this
case, each "user" gets credited their own balance.

## Example: Using a `Mapping`

The following example contract utilizes a `Mapping` so that anyone can deposit and withdraw
balance for their own account:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod mycontract {
    use ink::storage::Mapping;

    #[ink(storage)]
    pub struct MyContract {
        /// Assign a balance to every account ID
        balances: Mapping<AccountId, Balance>,
    }

    impl MyContract {
        /// Constructor to initialize the contract with an empty mapping.
        #[ink(constructor, payable)]
        pub fn new() -> Self {
            let balances = Mapping::default();
            Self { balances }
        }

        /// Retrieve the balance of the caller.
        #[ink(message)]
        pub fn get_balance(&self) -> Option<Balance> {
            let caller = self.env().caller();
            self.balances.get(caller)
        }

        /// Credit more money to the contract.
        #[ink(message, payable)]
        pub fn transfer(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap_or(0);
            let endowment = self.env().transferred_value();
            self.balances.insert(caller, &(balance + endowment));
        }

        /// Withdraw all your balance from the contract.
        pub fn withdraw(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap();
            self.balances.remove(caller);
            self.env().transfer(caller, balance).unwrap()
        }
    }
}

```

## Considerations when using the `Mapping` type

One of the main purposes of the ink! `Mapping` is to allow storing a lot of values.

:::note

There are many additional data structures accessible under `ink::prelude::collections`,
such as `HashMap` or `BTreeMap` (to name a few). Note that these data structures all exhibit
`Packed` storage loading behavior, as opposed to the ink! `Mapping`!

:::

### Storage loading behavior

Each `Mapping` value lives under it's own storage key. Briefly, this means that `Mapping`s
are lazily loaded in ink!. In other words, if your message only accesses a single key of a
mapping, it will not load the whole mapping but only the value being accessed.

```rust
// This causes only a single storage access and the decoding of a single "MyValue" struct,
// no matter how many elements there are inside the mapping.
let foo: MyValue = my_mapping.get(0)?;

for n in 0..5 {
    // This causes a storage access and a decoding operation for each loop iteration.
    // It is not possible to "fetch" all key/value pairs directly at once.
    let bar: MyValue = my_mapping.get(n)?;
}
```

Furthermore, it follows that mapping values do not have a contiguous storage layout, and it is
not possible to iterate over the contents of a map.


### Updating values

The attentive reader may have noticed that accessing mapping values via the `Mapping::get()`
method will result in an owned value (a local copy), as opposed to a direct reference
into the storage. Changes to this value won't be reflected in the contract's storage
"automatically". To avoid this common pitfall, the value must be inserted again at the same
key after it was modified. The `transfer` function from above example illustrates this:

```rust
pub fn transfer(&mut self) {
    let caller = self.env().caller();
    // `balance` is a local value and not a reference to the value on storage!
    let balance = self.balances.get(caller).unwrap_or(0);
    let endowment = self.env().transferred_value();
    // The following line of code would have no effect to the balance of the
    // caller stored in contract storage:
    //
    // balance += endowment;
    //
    // Instead, we use the `insert` function to write it back like so:
    self.balances.insert(caller, &(balance + endowment));
}
```
````

## File: versioned_docs/version-v4/datastructures/overview.md
````markdown
---
title: Overview
slug: /datastructures/overview
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Overview

The `ink_storage` crate acts as the standard storage library for ink! smart contracts.
At the moment it provides two primitives for interacting with storage,
[`Mapping`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html)
and [`Lazy`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Lazy.html).

`Mapping` is a mapping of key-value pairs directly to the contract storage. It is very
similar to traditional hash tables and comparable to the `mapping` type Solidity offers.
As a core ingredient to the ink! language, its main advantage is being simple and
lightweight: It favors being efficient in terms of gas costs and code size
over providing a lot of high-level functionality found in other implementations
like the `ink::prelude::collections::HashMap` type.
Overall, the ink! `Mapping` will be solid choice for most contracts. Moreover, smart
contracts developers can implement advanced features themselves.

`Lazy` is a wrapper type that can be used over any other storage compatible type.
This allows smart contract developers fine-grained manual control over the layout of
the contract storage by assigning a separate storage cell for the field. For example,
it can be used to prevent the contract from eagerly loading large storage fields
during each contract call.
Conceivably, it may be desirable to change certain aspects on how your contract deals with
its storage variables. You can find out more about this in the section about the ink!
[Storage Layout](./storage-layout.md).
````

## File: versioned_docs/version-v4/datastructures/storage-in-metadata.md
````markdown
---
title: Metadata Format
slug: /datastructures/storage-in-metadata
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Metadata Format

The storage layout of a contract is reflected inside the metadata. It allows third-party
tooling to work with contract storage and can also help to better understand the storage
layout of any given contract.

Given a contract with the following storage:

```rust
#[ink(storage)]
pub struct MyContract {
    balance: Balance,
    block: BlockNumber,
    lazy: Lazy<bool>,
}
```

The storage will be reflected inside the metadata as like follows:

```json
"root": {
  "layout": {
    "struct": {
      "fields": [
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 0
            }
          },
          "name": "balance"
        },
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 1
            }
          },
          "name": "block"
        },
        {
          "layout": {
            "root": {
              "layout": {
                "leaf": {
                  "key": "0xb1f4904e",
                  "ty": 2
                }
              },
              "root_key": "0xb1f4904e"
            }
          },
          "name": "lazy"
        }
      ],
      "name": "MyContract"
    }
  },
  "root_key": "0x00000000"
}
```

We observe that the storage layout is represented as a tree, where tangible storage values
end up inside a `leaf`. Because of
[`Packed`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.Packed.html)
encoding, leafs can share the same storage key, and
in order to reach them you'd need to fetch and decode the whole storage cell under this key.

A `root_key` is meant to either be used to directly access a `Packed` storage field
or to serve as the base key for calculating the actual keys needed to access values in
non-`Packed` fields (such as `Mapping`s).

## Storage key calculation for ink! `Mapping` values

Base storage keys are always 4 bytes in size. However, the storage API of the contracts
pallet supports keys of arbitrary length. In order to reach a mapping value, the storage
key of said value is calculated at runtime.

The formula to calculate the base storage key `S` used to access a mapping value under the
key `K` for a mapping with base key `B` can be expressed as follows:

```
S = scale::encode(B) + scale::encode(K)
```

Where the base key `B` is the `root_key` (of type `u32`) found in the contract metadata.

In words, SCALE encode the base (root) key of the mapping and concatenate it with the
SCALE encoded key of the mapped value to obtain the actual storage key used to
access the mapped value.

Given the following contract storage, which maps accounts to a balance:

```rust
#[ink(storage)]
pub struct Contract {
    roles: Mapping<AccountId, Balance, ManualKey<0x12345678>>,
}
```

Now let's suppose we are interested in finding the balance for the account 
`5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY`. The storage key is calculated as follows:

1. SCALE encode the base key of the mapping (`0x12345678u32`), resulting in `0x78563412`
2. SCALE encode the `AccountId`, which will be 
   `0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.
   Note that you'll need to convert the SS58 into a `AccountId32` first.
3. Concatenating those two will result in the key 
   `0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.

```rust
let account_id = "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY";
let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
let storage_key = &(0x12345678u32, account).encode();
println!("0x{}", hex::encode(storage_key));
// 0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d
```

## Accessing storage items with the `contractsApi` runtime call API

There are two ways to query for storage fields of smart contracts from outside a contract.
Both methods are accessible via the [`polkadot-js`](https://polkadot.js.org/apps/) web UI.

The straight forward way to query a contracts storage is via a
[`runtime API`](https://polkadot.js.org/apps/#/runtime) call, using the `contractsApi`
endpoint provided by the contracts pallet. The endpoint provides a `getStorage` method,
which just expects a contract address and a storage key as arguments.

For example, to access the root storage struct under the key `0x00000000` of a contract,
just specify the contract's address and the storage key `0x00000000` as-is. The API call
will return the scale-encoded root storage struct of the contract.

## Accessing storage items with the `childState` RPC call API

Under the hood, each contract gets its own
[child trie](https://paritytech.github.io/substrate/master/frame_support/storage/child/index.html), where its storage items are actually stored.

Additionally, the contracts pallet uses the
[`Blake2 128 Concat`](https://paritytech.github.io/substrate/master/frame_support/struct.Blake2_128Concat.html)
[`Transparent hashing algorithm`](https://docs.substrate.io/build/runtime-storage/#transparent-hashing-algorithms)
to calculate storage keys for any stored item inside the child trie.
You'll need to account for that as well.

With that in mind, to directly access storage items of any on-chain contract using a
childState [`RPC call`](https://polkadot.js.org/apps/#/rpc), you'll need the following:
- The child trie ID of the contract, represented as a [`PrefixedStorageKey`](https://docs.rs/sp-storage/10.0.0/sp_storage/struct.PrefixedStorageKey.html)
- The hashed storage key of the storage field

### Finding the contracts child trie ID

The child trie ID is the `Blake2_256` hash of the contracts instantiation nonce
concatenated to it's `AccountId`. You can find it in
[`polkadot-js chainstate query interface`](https://polkadot.js.org/apps/#/chainstate),
where you need to execute the `contracts_contractInfoOf` state query.

It can also be calculate manually according to the following code snippet. The
instantiation note of the contract must be still be known. You can get it using the
`contracts_nonce` chain state query in polkadot-js UI.

```rust
use sp_core::crypto::Ss58Codec;
use parity_scale_codec::Encode;

// Given our contract ID is 5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4
let account: AccountId32 =
    Ss58Codec::from_string("5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4").unwrap();
// Given our instantiation nonce was 1
let nonce: u64 = 1;

// The child trie ID can be calculated as follows:
let trie_id = (&account, nonce).using_encoded(Blake2_256::hash);
```

### Calculate the `PrefixedStorageKey` from the child trie ID
A `PrefixedStorageKey` based on the child trie ID can be constructed using the `ChildInfo`
primitive as follows:

```rust
use sp_core::storage::ChildInfo;
let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
```

### Calculate the storage key using transparent hashing

Finally, we calculate the hashed storage key of the storage item we are wanting to access.
The algorithm is simple: `Blake2_128` hash the storage key and then concatenate the unhashed
key to the hash. Given you want to access the storage item under the `0x00000000`,
it will look like this in code:

```rust
use frame_support::Blake2_128Concat;

// The base key is 0x00000000
let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
```

### A full example

Let's recap the last few paragraphs into a full example. Given:

* A contract at address `5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4`
* With instantiation nonce of `1`
* The root storage struct is to be found at base key `0x00000000`

The following Rust program demonstrates how to calculate the `PrefixedStorageKey` of the
contracts child trie, as well as the hashed key for the storage struct, which can then be
used with the `chilstate` RPC endpoint function `getStorage` in polkadot-js to receive
the root storage struct of the contract:

```rust
use frame_support::{sp_runtime::AccountId32, Blake2_128Concat, Blake2_256, StorageHasher};
use parity_scale_codec::Encode;
use sp_core::{crypto::Ss58Codec, storage::ChildInfo};
use std::ops::Deref;

fn main() {
    // Find the child storage trie ID
    let account_id = "5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4";
    let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
    let instantiation_nonce = 1u64;
    let trie_id = (account, instantiation_nonce).using_encoded(Blake2_256::hash);
    assert_eq!(
        hex::encode(trie_id),
        "2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b"
    );

    // Calculate the PrefixedStorageKey based on the trie ID
    let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
    println!("0x{}", hex::encode(prefixed_storage_key.deref()));
    // 0x3a6368696c645f73746f726167653a64656661756c743a2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b

    // Calculate the storage key using transparent hashing
    let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
    println!("0x{}", hex::encode(&storage_key));
    // 0x11d2df4e979aa105cf552e9544ebd2b500000000
}
```
````

## File: versioned_docs/version-v4/datastructures/storage-layout.md
````markdown
---
title: Storage Layout
slug: /datastructures/storage-layout
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Storage Layout

Smart contract authors are given some flexibility in regards on how they want to organize
the storage layout of their contracts.
Let's dive deeper into the concepts behind ink! storage to get a better understanding
of some of its implications and limitations.

## Storage Organization

The following schema depicts the storage which is exposed
to ink! by the contracts pallet:

<div class="schema">
    <img src="/img/kv.svg" alt="Storage Organization: Layout" />
</div>

Storage data is always encoded with the
[`SCALE`](https://docs.substrate.io/reference/scale-codec/) codec.
The storage API operates by storing and loading entries into and from a single storage
cells, where each storage cell is accessed under its own dedicated storage key. To some
extent, the storage API works similar to a traditional key-value database.

## Packed vs Non-Packed layout

Types that can be stored entirely under a single storage cell are considered
[`Packed`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/trait.Packed.html).
By default, ink! tries to store all storage struct fields under a single storage cell.
Consequentially, with a `Packed` storage layout, any message interacting with the contract
storage will always need to operate on the entire contract storage struct.

For example, if we have a somewhat small contract storage struct consisting of only a few
tiny fields, pulling everything from the storage inside every message is not
problematic. It may even be advantageous - especially if we expect most messages to
interact with most of the storage fields.

On the other hand, this can get problematic if we're storing a large `ink::prelude::vec::Vec`
in the contract storage but provide messages that do not need to read and write from this
`Vec`. In that scenario, each and every contract message bears runtime overhead by dealing
with that `Vec`, regardless whether they access it or not. This results in extra gas costs.
To solve this problem we need to turn our storage into a non-packed layout somehow.

:::caution

If any type exhibiting `Packed` layout gets large enough (an ever-growing `Vec` might be
a prime candidate for this), it will break your contract.
This is because for encoding and decoding storage items, there is a buffer with only limited
capacity (around 16KB in the default configuration) available. This means any contract
trying to decode more than that will trap! If you are unsure about the potential size a
data structure might get, consider using an ink! `Mapping`, which can store an arbitrary
number of elements, instead.

:::

## Eager Loading vs. Lazy Loading
ink! provides means of breaking the storage up into smaller pieces, which can be loaded
on demand, with the
[`Lazy`](https://use-ink.github.io/ink/ink/storage/struct.Lazy.html) primitive.
Wrapping any storage field inside a `Lazy` struct makes the storage
struct in which that field appears also
non-`Packed`, preventing it from being eagerly loaded during arbitrary storage operations:

<div class="schema">
    <img src="/img/storage-layout.svg" alt="Storage Organization: Layout with a Lazy field" />
</div>

Note that in above illustration, the key of `0x12345678` just serves as an example; we'll
learn more about storage key calculation
[later in this chapter](#manual-vs-automatic-key-generation).

The following example demonstrates how we can solve the problem introduced in the above
section. You'll notice that for the lazily loaded storage field, we now work with getters
and setters to access and modify the underlying storage value:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

#[ink::contract]
mod mycontract {
    use ink::prelude::vec::Vec;
    use ink::storage::Lazy;

    #[derive(Default)]
    #[ink(storage)]
    pub struct MyContract {
        tiny_value: Balance,
        /// This vector might get large and expensive to work with.
        /// We want to enforce a non-`Packed` storage layout.
        large_vec: Lazy<Vec<Balance>>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self::default()
        }

        /// Because `large_vec` is loaded lazily, this message is always cheap.
        #[ink(message)]
        pub fn get_balance(&self) -> Balance {
            self.tiny_value
        }

        /// Lazy fields like `large_vec` provide `get()` and `set()` storage operators.
        #[ink(message)]
        pub fn add_balance(&mut self, value: Balance) {
            let mut balances = self.large_vec.get_or_default();
            balances.push(value);
            self.large_vec.set(&balances);
        }
    }
}
```

:::caution

`ink::prelude::vec::Vec`'s are always loaded in their entirety. This is because all elements
of the `ink::prelude::vec::Vec` live under a single storage key. Wrapping the
`ink::prelude::vec::Vec` inside `Lazy`, like the
provided example above does, has no influence on its inner layout. If you are dealing with
large or sparse arrays on contract storage, consider using a `Mapping` instead.

:::

## Manual vs. Automatic Key Generation

By default, keys are calculated automatically for you, thanks to the
[`AutoKey`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/struct.AutoKey.html)
primitive. They'll be generated at compile time and ruled out for conflicts.
However, for non-`Packed` types like `Lazy` or the `Mapping`, the
[`ManualKey`](https://docs.rs/ink_storage_traits/4.0.0/ink_storage_traits/struct.ManualKey.html)
primitive allows manual control over the storage key of a field like so:

```rust
#[ink(storage)]
pub struct MyContract {
    /// The storage key for this field is always `0x0000007f`
    inner: Lazy<bool, ManualKey<127>>,
}
```

This may be advantageous: Your storage key will always stay the same, regardless of
the version of your contract or ink! itself (note that the key calculation algorithm may
change with future ink! versions).

:::tip

Using `ManualKey` instead of `AutoKey` might be especially desirable for upgradable
contracts, as using `AutoKey` might result in a different storage key for the same field
in a newer version of the contract. This may break your contract after an upgrade 😱!

:::

The storage key of the contracts root storage struct defaults to `0x00000000`.  However,
contract developers can set the key to an arbitrary 4 bytes value by providing it a
`ManualKey` like so:

```rust
/// Manually set the root storage key of `MyContract` to be `0xcafebabe`.
#[ink(storage)]
pub struct MyContract<KEY: StorageKey = ManualKey<0xcafebabe>> {
    value: bool,
}
```

## Considerations

It might be worthwhile to think about the desired storage layout of your contract. While
using a `Packed` layout will keep your contracts overall code size smaller, it can cause
unnecessarily high gas costs. Thus, we consider it a good practice to break up large
or complex storage layouts into reasonably sized distinct storage cells.

:::note

ink! `Mapping`s are always non-`Packed` and loaded lazily, one key-value pair at the time.

:::
````

## File: versioned_docs/version-v4/examples/contracts.md
````markdown
---
title: Smart Contracts
slug: /examples/smart-contracts
---

We have a repository <a href="https://github.com/use-ink/ink-examples/tree/main">`ink-examples`</a>,
in which you find a number of contracts written in ink!.
Some of the most interesting ones:

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src="/img/icons/flipper.svg" width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src="/img/icons/erc20.svg" width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src="/img/icons/nft.svg" width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br/>

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src="/img/icons/upgradable.svg" width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src="/img/icons/multisig.svg" width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src="/img/icons/rand-extension.svg" width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>

<br/>

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator"><img src="/img/icons/delegator.svg" width="100" /></a>
        <p>
            Cross-contract calls.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/trait-erc20"><img src="/img/icons/trait-erc20.svg" width="100" /></a>
        <p>
            Implements an <code>Erc20</code> trait.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/trait-erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/dns"><img src="/img/icons/dns.svg" width="100" /></a>
        <p>
            Simple <code>DomainNameService</code>.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/dns">» view example</a>
        </p>
    </div>
</div>

<br/>

If not noted otherwise in the readme, to build a single example navigate to the root of
the example and run:

```bash
cargo contract build
```

As a result you'll get a file `target/<example-name>.wasm` file, a `<example-name>.json` file
and a `<example-name>.contract` file in the `target/` folder of your contract.
The `.contract` file combines the Wasm and metadata into one file and needs to be used
when deploying the contract.

For further information, please have a look at the
[Deploy your Contract](../getting-started/deploying.md) section.
````

## File: versioned_docs/version-v4/examples/dapps.md
````markdown
---
title: DApps
slug: /examples/dapps
hide_title: true
---

![Balloons 2 Title Picture](/img/title/balloons-2.svg)

# DApps

We'll point to a couple full-stack dApp examples here.
These can serve as inspiration for how to create a frontend for your
smart contract.

Three popular libraries for building frontends are:

- [`polkadot-js/api`](https://github.com/polkadot-js/api) a low-level TypeScript API.
- [useInkathon](https://github.com/scio-labs/use-inkathon) a React hooks library.

## INK!athon

[INK!athon](https://inkathon.xyz/) is a full-stack dApp boilerplate project consisting
of an ink! smart contract and a React frontend using the
[useInkathon](https://github.com/scio-labs/use-inkathon) hooks library.

## link!

link! is a URL shortener dApp. It consists of a frontend and an ink! contract.

link! uses [`polkadot-js/api`](https://github.com/polkadot-js/api) under the hood.
The entire source code (contract + frontend) is located here:
[https://github.com/use-ink/link](https://github.com/use-ink/link).

You can view an online demo of the dApp here: [https://tiny.ink](https://tiny.ink).

To create new short links you need `ROC` tokens from our testnet.
See [here](../testnet/overview.md) for how to get those.
````

## File: versioned_docs/version-v4/faq/faq.md
````markdown
---
title: Frequently Asked Questions
hide: true
slug: /faq
hide_table_of_contents: true
---

![Faq Title Picture](/img/title/faq.svg)

# Frequently Asked Questions

### Who is "Squink"?

<img src="/img/ink-squink.svg" alt="Squink ‒ the ink! mascot" className="squid" />
This little cute purple squid is Squink.<br/><br/>

Squink is the mascot of ink! and guides new users and adventurers through our presentations
workshops and tutorials. It also has a romance with Rust's mascot, Ferris.

Generally it is very friendly and open to learning new Rustaceans but be aware to never upset
it by taking away dots from the word ink! by spelling it incorrectly!
It really is into dots. Stories tell that it demanded the spelling of ink! with as many dots as possible.

<h3 id="correct-spelling">Is it "ink" or "ink!"? What does the "!" stand for?</h3>

The correct spelling is _ink!_ ‒ with a lowercase "i" and an exclamation mark at the end.
The history here is that:

* …in the very first iteration ink! was originally a [declarative Rust macro](https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming). A contract was invoked by writing `ink!{ … }`.
* …there is a real-world analogy here of writing a paper contract using ink.
* …we wanted to have as many DOTs as possible in the name 😉.
* …the symmetry of the top and bottom dot of i and ! is aesthetically pleasing 🌻.

So please don't make poor Squink cry having to read !ink, ink, Ink!, or Ink.

<center>
<img src="/img/sad-squid.svg" alt="Squink ‒ the ink! mascot" width="300" />
</center>

### What's ink!'s relationship to Substrate/Polkadot?

- Substrate is a modular framework to build decentralized applications on top of blockchain technology.
- Polkadot is a layer-0 blockchain built using Substrate that allows to orchestrate an entire
fleet of other blockchains to join forces and communicate with each other.
- Blockchains built with Substrate can include the so-called `pallet-contracts` module in order to
allow instantiating and executing smart contracts.

ink! was built to allow users to write smart contracts in Rust targeting blockchains built by
Substrate that have the aforementioned `pallet-contracts` included.

While ink! is currently the most advanced smart contract language targeting Substrate blockchains it is
not the only possible choice for users. There is also a Solidity to Wasm compiler called Solang that also
allows to target Substrate chains and there are other languages in plan and discovery phase for the same
purpose.

On the Substrate side the same is true for the `pallet-contracts`. It is just a module that defines
the basic set of features required for executing smart contracts on the blockchain that includes it.
However, it is not necessarily the only solution to do exactly that. There is also the `evm-pallet`
to run smart contracts targeting the EVM as well as the experimental `actors-pallet` that allows to
execute smart contracts written in the actor style programming model.
Over time the Substrate community might come up with yet other pallets for smart contracts execution.

Please see our page [How it Works – Substrate](../intro/how-it-works.md) for more information.

### How to call other smart contracts on the same blockchain?

See the [Cross-contract calling](../basics/cross-contract-calling.md) section.

### How to call other smart contracts on another parachain?

This feature has not yet been implemented by the Substrate side.

### What is a contract's ABI or Metadata?

In ink! a smart contract's metadata is retrieved by using the `cargo-contract` CLI tool and
invoking `cargo contract build` which outputs a `.contract` file that includes both the compiled
`.wasm` of the ink! smart contract as well as the so-called metadata information of the same
smart contract.
The metadata is especially important for third party tools such as Polkadot JS Apps or the Contracts UI
and provides useful information about the contract's constructors, messages, events, function selectors,
documentation and comments of the aforementioned structures as well as how inputs and outputs shall
be encoded and decoded respectively etc.

### Can a re-entrancy bug occur in ink! contracts?

Yes. However, the Substrate team is well aware of the associated problems and already through about
possible future additions to eliminate re-entrancy attacks.

### How can my smart contract interact with the runtime?

See the [Chain Extensions](../macros-attributes/chain-extension.md) section for more information.

### How can I use ink! with a Substrate chain with a custom chain config?

Please see [the `env_types` argument](https://docs.rs/ink_macro/4.0.0/ink_macro/attr.contract.html#header-arguments)
for the contract macro. It allows you to specify your environment a la
`#[ink::contract(env = MyEnvironment)]`.

### What does the `#![cfg_attr(not(feature = "std"), no_std)]` at the beginning of each contract mean?

The `#[cfg(..)]` or `#[cfg_attr(..)]` annotations are how Rust does conditional compilation.

ink! smart contracts can be compiled in two different modes.

Through `#![cfg_attr(not(feature = "std"), no_std)]` an ink! smart contract tells the Rust compiler
in which mode they are being compiled. This also plays a significant role in how ink! generates
the smart contract code.

The two modes are as follows:

1. Wasm mode: This is the mode chosen when compiling an ink! smart contract for deployment on a blockchain.
   The resulting binary is a `.wasm` file and as such it is not possible to use certain parts of Rust's standard
   library.
2. Off-chain mode: This is the mode chosen when trying to test an ink! smart contract using the off-chain
   environment. Off-chain environment testing is very useful to check if certain ink! constructors or messages
   are well behaving and allow for better debuggability than when trying to debug the same smart contract deployed
   on a chain.

### Overflow Safety?

Being written in Rust, ink! can provide compile-time overflow/underflow safety. Using a Rust compiler configuration, you can specify whether you want to support overflowing math, or if you want contract execution to panic when overflows occur. No need to continually import "Safe Math" libraries, although Rust also provides [integrated checked, wrapped, and saturated math functions](https://doc.rust-lang.org/std/primitive.u32.html).

:::note
There are some known issues regarding functionality of compiler level overflow checks and the resulting size of the Wasm blob. This feature may change or be iterated on in the future.
:::

### What is the difference between memory and storage?

In ink!, memory refers to computer memory, while storage refers to the on-chain storage
used by a contract instance. Memory is temporary and only lasts until the contract
execution is done, while storage is persistent and lasts over many contract executions.
The contract storage is built on top of the runtime storage, and access is considered to be slow.

### How do I print something to the console from the runtime?

Please see our page on [Contract Debugging](../basics/debugging.md).

### Why is Rust's standard library (stdlib) not available in ink!?

Rust's standard library consists of three different layers:

1. `core` library which defines everything that has no dependencies outside of Rust itself.
   Included are types such as `Option`, `Result` as well as a whole variety of modules,
   functions and macro.

   ink! smart contracts allow authors to use Rust's `core` crate.

2. `alloc` library which is depending on a global allocator and mainly defines collections
   that spill their elements on to the execution's heap memory.
   Examples for collections are `Box`, `String`, `Vec`, `HashMap`, `LinkedList` and modules
   such as `fmt`, `rc` (ref-counted pointers) or borrows.

   ink! smart contracts allow authors to use Rust's `alloc` crate.
   By default ink! authors use definitions from the `alloc` crate through `ink::prelude` crate.

3. `std` library is what people generally call Rust's standard library.

   > The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem.

   It requires several operating system capabilities in order to work correctly such as input and
   output systems for files, networking etc.

   Since the Wasm (a.k.a. `wasm32-unknown-unknown`) compilation target does not support Rust's
   standard library ink! authors cannot use it either for their own purposes. Instead the `pallet-contracts`
   tries to provide some common functionality that would otherwise be missing for common smart contract
   operations.

### How do I hash a value?

A number of crypto hashes are built into the [pallet-contracts](../intro/how-it-works.md) and
therefore very efficient to use. We currently support a handful of those, you
can view the complete list [here](https://docs.rs/ink_env/4.0.0/ink_env/hash/trait.CryptoHash.html).

If you have the urgent need for another crypto hash you could introduce it through
[Chain Extensions](../macros-attributes/chain-extension.md)
or make a proposal to include it into the default set of the `pallet-contracts`.

Using one of the built-in crypto hashes can be done as explained here:
* [`self.env().hash_bytes()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.hash_bytes.html)
* [`self.env().hash_encoded()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.hash_encoded.html)

### Why is it not possible to use floating point data types in ink!? How do I implement returning a decimal number?

Floats are cool for all kinds of reasons, but they also have one important
drawback. Floating point arithmetic is non-deterministic which means that
different processors compute (slightly) different results for the same
operation. Although there is an IEEE spec, non-determinism can come from specific
libraries used, or even hardware. In order for the nodes in a blockchain network
to reach agreement on the state of the chain, all operations must be completely
deterministic. Hence we don't allow floating point data types in ink!.

Consequently it's not possible to return a decimal number from an ink! message.
What you should do instead is to have your user interface denominate the returned
number to decimals.

Note, that it's typical for blockchains to have the number of available tokens
defined as a non-floating number and determine the denomination in the user
interface. For example, 1 Bitcoin is equivalent to the smallest unit of 100,000,000
Satoshi and all Bitcoin implementations internally persist account balances in
Satoshi, not as a decimal number of Bitcoin.

### Why can't I just use the standard Rust data collections in ink!?

You can use them! They are exposed via the `ink_prelude` crate (e.g. `ink::prelude::vec::Vec`)
and you can return them from ink! messages and also persist them to storage.

_However, the Rust stdlib collections are not optimized for smart contract usage!_ So for example,
if you use them to persist your data on the chain they will always occupy a single storage cell
and thus always be loaded eagerly, in their entirety. This can be very costly! Just think about
a `Vec` or a `HashMap` where the smart contract might only need access to a few elements, rather
than the entire data collection.

### Why am I getting a `ContractTrapped` error when interacting with a contract?

When it does not constitute a deliberate assertion, like for example a permission check,
it is most likely a bug in your contract or in ink!.

A common source of `ContractTrapped` are Integer overflows, those can cause
your contract to trap as well.
There is a [known bug in the Rust compiler](https://github.com/rust-lang/rust/issues/78744)
with respect to safe math operations. As a workaround for this particular bug
try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations altogether, but unfortunately we are currently
not aware of a better workaround until the bug in the compiler is fixed.

If you don't find the issue you can also ask for help in our public
[Element](https://riot.im/app/#/room/#ink:matrix.parity.io) or
[Discord](https://discord.gg/j2DKRRbSJr) channel.


### What are the `scale::Encode` and `scale::Decode` traits?

Substrate-based blockchains use the [SCALE codec](https://github.com/paritytech/parity-scale-codec)
to encode data.
As a consequence the data for every interaction with Substrate needs to
be SCALE-encodable ‒ i.e. it needs to implement either `scale::Encode`,
`scale::Decode`, or both. This affects e.g. data you want to return to a caller,
data that you want to take as input, or data you want to store on-chain.

A common error you might get when a necessary SCALE trait is not implemented
for a data structure could be along the lines of `the trait "WrapperTypeEncode"
is not implemented for "Foo"`.
For example, you might encounter this error if you try to store a custom data
structure in the contract's storage. Or e.g. when attempting to return
a custom error from an ink! message.

:::note
The error `the trait "WrapperTypeEncode" is not implemented for …` is also
a common error when a mismatching version of `parity-scale-codec` is used
in the contract opposed to the version used by ink!.
:::

The solution typically is to add a fitting implementation of the trait
for your data structure:

* `Encode` is used for encoding a data structure when it is e.g. returned
to a caller or when it is persisted to the contracts storage.

* `Decode` is used for the inverse, e.g. when reading from storage or
taking an input from a user (or another contract).

It's possible to derive those traits and oftentimes the simplest way
is to just derive the missing trait for the object for which its implementation
is missing:

```rust
#[derive(scale::Encode, scale::Decode)]
struct MyCustomDataStructure { … }
```

### How do I use `String` in my contract?

In general, you should think twice if you really need `String`.
Smart contracts usually don't use strings; those are typically
used for user interactions and should live in your UI and not on the chain.

Minimizing storage usage of your contract is a best practice
and you should only persist items which you need to derive state transitions
in your contract.

If you still, for some reason, need to use `String`, then you should use
the `String` [from the ink! prelude](https://docs.rs/ink_prelude/4.3.0/ink_prelude/string/struct.String.html).
````

## File: versioned_docs/version-v4/faq/migrating-from-ink-3-to-4.md
````markdown
---
title: Migrating from ink! 3.x to 4.0
slug: /faq/migrating-from-ink-3-to-4
---

![Migration 3.x To 4.0 Title Picture](/img/title/migration-3.x-to-4.0.svg)

We've made a couple of breaking changes from ink! 3.x to ink! 4.0.
On this page we outline how you can migrate existing clients and
contracts from 3.x to 4.0.

:::caution
This migration guide is only for your code base!

If you have an existing contract on-chain you cannot just
upgrade the code on-chain ‒ you also have to migrate your data,
since the way ink! 4.0 stores data and reads it (i.e. the storage
layout) changes from ink! 3.x to 4.0.
:::

## Compatibility

ink! 4.0 is compatible with:
* Stable Rust >= 1.63.0
* `scale` >=3
* `scale-info` >= 2.3
* `pallet-contracts` >= `polkadot-v0.9.37`
* `substrate-contracts-node` >= `v0.24.0`
* `polkadot-js/api` and `polkadot-js/api-contract` >= 9.10.2

## `cargo-contract` 2.0

Together with ink! 4.0 we've released `cargo-contract` 2.0.
You have to use this latest version of `cargo-contract` for ink! 4.0
contracts.
You can upgrade via:

```rust
cargo install cargo-contract --force --version 2
```

Make sure that e.g. your CI also uses `cargo-contract` 2 with ink! 4.
If you have wrapper scripts around `cargo-contract` you should
ensure that this version is enforced, otherwise users will get an error.

:::note
`cargo-contract` no longer requires `binaryen` or `wasm-opt` as an
external dependency. We required those because of `wasm-opt` tool
(which is part of `binaryen`). Fortunately we were able to find a way of
installing `wasm-opt` now as part of the `cargo-contract` installation
process.
:::

## Rust `stable` instead of `nightly`

ink! 4.0 and `cargo-contract` use `stable` Rust now.
This means no more `cargo +nightly contract` is required, you
can just use a stable Rust toolchain now (>= Rust 1.63).

## New entrance `ink` crate

The `ink_lang` crate has been replaced in [#1223](https://github.com/use-ink/ink/pull/1223)
by a new top level `ink` crate. All existing sub-crates are reexported and should be used via
the new `ink` crate, so e.g. `ink::env` instead of `ink_env`. Contract authors should now import
the top level `ink` crate instead of the individual crates.

### Migration
- In `Cargo.toml` Replace all individual `ink_*` crate dependencies with the `ink` crate.
- In the contract source:
  - Remove the commonly used `use ink_lang as ink` idiom.
  - Replace all usages of individual crates with reexports, e.g. `ink_env` ➜ `ink::env`.

## Storage  API + Layout

With [#1331](https://github.com/use-ink/ink/pull/1331) the way `ink!` reads and writes
to a contract's storage changed. Storage keys are generated at compile-time, and user facing
abstractions which determine how contract data is laid out in storage are different now.

### Migration
- Initialize `Mapping` fields with `Mapping::default()` instead of  `ink_lang::utils::initialize_contract` in
  constructors. See [`erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) and other examples which use a `Mapping`.
- `SpreadAllocate`, `SpreadLayout`, `PackedLayout`, `PackedAllocate` have been removed.

## Removal of `wee-alloc` support

ink! uses a bump allocator by default, additionally we supported another allocator
(`wee-alloc`) through a feature flag. `wee-alloc` is no longer maintained and
we removed support for it in [#1403](https://github.com/use-ink/ink/pull/1403).

## Removal of `eth_compatibility` crate

As part of [#1233](https://github.com/use-ink/ink/pull/1233)
the `eth_compatibility` crate was removed. The `ecdsa_to_eth_address()`
function from it can now be found [in the `ink_env` crate](https://docs.rs/ink_env/4.0.0/ink_env/fn.ecdsa_to_eth_address.html).

```rust
ink_env::ecdsa_to_eth_address(&pub_key, &mut output);
```

## `ink_storage::Mapping`

The function signature of `Mapping::insert(key, val)` changed to
`Mapping::insert(key, val) -> Option<u32>`.
The return value is the size of the pre-existing value at the specified key if any (in bytes).

Two new useful functions were added:

- [`Mapping::contains(key)`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.contains)
  in [#1224](https://github.com/use-ink/ink/pull/1224).
- [`Mapping::take()`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.take)
  to get a value while removing it from storage in [#1461](https://github.com/use-ink/ink/pull/1461).

In case you were working around those two functions you can now
use them directly; they are more gas-efficient than e.g. executing
a `get(key).is_none()` instead of `contains(key)`.

## Storage functions in `ink_env`

As part of [#1224](https://github.com/use-ink/ink/pull/1224) the return type
of [`ink_env::set_contract_storage()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.set_contract_storage.html)
was changed to return an `Option<u32>` instead of `()`.

A new function [`ink_env::take_contract_storage`](https://docs.rs/ink_env/4.0.0/ink_env/fn.take_contract_storage.html)
was introduced.

## Removal of `ink_env::random` function

We had to remove the [`ink_env::random`](https://docs.rs/ink_env/3.3.1/ink_env/fn.random.html)
function (in [#1442](https://github.com/use-ink/ink/pull/1442)).
This function allowed contract developers getting random entropy.
There is unfortunately no way how this can be done safely enough
with built-in Substrate primitives on-chain currently. We're
following the recommendation of our auditors to remove it.

The alternative right now is to provide random entropy off-chain to
the contract, to use a random entropy oracle, or to have a chain-extension
that does this, in case the chain has a possibility to do so.

We hope to bring this function back in a future release of ink!, the
best hope right now is that it could come back with
[Sassafras](https://wiki.polkadot.network/docs/learn-consensus#badass-babe-sassafras),
a block production protocol for future versions of Polkadot.

If you're interested in more information on this check out
[the Substrate PR](https://github.com/paritytech/substrate/pull/13204) which
deprecated the random interface of `pallet-contracts`.

## Constructors can now return `Result<Self, MyContractError>`

With [#1446](https://github.com/use-ink/ink/pull/1446) we introduced
the possibility for constructors to return either `Self` (as usual) or
`Result<Self, MyContractError>`.

This enables contract developers to bubble up encoded error objects to
clients/frontends about a failure. In ink! 3.x it was only possible to
panic in the constructor in case an error occurred, resulting in loss
of this information.

## Chain extension's `returns_result` removed

The `returns_result` flag has been removed from the `#[ink(extension = …)]` attribute in
[#1569](https://github.com/use-ink/ink/pull/1569).
We now infer this information at compile time. If `handle_status` is set to `true`,
the return type will still be wrapped into `Result` as before.

## Contract Metadata (ABI)

The most detailed way to grasp what changed is to look at
[this PR](https://github.com/use-ink/ink-docs/pull/138), which
updated the metadata page in our documentation.

### Add support for language level errors (`LangError`)

Under the hood, ink! now generates code that results in each message
and constructor returning a `Result<Message::Output, LangError>` (or
for constructors `Result<Constructor::Output, LangError>`).
This happens even if the message/constructor doesn't have a return type,
we default to the unit type `()` in that case.

A [`LangError`](https://docs.rs/ink/4.0.0/ink/enum.LangError.html)
is a type of error which doesn't originate from the contract itself,
nor from the underlying execution environment (so the Contracts pallet
in this case).

An example of where this would arise is if a caller tries to use a non-existent message
selector for a contract. Previously, the contract would trap and not allow the caller to
do any sort of error handling if it encountered a non-existent selector.

This change doesn't affect how you write a contract! It affects clients and
frontends though, since it breaks the API in two ways:

first, all contract messages now have a `Result` return type, and second a new field,
`lang_error`, will be introduced as part of the contract spec. The second change allows
other languages (such as Solang) to use an equivalent `LangError`.

<details>
  <summary>
    Click here for a snippet of the new metadata for the Flipper contract.
  </summary>
<p>

```json
"messages": [
  {
    "args": [],
    "docs": [
      " Flips the current value of the Flipper's boolean."
    ],
    "label": "flip",
    "mutates": true,
    "payable": false,
    "returnType": {
      "displayName": [
        "ink",
        "MessageResult"
      ],
      "type": 1
    },
    "selector": "0x633aa551"
  }],
"lang_error": {
  "displayName": [
    "ink",
    "LangError"
  ],
  "type": 3
},
{
  "id": 3,
  "type": {
    "def": {
      "variant": {
        "variants": [
          {
            "index": 1,
            "name": "CouldNotReadInput"
          }
        ]
      }
    },
    "path": [
      "ink_primitives",
      "LangError"
    ]
  }
}

```

</p>
</details>

### Version field

As part of [#1313](https://github.com/use-ink/ink/pull/1313) the ink! ABI was
changed to have a proper version field as part of the ink! metadata object.
This enables querying the ABI version in a less-ambiguous way.

Before:
```json
"source": {...},
"contract": {...},
"V3": {
  "spec": {...},
  "storage": {...},
  "types": {...}
}

```

After:
```json
{
  "source": {...},
  "contract": {...},
  "spec": {...},
  "storage": {...},
  "types": [...],
  "version": "4"
}
```

### The Storage Layout (`storage`)

The storage layout under the `storage` key changed for v4. If you have an application
that is using it consider reading the updated documentation:
- [General storage documentation](../datastructures/overview.md)
- [Storage metadata format](../datastructures/storage-in-metadata.md)

## Removal of `AccountId` `Default` implementation
In [#1255](https://github.com/use-ink/ink/pull/1255) we removed the `Default` trait
implementation on `AccountId`s.

The `Default` implementation of `AccountId` returned the zero-address, which is
problematic since the
[zero-address in the `sr25519` and `ed25519` curves has a known private key](https://substrate.stackexchange.com/questions/982/why-does-the-all-0-public-key-have-a-known-private-key-in-sr25519-and-ed25519).

Developers commonly reach for defaults, and the zero-address in particular, making it an
unsafe trait implementation to have given the consequences.

Imagine a developer sending tokens to the zero-address to be burned, only to find that
they've been stolen because the private key is known.

If you were previously using `AccountId`'s `Default` implementation in your code you
have a couple of different options for how to move forward. These will depend on what
exactly you were using the zero-address for.

If you were using it as a burn address:
- You can pick another address to use, assuming that you've actually picked a random
  address
- Consider a solution that involves reducing total issuance, instead of transferring
  tokens to a random address

If you were using it as a privileged account:
- Change the account
- Add checks to ensure that calls coming from the zero-address are rejected

You should also now consider dealing with `AccountId`'s as `Option<AccountId>`'s. This is
more idiomatic Rust, and also conveys the meaning of a "null" or "empty" address much
better.

## Updates to the `CallBuilder` and `CreateBuilder` APIs
There's been several changes to the
[`CallBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html)
and
[`CreateBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html)
APIs.

In [#1604](https://github.com/use-ink/ink/pull/1604) we renamed the
`CallBuilder::fire()` method to
[`CallBuilder::invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.invoke-2).
This brings more consistency across our APIs which were already using the `invoke`
terminology.

In [#1512](https://github.com/use-ink/ink/pull/1512) and [#1525](https://github.com/use-ink/ink/pull/1525)
we added support for handing
`LangError`s from the `CreateBuilder` and `CallBuilder`, respectively.

If you want to handle errors from either `Builder` you can use the new
[`CreateBuilder::try_instantiate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate)
or
[`CallBuilder::try_invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-1)
methods.

Because of the addition of those methods we also removed any error handling from the
non-`try_` methods in [#1602](https://github.com/use-ink/ink/pull/1602). This means
that the `CallBuilder::invoke()` and `CreateBuilder::instantiate()` methods return values
directly, and panic when they encounter an error.

Lastly, in [#1636](https://github.com/use-ink/ink/pull/1636) we added two methods to
the `CallBuilder` to streamline
[`Call`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.Call.html)
and
[`DelegateCall`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.DelegateCall.html)
workflows:
- For `Call` you can use
  [`CallBuilder::call()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.call) (this replaces `CallBuilder::callee()`)
- For `DelegateCall` you can use [`CallBuilder::delegate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.delegate)

## Removal of `[lib.crate-type]` and `[lib.name]` from contract manifest
Earlier versions of `cargo-contract` required that these two fields were specified in the
contract manifest explicitly, as follows:

```toml
[lib]
name = "flipper"
path = "lib.rs"
crate-type = [
    # Used for normal contract Wasm blobs.
    "cdylib",
    # Use to generate ABI
    "rlib",
]
```

However, with [cargo-contract#929](https://github.com/use-ink/cargo-contract/pull/929) we changed this behavior to:
- Use the contract name by default, removing the need for the `name` field
- Compile contracts as `rlib`s by default, and automatically changing to `cdylib` as
  needed

This means that your new manifest should look like:

```toml
[lib]
path = "lib.rs"
```
````

## File: versioned_docs/version-v4/frontend/overview.md
````markdown
---
title: Overview
slug: /frontend/overview
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Overview

Now after you [wrote](../getting-started/creating.md), [compiled](../getting-started/compiling.md) and [deployed your smart contract](../getting-started/deploying.md), it is time to craft a user experience around it.

This experience can take many shapes from mobile app to interactive terminal applications. In this section we are focusing on the most prominent shape in web3 right now, web apps.

Although we love Rust, the native language of the web is JavaScript. Thereby naturally the best tools for creating web experiences are available for JavaScript. Hence, the tools for smart contract interaction with JavaScript are the most advanced as well. To be precise all JavaScript tools mentioned here, actually leverage TypeScript to offer a JavaScript and a typesafe TypeScript experience.

## JavaScript/TypeScript Tools

There are several levels of abstraction where you can start your journey creating a web frontend for your contracts. Each levels offers different advantages and disadvantages. The following list is of tools. They are sorted from the most generic no third party library way to interact with Polkadot's smart contracts to the most opinionated template using libraries and proven frontend frameworks.

### Using no libraries

+ [RPC Interface](https://wiki.polkadot.network/docs/build-node-interaction) **(not recommended)**: nodes participating in the blockchain network offer an [JSON RPC interface](https://www.jsonrpc.org/) to interact with the blockchains state and capabilities.

### Low level libraries

+ [`@polkadot/api`](https://polkadot.js.org/docs/api) **(not recommended)**: allows for most general interaction with Polkadot-SDK based blockchains from JavaScript. In order to talk to smart-contracts, one would use the `pallet-contracts` runtime calls.

+ [`@polkadot/api-contract`](https://polkadot.js.org/docs/api-contract) **(recommended)**: abstraction on top of `@polkadot/api` for the `pallet-contracts`. Makes interaction with smart contracts more comfortable and type safe.

### React

+ [`useInkathon`](https://github.com/scio-labs/use-inkathon) **(recommended)**: A hooks library for the popular frontend javascript framework React with focus on smart-contract interactions. Built using `@polkadot/api` & `@polkadot/api-contract`.

### React and Next.js

+ [`inkathon`](https://github.com/scio-labs/inkathon) **(recommended)**: Full Stack web app template using the popular full stack template `Nextjs`. Itself is using `useInkathon`. The fastest way to get up and running with a smart contract and a corresponding web app.

### Examples

For inspiration how to get started building your full stack dApp. Make sure to visit our [Smart Contracts Examples section](../examples/contracts.md) or [repository directly](https://github.com/use-ink/ink-examples). These examples not only offer the smart contract code but also have an accompanied frontend project. Checkout the `README.md` for details how to setup and run these frontend examples.

## Other Languages

Of course the browser and JavaScript should not be the one and only platform for smart contract frontends. It's just the most mature for smart contract frontend tooling.

The following is a list of libraries which could be used to craft smart-contract dApps on other platforms than the web.

+ [novasamatech/substrate-sdk-ios](https://github.com/novasamatech/substrate-sdk-ios): low level generic iOS SDK for substrate.

+ [novasamatech/substrate-sdk-android](https://github.com/novasamatech/substrate-sdk-android): low level Android SDK for substrate.

+ [paritytech/subxt](https://github.com/paritytech/subxt): Rust library to submit extrinsics (transactions) to a substrate node via RPC.

+ [polkascan/py-substrate-interface](https://github.com/polkascan/py-substrate-interface/blob/master/docs/usage/ink-contract-interfacing.md): Python library to interface with Substrate nodes.
````

## File: versioned_docs/version-v4/getting-started/calling.md
````markdown
---
title: Call Your Contract
slug: /getting-started/calling-your-contract
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Call Your Contract

Now that your contract has been fully deployed, we can start interacting with it! Flipper only has
two functions: `flip()` and `get()`. We will show you what it's like to play with both of them.

## RPC calls vs. Transactions

There are two ways of calling a contract:

### Dry-run via RPC

Remote procedure calls, or RPC methods, are a way for an external program – for example, a browser
or front-end application – to communicate with a Substrate node. 
For example, you might use an RPC method to read a stored value, submit a transaction, or request
information about the chain a node is connected to.

If a user interface displays the value of a contract (e.g. the balance of an account in
an ERC-20 contract), then this is typically done via RPC. Specifically it is done by
executing a synchronous dry-run of the contract method and returning its result.
The following schema depicts this.

![Contract dry-run via RPC](/img/rpc.svg)

RPC calls don't require any tokens, they just require a connection to a node in the 
network. It's important to note that the execution won't result in any state mutations
on the blockchain, it really just is a dry-run.

### State mutating via submitting a Transaction 

The other method of executing a call to a contract is by submitting a transaction
on-chain. This requires tokens of the network to pay for the cost of the transaction.
The transaction will be put in a transaction pool and asynchronously processed.
The important implication here is that during submission of the transaction no result
is available. This is different from an RPC call.

The typical pattern for how a client can recognize the result of the contract call is
to have the contract emit an event and have the client actively listen for such an
event. Typically libraries (like `polkadot-js/api`) provide API functions to do just that.
The important take-away is that contract developers have to make sure that events
are emitted if they want clients to be able to pick up on them.

![Contract execution via transaction](/img/events.svg)

## Using the Contracts UI

### 1. `get()` function

We set the initial value of the Flipper contract
`value` to `false` when we instantiated the contract. Let's check that this is the case.

In the **Message to Send** section, select the "**get(): bool**" message and accept the default
values for the other options.

Press **"Read"** and confirm that it returns the value `false`:

![An image of Flipper RPC call with false](/img/flipper-false.png)

### 2. `flip()` function

So let's make the value turn `true` now!

The alternative message to send with the UI is `flip()`. Again, accept the default values for the other options and click **Call contract**

![An image of a Flipper transaction](/img/send-as-transaction.png)

If the transaction was successful, we should then be able to go back to the `get()` function and see our updated storage:

![An image of Flipper RPC call with true](/img/flipper-true.png)

## Using `cargo-contract`

Calling a contract can also be done via the command-line! 

### 1. `get()` function

```bash
cargo contract build
cargo contract upload --suri //Alice

cargo contract instantiate --execute --suri //Alice --args true
# The output of this command will contain the contract address,
# insert it in the command below.
# e.g  Contract 5DXR2MxThkyZvG3s4ubu9yRdNiifchZ9eNV8i6ErGx6u1sea


cargo contract call --contract <insert-contract-address> --message get --suri //Alice
```

### 2. `flip()` function

```bash
cargo contract call --contract <insert-contract-address> --message flip --execute --suri //Alice
```
````

## File: versioned_docs/version-v4/getting-started/cargo-contract.md
````markdown
---
title: Install cargo-contract
slug: /cargo-contract-cli
---

`cargo-contract` is a command-line (CLI) tool which helps you set up and manage
WebAssembly smart contracts written with ink!.
You can find it [here on GitHub](https://github.com/use-ink/cargo-contract)
and [here on crates.io](https://crates.io/crates/cargo-contract).

The tool has a number of handy capabilities:

```
$ cargo contract       
Utilities to develop Wasm smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new          Setup and create a new smart contract project
  build        Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check        Check that the code builds as Wasm; does not output any `<name>.contract` artifact to the `target/` directory
  test         Test the smart contract off-chain
  upload       Upload contract code
  instantiate  Instantiate a contract
  call         Call a contract
  decode       Decodes a contracts input or output data (supplied in hex-encoding)
  help         Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help information
  -V, --version  Print version information
```

## Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

You can then use `cargo contract --help` to start exploring the commands made available to you.

## Usage

In order to initialize a new ink! project you can use:

```bash
cargo contract new flipper
```

This will create a folder `flipper` in your work directory.
The folder contains a scaffold `Cargo.toml` and a `lib.rs`, which both contain the necessary building blocks for using ink!.

The `lib.rs` contains our hello world contract ‒ the `Flipper`, which we explain in the next section.

In order to build the contract just execute these commands in the `flipper` folder:

```bash
cargo contract build
```

As a result you'll get the file `target/flipper.contract`. It's a JSON which bundles the contract's
metadata and its Wasm blob. This file needs to be used when deploying the contract.
You additionally get the individual `target/flipper.wasm` and `target/flipper.json` in the folder as well.
````

## File: versioned_docs/version-v4/getting-started/compiling.md
````markdown
---
title: Compile Your Contract
slug: /getting-started/building-your-contract
hide_title: true
---

![Cargo Contract Title Picture](/img/title/cargo-contract.svg)

# Compile Your Contract

Run the following command in your `flipper` directory to compile your smart contract:

```bash
cargo contract build
```

This command will build the following for your contract: a Wasm binary, a metadata file (which contains the
contract's ABI) and a `.contract` file which bundles both. This `.contract` file can be used to
deploy your contract to a chain. If all goes well, you should see a `target` folder which
contains these files:

```
target
  └─ ink
    └─ flipper.contract
    └─ flipper.wasm
    └─ flipper.json
```

Let's take a look at the structure of the `flipper.json`:

```json
{
  "source": {...},
  "contract": {...},
  "spec": {
    "constructors": [...],
    "docs": [],
    "events": [],
    "messages": [...],
  },
  "storage": {...},
  "types": [...],
  "version": "4"
}
```

This file describes all the interfaces that can be used to interact with your contract:

* `types` provides the custom **data types** used throughout the rest of the JSON.
* `storage` defines all the **storage** items managed by your contract and how to ultimately access them.
* `spec` stores information about the callable functions like **constructors** and **messages** a
user can call to interact with the contract. It also has helpful information like the **events**
that are emitted by the contract or any **docs**.
  
If you look closely at the constructors and messages, you will also notice a `selector` which
contains a 4-byte hash of the function name and is used to route your contract calls to the correct
functions.

In the next section we will start a [Substrate Smart Contracts node](https://github.com/paritytech/substrate-contracts-node)
and configure the [Contracts UI](https://github.com/use-ink/contracts-ui) to interact with it.

## Debug vs. Release Build

By default, `cargo-contract` builds the contract in debug mode. This means
that the contract will e.g. print statements like

```rust
ink::env::debug_println!("magic number: {}", value);
```

to the node's console if debugging was enabled on the node ([instructions here](../faq/faq.md#how-do-i-print-something-to-the-console-from-the-runtime)).
To support functionality like this the debug build of a contract includes some
heavy-weight logic.

For contracts that are supposed to run in production you should always build the
contract with `--release`:

```bash
cargo contract build --release
```

This will ensure that nothing unnecessary is compiled into the Wasm blob, making
your contract faster and cheaper to deploy and execute.

:::info
With this behavior `cargo-contract` mirrors how `cargo` behaves for Rust programs:
the `--release` flag has to be passed explicitly to `cargo build`.
:::
````

## File: versioned_docs/version-v4/getting-started/creating.md
````markdown
---
title: Creating an ink! Project
slug: /getting-started/creating-an-ink-project
hide_title: true
---

![Heart Title Picture](/img/title/heart.svg)

# Creating an ink! Project

ink! is an [Embedded Domain Specific Language](https://wiki.haskell.org/Embedded_domain_specific_language) (EDSL) that you can use to write WebAssembly based smart contracts in the Rust programming language.

ink! is just standard Rust in a well defined "contract format" with specialized `#[ink(…)]` attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Substrate compatible Wasm bytecode!

Use the ink! CLI to generate an initial smart contract with some scaffolding code.

Make sure you are in your working directory, and then run:

```bash
cargo contract new flipper
```

This command will create a new project folder named `flipper` with this content:

```
flipper
  └─ lib.rs                <-- Contract Source Code
  └─ Cargo.toml            <-- Rust Dependencies and ink! Configuration
  └─ .gitignore
```

## Contract Source Code

The ink CLI automatically generates the source code for the "Flipper" contract, which is about the simplest "smart" contract you can build. You can take a sneak peak as to what will come by looking at the source code here:
[Flipper Example Source Code](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

The Flipper contract is nothing more than a `bool` which gets flipped from `true` to `false` through the `flip()` function. 

## Testing Your Contract

You will see at the bottom of the source code there are simple test cases which verify the functionality of the contract. We can quickly test this code is functioning as expected using the **off-chain test environment** that ink! provides.

In your project folder run:

```bash
cargo test
```

To which you should see a successful test completion:

```bash
$ cargo test
running 2 tests
test flipper::tests::it_works ... ok
test flipper::tests::default_works ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
```

Now that we are feeling confident things are working, we can actually compile this contract to Wasm in the next step.
````

## File: versioned_docs/version-v4/getting-started/deploying.md
````markdown
---
title: Deploy Your Contract
slug: /getting-started/deploy-your-contract
hide_title: true
---

![Rocket Title Picture](/img/title/rocket.svg)

# Deploy Your Contract

Now that we have generated the Wasm binary from our source code and connected to a local node, we want
to deploy this contract onto our Substrate blockchain.

Smart contract deployment on Substrate is a little different than on traditional smart contract
blockchains.

Whereas a completely new blob of smart contract source code is deployed each time you push a
contract on other platforms, Substrate opts to optimize this behavior. For example, the standard
ERC20 token has been deployed to Ethereum thousands of times, sometimes only with changes to the
initial configuration (through the Solidity `constructor` function). Each of these instances take
up space on the blockchain equivalent to the contract source code size, even though no code was
actually changed.

In Substrate, the contract deployment process is split into two steps:

1. Putting your contract code on the blockchain
2. Creating an instance of your contract

With this pattern, contract code like the ERC20 standard can be put on the blockchain one single
time, but instantiated any number of times. No need to continually upload the same source code over
and waste space on the blockchain.

## Using the Contracts UI

### 1. Upload Contract Code

Here we will upload the contract code and instantiate one copy of the contract on the blockchain
(which is usually why we upload the contract code in the first place):

- Go to https://ui.use.ink
- Click the **Add New Contract** button in the sidebar.
- Click the **Upload New Contract Code** button in the Add New Contract page.
- Choose an **Instantiation account** (e.g. ALICE).
- Give the contract a descriptive **Name** (e.g. Flipper Contract).
- Drag the `flipper.contract` file that contains the bundled Wasm blob and metadata into the drag
  & drop area. You will see the UI parse the metadata and enabling the button that takes you to the next step.
- Click the **Next** button

![Flipper Instantiate Contract 01](/img/contracts-ui-0.png)

### 2. Instantiate a Contract on the Blockchain

Smart contracts exist as an extension of the account system on the blockchain. Thus creating an
instance of this contract will create a new `AccountId` which will store any balance managed by the
smart contract and allow us to interact with the contract.

Now a screen displays the information that represents our smart contract. We are going to
instantiate a copy of the smart contract:

- Accept the default options for the contract **Deployment Constructor**.
- Accept the default options **Max Gas Allowed** of `200000`.
- Click on `Next`

![Flipper Instantiate Contract 02](/img/contracts-ui-1.png)

The transaction is now queued, review your data and click **Upload and Instantiate** or go back and modify your inputs.

![Flipper Instantiate Contract 03](/img/contracts-ui-2.png)

When you click **Upload and Instantiate** you should see
the extrinsic `instantiateWithCode` is processing, and a flurry of events appear including the
creation of a new account (`system.NewAccount`) and the instantiation of the contract
(`contracts.Instantiated`).
You will be redirected to a new page, where you can interact with the newly created contract instance.

![Flipper Instantiate Success](/img/contracts-ui-3.png)

## Using `cargo-contract`

Contracts can be deployed via the command-line as well. With `cargo-contract`
it's just a simple sequence of:

```bash
cargo contract build
cargo contract upload --suri //Alice
cargo contract instantiate --suri //Alice --args true
```
````

## File: versioned_docs/version-v4/getting-started/running.md
````markdown
---
title: Run a Substrate Node
slug: /getting-started/running-substrate
hide_title: true
---

![Substrate Title Picture](/img/title/substrate.svg)

# Run a Substrate Node

The [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node)
is a simple Substrate blockchain which is configured to include the `contracts` module.
It's a comfortable option if you want to get a quickstart.

[After successfully installing `substrate-contracts-node`](../getting-started/setup.md#installing-substrate-contracts-node),
you can start a local development chain by running:

```bash
substrate-contracts-node
```

**Note:** `substrate-contracts-node` uses the `--dev` flag by default. 
You may need to specify the `--dev` flag when you want to run a development chain with another binary (e.g using the Substrate Node Template).

![An image of the terminal starting a Substrate node](/img/substrate-contracts-node.png)

You can interact with your node using [the Contracts UI](https://contracts-ui.substrate.io).
Once you have the webpage open, you have to configure the UI to connect to the locally running node:

- Click on the dropdown selector at the top left corner.
- Choose "Local Node".

![Connect to local node](/img/contracts-ui-local-node.png)
````

## File: versioned_docs/version-v4/getting-started/setup.md
````markdown
---
title: Setup
slug: /getting-started/setup
hide_title: true
---

![Setup Title Picture](/img/title/setup.svg)

# Setup

In case you are looking for a guided tutorial directed
towards beginners please check out our [Guided Tutorial](https://docs.substrate.io/tutorials/smart-contracts/).

## Rust & Cargo

A pre-requisite for compiling smart contracts is to have a stable Rust version and Cargo installed. Here's [an installation guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

## ink! CLI

The first tool we will be installing is [`cargo-contract`](https://github.com/use-ink/cargo-contract),
a CLI tool for helping setting up and managing WebAssembly smart contracts written with ink!.

You can find it [here on GitHub](https://github.com/use-ink/cargo-contract)
and [here on crates.io](https://crates.io/crates/cargo-contract).

The tool has a number of handy capabilities:

```
$ cargo contract       
Utilities to develop Wasm smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new          Setup and create a new smart contract project
  build        Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check        Check that the code builds as Wasm; does not output any `<name>.contract` artifact to the `target/` directory
  test         Test the smart contract off-chain
  upload       Upload contract code
  instantiate  Instantiate a contract
  call         Call a contract
  decode       Decodes a contracts input or output data (supplied in hex-encoding)
  help         Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help information
  -V, --version  Print version information
```

### Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

If everything worked, `cargo contract --help` should show you the above list of available commands.

## Installing `substrate-contracts-node`

The [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node) is
a simple Substrate blockchain which is configured to include the Substrate module for
smart contract functionality – the `contracts` pallet (see [How it Works](../intro/how-it-works.md) for more).
It's a comfortable option if you want to get a quickstart.

There are two ways of installing the node:

### (1) Download the Binary
This is the recommended method, you can
[download a binary from our releases page](https://github.com/paritytech/substrate-contracts-node/releases)
(Linux and Mac). 

### (2) Build it yourself

Alternatively you can build the node by yourself.
This can take quite a while though!

```bash
cargo install contracts-node
```
````

## File: versioned_docs/version-v4/getting-started/troubleshooting.md
````markdown
---
title: Troubleshooting
slug: /getting-started/troubleshooting
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Troubleshooting

Here are solutions to some of the common problems you may come across:

### Unexpected Epoch Change

There is a known issue with the Substrate block production (BABE) on a running chain. If you stop your node for too long (closing the terminal, putting your computer to sleep, etc.), you will get the following error:

```bash
ClientImport("Unexpected epoch change")
```

To solve this you will need to restart your node with: `substrate-contracts-node`. At that point, you will
need to re-deploy any contracts and re-do any steps that you may have done before on your node. As
long as you keep your node running, you should face no issues.

### Old Contracts in Local Storage

**Contracts UI** uses its own local storage to track the contracts that you have deployed. This means
that if you deploy a contract using the UI, and then purge your Substrate node, you will be prompted to
reset your local storage and please do so. And then re-deploy any contracts and re-do any steps that
you may have done before on your node.


### Other Issues

If you run into any other issues during this tutorial, please [report an issue](https://github.com/substrate-developer-hub/substrate-docs/issues)!
````

## File: versioned_docs/version-v4/inkubator/overview.md
````markdown
---
title: Kickstart your project!
hide_title: true
slug: /inkubator-overview
---

# ink!ubator

<img src="/img/inkubator-tanks.svg" alt="ink!ubator" className="md:mb-12 mb-6 md:mt-6 mt-3" />

ink!ubator is an initiative funded by the Polkadot Treasury's Bounty Program. It is designed to kickstart the ink! ecosystem on Polkadot, Kusama, and other Substrate chains.

import { BigCTA } from "/src/components/BigCTA";

<BigCTA title="ink!ubator" emphasized="Learn" cta="more" url="/inkubator" tabIndex={0} />
````

## File: versioned_docs/version-v4/intro/how-it-works.md
````markdown
---
title: How it Works – Substrate
hide_title: true
slug: /how-it-works
---

![Substrate Title Picture](/img/title/substrate.svg)

# How it Works – Substrate

ink! is a programming language for smart contracts; blockchains built with [the Substrate framework](http://substrate.io)
can choose from a number of smart contract languages which one(s) they want to support.
ink! is one of them. It is an opinionated language that we have built by extending the popular Rust programming language with functionality needed to make it smart contract compatible.

## How does ink! tie into Substrate?

[Substrate](https://substrate.io) is a framework for building blockchains – those can be standalone blockchains or blockchains connected to [Kusama](http://kusama.network) or [Polkadot](http://polkadot.network), so called _parachains_. Substrate contains a number of modules, in Substrate terminology those are called _pallets_. Substrate comes with a set of pallets for many requirements modern blockchains typically have – staking, fungible tokens, non-fungible tokens, governance, etc.

Substrate also ships with a module for smart contracts, this module is called `pallet-contracts`. If a parachain is developed in Substrate it can easily add smart contract functionality by including this pallet.

How does ink! come into play here? ink! is a programming language, specifically it is an embedded domain-specific language for the popular Rust programming language. This means that you can use all the normal Rust syntax plus some specifics that we added to make the language suitable for the smart contract world. The `pallet-contracts` takes these ink! contracts and executes them safely. So in short: _with ink! you can write smart contracts in Rust for blockchains built with Substrate that include `pallet-contracts`_.

![](/img/ink-pallet-contracts.png)

## How does the `pallet-contracts` work?

We intentionally designed `pallet-contracts` in a way that it is decoupled from the language that is used to write smart contracts. The pallet is only the execution environment and it takes WebAssembly files as input. Smart contracts for this pallet have to be compiled to the WebAssembly (Wasm) target architecture.

For contract developers this means they can use ink! for writing smart contracts, but can also decide on other languages. Right now three languages to choose from exist:

* [Polkadot's ink!](https://github.com/use-ink/ink) for Rust.
* [ask!](https://github.com/patractlabs/ask) for AssemblyScript.
* The [Solang](https://github.com/hyperledger-labs/solang) compiler for Solidity.

It's not hard to add new languages. There just needs to be a compiler for the language down to WebAssembly, then it's possible to implement the API of `pallet-contracts`. This API at the moment consists of about 50 functions for anything a smart contract may desire: storage access, cryptographic functionality, environmental information like block numbers, access to functions for getting random numbers or self-terminate the contract, etc. Not all of those have to be implemented in the language ‒ the ink! "Hello, World!" requires just six API functions. The following schema depicts this relationship:

![](/img/ink-substrate.png)

We think this design is more future-proof than some architectures found in competing ecosystems. There is no tight coupling between language and execution environment. WebAssembly is an industry standard and a multitude of programming languages can nowadays be compiled down to WebAssembly. If in, say ten years time, researchers come up with an innovative language for writing smart contracts (or a subset of an existing language) then as long as there is a WebAssembly compiler it will be easy to make this language compatible with `pallet-contracts`.

## Why include `pallet-contracts` on a parachain?

There are a couple use cases for including smart contract functionality on a parachain. We distinguish three big ones.

### Use Case 1: Smart Contracts as "first-class citizens"
The most obvious use case is a parachain which provides smart contracts as a “first-class citizen”, meaning smart contracts are the central value proposition of the chain.

Those chains typically take the off-the-shelf `pallet-contracts` and create some additional innovation on top of it. Examples of this are:

* [Astar](https://astar.network): a parachain team that has built a layer on top of `pallet-contracts` so that contract developers can earn a passive income whenever their contracts are being used.
* [Phala](https://www.phala.network): a parachain team that utilizes `pallet-contracts` in a trusted execution environment, enabling confidential smart contract execution and interoperability.
* [Aleph Zero](https://alephzero.org): uses the `pallet-contracts` in a zero-knowledge context.
* [t3rn](https://www.t3rn.io): uses `pallet-contracts` as a building block to enable multi-chain execution for smart contracts.

### Use Case 2: Smart Contracts as "second-class citizens"
There is another not so obvious use case for `pallet-contracts`: smart contracts as “second-class citizens” on an existing chain. By this we mean that the central value proposition of the chain has nothing to do with smart contracts, but it still includes them as an add-on.

We provide an API (called [chain extensions](../macros-attributes/chain-extension.md)) with which a parachain can expose certain parts of its business logic to smart contract developers. Through this, smart contract developers can utilize the business logic primitives of the chain to build a new application on top of it. Think for example of a decentralized exchange blockchain. This chain would in its simplest form have an order book to place bids and asks ‒ there is no need for taking untrusted, Turing-complete, programs from the outside. The parachain could decide to expose the order book into smart contracts though, giving external developers the option of building new applications that utilize the order book. For example, to upload trading algorithms as smart contracts to the chain.

Smart contracts here are an opportunity to up the user engagement and drive usage of the chain's native token. And the billing for utilizing the chain comes already built-in with the pallet ‒ users have to pay gas fees for the execution of their smart contract.

### Use Case 3: Smart Contracts as a first step into Polkadot or Kusama
A third big use case for `pallet-contracts` is to prototype an idea as a proof-of-concept smart contract before leasing a dedicated parachain slot on Polkadot or Kusama.

The time to develop a smart contract and deploy it is shorter than the onboarding story for a parachain. One can deploy a proof-of-concept smart contract first, see if it gains traction and the idea holds up to the real world. Only subsequently, once there is a need for e.g. cheaper transaction fees, more efficient execution, or a governance mechanism for the community, the smart contract could be migrated to a dedicated parachain runtime with its own slot. ink! contracts and Substrate runtimes are both written in Rust and share similar primitives, this enables a clear path to graduate from a smart contract to its own runtime. Developers can reuse large parts of their code, their tests, as well as frontend and client code.

![](/img/ink-gateway.jpg)

## Smart Contracts vs. Parachains
One of the first questions we typically get when somebody learns about Substrate, Polkadot, or Kusama is when to develop a parachain vs. when to develop a smart contract.

The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In Substrate terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains ‒ except for that they don't have to build their own security, are upgradable, and interoperable.

It's noteworthy that a parachain's state transition function doesn't get further validated ‒ it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

For smart contracts, on the other hand, an existing parachain has to include the `pallet-contracts` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-contracts` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-contracts` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract ‒ a smart contract sits on top of a parachain_.

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.

![](/img/smart-contract-vs-parachain.png)
````

## File: versioned_docs/version-v4/intro/ink-vs-cosmwasm.md
````markdown
---
title: ink! vs. CosmWasm
slug: /ink-vs-cosmwasm
hide_title: true
---

![Cosmwasm Title Picture](/img/title/cosmwasm.svg)

# ink! vs. CosmWasm

This is a short comparison between [ink!](https://github.com/use-ink/ink/)
and [CosmWasm](https://github.com/CosmWasm/cosmwasm) meant to onboard
developers coming from the Cosmos ecosystem.

## Architecture

CosmWasm is modular, meaning that any blockchain using the Cosmos SDK can add smart
contract support to their chain. That is similar to the [Substrate](https://substrate.io/)
approach, where chains have the option to add `pallet-contracts` to their runtime.

Aside from that, the architecture philosophy is likely the point where CosmWasm and ink!
differ the most. CosmWasm follows the actor model design pattern, while ink! follows a
synchronous execution model. That means some fundamental differences in how the source
code is structured.

The main entry point functions of CosmWasm contracts are:

- `instantiate` which bootstraps the initial contract state (assuming it's already been
  deployed).
- `execute` which has the actor perform operations to its internal state.
- `query` which retrieves data from the actor’s internal state.

An ink! contract can have as many public dispatchables as the developer desires, and
differently from CosmWasm, it doesn’t rely on JSON schemas for defining how the messages
are structured.

Instead, ink! makes heavy usage of Rust macros. The main ink! macros are:

- `#[ink(constructor)]` which is called when the contract is deployed, and is responsible
  for bootstrapping the initial contract state into the storage. It is analogous to the
  CosmWasm `instantiate` function.
- `#[ink(storage)]` which annotates a struct that represents the contract's internal
  state.
- `#[ink(message)]` which marks a function as a public dispatchable, meaning that it is
  exposed in the contract interface to the outside world. This macro can make a function
  behave analogously to CosmWasm’s `execute` and `query` functions. This depends on how it
  affects the internal contract state and what the return types.
- `#[ink(event)]` and `#[ink(topic)]` which annotates a struct and its members as the
  events and topics that the contract might emit.

There are other ink! macros, for which details can be found at [Macros & Attributes](../macros-attributes/overview.md).

## Unit Testing

Unit testing in CosmWasm is quite similar to ink!. Both use the conventional Rust
`#[cfg(test)]` macro and set up a mock on-chain environment.

While CosmWasm unit tests have different modules for each of the three main entry-point
functions, ink! allows for a more generalised approach, where the `#[ink(test)]` macro is
used for each unit test.

You can read more about ink! unit tests [here](../basics/testing.md#unit-tests).

## Compiler

CosmWasm uses [cargo-wasm](https://docs.rs/crate/cargo-wasm/latest) as its main
compiler, while ink! uses [cargo-contract](https://github.com/use-ink/cargo-contract).
`cargo-contract` is developed specifically for building, testing, and deploying
ink! contracts.

# Local Development Network

In terms of local development networks, the [cosmos/gaia](https://github.com/cosmos/gaia)
repository acts as the basic template for a generic Cosmos node. With the addition of the
`x/wasm` module and some clean-up, this template repository becomes
[wasmd](https://github.com/CosmWasm/wasmd), the entry point for CosmWasm development.

In terms of Substrate, `substrate-node-template` is a basic generic template of a node.
Similar to `x/wasm`, [`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
is the module that adds WebAssembly smart contract functionality to the chain. Parity
provides the [substrate-contracts-node](https://github.com/paritytech/substrate-contracts-node),
which is analogous to `wasmd` - a basic template node for smart contract development.

## Testnets

For CosmWasm development and on-chain testing, `wasmd` can be operated as a local setup
(single or multiple nodes), or connected to the `cliffnet` public test network.

ink! contracts can be deployed on a few different options:

- Locally, on a single or multiple node setup of [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node).
- [Contracts on Rococo Parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/explorer),
  which is connected to the [Rococo relay chain test network](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-rpc.polkadot.io#/explorer).
- [Astar Network’s Shibuya testnet](https://docs.astar.network/docs/build/Introduction/astar_family/#shibuya).

## Development Workflow

### Dependencies

The first step in CosmWasm development is to
[install dependencies](https://docs.cosmwasm.com/docs/getting-started/installation),
namely Go, Rust and `wasmd`.

For ink! you can also find [a setup guide](../getting-started/setup.md) which will help you
with dependencies, namely Rust, `cargo-contract` and `substrate-contracts-node`.

### Environment Setup

The next step in the CosmWasm development workflow is
[setting up the environment](https://docs.cosmwasm.com/docs/getting-started/setting-env).
That consists mainly of configuring `wasmd` such that it has prefunded accounts that are able
to interact with the network.

When `substrate-contracts-node` is started, it already contains well
known pre-funded accounts (`alice`, `bob`, etc.) which are ready to be used for development.

### Compile and Test

CosmWasm provides example contracts at the
[cw-contracts](https://github.com/InterWasm/cw-contracts) repository. After the
repository is cloned, from the contract directory it can be compiled via:

```
$ cargo wasm
```

and tested via:

```
$ cargo unit-test
```

Similarly, ink! provides an
[`examples`](https://github.com/use-ink/ink-examples/tree/main) directory of its
main repository.

A contract can be compiled from its directory via:

```
$ cargo contract build
```

and tested via:

```
$ cargo test
```

### Deploy and Interact

CosmWasm contracts are deployed and instantiated with help of the `wasmd` executable. The
list of step is provided [here](https://docs.cosmwasm.com/docs/getting-started/interact-with-contract).

It is possible to deploy and interact with ink! contracts using either a CLI
(`cargo-contract`), or a web UI ([`contracts-ui`](https://ui.use.ink)).

- [Instructions for `cargo-contract`](https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md)
- [Instructions for `contracts-ui`](../getting-started/deploying.md)
````

## File: versioned_docs/version-v4/intro/intro.mdx
````
---
title: Welcome!
hide_title: true
slug: /
hide_table_of_contents: true
---

<br />

<center>
    <img src="/img/title/ink!-4.0.svg" width="800" style={{ marginBottom: 10 }} />
</center>

<center className="ignoreP">
    <a href="https://github.com/use-ink/ink-examples">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=GitHub&logoColor=black&label=ink!%20Examples&labelColor=white&color=blue" />
    </a>
    &nbsp;
    <a href="https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=StackExchange&label=ink!%20Support%20on%20StackExchange&labelColor=white&color=blue" />
    </a>
    &nbsp;
    <a href="https://t.me/inkathon">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=Telegram&label=ink!%20Support%20on%20Telegram&labelColor=white&color=blue" />
    </a>
    <br/>
    <a href="https://twitter.com/ink_lang">
        <img style={{height: 25}} src="https://img.shields.io/twitter/follow/ink_lang?label=Follow%20us%20on%20X" />
    </a>
    &nbsp;
    <a href="http://youtube.com/@ink-lang">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=YouTube&logoColor=eb3f25&label=ink!%20YouTube&labelColor=white&color=blue" />
    </a>
</center>

<h3 style={{ lineHeight: 1.4 + 'em', marginTop: 0.5 + 'em' }}>
  <center>
    <em>
      ink! is a programming language for smart contracts.<br />
      You can use it with blockchains built with the <a href="https://github.com/paritytech/polkadot-sdk">Polkadot SDK</a>.
    </em>
  </center>
</h3>

## Learn More

<div className="row">
  <div className="col text--center">
    <a href="https://www.parity.io/blog/what-is-paritys-ink">
      <img src="/img/what-is-ink.png" width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      What is Parity's ink!?<br />
      <a href="https://www.parity.io/blog/what-is-paritys-ink">» view page</a>
    </p>
  </div>
  <div className="col text--center">
    <a href="https://docs.substrate.io/tutorials/smart-contracts/">
      <img src="/img/tutorial.png" width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      Guided Beginners Tutorial<br />
      <a href="https://docs.substrate.io/tutorials/smart-contracts/">» view tutorial</a>
    </p>
  </div>
  <div className="col text--center">
    <a target="_parent" href="/faq/migrating-from-ink-4-to-5">
      <img src="/img/migration-guide.jpg" width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      Migrate to ink! 5.0<br />
      <a target="_parent" href="/faq/migrating-from-ink-4-to-5">» view migration guide</a>
    </p>
  </div>
</div>

## Our Pitch

<div className="row">
  <div className="col text--center">
    <img src="/img/icons/rust.svg" width="100" />
    <p>Inherent safety-guarantees with the Rust programming language.</p>
  </div>
  <div className="col text--center">
    <img src="/img/icons/ecosystem.svg" width="100" />
    <p>Ability to use all the normal Rust tooling ‒ clippy, crates.io, IDE’s, etc.</p>
  </div>
  <div className="col text--center">
    <img src="/img/icons/interop.svg" width="100" />
    <p>Interoperability with Solidity contracts.</p>
  </div>
</div>

<br />
&nbsp;
<br />

<div className="row">
  <div className="col text--center">
    <img src="/img/icons/migration-path.svg" width="100" />
    <p>Clear migration path for graduating to a parachain.</p>
  </div>
  <div className="col text--center">
    <img src="/img/icons/wasm.svg" width="100" />
    <p>Established industry standard for the compiler target.</p>
  </div>
  <div className="col text--center">
    <img src="/img/icons/polkadot.svg" width="100" />
    <p>Native to Polkadot. Complements your Substrate parachain perfectly.</p>
  </div>
</div>

## Where can I deploy ink! contracts?

<div className="row">
    <div className="col text--left">
        <h3><img src= "/img/chains/production.svg" className="chainHeader" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://alephzero.org">
            <img src= "/img/chains/aleph-zero.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://astar.network">
            <img src= "/img/chains/astar.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://shiden.astar.network">
            <img src= "/img/chains/shiden.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="http://phala.network">
            <img src= "/img/chains/phala.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org">
            <img src= "/img/chains/pendulum.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org/amplitude">
            <img src= "/img/chains/amplitude.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= "/img/chains/mainnet-soon.svg" className="chainHeader mainnetSoon" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://t3rn.io">
            <img src= "/img/chains/t3rn.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://enjin.io">
            <img src= "/img/chains/enjin.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://zeitgeist.pm">
            <img src= "/img/chains/zeitgeist.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.peaq.network">
            <img src= "/img/chains/peaq.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://bit.country">
            <img src= "/img/chains/bitcountry.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://github.com/yerbatech">
            <img src= "/img/chains/yerba.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.ternoa.network/">
            <img src= "/img/chains/ternoa.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= "/img/chains/on-testnet.svg" className="chainHeader" /></h3>
        <a href="/testnet">
            <img src= "/img/chains/testnet.svg" className="chain" />
        </a>
    </div>
    <div className="col">&nbsp;</div>
</div>

## Smart Contract Examples

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src="/img/icons/flipper.svg" width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src="/img/icons/erc20.svg" width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src="/img/icons/nft.svg" width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br />

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src="/img/icons/upgradable.svg" width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src="/img/icons/multisig.svg" width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src="/img/icons/rand-extension.svg" width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>

## Wallet Support

<table className="wallet-table text--center">
    <tr>
        <th></th>
        <th className="text--left">Contract Interactions</th>
        <th className="text--left">Tokens (PSP-22)</th>
        <th className="text--left">NFTs (PSP-34)</th>
    </tr>
    <tr>
        <th>
            <a href="https://www.subwallet.app/" title="SubWallet" >
                <img src= "/img/wallets/subwallet.svg" className="wallet" alt="SubWallet" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
    </tr>
    <tr>
        <th>
            <a href="https://polkadot.js.org/extension/" title="Polkadot{.js}">
                <img src= "/img/wallets/polkadot-js.svg" className="wallet" alt="Polkadot{.js}" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark" /></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <th>
            <a href="https://www.talisman.xyz/" title="Talisman">
                <img src= "/img/wallets/talisman.svg" className="wallet" alt="Talisman" width="200"/>
            </a>
        </th>
        <td><img src= "/img/icons/checkmark1.svg" className="checkmark"/></td>
        <td></td>
        <td></td>
    </tr>
</table>
````

## File: versioned_docs/version-v4/intro/migrate-to-parachain.md
````markdown
---
title: Migrating an ink! contract to a Parachain Runtime
hide_title: true
slug: /migrate-ink-contracts-to-polkadot-frame-parachain
---

![Polkadot Title Picture](/img/title/polkadot.svg)

# Migrating an ink! contract to a Parachain Runtime

Smart contracts written in `ink!` are a great starting point for developing applications in the Polkadot ecosystem. Developers can go from an idea to a fully functioning web3 application "in production" in a matter of hours or days. This allows faster feedback on ideas, to validate whether there is user demand in the first place, and to easily iterate and refine the implementation.

For many applications, smart contracts are good enough. However, they are exposed to the inherent limitations of the smart contract execution environment: 
    
1. Sharing of blockspace with other smart contracts, volatile "gas" fees.
2. Default model enforces gas fees being paid by the end user.
3. Relative poor performance of interpreted smart contract (untrusted) code compared to pre-compiled Parachain runtime (trusted) code.
4. Limited access to the host chain environment and any special functionality provided by an extensive suite of customisable FRAME pallets.

Once a web3 application has proven it can work, the team may consider "upgrading" to a Parachain to unlock the full power of a dedicated App Chain. Compared to developing and deploying a smart contract, this requires considerably more time and expertise, which is why we encourage to start with `ink!` where possible, at least at the prototype stage.

Much of the difficulty in launching a parachain comes in configuring a node implementation, bootstrapping and maintaining a collator network, deploying to testnets, managing infrastructure, acquiring "Coretime" (previously via a slot auction). All of which is time consuming and costly. This is important to note because this guide will focus on the migration of the code from `ink!` to `FRAME`, which might be a learning curve but overall a minor part of the overall migration, and a one-off cost.

## Utilizing existing FRAME pallets

There is a rich library of FRAME pallets, which may provide a drop in replacement for some (or all) of your smart contract functionality. For example, for a [PSP22](../third-party-tools/openbrush.md) (similar to ERC20) fungible token contract, this could be replaced either by the native Parachain token itself via `pallet_balances` or by an asset on `pallet_assets`. Governance functions could be replaced by e.g. `pallet_democracy`, and so on. See [`polkadot-sdk`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame) for a range of pre-built pallets which can be used to handle some common functions.

## Similarities and differences between `ink!` and `FRAME`

### Similar

The biggest advantage we have when migrating from `ink!` to `FRAME` is that both are Rust based DSLs, in both cases actual Rust (or Rust-like)  code annotated with attributes expands into Rust code for handling all the boilerplate for integrating into their respective execution environments. Indeed the modern `FRAME 2.0` was originally inspired by the `ink!` approach of attribute macros annotating Rust code.

So we can assume that the developer performing the migration is already familiar with Rust and its development environment, which is already a huge headstart for developing with `FRAME`. 

Next we can assume some familiarity with the execution environment, after all a contract is running inside of `pallet_contracts` and is invoked in a similar way via a pallet dispatchable, has access to storage (sandboxed to the contract), and can emit events.

### Different

The biggest difference is that a contract is user uploaded and therefore untrusted code, so there are restrictions to what the contract is able to do and it will perform slower because it is interpreted. For example, a contract can only read and write from its own sandboxed storage.

Runtime code built using `FRAME` is trusted, can be pre-compiled and therefore executes significantly faster (though that may change if/when contracts are able to target [PolkaVM](https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811)). Pallets have direct access to other pallets and have full access to the Parachain storage, and the permissioning can be configured as desired.

Because `ink!` is executing in a more constrained environment, it is able to be much more opinionated and therefore a simpler language. Because execution is metered (pay as you go execution by the user), there is no need to worry about benchmarking for "weight" calculation. `FRAME` is more powerful, but necessarily more complicated.

## Example Migration

We'll use the [`DNS` example](https://github.com/use-ink/ink-examples/blob/main/dns/lib.rs) contract to demonstrate a migration.

### Setup

Start by cloning the [Parachain Template](https://github.com/substrate-developer-hub/substrate-parachain-template/) which contains a [template pallet](https://github.com/substrate-developer-hub/substrate-parachain-template/blob/main/pallets/template/src/lib.rs) which we can modify.

Now we will move down the contract from top to bottom and begin the migration of code.

### Event Definitions

First thing we encounter are events. E.g.:

```rust
#[ink(event)]
pub struct Register {
    #[ink(topic)]
    name: Hash,
    #[ink(topic)]
    from: AccountId,
}
```

Each of these structs annotated with `#[ink(event)]` can be translated to a variant in the pallet `Error` enum annotated with `#[pallet::error]`. Any of the `ink!` environment type aliases (both `Hash` and `AccountId` in the above example) must be translated to their equivalent associated type on the `Config` trait e.g. `AccountId` → `T::AccountId`. Also the `#[ink(topic)]` annotations must be removed: topics must be calculated manually when the event is emitted, and will be covered later. Remove the `#[pallet::generate_deposit(pub(super) fn deposit_event)]` and the final `Event` type will look like:


```rust=
#[pallet::event]
pub enum Event<T: Config> {
    Register {
        name: T::Hash,
        from: T::AccountId,
    },
    SetAddress {
        name: T::Hash,
        from: T::AccountId,
        old_address: Option<T::AccountId>,
        new_address: T::AccountId,
    },
    Transfer {
        name: T::Hash,
        from: T::AccountId,
        old_owner: Option<T::AccountId>,
        new_owner: T::AccountId,
    }
}
```

### Storage

The storage layout of the contract is defined by the following struct:

```rust=
#[ink(storage)]
pub struct DomainNameService {
    /// A hashmap to store all name to addresses mapping.
    name_to_address: Mapping<Hash, AccountId>,
    /// A hashmap to store all name to owners mapping.
    name_to_owner: Mapping<Hash, AccountId>,
    /// The default address.
    default_address: AccountId,
}
```
In `ink!`, the layout of the contract storage is defined by this top level `struct`. A brief recap of how this is used:
- Constructors must return an initialized instance of this struct, which is then written to storage. 
- Non mutable messages e.g. `#[ink(message)] fn message(&self, ..)` will load an instance of this struct and pass it as `&self`.
- Mutable messages e.g. `#[ink(message)] fn message(&mut self, ..)`, will load an instance of the struct and persist it if the message succeeds in executing.
- Fields of type `Mapping` or `Lazy` are not written directly into the same storage slot as the parent, but are wrappers around direct reads/writes to storage under many or a single key respectively.

In `FRAME`, all storage operations happen eagerly via "type aliases" annotated with `#[pallet::storage]`. So for each field in the `#[ink(storage)]` struct, we require a corresponding pallet storage definition.

`default_address: AccountId` translates to:

```rust
#[pallet::storage]
pub type DefaultAddress<T: Config> = StorageValue<_, T::AccountId>;
```

`name_to_address: Mapping<Hash, AccountId>,` translates to a `StorageMap` like so:

```rust=
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

`name_to_owner: Mapping<Hash, AccountId>,` also translates to a `StorageMap`:

```rust=
#[pallet::storage]
pub type NameToOwner<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

Reading and writing these storage values must all be done explicitly, in contrast with `ink!` which can do so automatically for non "lazy" values. When it comes to migrating the messages, this will be demonstrated.

### Error Definition

Simply copy across the variants of the `enum Error` to the equivalent `#[pallet::error]` definition. In our case we end up with:

```rust=
#[pallet::error]
pub enum Error<T> {
    /// Returned if the name already exists upon registration.
    NameAlreadyExists,
    /// Returned if caller is not owner while required to.
    CallerIsNotOwner,
}
```
Note that the `T` generic parameter is not used in this case, the `error` macro handles the generation of `PhantomData<T>`. If we use some environmental types we can use the `T` similar to the event definition.

### Constructors

In this example, the single constructor is simply initializing the storage to empty values. 

```rust=
 #[ink(constructor)]
pub fn new() -> Self {
    Default::default()
}
```
This code is executed when the contract instance was initialized.

Our use case is a migration, so we will assume that the existing data must be migrated from contract storage to the pallet storage. This will be covered in the [Data Migration](#data-migration) section.

No code migration is required then for this constructor.

### Messages

#### Mutable

There are 3 mutable messages (that can change the state of the contract): `register`, `set_address` and `transfer`. This guide will demonstrate `register`, and the other two can follow a similar pattern. The message is defined as so, with added numerical comments to show the translation to the equivalent `FRAME` code.

```rust=
#[ink(message)]
pub fn register(&mut self, name: Hash) -> Result<()> {
    // 1.
    let caller = self.env().caller();
    // 2.
    if self.name_to_owner.contains(name) {
        return Err(Error::NameAlreadyExists)
    }
    // 3.
    self.name_to_owner.insert(name, &caller);
    // 4.
    self.env().emit_event(Register { name, from: caller });
    // 5.
    Ok(())
}
```

Before proceeding, it is necessary to add a custom `deposit_event` function for raising events which accepts topics:

```rust=
impl<T: Config> Pallet<T> {
    fn deposit_event(topics: Vec<T::Hash>, event: Event<T>) {
        <frame_system::Pallet<T>>::deposit_event_indexed(
            &topics,
            <T as Config>::RuntimeEvent::from(event).into()
        )
    }
}
```
Now we can translate the `register` message into a "Dispatchable":

```rust=
#[pallet::call_index(0)]
#[pallet::weight(Weight::from_parts(10_000, 0)
    .saturating_add(T::DbWeight::get().reads(1))
    .saturating_add(T::DbWeight::get().writes(1)))]
pub fn register(origin: OriginFor<T>, name: T::Hash) -> DispatchResultWithPostInfo {
    // 1.
    let caller = ensure_signed(origin)?;
    // 2.
    ensure!(!NameToOwner::<T>::contains_key(&name), Error::<T>::NameAlreadyExists);
    // 3.
    <NameToOwner<T>>::insert(name, &caller);
    // 4.
    Self::deposit_event(
        &[name.clone(), T::Hashing::hash_of(&caller)],
        Event::Register { name, from: caller }
    );
    // 5.
    Ok(().into())
}
```
Compare the numbered annotations from the `ink!` contract message and the `FRAME` dispatchable, and you can see they are very similar, just different APIs for interacting with the environment and with storage.

For `4.`, in `FRAME` we need to generate the topic list manually which is done automatically in `ink!` via the annotations.

#### Weights

The `pallet::weight` attribute defines the `weight` of the dispatchable i.e. the amount of onchain resources it is estimated to consume. Because we are now writing trusted code, we can define this up front (no runtime gas metering). The number in the `weight` is typically generated via a benchmarking process. It is important to integrate this process and set a non-arbitrary value here before deploying to a production chain. Read more https://docs.substrate.io/build/tx-weights-fees/.

#### Immutable (read only) messages

`ink!` messages can return a value, which when executed as an RPC "dry-run" (not via a transaction), are used to read the state of contracts. Dispatchables in `FRAME` cannot return values directly. There are two ways to read the state from a FRAME pallet:

1. Reading from `#[pallet::storage]` items directly, client libraries will generate an API to do this from the runtime metadata. See e.g. [`subxt`](https://github.com/paritytech/subxt/blob/master/subxt/examples/storage_fetch.rs)
2. Via runtime APIs, RPC methods that can be wired up directly into query methods on a pallet. See https://docs.substrate.io/reference/runtime-apis/.

In our case, `1.` is good enough, so the following read only message:

```rust=
#[ink(message)]
pub fn get_address(&self, name: Hash) -> AccountId {
    self.get_address_or_default(name)
}

fn get_address_or_default(&self, name: Hash) -> AccountId {
    self.name_to_address
        .get(name)
        .unwrap_or(self.default_address)
}
```
Can be queried *without* any modifications to the `NameToAddress` storage type:

```rust=
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```
`subxt` would generate the following accessor for querying the storage:

```rust=
let storage_query = my_custom_chain::storage().dns().name_to_address(&name);

// Use that query to `fetch` a result. This returns an `Option<_>`, which will be
// `None` if no value exists at the given address. You can also use `fetch_default`
// where applicable, which will return the default value if none exists.
let result = api
    .storage()
    .at_latest()
    .await?
    .fetch(&storage_query)
    .await?;
```

### Data Migration

Data migration can be done at either genesis time or once the custom parachain is up and running. 

#### Retrieving the data from the contract

In both cases the first steps are to first download the current state of the contract at a fixed point in time, and then ensuring that no changes can be made to the contract after that. 

This could be done by using `set_code_hash` to update the source code of the contract to a special contract which allows only querying and downloading the state of the current contract, and no mutating messages.

An alternative would be querying the contract storage directly, but currently there are no good tools for this, and it would require some key calculation for retrieving the data at all storage locations. Additionally the contract would still need to be "frozen" somehow to ensure no changes can be made to the contract state.

#### Initializing the pallet 

Once the data has been downloaded and serialized, it can be used to initialize the state of the custom parachain runtime. This can be hardcoded in a `#[pallet::genesis_build]` impl block. See https://docs.substrate.io/reference/how-to-guides/basics/configure-genesis-state/.

Alternatively the state could be initialized via dispatchable extrinsic(s) which initialize the storage.

### Adjusting UIs

User interfaces will need to be adjusted to interact with a pallet rather than a contract. This should be relatively straightforward since client libraries usually have first-class support for interacting with Substrate pallets, and the signing etc. should already be integrated.
````

## File: versioned_docs/version-v4/intro/polkadot.md
````markdown
---
title: Smart Contracts in Polkadot
hide_title: true
slug: /smart-contracts-polkadot
---

![Polkadot Title Picture](/img/title/polkadot.svg)

# Smart Contracts in Polkadot

One of the first questions we typically get when somebody learns about Substrate, Polkadot, or Kusama is when to develop a parachain vs. when to develop a smart contract.

The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In Substrate terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains ‒ except for that they don't have to build their own security, are upgradable, and interoperable.

It's noteworthy that a parachain's state transition function doesn't get further validated ‒ it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

For smart contracts, on the other hand, an existing parachain has to include the `pallet-contracts` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-contracts` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-contracts` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract ‒ a smart contract sits on top of a parachain_.

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.

![](/img/smart-contract-vs-parachain.png)
````

## File: versioned_docs/version-v4/intro/upcoming-events.md
````markdown
---
title: Upcoming Events
hide_title: true
slug: /upcoming-events
---

![Monthly Update Title Picture](/img/title/monthly-update.svg)


### April 5, 2023 | Office Hours

We will be having the first ever ink! Office Hours:
[more details](https://twitter.com/ink_lang/status/1641103674561929216).
We will talk a bit about what is currently going on and answer questions.

The idea is to have this as a regular event, we target the first Wednesday of each month.

### April 6, 2023 | Astar launches ink! support to mainnet!

Astar is launching ink! support on their mainnet.
You can read more about the Wasm launch day
[here](https://twitter.com/AstarNetwork/status/1640352674611884033).
````

## File: versioned_docs/version-v4/intro/why-rust.md
````markdown
---
title: Why Rust for Smart Contracts?
hide_title: true
slug: /why-rust-for-smart-contracts
---

![Rust Title Picture](/img/title/rust.svg)

# Why Rust for Smart Contracts?

ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.
If this doesn't already convince you, you find many more good reasons here:

* <span class="highlight">Rust is an ideal smart contract language:</span> It is type safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn’t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow.

* <span class="highlight">Rust ecosystem:</span> You gain from all of the support available to the Rust ecosystem for free. As the language develops, ink! will automatically gain access to new features and functionality, improving how you can write smart contracts in the future.

* <span class="highlight">Tooling:</span> Because ink! follows Rust standards, tools like rustfmt, clippy and rust-analyzer already work out of the box.
The same goes for code formatting and syntax highlighting in most modern text editors.
Also, Rust has an integrated test and benchmark runner,

* <span class="highlight">No overhead:</span> Minimal runtime.

* <span class="highlight">Safe & Efficient:</span> Zero-cost & safe abstractions.

* <span class="highlight">Productive:</span> Cargo + <a href="https://crates.io">crates.io</a> Ecosystem.

* <span class="highlight">1st class Wasm:</span> Rust provides the first class support for the WebAssembly.

* <span class="highlight">Small Size:</span> In the space-constrained blockchain world size is important. 
The Rust compiler is a great help for that, since it reorders struct fields in order 
to make each type as small as possible. Thus, Rust data structures are very compact,
in many cases even more compact than in C.
````

## File: versioned_docs/version-v4/intro/why-webassembly.md
````markdown
---
title: Why WebAssembly for Smart Contracts?
hide_title: true
slug: /why-webassembly-for-smart-contracts
---

![Wasm Title Picture](/img/title/wasm.svg)

# Why WebAssembly for Smart Contracts?

We made a conscious decision for WebAssembly as the target architecture of ink!.
Our decision was made up by these reasons:

* <span class="highlight">High performance: </span>Wasm is high performance — it’s built to be as close to native machine code as possible while still being platform independent.

* <span class="highlight">Small size: </span>It facilitates small binaries to ship over the internet to devices with potentially slow internet connection.
This is a great fit for the space-constrained blockchain world.

* <span class="highlight">General VM & bytecode: </span>
It was developed so that code can be deployed in any browser with the same result.
Contrary to the EVM it was not developed towards a very specific use case,
this has the benefit of a lot of tooling being available and large
companies putting a lot of resources into furthering Wasm development.

* <span class="highlight">Efficient JIT execution: </span>
64 and 32-bit integer operation support that maps one-to-one with CPU instructions.

* <span class="highlight">Minimalistic: </span> Formal spec that fits on a single page.

* <span class="highlight">Deterministic execution: </span>
Wasm is easily made deterministic by removing floating point operations, which is necessary for consensus algorithms.

* <span class="highlight">Open Standards > Custom Solutions: </span>
Wasm is a standard for web browsers developed by W3C workgroup that includes Google, Mozilla, and others.
There’s been many years of work put into Wasm, both by compiler and standardization teams.

* <span class="highlight">Many languages available: </span> Wasm expands the family of languages available to smart contract developers to include Rust, C/C++, C#, Typescript, Haxe, and Kotlin. This means you can write smart contracts in whichever language you’re familiar with, though we’re partial to Rust due to its lack of runtime overhead and inherent security properties.

* <span class="highlight">Memory-safe, sandboxed, and platform-independent.</span>

* <span class="highlight">LLVM support: </span>
Supported by the LLVM compiler infrastructure project, meaning that Wasm benefits from over a decade of LLVM’s compiler optimization.

* <span class="highlight">Large companies involved: </span> Continually developed by major companies such as Google, Apple, Microsoft, Mozilla, and Facebook.
````

## File: versioned_docs/version-v4/macros-attributes/anonymous.md
````markdown
---
title: "#[ink(anonymous)]"
slug: /macros-attributes/anonymous
hide_title: true
---

![Text/anon Title Picture](/img/title/text/anon.svg)

Applicable to ink! events.

Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as topic upon emitting. Very similar to anonymous events in Solidity. 

Anonymous events have similar semantics as in Solidity in that their
event signature won't be included in their event topics serialization
to reduce event emitting overhead. This is especially useful for user
defined events.
    
The signature of the event is by default one of the topics of the event, except
if you annotate the event with `#[ink(anonymous)]`.
The attribute implies that it is not possible to filter for specific anonymous events by name.

## Example

```rust
#[ink(event)]
#[ink(anonymous)]
pub struct MyEvent {
    #[ink(topic)]
    field_1: i32,
    field_2: bool,
}
```
````

## File: versioned_docs/version-v4/macros-attributes/chain-extension.md
````markdown
---
title: "#[ink::chain_extension]"
slug: /macros-attributes/chain-extension
hide_title: true
---

![Text/chain Ext Title Picture](/img/title/text/chain-ext.svg)

In the default configuration of the `contracts-pallet` a smart contract can only interact with the runtime
via its well defined set of basic smart contract interface. This API already allows a whole variety of
interaction between the `contracts-pallet` and the executed smart contract. For example it is possible
to call and instantiate other smart contracts on the same chain, emit events, query context information
or run built-in cryptographic hashing procedures.

If this basic set of features is not enough for a particular Substrate built blockchain it is possible
to easily extend this API using the so-called chain extension feature.

<center>
  <img src="/img/venn.png" width="50%" />
</center>

With chain extensions you can expose parts of your runtime logic
to smart contract developers.

:::note
The ink! repository contains [the `rand-extension` example](https://github.com/use-ink/ink-examples/tree/main/rand-extension).
This is a complete example of a chain extension implemented in both ink! and Substrate.
:::

## Structure

The interface consists of an error code that indicates lightweight errors
as well as the definition of some chain extension methods.

The overall structure follows that of a simple Rust trait definition.
The error code is defined as an associated type definition of the trait definition.
The methods are defined as associated trait methods without implementation.

Chain extension methods must not have a `self` receiver such as `&self` or `&mut self`
and must have inputs and output that implement SCALE codec. Their return value follows
specific rules that can be altered using the `handle_status` attribute and
alternation between  `Result` and Non-`Result` types which are described in more detail below.

## Usage

Usually the chain extension definition using this proc. macro is provided
by the author of the chain extension in a separate crate.
ink! smart contracts using this chain extension simply depend on this crate
and use its associated environment definition in order to make use of
the methods provided by the chain extension.

## Attributes

There are two different attributes with which the chain extension methods
can be flagged:

| Attribute | Required | Default Value | Description |
|:----------|:--------:|:--------------|:-----------:|
| `ink(extension = N: u32)` | Yes | - | Determines the unique function ID of the chain extension method. |
| `ink(handle_status = flag: bool)` | Optional | `true` | Assumes that the returned status code of the chain extension method always indicates success and therefore always loads and decodes the output buffer of the call. |

As with all ink! attributes multiple of them can either appear in a contiguous list:

```rust
type Access = i32;

#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = i32;

    #[ink(extension = 5, handle_status = false)]
    fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

…or as multiple standalone ink! attributes applied to the same item:

```rust
type Access = i32;

#[ink::chain_extension]
pub trait MyChainExtension {
  type ErrorCode = i32;

  #[ink(extension = 5)]
  #[ink(handle_status = false)]
  fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

## Details: `handle_status`

Default value: `true`

By default all chain extension methods should return a `Result<T, E>` where `E: From<Self::ErrorCode>`.
The `Self::ErrorCode` represents the error code of the chain extension.
This means that a smart contract calling such a chain extension method first queries the returned
status code of the chain extension method and only loads and decodes the output if the returned
status code indicates a successful call.
This design was chosen as it is more efficient when no output besides the error
code is required for a chain extension call. When designing a chain extension try to utilize the
error code to return errors and only use the output buffer for information that does not fit in
a single `u32` value.

A chain extension method that is flagged with `handle_status = false` assumes that the returned error code
will always indicate success. Therefore it will always load and decode the output buffer and loses
the `E: From<Self::ErrorCode` constraint for the call.

Note that if a chain extension method does not return `Result<T, E>` where `E: From<Self::ErrorCode>`,
but `handle_status = true` it will still return a value of type `Result<T, Self::ErrorCode>`.

## Usage: `handle_status` + `Result<T, E>` return type

Use both `handle_status = false` and non-`Result` return type for the same chain extension method
if a call to it may never fail and never returns a `Result` type.

## Combinations

Due to the possibility to flag a chain extension method with `handle_status` and either (1) return `Result<T, E>`
or (2) return just `T`
there are 4 different cases with slightly varying semantics:

| `handle_status` | Returns `Result<T, E>` | Effects |
|:---------------:|:----------------:|:--------|
|`true` |`true` | The chain extension method is required to return a value of type `Result<T, E>` where `E: From<Self::ErrorCode>`. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. |
|`true` |`false`| The chain extension method may return any non-`Result` type. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. The actual return type of the chain extension method is still `Result<T, Self::ErrorCode>` when the chain extension method was defined to return a value of type `T`. |
|`false`|`true` | The chain extension method is required to return a value of type `Result<T, E>`. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |
|`false`|`false`| The chain extension method may return any non-`Result` type. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |

## Error Code

Every chain extension defines exactly one `ErrorCode` using the following syntax:

```rust
#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = MyErrorCode;

    // more definitions ...
}
```

The defined `ErrorCode` must implement `FromStatusCode` which should be implemented as a
more or less trivial conversion from the `u32` status code to a `Result<(), Self::ErrorCode>`.
The `Ok(())` value indicates that the call to the chain extension method was successful.

By convention an error code of `0` represents success.
However, chain extension authors may use whatever suits their needs.

## Example: Definition

In the below example a chain extension is defined that allows its users to read and write
from and to the runtime storage using access privileges:

```rust
/// Custom chain extension to read to and write from the runtime.
#[ink::chain_extension]
pub trait RuntimeReadWrite {
    type ErrorCode = ReadWriteErrorCode;

    /// Reads from runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<Vec<u8>, Self::ErrorCode>`.
    /// #[ink(extension = 1, returns_result = false)]
    /// fn read(key: &[u8]) -> Vec<u8>;
    ///
    /// Reads from runtime storage.
    ///
    /// Returns the number of bytes read and up to 32 bytes of the
    /// read value. Unused bytes in the output are set to 0.
    ///
    /// # Errors
    ///
    /// If the runtime storage cell stores a value that requires more than
    /// 32 bytes.
    ///
    /// # Note
    ///
    /// This requires `ReadWriteError` to implement `From<ReadWriteErrorCode>`
    /// and may potentially return any `Self::ErrorCode` through its return value.
    #[ink(extension = 2)]
    fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;

    /// Writes into runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<(), Self::ErrorCode>`.
    #[ink(extension = 3)]
    fn write(key: &[u8], value: &[u8]);

    /// Returns the access allowed for the key for the caller.
    ///
    /// # Note
    ///
    /// Assumes to never fail the call and therefore always returns `Option<Access>`.
    #[ink(extension = 4, handle_status = false)]
    fn access(key: &[u8]) -> Option<Access>;

    /// Unlocks previously acquired permission to access key.
    ///
    /// # Errors
    ///
    /// If the permission was not granted.
    ///
    /// # Note
    ///
    /// Assumes the call to never fail and therefore does _NOT_ require `UnlockAccessError`
    /// to implement `From<Self::ErrorCode>` as in the `read_small` method above.
    #[ink(extension = 5, handle_status = false)]
    fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum ReadWriteErrorCode {
  InvalidKey,
  CannotWriteToKey,
  CannotReadFromKey,
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum ReadWriteError {
  ErrorCode(ReadWriteErrorCode),
  BufferTooSmall { required_bytes: u32 },
}

impl From<ReadWriteErrorCode> for ReadWriteError {
  fn from(error_code: ReadWriteErrorCode) -> Self {
    Self::ErrorCode(error_code)
  }
}

impl From<scale::Error> for ReadWriteError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub struct UnlockAccessError {
  reason: String,
}

impl From<scale::Error> for UnlockAccessError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
pub enum Access {
  ReadWrite,
  ReadOnly,
  WriteOnly,
}

impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
  fn from_status_code(status_code: u32) -> Result<(), Self> {
    match status_code {
      0 => Ok(()),
      1 => Err(Self::InvalidKey),
      2 => Err(Self::CannotWriteToKey),
      3 => Err(Self::CannotReadFromKey),
      _ => panic!("encountered unknown status code"),
    }
  }
}
```

All the error types and other utility types used in the chain extension definition
above are often required to implement various traits such as SCALE's `Encode` and `Decode`
as well as `scale-info`'s `TypeInfo` trait.

A full example of the above chain extension definition can be seen
[here](https://github.com/use-ink/ink/blob/017f71d60799b764425334f86b732cc7b7065fe6/crates/lang/macro/tests/ui/chain_extension/simple.rs).

## Example: Environment

In order to allow ink! smart contracts to use the above defined chain extension it needs
to be integrated into an `Environment` definition as shown below:

```rust
type RuntimeReadWrite = i32;

use ink::env::{Environment, DefaultEnvironment};

pub enum CustomEnvironment {}

impl Environment for CustomEnvironment {
    const MAX_EVENT_TOPICS: usize =
        <DefaultEnvironment as Environment>::MAX_EVENT_TOPICS;

    type AccountId = <DefaultEnvironment as Environment>::AccountId;
    type Balance = <DefaultEnvironment as Environment>::Balance;
    type Hash = <DefaultEnvironment as Environment>::Hash;
    type BlockNumber = <DefaultEnvironment as Environment>::BlockNumber;
    type Timestamp = <DefaultEnvironment as Environment>::Timestamp;

    type ChainExtension = RuntimeReadWrite;
}
```

Above we defined the `CustomEnvironment` which defaults to ink!'s `DefaultEnvironment`
for all constants and types but the `ChainExtension` type which is assigned to our newly
defined chain extension.

## Example: Usage

An ink! smart contract can use the above defined chain extension through the `Environment`
definition defined in the last example section using the `env` macro parameter as
shown below.

Note that chain extension methods are accessible through `Self::extension()` or
`self.extension()`. For example as in `Self::extension().read(..)` or `self.extension().read(..)`.

```rust
#[ink::contract(env = CustomEnvironment)]
mod read_writer {

    #[ink(storage)]
    pub struct ReadWriter {}

    impl ReadWriter {
        #[ink(constructor)]
        pub fn new() -> Self { Self {} }

        #[ink(message)]
        pub fn read(&self, key: Vec<u8>) -> Result<Vec<u8>, ReadWriteErrorCode> {
            self.env()
                .extension()
                .read(&key)
        }

        #[ink(message)]
        pub fn read_small(&self, key: Vec<u8>) -> Result<(u32, [u8; 32]), ReadWriteError> {
            self.env()
                .extension()
                .read_small(&key)
        }

        #[ink(message)]
        pub fn write(
            &self,
            key: Vec<u8>,
            value: Vec<u8>,
        ) -> Result<(), ReadWriteErrorCode> {
            self.env()
                .extension()
                .write(&key, &value)
        }

        #[ink(message)]
        pub fn access(&self, key: Vec<u8>) -> Option<Access> {
            self.env()
                .extension()
                .access(&key)
        }

        #[ink(message)]
        pub fn unlock_access(&self, key: Vec<u8>, access: Access) -> Result<(), UnlockAccessError> {
            self.env()
                .extension()
                .unlock_access(&key, access)
        }
    }

    /// Custom chain extension to read to and write from the runtime.
    #[ink::chain_extension]
    pub trait RuntimeReadWrite {
          type ErrorCode = ReadWriteErrorCode;
          #[ink(extension = 1)]
          fn read(key: &[u8]) -> Vec<u8>;
          #[ink(extension = 2)]
          fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;
          #[ink(extension = 3)]
          fn write(key: &[u8], value: &[u8]);
          #[ink(extension = 4, handle_status = false)]
          fn access(key: &[u8]) -> Option<Access>;
          #[ink(extension = 5, handle_status = false)]
          fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum ReadWriteErrorCode {
          InvalidKey,
          CannotWriteToKey,
          CannotReadFromKey,
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum ReadWriteError {
          ErrorCode(ReadWriteErrorCode),
          BufferTooSmall { required_bytes: u32 },
    }
    impl From<ReadWriteErrorCode> for ReadWriteError {
         fn from(error_code: ReadWriteErrorCode) -> Self {
             Self::ErrorCode(error_code)
         }
    }
    impl From<scale::Error> for ReadWriteError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }

    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub struct UnlockAccessError {
         reason: String,
    }
    impl From<scale::Error> for UnlockAccessError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }
    #[derive(scale::Encode, scale::Decode, scale_info::TypeInfo)]
    pub enum Access {
         ReadWrite,
         ReadOnly,
         WriteOnly,
    }
    impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
         fn from_status_code(status_code: u32) -> Result<(), Self> {
             match status_code {
                 0 => Ok(()),
                 1 => Err(Self::InvalidKey),
                 2 => Err(Self::CannotWriteToKey),
                 3 => Err(Self::CannotReadFromKey),
                 _ => panic!("encountered unknown status code"),
             }
         }
    }
    pub enum CustomEnvironment {}
    impl ink::env::Environment for CustomEnvironment {
         const MAX_EVENT_TOPICS: usize =
             <ink::env::DefaultEnvironment as ink::env::Environment>::MAX_EVENT_TOPICS;

         type AccountId = <ink::env::DefaultEnvironment as ink::env::Environment>::AccountId;
         type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;
         type Hash = <ink::env::DefaultEnvironment as ink::env::Environment>::Hash;
         type BlockNumber = <ink::env::DefaultEnvironment as ink::env::Environment>::BlockNumber;
         type Timestamp = <ink::env::DefaultEnvironment as ink::env::Environment>::Timestamp;

         type ChainExtension = RuntimeReadWrite;
    }
}
```

## Technical Limitations

- Due to technical limitations it is not possible to refer to the `ErrorCode` associated type
  using `Self::ErrorCode` anywhere within the chain extension and its defined methods.
  Instead chain extension authors should directly use the error code type when required.
  This limitation might be lifted in future versions of ink!.
- It is not possible to declare other chain extension traits as super traits or super
  chain extensions of another.
````

## File: versioned_docs/version-v4/macros-attributes/constructor.md
````markdown
---
title: "#[ink(constructor)]"
slug: /macros-attributes/constructor
hide_title: true
---

![Text/constructor Title Picture](/img/title/text/constructor.svg)

Applicable to a method.

Flags a method (or multiple methods) for the ink! storage struct as constructor making it available to the API for instantiating the contract.

There must be at least one `#[ink(constructor)]` defined method.

Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
upon contract instantiation. A contract may define multiple such constructors which
allow users of the contract to instantiate a contract in multiple different ways.


## Example

```rust
#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 { ... }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self { .. }

        #[ink(constructor)]
        pub fn total_supply(&self) -> Balance { .. }

        // etc.
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/contract.md
````markdown
---
title: "#[ink::contract]"
hide_title: true
slug: /macros-attributes/contract
---

![Text/contract Title Picture](/img/title/text/contract.svg)

# \#[ink::contract]

The `#[ink::contract]` macro is the entry point for writing ink! smart contracts.

If you are a beginner trying to learn ink! we recommend you to check out
our extensive [ink! workshop](https://docs.substrate.io/tutorials/smart-contracts/).

## Description

The macro does analysis on the provided smart contract code and generates
proper code.

## Usage

### Header Arguments

The `#[ink::contract]` macro can be provided with some additional comma-separated
header arguments:

### `compile_as_dependency: bool`

Tells the ink! code generator to **always** or **never**
compile the smart contract as if it was used as a dependency of another ink!
smart contract.

Normally this flag is only really useful for ink! developers who
want to inspect code generation of ink! smart contracts.
The author is not aware of any particular practical use case for users that
makes use of this flag but contract writers are encouraged to disprove this.

Note that it is recommended to make use of the built-in crate feature
`ink-as-dependency` to flag smart contract dependencies listed in a contract's
`Cargo.toml` as actual dependencies to ink!.

**Usage Example:**
```rust
#[ink::contract(compile_as_dependency = true)]
mod my_contract {
    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** Depends on the crate feature propagation of `Cargo.toml`.

### `env: impl Environment`

Tells the ink! code generator which environment to use for the ink! smart contract.
The environment must implement the `Environment` (defined in `ink_env`) trait and provides
all the necessary fundamental type definitions for `Balance`, `AccountId` etc.

When using a custom `Environment` implementation for a smart contract all types
that it exposes to the ink! smart contract and the mirrored types used in the runtime
must be aligned with respect to SCALE encoding and semantics.

**Usage Example:**

Given a custom `Environment` implementation:
```rust
pub struct MyEnvironment;

impl ink::env::Environment for MyEnvironment {
    const MAX_EVENT_TOPICS: usize = 3;

    type AccountId = u64;
    type Balance = u128;
    type Hash = [u8; 32];
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = ::ink::env::NoChainExtension;
}
```
A user might implement their ink! smart contract using the above custom `Environment`
implementation as demonstrated below:

```rust
#[ink::contract(env = MyEnvironment)]
mod my_contract {
    pub struct MyEnvironment;

    impl ink::env::Environment for MyEnvironment {
        const MAX_EVENT_TOPICS: usize = 3;
        type AccountId = u64;
        type Balance = u128;
        type Hash = [u8; 32];
        type Timestamp = u64;
        type BlockNumber = u32;
        type ChainExtension = ::ink::env::NoChainExtension;
    }

    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** `DefaultEnvironment` defined in `ink_env` crate.

## Analysis

The `#[ink::contract]` macro fully analyses its input smart contract
against invalid arguments and structure.

Some example rules include but are not limited to:

- There must be exactly one `#[ink(storage)]` struct.

     This struct defines the layout of the storage that the ink! smart contract operates on.
     The user is able to use a variety of built-in facilities, combine them in various ways
     or even provide their own implementations of storage data structures.

     For more information visit the `ink_storage` crate documentation.

     **Example:**

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn construct() -> Self { Flipper { value: false } }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(constructor)]` defined method.

     Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
     upon contract instantiation. A contract may define multiple such constructors which
     allow users of the contract to instantiate a contract in multiple different ways.

     **Example:**

     Given the `Flipper` contract definition above we add an `#[ink(constructor)]`
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(message)]` defined method.

     Methods flagged with `#[ink(message)]` are special in that they are dispatchable
     upon contract invocation. The set of ink! messages defined for an ink! smart contract
     define its API surface with which users are allowed to interact.

     An ink! smart contract can have multiple such ink! messages defined.

     **Note:**

     - An ink! message with a `&self` receiver may only read state whereas an ink! message
       with a `&mut self` receiver may mutate the contract's storage.

     **Example:**

     Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message)]
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Payable Messages:**

     An ink! message by default will reject calls that additional fund the smart contract.
     Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
     flag to it. An example below:

     Note that ink! constructors are always implicitly payable and thus cannot be flagged
     as such.

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(payable)] // You can either specify payable out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, payable)] // ...or specify payable inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Controlling the messages selector:**

     Every ink! message and ink! constructor has a unique selector with which the
     message or constructor can be uniquely identified within the ink! smart contract.
     These selectors are mainly used to drive the contract's dispatch upon calling it.

     An ink! smart contract author can control the selector of an ink! message or ink!
     constructor using the `selector` flag. An example is shown below:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             #[ink(selector = "0xDEADBEEF")] // Works on constructors as well.
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(selector = "0xCAFEBABE")] // You can either specify selector out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, selector = "0xFEEDBEEF")] // ...or specify selector inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

## Interacting with the Contract Executor

The `ink_env` crate provides facilities to interact with the contract executor that
connects ink! smart contracts with the outer world.

For example it is possible to query the current call's caller via:

```rust
use ink_env;
ink::env::test::run_test::<ink::env::DefaultEnvironment, _>(|_| {
    let caller = ink::env::caller::<ink::env::DefaultEnvironment>();
    let _caller = caller;
    Ok(())
}).unwrap();
```

However, ink! provides a much simpler way to interact with the contract executor
via its environment accessor. An example below:

```rust
#[ink::contract]
mod greeter {
    #[ink(storage)]
    pub struct Greeter;

    impl Greeter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let caller = Self::env().caller();
            let message = format!("thanks for instantiation {:?}", caller);
            ink::env::debug_println(&message);
            Greeter {}
        }

        #[ink(message, payable)]
        pub fn fund(&mut self) {
            let caller = self.env().caller();
            let value = self.env().transferred_balance();
            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);
            ink::env::debug_println(&message);
        }
    }
}
```

## Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
 #[ink::contract]
 mod erc20 {
     /// Defines an event that is emitted every time value is transferred.
     #[ink(event)]
     pub struct Transferred {
         from: Option<AccountId>,
         to: Option<AccountId>,
         value: Balance,
     }

     #[ink(storage)]
     pub struct Erc20 {
         total_supply: Balance,
         // more fields ...
     }

     impl Erc20 {
         #[ink(constructor)]
         pub fn new(initial_supply: Balance) -> Self {
             let caller = Self::env().caller();
             Self::env().emit_event(Transferred {
                 from: None,
                 to: Some(caller),
                 value: initial_supply,
             });
             Self { total_supply: initial_supply }
         }

         #[ink(message)]
         pub fn total_supply(&self) -> Balance {
             self.total_supply
         }
     }
 }
```

## Example: Flipper

The below code shows the complete implementation of the so-called Flipper
ink! smart contract.
For us it acts as the "Hello, World!" of the ink! smart contracts because
it is minimal while still providing some more or less useful functionality.

It controls a single `bool` value that can be either `false` or `true`
and allows the user to flip this value using the `Flipper::flip` message
or retrieve the current value using `Flipper::get`.

```rust
#[ink::contract]
pub mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// Creates a new flipper smart contract initialized with the given value.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            Self { value: init_value }
        }

        /// Flips the current value of the Flipper's bool.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value of the Flipper's bool.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/default.md
````markdown
---
title: "#[ink(default)]"
slug: /macros-attributes/default
hide_title: true
---

![Text/default Title Picture](/img/title/text/default.svg)

Applicable to ink! messages and constructors.

Works as a hint for UIs to determine if constructor/message should be picked as default.

At most one constructor or message can be marked as default.

## Example

```rust
#[ink(message, default)]
pub fn im_default(&self) {    
}
```
````

## File: versioned_docs/version-v4/macros-attributes/event.md
````markdown
---
title: "#[ink(event)]"
slug: /macros-attributes/event
hide_title: true
---

![Text/event Title Picture](/img/title/text/event.svg)

Applicable on `struct` definitions.

Defines an ink! event. A contract can define multiple such ink! events.

[See our section on Events](../basics/events.md) for a detailed description and examples.
````

## File: versioned_docs/version-v4/macros-attributes/implementation.md
````markdown
---
title: "#[ink(impl)]"
slug: /macros-attributes/impl
hide_title: true
---

![Text/impl Title Picture](/img/title/text/impl.svg)

This attribute supports a niche case that is rarely needed.

Can be applied on ink! implementation blocks in order to make ink! aware
of them. This is useful if such an implementation block doesn't contain
any other ink! attributes, so it would be flagged by ink! as a Rust item.
Adding `#[ink(impl)]` on such implementation blocks makes them treated
as ink! implementation blocks thus allowing to access the environment
etc.

Note that ink! messages and constructors still need to be explicitly
flagged as such.

## Example

An implementation block can be defined as a trait implementation
for the ink! storage struct using the `#[ink(impl)]` annotation ‒ even
if none of its interior items have any ink! specific attributes on them:

```rust
use core::convert::TryFrom;

#[ink::contract]
mod my_module {
    #[ink(storage)]
    pub struct MyStorage {
        /* storage fields */
    }

    #[ink(impl)]
    impl MyStorage {
        fn my_method(&self) -> i32 {
            /* method implementation */
        }
    }

    impl MyStorage {
      #[ink(constructor)]
      pub fn my_constructor() -> Self {
          /* constructor implementation */
      }

      #[ink(message)]
      pub fn my_message(&self) {
          /* message implementation */
      }
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/message.md
````markdown
---
title: "#[ink(message)]"
slug: /macros-attributes/message
hide_title: true
---

![Text/message Title Picture](/img/title/text/message.svg)

Applicable to methods.

Flags a method for the ink! storage struct as message making it available to the API for calling the contract.

Note that all public functions must use the `#[ink(message)]` attribute

There must be at least one `#[ink(message)]` defined method.

Methods flagged with `#[ink(message)]` are special in that they are dispatchable
upon contract invocation. The set of ink! messages defined for an ink! smart contract
define its API surface with which users are allowed to interact.

An ink! smart contract can have multiple such ink! messages defined.

An ink! message with a `&self` receiver may only read state whereas an ink! message
with a `&mut self` receiver may mutate the contract's storage.

```rust
#[ink(message)]
pub fn purely_reading(&self, from: AccountId) {
    // actual implementation
}

#[ink(message)]
pub fn mutates_storage(&mut self, from: AccountId) {
    // actual implementation
}
```


## Messages Return Value

The return value of a message needs to implement `scale::Encode`.

It is notable that the collections under `ink_storage` ‒ such as e.g. `Vec` or `HashMap` ‒
don't implement `scale::Encode`. This means you can't just return a `Vec` from an ink! message.
This restriction is intentional ‒ returning a complete data structure with a potentially unbounded
content is an anti-pattern for smart contracts. Just think about the unpredictable gas costs.

If you _really really_ need to return a data structure in its entirety then use the ones from
`ink_prelude` (e.g. `ink_prelude::vec::Vec`). Those implement `scale::Encode`.


## Example

Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
as follows:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {

        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/namespace.md
````markdown
---
title: "#[ink(namespace = \"…\")]"
slug: /macros-attributes/namespace
hide_title: true
---

![Text/namespace Title Picture](/img/title/text/namespace.svg)

Applicable to ink! trait implementation blocks.

Applied on ink! trait implementation blocks to disambiguate other trait
implementation blocks with equal names.

## Example

```rust
#[ink(namespace = "my_namespace")]
impl MyTrait for MyStorage {
    #[ink(message)]
    fn my_message(&self) {}
}
```
    
This changes the resulting selectors of all the ink! messages and ink! constructors within the trait implementation.
Thus allowing disambiguation between trait implementations with overlapping message or constructor names.
````

## File: versioned_docs/version-v4/macros-attributes/overview.md
````markdown
---
title: Overview
slug: /macros-attributes
hide_title: true
---

![Text/contract Title Picture](/img/title/text/contract.svg)

An ink! module is the module that is flagged by `#[ink::contract]` containing all the ink! definitions.
All ink! attributes are available to specify inside an ink! module.

## Merging Attributes

It is possible to merge attributes that share a common flagged entity.
The example below demonstrates this for a payable message with a custom selector.

```rust
#[ink(message)]
#[ink(payable)]
#[ink(selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
We can also write the above ink! message definition in the following way:
```rust
#[ink(message, payable, selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
````

## File: versioned_docs/version-v4/macros-attributes/payable.md
````markdown
---
title: "#[ink(payable)]"
slug: /macros-attributes/payable
hide_title: true
---

![Text/payable Title Picture](/img/title/text/payable.svg)

Applicable to ink! messages.

Allows receiving value as part of the call of the ink! message.
ink! constructors are implicitly payable, due to the initial endowment which a contract requires.

An ink! message by default will reject calls that additional fund the smart contract.
Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
flag to it. An example below:

Note that ink! constructors are always implicitly payable and thus cannot be flagged
as such.

```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        #[ink(payable)] // You can either specify payable out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message, payable)] // or specify payable inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```

## Example

```rust
#[ink(message, payable)]
pub fn pay_me(&self) {
    let _transferred = self.env().transferred_value();
}
```

See the [`examples/contract-transfer`](https://github.com/use-ink/ink-examples/blob/main/contract-transfer/lib.rs) contract for a more extensive example.
````

## File: versioned_docs/version-v4/macros-attributes/selector.md
````markdown
---
title: "#[ink(selector = S:u32)]"
slug: /macros-attributes/selector
hide_title: true
---

![Text/selector Title Picture](/img/title/text/selector.svg)

Applicable to ink! messages and ink! constructors.

By default ink! creates a selector for each message and constructor.
This is necessary since the contract is compiled to a Wasm blob and functions are invoked by invoking the
selector, which identifies a method ‒ method names are no longer available in these underlying layers.

Using this attribute it is possible to specify a concrete dispatch selector for the flagged entity. This allows a contract author to precisely control the selectors of their APIs making it possible to rename their API without breakage.

A selector must be a `u32` decodable integer. For example

- `selector = 0xCAFEBABE`
- `selector = 42`

An exception is the fallback selector `_`, allowing contract calls not matching any of the other message selectors to be dispatched to a fallback message. Fallback messages can be `payable`.

## Examples

```rust
#[ink(message, selector = 0xC0DECAFE)]
fn my_message_1(&self) {}

#[ink(message, selector = 42)]
fn my_message_2(&self) {}

#[ink(message, payable, selector = _)]
fn my_fallback(&self) {}
```
… then the selector of `my_message_1` is `[0xC0, 0xDE, 0xCA, 0xFE]` and the selector of `my_message_2` is `[0, 0, 0, 42]`
since setting the selector manually overrides the automatically generated selector.

## Controlling the messages selector

Every ink! message and ink! constructor has a selector with which the
message or constructor can be uniquely identified within the ink! smart contract.
Non-unique message or constructor selector lead to a compile time error.
These selectors are mainly used to drive the contract's dispatch upon calling it.

An ink! smart contract author can control the selector of an ink! message or ink!
constructor using the `selector` flag. An example is shown below:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        #[ink(selector = 0xDEADBEEF)] // Works on constructors as well.
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: initial_value }
        }

        #[ink(message)]
        #[ink(selector = 0xCAFEBABE)] // You can either specify selector out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        #[ink(message, selector = 0xC0DECAFE)] // ...or specify the selector inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/storage.md
````markdown
---
title: "#[ink(storage)]"
slug: /macros-attributes/storage
hide_title: true
---

![Text/storage Title Picture](/img/title/text/storage.svg)

Applicable on `struct` definitions. 

Applied on `struct` types in order to flag them for being
the contract's storage definition.
There can only be one ink! storage definition per contract.

There must be exactly one `#[ink(storage)]` struct.

This struct defines the layout of the storage that the ink! smart contract operates on.
The user is able to use a variety of built-in facilities, combine them in various ways
or even provide their own implementations of storage data structures.

For more information visit the `ink_storage` crate documentation.

## Example


```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn construct() -> Self { Flipper { value: false } }

        #[ink(message)]
        pub fn message(&self) {}
    }
}
```
````

## File: versioned_docs/version-v4/macros-attributes/topic.md
````markdown
---
title: "#[ink(topic)]"
slug: /macros-attributes/topic
hide_title: true
---

![Text/topic Title Picture](/img/title/text/topic.svg)

Applied on fields of ink! event types to indicate that they are topics.

Tells the ink! codegen to provide a topic hash for the given field. Every ink! event can only have a limited number of such topic field.
The semantics are similar to indexed event arguments in Solidity.

## Example

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance
}
```
````

## File: versioned_docs/version-v4/monthly-update/2022/03.md
````markdown
---
title: March '22
slug: /monthly-update/2022/03
---

## StackExchange Beta

We are participating in the Beta of [the Substrate StackExchange](https://substrate.stackexchange.com/) site!

If this StackExchange site gains traction it will be made available to the general public.
To reach this goal it's important to have the community engage there though.

Head over to [substrate.stackexchange.com](https://substrate.stackexchange.com/)
to ask us any questions (there is an `ink` tag)!

## ink! 3.0 🦑

The star of the show this month is the release of ink! 3.0:

- You can find the release notes [here](https://github.com/use-ink/ink/releases/tag/v3.0.0).
- We've also published a blog post with some more context:
  [ink! 3.0: Parity’s Rust-Based Language for WASM Smart Contracts Gets a Major Update](https://www.parity.io/blog/ink-3-0-paritys-rust-based-language-gets-a-major-update).

The team has been working on this release for a while. If you're a developer you're
probably aware of this thanks to the long list of release candidates (`v3.0.0-rcX`) we've
pushed out in preparation for the stable 3.0 release.

The main idea behind ink! 3.0 is that it's just Rust. The syntax is pretty much
identical, and all the tooling you know and love, such as `rust-analyzer` and Clippy,
just works.

Some other included changes worth highlighting:
- Reduced contract sizes for better performance in a parachain context.
- Support for cross-contract calls, making it easier to write complex applications.
- Trait support, allowing for a more Rusty development experience.

## cargo-contract 1.0

Alongside the release of ink! 3.0 we're also releasing [`cargo-contract`](https://github.com/use-ink/cargo-contract) in
its first stable version 1.0.
`cargo-contract` is a handy developer tool for building, testing, and deploying ink!
contracts.

Some notable updates in this release include:
- Support for uploading and calling contracts on a chain with `pallet-contracts`.
- Linting rules for ink! contracts, giving developers warnings about common errors.

## Delegate Call

Another update worth pointing out is the addition of `delegate_call`. What this allows is
a way for contracts to forward a call they received to another contract.

One use case for this is implementing a [Proxy Upgrade Pattern](https://docs.openzeppelin.com/upgrades-plugins/1.x/proxies) for smart contracts.

```
User ---- tx ---> Proxy ----------> Implementation_v0
                     |
                      ------------> Implementation_v1
                     |
                      ------------> Implementation_v2
```

This required some work in both `pallet-contracts` and ink!. Shoutout to the team over
at [Supercolony](https://github.com/Supercolony-net) for driving the development here!

We now have two example contracts for writing upgradeable contracts in ink!.
[See here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts)
for a deeper explanation.

## Workshop & Talk at EthDenver

[Hernando](https://github.com/hcastano) and [Achim](https://github.com/achimcc) went to EthDenver to
give a workshop and talk regarding ink! on the Substrate stage!

The recording is available [here](https://www.youtube.com/watch?t=7122&v=NrG3co6UWEg).
````

## File: versioned_docs/version-v4/monthly-update/2022/04.md
````markdown
---
title: April '22
slug: /monthly-update/2022/04
---

## Releases 🆕

For ink! we released [v3.0.1](https://github.com/use-ink/ink/releases/tag/v3.0.1) with
minor bugfixes. Besides that we made a number of improvements to our examples ‒ mostly to
our [upgradeable contracts examples](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts).

For [`cargo-contract`](https://github.com/use-ink/cargo-contract) we released
[v1.1.1](https://github.com/use-ink/cargo-contract/releases/tag/v1.1.1) and
[v1.2.0](https://github.com/use-ink/cargo-contract/releases/tag/v1.2.0)
with bug fixes, a new sub-command `decode`, and improved support for the `call` and
`instantiate` sub-commands.

For tutorials, development and testing we recommend using our
[`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node).
We issued the release [v0.13.0](https://github.com/paritytech/substrate-contracts-node/releases/tag/v0.13.0),
which is in sync with a recent Substrate `master` (see the release notes for the specific commit hash).
Pre-built binaries for the release are available for Linux and Mac.

## Community Badges 🙌

We've added two versions of a community badge.

If you have a public repository with an ink! contract it would be awesome
if you could add one of those!

### Normal Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge.svg)](https://github.com/use-ink/ink)
```

### Flat Design

[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)

```markdown
[![Built with ink!](https://raw.githubusercontent.com/use-ink/ink/master/.images/badge_flat.svg)](https://github.com/use-ink/ink)
```

## Team Retreat in Athens 🇬🇷

We ‒ the developers working on ink!, Substrate's [`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts),
and the [Contracts UI](https://github.com/use-ink/contracts-ui) ‒
went on a team retreat in April. We discussed our roadmap for the rest
of this year, as well as some technical designs of how we want to implement
e.g. XCM in ink!. We're normally working across different time zones, with
some of us embracing the digital nomad lifestyle. Hence it was very
productive to gather together for a week.

We also did a little hackathon to do some dog-fooding: we've built a
dApp that makes use of all components by the above teams. We plan
to open source it soon, stay tuned for that 😎.

There's a lot on the horizon and we're enthusiastic about the rest of this year!

![Athens 2022](/img/monthly-update/athens-2022.jpg)

## Spanish Twitter Space 🐦

[Hernando](https://github.com/hcastano) was a guest at the spanish Polkadot
Twitter Space. The space has been recorded: https://twitter.com/i/spaces/1MnGnkgmNdBJO.

## StackExchange Public Beta

The [Substrate & Polkadot StackExchange](https://substrate.stackexchange.com/) site
has graduated from its private beta ‒ the site is now in public beta!

This means that the site is now indexed by search engines and can be
browser without any user account.

If you have any questions regarding ink! or smart contracts on Substrate this is
the place to be.

## Canvas Update

You may know that we were working on a common good smart contracts parachain
named Canvas. We've decided to put this project on hold. This gives us more
room to make ink! and the [`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
as competitive as possible, as well as help parachain teams include those.
This is not to say that we'll never get back to Canvas, but as of right now
we're no longer working on this project.
````

## File: versioned_docs/version-v4/monthly-update/2022/05.md
````markdown
---
title: May '22
slug: /monthly-update/2022/05
---

## Workshops & Talks 🎤

[Michi](https://github.com/cmichi) gave a few talks this month!
- A workshop for the ChainLink spring hackathon
    - [YouTube link: Parity's ink! 101 | Write Smart Contracts for Substrate-Based Chains](https://www.youtube.com/watch?v=_J6BsbOaedw).
- An introduction to ink! for Supercolony's Wasm Conference (wasm-conference.com)
    - We'll update this with a link to the recording once it's uploaded!

## `awesome-ink` Repository 🤩

Following popular demand we've created
[https://github.com/use-ink/awesome-ink](https://github.com/use-ink/awesome-ink) ‒
a curated list of awesome projects related to ink!.

## Playground 🕹

<!-- markdown-link-check-disable-next-line -->
The ink! playground has been published at https://ink-playground.substrate.io!

It's handy for a couple of things. For example:

* You want to experiment with developing a contract without having to set up Rust locally.
* You run into an error and want to share a permalink to a code example, so that somebody
can help you find the issue. This can be very helpful in case you post a question e.g. on our
[StackExchange](https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes) site.

## Releases 🆕

For ink! we released [v3.1.0](https://github.com/use-ink/ink/releases/tag/v3.1.0),
and [v3.2.0](https://github.com/use-ink/ink/releases/tag/v3.2.0).

For [`cargo-contract`](https://github.com/use-ink/cargo-contract/) we released
[v1.3.0](https://github.com/use-ink/cargo-contract/releases/tag/v1.3.0) and [v1.4.0](https://github.com/use-ink/cargo-contract/releases/tag/v1.4.0).

The release notes contain more details.

### Polkadot v0.9.22
The [Polkadot v0.9.22](https://github.com/paritytech/polkadot/releases/tag/v0.9.22)
release brought with it some exciting changes for the Contracts pallet. The release
includes [a fix](https://github.com/paritytech/substrate/pull/11372) for a possible
PoV attack vector.

The tl;dr here is that `pallet-contracts` can be safely added to your production runtimes
(although it would _probably_ have been fine before too, on Kusama anyways 😉).

We have included this fix as part of the [v0.16.0](https://github.com/paritytech/substrate-contracts-node/releases/tag/v0.16.0)
release of the
[`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node).

## The URL to this portal changed

It's now available at [https://use.ink](https://use.ink).

## Canvas Testnet ➜ Contracts Testnet

We've renamed our "Canvas" testnet to "Contracts" testnet.
More information about the background for this can be found in
[last months digest](./04.md#canvas-update).

## Berlin Work Session 🇩🇪
Part of the team met up with our valued contributor [@xgreenx](https://github.com/xgreenx)
in Berlin to talk about ink!.

In particular, the session focused on an upcoming refactoring of the ink! storage system
(PR [#1217](https://github.com/use-ink/ink/pull/1217)) which Green is actively
working on.
````

## File: versioned_docs/version-v4/monthly-update/2022/06.md
````markdown
---
title: June '22
slug: /monthly-update/2022/06
---

## ink! smart contracts in production on Kusama 🎉

The Astar team announced at the Polkadot Decoded conference that the
[`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
is now enabled on the Shiden parachain on Kusama.

_This means you can deploy your ink! contracts to production on this parachain!_

See the Polkadot Decoded talk by Astar CTO Hoon Kim [here](https://www.youtube.com/watch?v=qBM8VNPoXpg)
or the accompanying [blog post](https://medium.com/astar-network/shiden-opens-door-to-wasm-e5bcc937235).

## Developer Survey 📓

We're curious to learn more about you! If you have a few minutes to spare and would like
to [tell us about your experience](https://forms.gle/o3EC4Vz9kVrwiGeY9) learning about and developing smart contracts we'd very
much appreciate that ❤️.

## Open Positions 💼

We are hiring!

Check out this page for more details:
[Rust Developer ‒ ink! Smart Contracts](https://boards.greenhouse.io/parity/jobs/5145492003).

## Workshops & Talks 🎤

[Hernando](https://github.com/hcastano) gave an introductory workshop for ink!:
[Polkadot Hackathon: North America - Introduction to ink!](https://www.youtube.com/watch?v=DZW7I_Lf-ps).

For the [Polkadot Decoded](https://decoded.polkadot.network/) conference on June 29-30 a number
of ink! talks are scheduled:

* Hoon Kim, Astar Network ‒ [Next Generation Smart Contracts with WASM](https://www.youtube.com/watch?v=XFKye24ZUl0).
* Demo: Shelven Zhou, Phala Network ‒ [Enable HTTP Requests in ink! Contract with Chain Extension](https://decoded.polkadot.network/2022edition/).
* Demo: Hang Yin, Phala Network ‒ [Build an Oracle in 15 minutes with ink!](https://decoded.polkadot.network/2022edition/).
* Tech Talk: Sven Seventimes, Supercolony ‒ [How To Write Upgradable Contracts in ink!](https://www.youtube.com/watch?v=eo_cY8lVNes).
* Tech Talk: Andrew Jones, Parity Technologies ‒ [Smart Contracts: Past, Present, Future](https://www.youtube.com/watch?v=Jqi_Jy5resQ).
* Workshop: Hernando Castano, Parity Technologies ‒ [Writing Smart Contracts with ink!: What's Next After Flipper?](https://www.youtube.com/watch?v=yykPQF0tkqk).
    * The code for the workshop can be found [here](https://github.com/HCastano/decoded-2022-demo).

## Releases 🚢

We released ink! 3.3.0. This release was meant to resolve some issues around semantic
versioning incompatibilities which were introduced in the ink! 3.1.0 release. For more
details take a look at the [release notes](https://github.com/use-ink/ink/releases/tag/v3.3.0).

The Contracts UI has moved from being hosted on GitHub pages and is now available
at [https://contracts-ui.substrate.io](https://contracts-ui.substrate.io).
````

## File: versioned_docs/version-v4/monthly-update/2022/07.md
````markdown
---
title: July '22
slug: /monthly-update/2022/07
---

## 🌌 Roloi migrates from CosmWasm to ink!

We're very happy about this:
The Roloi team has migrated their smart contracts from CosmWasm to ink!.

They wrote a blog post with a number of flattering words on their migration
process:
[CosmWasm to ink! — Beyond the Cosmos](https://medium.com/@RoloiMoney/cosmwasm-to-ink-beyond-the-cosmos-e4920604f9cb).


## 📺 Wasm Conference 2022 Recordings

In May, the [SuperColony team](https://github.com/Supercolony-net) organized
a conference on WebAssembly smart contracts in Polkadot.

[Alex](https://github.com/athei) and [Michi](https://github.com/cmichi) 
took part there and the recordings have been uploaded now:

* Talk: [What is Parity's "ink!"?](https://www.youtube.com/watch?v=bhtNKW2oeXs).
* Panel: [Will WASM be able to substitute EVM?](https://www.youtube.com/watch?v=UZ_fJZ5yosg).

There were also a number of other interesting talks from Wasm Smart Contract stakeholders.
For example, [The Bright Future of WebAssembly Smart Contracts](https://www.youtube.com/watch?v=OO5EEjYqb80).
````

## File: versioned_docs/version-v4/monthly-update/2022/08.md
````markdown
---
title: August '22
slug: /monthly-update/2022/08
---

## Releases 🚢

We've made a couple releases this month:

* `cargo-contract` [`v1.5.0`](https://github.com/use-ink/cargo-contract/releases/tag/v1.5.0)
* ink! [`v4.0.0-alpha.1`](https://github.com/use-ink/ink/releases/tag/v4.0.0-alpha.1)
* `cargo-contract` [`v2.0.0-alpha.1`](https://github.com/use-ink/cargo-contract/releases/tag/v2.0.0-alpha.1)

Our goal is to publish the next major releases of  ink! and `cargo-contract` in October;
this will then be ink! 4.0 with an accompanying `cargo-contract` 2.0.
You can find the tracking issue for ink! 4.0 [here](https://github.com/use-ink/ink/issues/1343).

## W3F Grant 🙌

`cargo-contract` currently requires some external dependencies to be installed by users
before they can use it.
One of those is `wasm-opt`, which we use for optimizing the WebAssembly file size of
an ink! contract.

Having this tool as an external dependency is causing friction for beginners.
They have to install it manually and the process varies for each operating system.
It bloats up the `cargo-contract` installation instructions and people not following
them properly run into errors because of a missing dependency.

Luckily [@brson](https://github.com/brson) and [@aimeedeer](https://github.com/aimeedeer)
have applied for a Web3 Foundation (W3F) grant to fix exactly that for
`wasm-opt`!
They've delivered the first milestone ‒ a proof of concept ‒ this month.
You can read their summary [here](https://github.com/w3f/Grant-Milestone-Delivery/pull/552).

Their next milestone is the integration into `cargo-contract` which will reduce our
installation instructions by one step 🙌!

## Squink in Cambridge 🇬🇧

Some people from our team spent a week in Cambridge for a Parity
event. We can't disclose too much about it at this point, but
there'll be more information on it in a while.

We brought our mascot [Squink](../../faq/faq.md#who-is-squink) along and [Andrew](https://github.com/ascjones)
played around with his early access to DALL·E 2.
The photo below was generated by asking for Instagram posts of Squink visiting
the Corpus Christi college in Cambridge.

![Squink in Cambridge](/img/monthly-update/squink-in-cambridge.png)

## Swanky 😎

The Astar team has developed a suite of tools for WebAssembly smart contract
development called Swanky!

It consists of a command-line tool and a node for easy contract development.
Read more about it in their
[Medium post](https://medium.com/astar-network/swanky-the-all-in-one-wasm-tool-50c0ed9f07a6).
````

## File: versioned_docs/version-v4/monthly-update/2022/09.md
````markdown
---
title: September '22
slug: /monthly-update/2022/09
---

## One thousand GitHub stars 🤩

![One thousand ink! GitHub stars](/img/monthly-update/ink-1k-stars.jpeg)

The ink! repository recently surpassed one thousand stars on GitHub. It’s now
the third most starred Parity repository on GitHub, after Substrate and Polkadot.
We want to say a big “Thank you!” to everyone who contributed in making this happen!
Over the last few years we’ve seen contributions in all forms bring the project to
where it stands today. Thank you for writing your contracts in ink!, for creating
issues and pull requests, for providing us with good and constructive feedback,
for answering questions on Substrate StackExchange, for creating third-party tooling
for ink!, for writing blog posts about us, and for holding workshops!

A lot has happened over the last few years in the ink! world. The first commit was
in December 2018 and our current version is `v3.3.1`. We’re working hard on shipping
the next major iteration with `v4.0` soon. An open point that comes up regularly is
that we’ve never written an article explaining from start to finish what ink! is and
how it ties into Substrate and Polkadot. This occasion was a great opportunity
to do just that!

You can find the article at [https://www.parity.io/blog/what-is-paritys-ink](https://www.parity.io/blog/what-is-paritys-ink).

## Beyond the Chain ⛓

![Beyond the Chain](/img/monthly-update/beyond-the-chain.jpg)

ink! core developer [Hernando](https://github.com/hcastano) hosted the "[Beyond the Chain](https://www.eventbrite.com/cc/beyondthechain-at-berlin-blockchain-week-2022-1103509)"
meetups in Berlin (as part of [the Berlin Blockchain Week](https://blockchainweek.berlin))
and in London. Hernando gave talks about the architecture of Unstoppable Applications, illustrating
how the building blocks of Polkadot (like [browser-embedded light clients](https://www.youtube.com/watch?v=9SXQIAgedzk&t=768s))
enable building those.

The meetups were packed! On the first floor of our office in Berlin we counted 90+ people.

## Twitter 🐣

The bird has hatched! We've set up a Twitter account: [@ink_lang](http://twitter.com/ink_lang),
where we'll tweet about anything we find interesting.

## ink! 4.0 is shaping up 📈

We've made a couple releases this month:

* ink! [`v4.0.0-alpha.3`](https://github.com/use-ink/ink/releases/tag/v4.0.0-alpha.3)
* `cargo-contract` [`v2.0.0-alpha.2`](https://github.com/use-ink/cargo-contract/releases/tag/v2.0.0-alpha.2)
* `cargo-contract` [`v2.0.0-alpha.3`](https://github.com/use-ink/cargo-contract/releases/tag/v2.0.0-alpha.3)

We aim for a stable release of ink! `v4.0` and `cargo-contract` `v2.0` in late October.

You can find the tracking issue for ink! 4.0 [here](https://github.com/use-ink/ink/issues/1343).
Please note that we've moved XCM support to the roadmap of a 4.1 release, so it won't be
included in 4.0. XCM support won't be a breaking change, hence we can put it into a 
subsequent 4.1.

## Polkadot Forum 📣

One major achievement in the Polkadot/Kusama space this year was the creation of a
dedicated StackExchange site: [https://substrate.stackexchange.com](https://substrate.stackexchange.com).

The site is ideal for asking questions, but until now there was no platform for having longer-form
discussions about the direction of Polkadot/Kusama.
This changes now with the Polkadot Forum:
[https://forum.polkadot.network](https://forum.polkadot.network).

## New Domain 🏠

We've moved this documentation portal from `use.ink` to a new domain: [`use.ink`](http://use.ink).
It was a three letter domain, we just couldn't resist!
````

## File: versioned_docs/version-v4/monthly-update/2022/10.md
````markdown
---
title: October '22
slug: /monthly-update/2022/10
---

## Polkadot Blockchain Academy: Jan/Feb '23 🎓

<iframe width="560" height="315" src="https://www.youtube.com/embed/ODg6EPfekf0" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>

In July we spent some time in Cambridge on a secret mission.
At the time we teased this in our monthly update and said we'd
give more details soon. Well, the cat (or rather squid?) is out
of the bag!

We were holding lectures on WebAssembly smart contracts as part
of the Polkadot Blockchain Academy! This was the first, intentionally
low-key, run of a Polkadot education program with an academic
focus. This first run was low-key to smooth out the edges and verify
if our idea of a curriculum worked out in the real world.
It did and there will be many more academies! Starting with the next
one, which is happening in January and February 2023 in Buenos Aires.

We will also be giving lectures there again! You can find more
details on [http://dot.li/academy](http://dot.li/academy).

## Astar ported Uniswap v2 to ink! 💱

Astar has published a showcase dApp built with ink!:
a Uniswap-V2 DEX. This is amazing and we can't wait to
see where this is going!

They are working on a UI for the DEX as well. You can find
the repository here:
[`AstarNetwork/wasm-tutorial-dex`](https://github.com/AstarNetwork/wasm-tutorial-dex).

## Release Updates 🆕

We've published a release of ink! [`v3.4`](https://github.com/use-ink/ink/releases/tag/v3.4.0)
this month.

For ink! `v4.0` and `cargo-contract` `v2.0` we decided to shift our
target release date a bit, to January 2023. There are a number of
reasons why we decided to do this:

- We have made a number of breaking changes and want to wait until popular
  user interfaces (like [`polkadot-js`](https://polkadot.js.org/apps/) or
  [`contracts-ui`](https://ui.use.ink)) support those.
- We want to have a release candidate out for at least some weeks to give
  everyone the chance to already upgrade tooling and provide feedback.
- We have an audit going on and would ideally like to incorporate more
  of the results.

A breaking change that has formed in the last weeks is that we
will have to remove [`ink::env::random`](https://docs.rs/ink_env/3.3.1/ink_env/fn.random.html).
This function allowed contract developers getting random entropy.
There is unfortunately no way how this can be done safely enough
with built-in Substrate primitives on-chain currently. We're
following the recommendation of our auditors to remove it.

The alternative right now is to provide random entropy off-chain to
the contract, to use a random entropy oracle, or to have a chain-extension
that does this, in case the chain has a possibility to do so.

We hope to bring this function back in a future release of ink!, the
best hope right now is that it could come back with [Sassafras](https://wiki.polkadot.network/docs/learn-consensus#badass-babe-sassafras), a block production
protocol for future versions of Polkadot.

## Conference Season 📢

Many from our team have been on the road in the last weeks.
You might have met us at DappCon, DevCon, or EuroRust.

There's more to come and a number of us will be at [sub0 in
Lisbon at the end of November '22](https://sub0.polkadot.network/).
We have two events scheduled there, a talk and a fireside chat.
Come by and talk to us if you're there!

## Blog Post on `wasm-opt-rs` 🙌

[Brian Anderson](https://github.com/brson) wrote a blog post on [his
Web3 Foundation grant](https://github.com/w3f/Grants-Program/pull/1070)
to get rid of `wasm-opt` as an external dependency for `cargo-contract`.

This was a contribution that we looked forward to a lot.
External dependencies cause so much user friction. For once, it's
another manual step in the installation process, which is not always
straight forward and different for each operating system.
There's other issues too, we don't have control over which
version of the dependency is installed on the local system and
have to throw errors to the user, causing more user friction.

All of this is just solved now by having [`wasm-opt`](https://crates.io/crates/wasm-opt)
be a direct dependency of `cargo-contract`.

The blog post is an interesting read, you can find it on
Brian's blog [here](https://brson.github.io/2022/10/26/creating-wasm-opt-rust-bindings-with-cxx).

## Solang Solidity compiler incubated into Hyperledger Foundation 🎉

ink! contracts are executed by Substrate's [`pallet-contracts`](../../intro/how-it-works.md);
besides ink! there are two other languages that you can use to
write smart contracts for this pallet: [ask!](https://github.com/ask-lang/ask)
(Assembly Script) and Solidity via [the Solang compiler](https://github.com/hyperledger-labs/solang).

Solang supports different blockchains as compiler targets, one
of them being `pallet-contracts`. Our colleague [@xermicus](https://github.com/xermicus)
is working full-time on this Substrate backend in Solang.

The project has now been incubated into the Hyperledger Foundation,
hosted by the Linux Foundation. This is a big recognition for
the project!

In ink!, supporting a symbiotic interaction with Solidity contracts
is an important part of the puzzle for us and we're looking forward
to the next stages of Solang.

More details can be found [in the announcement blog post](https://www.hyperledger.org/blog/2022/09/12/meet-hyperledger-solang-a-portable-solidity-compiler).
````

## File: versioned_docs/version-v4/monthly-update/2022/11.md
````markdown
---
title: November '22
slug: /monthly-update/2022/11
---

## ink! `v4.0.0-beta` 🦑

We released the ink! [`v4.0.0-beta`](https://github.com/use-ink/ink/releases/tag/v4.0.0-beta)! 🎉

The focus of this beta release was to establish the stable ABI for the final `v4.0.0`
release. It means that whilst subsequent `beta` releases may contain breaking contract
*code* changes, the ABI will remain the same so that any contract compiled and deployed
with `v4.0.0-beta` continue to be compatible with all future `v4.0.0` versions.

In order to build contracts which use ink! `v4.0.0-beta` you need to use
`cargo-contract` [`v2.0.0-beta`](https://github.com/use-ink/cargo-contract/releases/tag/v2.0.0-beta).

We also released
[`v0.22.1`](https://github.com/paritytech/substrate-contracts-node/releases/tag/v0.22.1)
 of the [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node)., which is compatible with the
`v4.0.0-beta` release.

If you're interested in digging further, check out the relevant `CHANGELOG`s.

## Parity Retreat in Sardinia 🌞

Our team (and Parity as a whole) spent a few days enjoying the warmth and sunshine of
Sardinia.

We talked about the road towards a stable ink! `v4.0` release, improvements to the non-Rust
developer experience, and ways to improve the adoption of ink!. Keep an eye out on the
next few updates to see the fruits of these discussions.

These in-person get togethers are especially valuable bonding experience for a global
team like ours. As of this writing we're spread across eight different countries!

![Sardinia 2022](/img/monthly-update/sardinia-2022.jpg)

## Shilling at Sub0 🗣️

Alex and German had a fireside chat session at [Sub0](https://sub0.polkadot.network/), the Polkadot Developer conference.

You can watch the recording [here on YouTube](https://www.youtube.com/watch?v=tIqcIxVm1GE).

![Sub0 Fireside 2022](/img/monthly-update/sub0-fireside-2022.jpg)

## ink! x OpenZeppelin 🔏

The Polkadot council approved a [treasury proposal](https://polkadot.subsquare.io/council/motion/296) funding
[OpenZeppelin](https://www.openzeppelin.com/)'s review and audit of ink! and the Contracts pallet.

The tl;dr here is that OpenZeppelin will be taking a look at ink! as a language and will
give some recommendations for how to make the language safer.

We'll be sharing more about this in the upcoming weeks once the review gets started!
````

## File: versioned_docs/version-v4/monthly-update/2022/12.md
````markdown
---
title: December '22
slug: /monthly-update/2022/12
---

## Happy Holidays! 🎊

![ink! Merry Christmas!](/img/monthly-update/xmas-22.jpg)

We wish you all happy holidays!

We are excited for the new year and have great things planned – starting
with our next major release ink! 4.0 early next year.
````

## File: versioned_docs/version-v4/monthly-update/2023/01.md
````markdown
---
title: January '23
slug: /monthly-update/2023/01
hide_title: true
---

![Monthly Update Jan Title Picture](/img/title/monthly-update-jan.svg)

## ink! x OpenZeppelin 🔏

![ink! OpenZeppelin](/img/monthly-update/ink-open-zeppelin.jpg)

Late last year, the Polkadot council approved a [treasury proposal](https://polkadot.subsquare.io/council/motion/296) funding
[OpenZeppelin](https://www.openzeppelin.com/)'s review and audit of ink! and the Contracts pallet.

The tl;dr here is that OpenZeppelin will be taking a look at ink! as a language and will
give some recommendations for how to make the language safer.

The on-chain proposal was supported by the Polkadot ecosystem teams Astar Network,
Bit.Country, OpenBrush, t3rn, Pendulum Network, Phala Network and Watr.
All of these already have – or are planning to have – the Contracts pallet that supports
ink! enabled on their runtime.

The OpenZeppelin audit is intended to make ink! even more secure and user-friendly for developers
than it already is. In addition, OpenZeppelin will provide feedback on security issues as well
as on common security pitfalls that Solidity cannot improve, but that ink! can.

The engagement with OpenZeppelin started in January. We're super happy about this
and will share more as we go along!

## ink! sessions from sub0 are online 📺️

sub0 is a conference for developers building at every level of the Polkadot tech stack:
from custom layer-1 blockchains to dApps & smart contracts, infrastructure, tooling,
cross-chain interoperability solutions, and more.

In November 2022, sub0 was taking place in Lisbon and two ink! sessions
were part of the program. The recordings are now available on YouTube:

* [Fireside Chat: ink! And Wasm Contracts](https://www.youtube.com/watch?v=tIqcIxVm1GE)
* [Build An Oracle In ink! On Phala Network](https://www.youtube.com/watch?v=MhnZ42o4QZM)

## Treasury Proposal 💰

A Polkadot treasury proposal that aims to encourage and promote
the adoption and development of WebAssembly smart contracts on
Polkadot parachains is up for vote!

The proposal was proposed by a coalition of ecosystem teams with
the goal of creating audited ink! and ask! smart contract showcases
and an incubation program.

[You can vote for the proposal here.](https://polkadot.subsquare.io/democracy/referendum/101)
````

## File: versioned_docs/version-v4/monthly-update/2023/02.md
````markdown
---
title: February '23
slug: /monthly-update/2023/02
hide_title: true
---

![Monthly Update Feb Title Picture](/img/title/monthly-update-feb.svg)

## ink! 4.0 + `cargo-contract` 2.0 released! 🥳

This is a biggie. We've released new major versions of ink! and `cargo-contract`.
You can find more information in [our announcement blog post](https://www.parity.io/we-just-released-ink-4-0).

In order to update your local `cargo-contract` installation you just have
to execute `cargo install cargo-contract --force`.

In order to update ink!, you can take a look at
[our migration guide](../../faq/migrating-from-ink-3-to-4.md).

## Buenos Aires 🇦🇷

Some people from our team spent a couple of weeks in Buenos Aires. 

### Polkadot Blockchain Academy

<img src="/img/monthly-update/ba-academy.jpeg" className="titlePic" />

We gave a number of lectures on general smart contract concepts,
`pallet-contracts` and ink! as part of
[the Polkadot Blockchain Academy](https://polkadot.network/development/academy/).

### Spanish ink! Meetup

<img src="/img/monthly-update/ba-meetup.jpeg" className="titlePic" />

<img src="/img/monthly-update/ba-meetup1.jpeg" className="titlePic" />

### Met up with Open Zeppelin

We met up with OpenZeppelin, as part of [our Polkadot treasury engagement](https://polkadot.polkassembly.io/treasury/190)
with them.

## Berlin Meetup 🇩🇪

There was an ink! meetup in Berlin, at Full Node! And it was not organized by us!
[Here's the lu.ma page](https://lu.ma/inkathon-meetup).

The meetup was organized by [Scio-Labs](https://scio.xyz) and [Aleph Zero](https://alephzero.org).
There were maybe 15 people there. Amazing!

Scio-Labs has created two ink! related projects:

* [`useInkathon`](https://github.com/scio-labs/use-inkathon): React Hooks library abstracting
  functionality of polkadot.js for working with ink! contracts.
* [INK!athon](https://inkathon.xyz/): Full-stack dApp boilerplate generator for ink! contracts + 
  a React frontend using the [useInkathon](https://github.com/scio-labs/use-inkathon) hooks library.
````

## File: versioned_docs/version-v4/monthly-update/2023/03.md
````markdown
---
title: March '23
slug: /monthly-update/2023/03
hide_title: true
---

![Monthly Update Mar Title Picture](/img/title/monthly-update-mar.svg)

## Community Meetup in Berlin 📣

<img src="/img/monthly-update/ink-meetup-berlin-03-23.png" className="titlePic" />

Together with [@scio_xyz](https://scio.xyz), we are hosting an ink! meetup in Berlin.

The meetup will take place on Thursday, March 30, 2023.

You can view the agenda and register on [our Meetup page](https://www.meetup.com/de-DE/parity/events/292157078/).

## ink! on YouTube 📺

We have launched our very own YouTube channel!

Check out [@ink-lang](https://www.youtube.com/@ink-lang).

<iframe width="330" height="587" src="https://www.youtube.com/embed/PkqvnLp-Huo" title="What is Consensus?" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

## Community Space on ink! 4.0

<iframe width="560" height="315" src="https://www.youtube.com/embed/Hcht8vkkYRM" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>

## Polkadot Blockchain Academy July 2023 🎓

Applications for the Polkadot Blockchain Academy are now open.

The next cohort will happen in Berkeley, California at UC Berkeley, USA,
from July 10th until August 10th, 2023. 

Check out [https://polkadot.network/academy](https://polkadot.network/academy)!
````

## File: versioned_docs/version-v4/monthly-update/archive.md
````markdown
---
title: Archive
slug: /monthly-update/archive
---

## 2022

* [August](./2022/08.md)
* [July](./2022/07.md)
* [June](./2022/06.md)
* [May](./2022/05.md)
* [April](./2022/04.md)
* [March](./2022/03.md)
````

## File: versioned_docs/version-v4/monthly-update/overview.md
````markdown
---
title: Overview
slug: /monthly-update/
hide_title: true
---

![Monthly Update Title Picture](/img/title/monthly-update.svg)

Hey there reader 👋!

This is meant to be a high-level overview of the changes that have taken place as part of
Parity's Web Assembly (Wasm) smart contract efforts. These efforts include the [`ink!`](https://github.com/use-ink/ink)
programming language, the [`pallet-contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts) execution environment, the [`cargo-contract`](https://github.com/use-ink/cargo-contract)
development tool, and the [Contracts parachain](https://github.com/paritytech/cumulus/tree/master/parachains/runtimes/contracts/contracts-rococo). For anything UI related go check out the
[`contracts-ui` repository](https://github.com/use-ink/contracts-ui).

If these updates are too high-level for you you can always check out the release notes for
the various projects:
- [`ink!`](https://github.com/use-ink/ink/blob/master/CHANGELOG.md)
- [`pallet-contracts`](https://github.com/paritytech/substrate/blob/master/frame/contracts/CHANGELOG.md)
- [`cargo-contract`](https://github.com/use-ink/cargo-contract/blob/master/CHANGELOG.md)

If you're new here and aren't sure where to get started with ink! check out our
[guided tutorial for beginners](https://docs.substrate.io/tutorials/smart-contracts/).

This was inspired by the [Polkadot Staking Progress Report](https://gist.github.com/kianenigma/aa835946455b9a3f167821b9d05ba376) ❤️.
````

## File: versioned_docs/version-v4/testnet/faucet.md
````markdown
---
title: Faucet
slug: /faucet
hide_title: true
---

import Faucet from "./Faucet";

<Faucet/>

We are operating a faucet for our [Contracts Testnet on Rococo](./overview.md).
By requesting funds from the form above you will receive `ROC`
tokens to your account on this parachain.

Note that the funds won't be available on the relaychain, the faucet teleports
them  directly to our parachain ([see here for more details](./overview.md)).
The polkadot-js UI will display them under [the "Accounts" tab for the Contracts parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/accounts):
<img src="/img/roc-in-wallet.png" alt="Rococo testnet tokens in wallet" />
````

## File: versioned_docs/version-v4/testnet/Faucet.tsx
````typescript
import React, { useMemo, useState } from 'react'
import ReCAPTCHA from 'react-google-recaptcha'

const RECAPTCHA_SITE_KEY = '6LcgFI4nAAAAAATrEMoJ6zBacsx5udc1UhGFXemH'
const FAUCET_URL = 'https://rococo-faucet.parity-testnet.parity.io/drip/web'

const Faucet = () => {
  const [captcha, setCaptcha] = useState<string | null>(null)
  const acc = useMemo(() => {
    if (typeof window === 'undefined') return '';
    const params = new URLSearchParams(window?.location?.search);
    return params?.get('acc') || undefined;
  }, [])
  const [address, setAddress] = useState<string | undefined>(acc)
  const [hash, setHash] = useState<string>()
  const [error, setError] = useState<string>()
  const [inProgress, setInProgress] = useState(false)

  const handleRequest = async () => {
    try {
      setHash(undefined)
      setError(undefined)
      setInProgress(true)

      const body = {
        address,
        parachain_id: '1002',
        recaptcha: captcha,
      }

      const fetchResult = await fetch(FAUCET_URL, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
      })
      const result = await fetchResult.json()
      if ('error' in result) {
        setError(result.error)
      } else {
        setHash(result.hash)
      }
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e)
      setError('Hmm... something went wrong.')
    } finally {
      setInProgress(false)
    }
  }

  return (
    <div className="faucetContainer">
      <h3 className="faucetTitle">Get Testnet Tokens</h3>
      <div className="faucetPlantContainer">
        <img src="/img/plantOne.svg" alt="illustration of a sea grass plant" className="faucetPlantOne" />
        <img src="/img/plantTwo.svg" alt="illustration of a sea plant" className="faucetPlantTwo" />
      </div>
      <div className="faucetHeroContainer">
        <img src="/img/chest.svg" alt="treasure chest" className="faucetHeroImage" />
      </div>
      <form className="withHero">
        <fieldset>
          <label htmlFor="address-input">Your SS58 Address</label>
          <input
            className="addressInput"
            id="address-input"
            type="text"
            value={address}
            placeholder="e.g. 5HprbfKUFdN4qfweVbgRtqDPHfNtoi8NoWPE45e5bD5AEKiR"
            onChange={(e) => {
              setAddress(e.target.value)
              setError(undefined)
              setHash(undefined)
            }}
          />
        </fieldset>
        <ReCAPTCHA sitekey={RECAPTCHA_SITE_KEY} onChange={setCaptcha} />
        <button
          disabled={inProgress || !captcha || !address}
          onClick={async (e) => {
            e.preventDefault()
            await handleRequest()
          }}
        >
          {inProgress ? 'Requesting...' : 'Request'}
        </button>
      </form>

      <div className="faucetResultContainer">
        {hash && (
          <button
            className="faucet-success w-full border-none"
            onClick={() => window.open(`https://rococo.subscan.io/extrinsic/${hash}`, '_blank')}
          >
            <div className="faucet-success-ic">
              <p className="faucet-success-msg">Your funds have been sent!</p>
              <p className="faucet-success-cta">Click here to view the transaction</p>
            </div>
          </button>
        )}
        {error && <p className="error">{error}</p>}
      </div>
    </div>
  )
}

export default Faucet
````

## File: versioned_docs/version-v4/testnet/overview.md
````markdown
---
title: Contracts on Rococo
hide_title: true
slug: /testnet
---

![Testnet Title Picture](/img/title/testnet.svg)

# Contracts on Rococo

[Rococo](https://wiki.polkadot.network/docs/build-pdk#rococo-testnet) is a testnet for
Polkadot and Kusama parachains.
We have a live testnet named Contracts as a parachain online there.

<img src="/img/contracts-on-polkadot-js.png" alt="Smart contracts parachain on Rococo" />

## What is the Contracts parachain?

It's a [Substrate](https://github.com/paritytech/substrate) parachain for smart
contracts. We configured it to use Substrate's smart contracts module – the
[`contracts`](https://github.com/paritytech/substrate/tree/master/frame/contracts)
pallet – in a default configuration.

The code for this parachain can be found [in the `cumulus` repository](https://github.com/paritytech/cumulus/tree/master/parachains/runtimes/contracts/contracts-rococo).
Our parachain uses the Rococo relay chain's native token (`ROC`) instead of having its own token.
Due to this you'll need `ROC` in order to deploy contracts on our testnet.

## How can I use it?
### (1) Create an Account

As a first step, you should create an account. This can be done via command-line
tools (e.g. `subxt`) or via a wallet (e.g. with the `polkadot-js` browser extension).
See [here](https://wiki.polkadot.network/docs/learn-account-generation) for a detailed guide.

### (2) Get Testnet Tokens

<img src="/img/chest.svg" alt="image of a treasure chest" className="faucetHeroImage" />

As a second step, you have to get `ROC` testnet tokens through the [Rococo Faucet](./faucet.md).

Alternatively, you can use the [Element chat room](https://wiki.polkadot.network/docs/learn-DOT#getting-tokens-on-the-rococo-testnet).
You must send a message like this (Note the `:1002` after the wallet address):

```
!drip YOUR_SS_58_ADDRESS:1002
```

The number `1002` is the parachain ID of Contracts on Rococo, by supplying it you instruct the
faucet to teleport `ROC` tokens directly to your account on the parachain.
If you have some tokens on the Rococo relay chain, you can teleport them to the Contracts parachain on your own. Read more on teleporting assets [here](https://wiki.polkadot.network/docs/learn-teleport).

If everything worked out, the teleported `ROC` tokens will show up in your account.
In case you are using the `polkadot-js` frontend, you can see them under
[the "Accounts" tab for Contracts](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Frococo-contracts-rpc.polkadot.io#/accounts).

<img src="/img/roc-in-wallet.png" alt="Rococo testnet tokens in wallet" />


### (3) Deploy Your Contract

Once you have `ROC` on Contracts you can deploy a contract _nearly_ as you would with
a local developer node.
The only difference is that you can't use pre-endowed accounts like `Alice` or `Bob`,
you have to use the one you generated instead.

<img src="/img/deployment-acc.png" alt="Deploy a smart contract on Rococo/Polkadot" />

You can also deploy your contract from the command-line via `cargo-contract`.
Make sure you are in the folder of your contract and that it has been
built recently. Then execute:

```bash
cargo contract upload --suri "your twelve or twenty-four words"
cargo contract instantiate --suri … --constructor new --args true
```

`new` in this case would be a constructor method exposed by the contract,
`--args` would be any arguments the constructor expects.

See [the `cargo-contract` docs](https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md#commands)
for a more detailed documentation.
````

## File: versioned_docs/version-v4/third-party-tools/contract-wizard/index.md
````markdown
---
title: Polkadot Contract Wizard
slug: /getting-started/contract-wizard
---

# Polkadot Contract Wizard 
## What is the Polkadot Contract Wizard?

The Polkadot Contract Wizard is an intuitive web-based platform designed to simplify the process of creating, deploying, and managing smart contracts within the Polkadot and Kusama ecosystems. With its user-friendly interface, PCW eliminates the complexities traditionally associated with smart contract development, allowing users of all technical levels to engage with the blockchain world.

:::info

To open the app follow [this link](https://contractwizard.xyz)

:::

![Contract Wizard Img](/img/third-party-tools/contract-wizard/landing.png)

## Purpose of the Polkadot Contract Wizard

The primary purpose of the PCW is to streamline and democratize the process of working with smart contracts on the Polkadot and Kusama networks. Recognizing the challenges and barriers that many face when trying to delve into the realm of blockchain, PCW offers a solution that is:

**Accessible**: No advanced technical knowledge or programming experience is required. If you can navigate a website, you can use PCW.

**Efficient**: Gone are the days of sifting through extensive code or relying on third-party tools. PCW provides all the tools you need in one place.

**Educational**: For those keen on learning, PCW is a great starting point. It offers a hands-on experience with smart contracts, providing a practical understanding of how they work.

## Benefits of Using the Polkadot Contract Wizard

**Simplicity**: With its intuitive design, PCW makes the process of creating and deploying smart contracts as simple as a few clicks.

**Flexibility**: Whether you're looking to deploy a standard token, a multi-token, or even a non-fungible token (NFT), PCW has got you covered. And If you can't find your option here, there's also the ability to import a contract deployed manually or with other tools.

**Interactivity**: Beyond creation and deployment, PCW allows users to interact with their deployed contracts directly through its interface.

**Collaboration**: Shareable contract interaction links foster collaboration, enabling users to share their contracts with others easily.

**Multi-chain Support**: PCW isn't limited to just one network. It offers support for multiple chains, expanding its utility across the Dotsama ecosystem.

If you have any feedback or comments please let us know in our [telegram group](https://t.me/+u5M4K7vKfbQxZjMx).
````

## File: versioned_docs/version-v4/third-party-tools/swanky/cli.md
````markdown
---
sidebar_position: 1
# Display h2 to h5 headings
toc_min_heading_level: 2
toc_max_heading_level: 4
slug: /getting-started/swanky/cli
---

import Figure from './Figure'
import Tabs from '@theme/Tabs'
import TabItem from '@theme/TabItem'

# Swanky CLI

Swanky CLI is a Node.js based CLI application that abstracts away and extends the functionality of Polkadot.js, `cargo contract`, and other Wasm developer tools.
It aims to ease development of and interaction with Wasm smart contracts and provides simple tools to bootstrap contract environment (project) with contract and integration tests templates, manage local node and accounts, language agnostic compile, deploy contracts to both local and remote networks, compatibility checks between the contract pallet and compiler...

With all of the features mentioned above, even more is in active or planned development. The whole project is public, and everyone is welcome to contribute or suggest features:

- [Swanky CLI repo](https://github.com/AstarNetwork/swanky-cli)
- [Swanky CLI project](https://github.com/orgs/AstarNetwork/projects/3)

:::info
Templates provided in the current version of swanky-cli, as well as environment and supported tools target ink! v4, and use `cargo contract` v2
:::

## Installing

The CLI can be installed and used in different ways:

- using a preconfigured environment of a dev-container
- downloading a precompiled binary
- as an npm package

:::caution
Note that using the precompiled binaries, NPM, or compiling it yourself requires you to have the [local environment set up](https://docs.astar.network/docs/build/environment/ink_environment) correctly
:::

### Dev container (Recommended)

Using [dev container](https://docs.astar.network/docs/build/environment/dev-container) is the recommended method to use `swanky-cli`, it includes all the environment setup and will support auto-updates in the future.

To run your project in the dev container follow the steps on [swanky-dev-container Github](https://github.com/AstarNetwork/swanky-dev-container).

### Download the precompiled binaries

1. Download the correct archive for your platform from the [releases section of swanky-cli github page](https://github.com/AstarNetwork/swanky-cli/releases).

2. Extract the archive to the appropriate location, for example the `software` directory.

3. Add the `swanky` executable to your path variable by creating a symbolic link to it from a common `bin` directory or somewhere similar.

<Tabs>
<TabItem value="MacOS" label="MacOS" default>

```sh
ln -s /Users/my_name/software/swanky-cli/bin/swanky /usr/local/bin
```

</TabItem>
<TabItem value="Debian/Ubuntu" label="Debian/Ubuntu">

```sh
ln -s /home/my_name/swanky-cli/bin/swanky /usr/local/bin
```

</TabItem>
</Tabs>

### Globally with npm

This approach may seem simpler, but due to the nature of `Node.js` dependency management, may result in version inconsistency or other errors.

```sh-session
$ npm install -g @astar-network/swanky-cli
```

or

```sh-session
$ npx @astar-network/swanky-cli [command]
```

## Using swanky-cli

If you're using a dev container, or have followed the installation instructions, you should have `swanky` command available in your terminal.

Running it without any arguments (or with `-h`/`--help`) will provide you with a list of top-level commands and the app version.

Passing `help` as an argument and providing it `-n`/`--nested-commands` flag will show full list of commands, including nested ones:

```bash
swanky help --nested-commands
```

<Figure caption="Full list of commands" src={require('./assets/help.png').default} width="65%" />

Note that every command and subcommand also supports `-h`/`--help` flags to display their usage instructions.

Likewise, most of the commands support `-v` /`--verbose` flag, which you can use to get more detailed output (useful for debugging and reporting errors).

### Bootstrap a new project

Using the `swanky init` command, you'll be prompted for a series of answers to define your project and the first smart contract within it.

After gathering all the required information, the app will proceed to check your environment, scaffold the project, download and install (optionally) swanky node and the project dependencies.

```
swanky init PROJECT_NAME
```

<Figure caption="Init process" src={require('./assets/init.png').default} width="65%" />

The resulting folder structure should look something like this:

<Figure caption="Folder structure" src={require('./assets/folder-structure.png').default} width="65%" />

_Resources:_

- [_`swanky init` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#quick-start)
- [_available templates_](https://github.com/AstarNetwork/swanky-cli/tree/master/src/templates)

### Check dependencies and compatibility

You can quickly check the presence and versions of required dependencies by running `swanky check` command.

<Figure caption="Verify dependencies" src={require('./assets/check.png').default} width="65%" />

:::info
For now, you will need to be be in a project folder to run this command.

This command will be updated to fix that, and provide more useful information.
:::

_Resources:_

- [_`swanky check` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

### Manage accounts

Create and list accounts used for contract interaction.

These are the accounts stored inside your `swanky.config.json`, so the command needs to be ran from within the project directory.

During account creation you'll have an option of passing your own mnemonic, or have Swanky generate one for you by passing `-g` flag.

You can also mark the account as "production" which will require you to set a password and encrypt the mnemonic.

Be careful not to use a dev account on live networks, as their mnemonic is stored in plain text in the config!

<Figure caption="Creating and listing accounts" src={require('./assets/acc-create.png').default} width="65%" />

:::tip
Newly generated accounts that are not the preconfigured dev accounts (Alice, Bob, Charlie...) will have no funds initially, so you'll have to transfer some manually.
:::

_Resources:_

- [_`swanky account` command usage manual_](https://github.com/AstarNetwork/swanky-cli#swanky-account-create)
                                            

### Interact with contracts

`swanky contract` command offers several subcommands for different interactions with your contracts.

<Figure caption="Different `contract` subcommands" src={require('./assets/contract-commands.png').default} width="65%" />

The command names are self explanatory, and to get more detailed information on using a specific command, you can use the help flag with it:

```
swanky contract SUB_COMMAND --help
```

#### Compile

Depending on the contracts definition in `swanky.config.json`, calling `swanky contract compile CONTRACT_NAME` will run either cargo-contract or ask! compiler (via npm script).

If you have multiple contracts and wish to compile them all at once, you can pass the `--all` flag instead of the contract name.

Likewise, if you're compiling for production, you need to pass the `--prod` flag.

<Figure caption="Compile all contracts" src={require('./assets/compile.png').default} width="65%"/>

_Resources:_

- [_`swanky account` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

#### Get detailed contract description

Compiling the contract will generate it's metadata too.

Swanky provides `contract explain CONTRACT_NAME` command to get a more human friendly version of that metadata:

<Figure caption="Getting contract metadata information" src={require('./assets/contract-explain.png').default} width="65%"/>

_Resources:_

- [_`contract compile` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-compile-contractname)

#### Run E2E tests

You can test your contracts using [Mocha](https://mochajs.org/) framework and [Chai](https://www.chaijs.com/) assertions.

:::note
Please note these tests are not ink! E2E tests, but are written in TypeScript, and require a local node to be running.

You can get more information on ink! E2E test framework in the [ink! documentation](../../basics/testing.md#end-to-end-e2e-tests).
:::
A contract template will provide you with a simple test as well, which you can use as a starting point.
The tests utilize [@polkadot/api](https://polkadot.js.org/docs/api/) library, and contract types generated by [typechain-polkadot](https://github.com/727-Ventures/typechain-polkadot).
The types are generated during the compile step and copied to `test/*/typedContract/` directory, along with the contract artifacts in the `test/*/artifacts/` directory. If you need only the types generated
(if you for example deleted or edited them), you can do that without going through the whole compilation step by using `swanky contract typegen` command.

Running `swanky contract test CONTRACT_NAME` will detect all `*.test.ts` files in the `test/contract_name/` directory, and run them sequentially, or in all directories inside `test/` if you pass the `-a`/`--all` flag.

<Figure caption="Run tests for a contract" src={require('./assets/test.png').default} width="65%"/>

:::tip
Running the tests programmatically may throw warnings about duplicate dependencies on `@polkadot/*` libraries.
This occurs because those libraries are included in swanky app itself, as well as in the test files.
Apart from the warning text spamming, no negative consequence of this has been observed.

If you want to avoid the warnings anyway, you can run tests as a yarn/npm command:

`yarn test` or

`npm run test`
:::

Web based report will be generated and stored in `artifacts/` directory. You can copy the path of the reports and use the `serve` app to view them in browser. (`serve` is included in swanky-dev-container)

```
serve PATH_TO_REPORTS
```

<Figure caption="Web based test report" src={require('./assets/test-report.png').default} width="65%"/>

_Resources:_

- [_`swanky contract test` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-test-contractname)

#### Deploy your contract

When your contract is compiled and tested, you can deploy it to a local node or a remote network.

You will need to supply account you wish to deploy the contract from (`-account`), max amount of gas to be used (`-g`), and any arguments required by your contract's constructor (`-a`).

By default, your contract will be deployed to a local node, but you can pass a custom network via `-n`/`--network` flag. Available networks are configured in `swanky.config.json` file.

<Figure caption="Deploying the contract" src={require('./assets/deploy.png').default} width="65%"/>

Successfully running the `deploy` command will print out the address your contract is deployed to, as well as save it into `swanky.config.json`

_Resources:_

- [_`swanky contract deploy` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-deploy-contractname)

#### Run queries and transactions

Once your contract is deployed, you can call it from the CLI using `query` or `tx` commands.

Use `query` for read-only calls, and `tx` for the calls that change the chain state and require signing (and a gas fee).

Both commands require `CONTRACT_NAME` and `MESSAGE_NAME` parameters, and for `tx` a caller account needs to be provided too. (`-a`/`--account`).

If the message you're calling requires arguments to be passed, you can do that using `-p`/`--param` flag.

<Figure caption="Calling a query on a contract" src={require('./assets/contract-query.png').default} width="65%"/>

<Figure caption="Calling a transaction on a contract" src={require('./assets/contract-tx.png').default} width="65%"/>

Result of a `query` is straight forward, `OK` followed by what ever the response is.

The transaction (`tx`) is a bit more raw though. Important to note are the `dispatchError` and `internalError` fields, plus the `status` field.
If the errors are `undefined`, and the status `finalized`, your transaction has been successful.

:::tip
Gas fee for `tx` is calculated and applied automatically, but you can provide a gas limit manually by using the `-g`/`--gas` flag.

Keep in mind that the transaction will fail if you provide too low a value.
:::

_Resources:_

- [_`swanky contract query` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-query-contractname-messagename)
- [_`swanky contract tx` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-tx-contractname-messagename)

#### Add a new contract from template

You can create additional contracts in the same project, using the `contract new` command and selecting from predefined templates.

The contract will be referred by `name` when using the relevant contract commands, and you can check the details in `swanky.config.json`

<Figure caption="Adding a new contract" src={require('./assets/contract-new.png').default} width="65%"/>

_Resources:_

- [_`swanky contract new` command usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-contract-new-contractname)

### Interact with a local node

If you have chosen to download and use the Swanky Node during init step, you can use `swanky node` commands to start and manage it.

Simply running `swanky node start` will start the node, and the node will preserve the state across restarts.

If you want to reset the node state, use the `swanky node purge` command.

<Figure caption="Starting the swanky node" src={require('./assets/node-start.png').default} width="65%"/>

:::info
Note that node needs to be running if you are using a default local network with `deploy`, `query` and `tx` commands.
:::

:::caution
If you want to use an external UI to interact with the node, you might run into some CORS issues.

This can be solved by passing a custom array of whitelisted urls using the `--rpcCors` flag.
:::

_Resources:_

- [_`swanky node` commands usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-node-purge)

## Using plugins

Swanky CLI's functionality can be extended by the use of plugins, and it's a way to add new, case specific commands without modifying the core codebase.

One WIP example is the [Phala plugin](https://github.com/AstarNetwork/swanky-plugin-phala)

:::info
If you are interested in developing a plugin, you can refer to the Phala example, and the [Oclif plugin documentation](https://oclif.io/docs/plugins), or you can post a request in [swanky-cli repo](https://github.com/AstarNetwork/swanky-cli/issues)'s issues.
:::

_Resources:_

- [_`swanky plugin` commands usage manual_](https://github.com/AstarNetwork/swanky-cli/tree/master#swanky-plugins)
````

## File: versioned_docs/version-v4/third-party-tools/swanky/Figure.tsx
````typescript
import React from 'react'

type Props = {
  src: string
  caption: string
  width?: string
}

const Figure: React.FC<Props> = ({ src, caption, width = '460px' }) => {
  return (
    <center>
      <figure>
        <img src={src} alt={caption} width={width}></img>
        <figcaption>{caption}</figcaption>
      </figure>
    </center>
  )
}

export default Figure
````

## File: versioned_docs/version-v4/third-party-tools/swanky/index.md
````markdown
---
title: Swanky Suite
slug: /getting-started/swanky
---

import Figure from './Figure'

# Swanky Suite

Swanky Suite aims to be an "all-in-one" tool for Wasm smart contract developers. It is based on existing tools like` cargo contract CLI` and `polkadot.js` but extends their functionality with many additional features such as smart contract templates, and an instant finality (Swanky) node, which reduces the contract development lifecycle.

Swanky Suite is a tool that provides Web3 Wasm dapps developers with an experience that is more in-line with what they're familiar with, compared to popular tooling for EVM.

Swanky Suite offers an extensible set of features, allowing developers to:

- Quickly spin up a local contract development node with instant finality (Swanky Node).
- Easily scaffold new projects using templates for both smart contracts and (soon) front-end dApps.
- Compile projects in various languages that target Wasm (ink! Ask-Lite).
- provide Typescript based integration testing simulating interaction from the client-side.
- Handle and manage network accounts.
- Deploy smart contracts within the Polkadot ecosystem to networks that support `pallet-contracts`.
- Make arbitrary calls to deployed smart contracts.

## Architecture Overview

The Swanky Suite consists of two parts, Swanky CLI and Swanky Node.

Source code for both Swanky CLI and Swanky Node are hosted on GitHub:

- [Swanky CLI](https://github.com/AstarNetwork/swanky-cli).
- [Swanky Node](https://github.com/AstarNetwork/swanky-node).

<Figure caption="The architecture envisioned for Swanky CLI and Swanky Node (Local developer node)" src={require('./assets/SwankySuiteAstar.png').default} width="100%"/>

:::note
The actual state deviates slightly from the above diagram as both the cli and the node are constantly iterated upon and updated, but it illustrates the general idea behind the suite.
:::

## Documentation and resources

[`swanky` CLI Github repo] with the latest documentation.

[`swanky-node` Github repo] with the latest documentation.

[`pallet-contracts`] documentation on Parity Github

[`pallet-contracts`]: https://github.com/paritytech/substrate/tree/master/frame/contracts
[`pallet-dapps-staking`]: https://github.com/AstarNetwork/astar-frame/tree/polkadot-v0.9.27/frame/dapps-staking
[`pallet-assets`]: https://github.com/paritytech/substrate/tree/master/frame/assets
[`swanky-node` github repo]: https://github.com/AstarNetwork/swanky-node
[`swanky` cli github repo]: https://github.com/AstarNetwork/swanky-cli
````

## File: versioned_docs/version-v4/third-party-tools/swanky/node.md
````markdown
---
sidebar_position: 2
slug: /getting-started/swanky/node
---

# Swanky Node

Swanky Node is a Substrate based blockchain configured to enable `pallet-contracts` (a smart contract module), and other features that assist local development of Wasm smart contracts.

### Features

- [pallet-contracts](https://github.com/paritytech/substrate/tree/master/frame/contracts)
- `grandpa` & `aura` consensus were removed. Instead, `instant-seal` & `manual-seal` are used.
  Blocks are authored & finalized (1) as soon as a transaction get in the pool (2) when `engine_createBlock` `engine_finalizeBlock` RPC called respectively.
- `pallet-dapps-staking`
- `pallet-assets`
- `pallet-assets` chain extension
- `pallet-dapps-staking` chain extension

Swanky Node is optimized for local development, while removing unnecessary components such as P2P.
Additional features and pallets, such as to interact between (Contract ↔ Runtime), will be added in the future.

### Compatible ink! version

ink! `v4.0.0` or lower is supported.

### Installation

#### Download Binary

The easiest method of installation is by downloading and executing a precompiled binary from the [Release Page](https://github.com/AstarNetwork/swanky-node/releases)

#### Build Locally

If you would like to build the source locally, you should first complete the [basic Rust setup instructions](https://docs.astar.network/docs/build/environment/ink_environment#rust-and-cargo).
Once Rust is installed and configured, you will be able to build the node with:

```bash
cargo build --release
```

### Embedded Docs :book:

Once the project has been built, the following command can be used to explore all parameters and
subcommands:

```bash
./target/release/swanky-node -h
```

### Usage

This command will start the single-node development chain with a persistent state.

```bash
./target/release/swanky-node
```

If you would prefer to run the node in non-persistent mode, use tmp option.

```
./target/release/swanky-node --tmp
# or
./target/release/swanky-node --dev
```

Purge the development chain's state.

```bash
./target/release/swanky-node purge-chain
```

### Development Accounts

The **alice** development account will be the authority and sudo account as declared in the
[genesis state](https://github.com/AstarNetwork/swanky-node/blob/main/node/src/chain_spec.rs#L44).
While at the same time, the following accounts will be pre-funded:

- Alice
- Bob
- Charlie
- Dave
- Eve
- Ferdie
- Alice//stash
- Bob//stash
- Charlie//stash
- Dave//stash
- Eve//stash
- Ferdie//stash

### Show only Errors and Contract Debug Output

To print errors and contract debug output to the console log, supply `-lerror,runtime::contracts=debug` when starting the node.

```
./target/release/swanky-node -lerror,runtime::contracts=debug
```

Important: Debug output is only printed for RPC calls or off-chain tests ‒ not for transactions.

See the ink! [FAQ](../../faq/faq.md#how-do-i-print-something-to-the-console-from-the-runtime) for more details: How do I print something to the console from the runtime?.

### Connect with Polkadot.js Apps Portal

Once the Swanky Node is running locally, you will be able to connect to it from the **Polkadot-JS Apps** front-end,
in order to interact with your chain. [Click
here](https://polkadot.js.org/apps/#/explorer?rpc=ws://localhost:9944) connecting the Apps to your
local Swanky Node.

### Run in Docker

First, install [Docker](https://docs.docker.com/get-docker/) and
[Docker Compose](https://docs.docker.com/compose/install/).

Then run the following command to start a single node development chain.

```bash
mkdir .local # this is mounted by container
./scripts/docker_run.sh
```

This command will compile the code, and then start a local development network. You can
also replace the default command
(`cargo build --release && ./target/release/swanky-node --dev --ws-external`)
by appending your own. A few useful commands are shown below:

```bash
# Run Substrate node without re-compiling
./scripts/docker_run.sh ./target/release/swanky-node --ws-external

# Purge the local dev chain
./scripts/docker_run.sh ./target/release/swanky-node purge-chain

# Check whether the code is compilable
./scripts/docker_run.sh cargo check
```

### Consensus (Manual Seal & Instant Seal)

Unlike other blockchains, Swanky Node adopts block authoring and finality gadgets referred to as Manual Seal and Instant Seal, consensus mechanisms suitable for contract development and testing.

Manual seal - Blocks are authored whenever RPC is called.
Instant seal - Blocks are authored as soon as transactions enter the pool, most often resulting in one transaction per block.

Swanky Node enables both Manual seal and Instant seal.

#### Manual Sealing via RPC call

We can tell the node to author a block by calling the `engine_createBlock` RPC.

```bash
$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   '{
     "jsonrpc":"2.0",
      "id":1,
      "method":"engine_createBlock",
      "params": [true, false, null]
    }'
```

#### Params

- **Create Empty**
  `create_empty` is a Boolean value indicating whether empty blocks may be created. Setting `create-empty` to true does not mean that an empty block will necessarily be created. Rather, it means that the engine should go ahead creating a block even if no transactions are present. If transactions are present in the queue, they will be included regardless of the value of `create_empty`.

- **Finalize**
  `finalize` is a Boolean value indicating whether the block (and its ancestors, recursively) should be finalized after creation.

- **Parent Hash**
  `parent_hash` is an optional hash of a block to use as a parent. To set the parent, use the format `"0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764"`. To omit the parent, use `null`. When the parent is omitted the block will be built on the current best block. Manually specifying the parent is useful for constructing fork scenarios, and demonstrating chain reorganizations.

#### Finalizing Blocks Manually

In addition to finalizing blocks at the time of creating them, they may also be finalized later by using the RPC call `engine_finalizeBlock`.

```bash
$ curl http://localhost:9933 -H "Content-Type:application/json;charset=utf-8" -d   '{
     "jsonrpc":"2.0",
      "id":1,
      "method":"engine_finalizeBlock",
      "params": ["0x0e0626477621754200486f323e3858cd5f28fcbe52c69b2581aecb622e384764", null]
    }'
```
````

## File: versioned_docs/version-v4/third-party-tools/ink-analyzer.md
````markdown
---
title: ink! Analyzer
slug: /getting-started/ink-analyzer
---

[ink! analyzer](https://github.com/ink-analyzer) is a collection of modular and reusable libraries and tools for semantic analysis of ink! smart contract code.

ink! analyzer aims to improve ink! language support in [integrated development environments (IDEs)](https://en.wikipedia.org/wiki/Integrated_development_environment), [source code editors](https://en.wikipedia.org/wiki/Source-code_editor) and other development tools by providing modular and reusable building blocks for implementing language features (e.g. diagnostic errors, quick fixes, code completion suggestions, code/intent actions and hover content e.t.c) for the ink! programming language.

- Semantic Analyzer ([source code](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/analyzer), [crates.io](https://crates.io/crates/ink-analyzer), [docs.rs](https://docs.rs/ink-analyzer/latest/ink_analyzer/)).
- Language Server ([source code](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server), [binary/executable releases](https://github.com/ink-analyzer/ink-analyzer/releases), [crates.io](https://crates.io/crates/ink-lsp-server), [docs.rs](https://docs.rs/ink-lsp-server/latest/ink_lsp_server/)).
- Visual Studio Code Extension ([source code](https://github.com/ink-analyzer/ink-vscode), [VS Code Marketplace listing](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer), [VSIX releases](https://github.com/ink-analyzer/ink-vscode/releases)).

## Problem

While ink! developers can leverage Rust tooling and excellent IDE/code editor support via [rust-analyzer](https://rust-analyzer.github.io/) and [IntelliJ Rust](https://www.jetbrains.com/rust/) because ["ink! is just standard Rust in a well-defined "contract format" with specialized `#[ink(…)]` attribute macros"](../getting-started/creating.md),
relying on only generic Rust language support in IDEs, code editors and other development tools has some significant limitations for the developer experience including:

- No language support (e.g. diagnostic errors/warnings and quick fixes) for ink!'s domain specific semantic rules for smart contracts (e.g. exactly one `#[ink(storage)]` struct, at least one `#[ink(message)]` method and the same for `#[ink(constructor)]`, ink! attributes should be applied to items of the correct type e.t.c).
- Inconsistent editor experience with issues like no code completion and/or hover content for some ink! attribute arguments (e.g `#[ink(payable)]`) because [macro expansion/name resolution and trait resolution are hard problems for generic IDE/code editor tools](https://rust-lang.github.io/compiler-team/working-groups/rls-2.0/#scope-and-purpose) (see also [https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html](https://rust-analyzer.github.io/blog/2021/11/21/ides-and-macros.html)).
- No language support (e.g. go to definition, find references and rename/refactor) for [ink! specific syntax like paths in ink! attribute argument values (e.g. `env` values)](https://github.com/use-ink/ink/blob/v4.2.1/crates/ink/ir/src/ast/mod.rs#L19-L25).

## Solution

To solve the above challenges and improve ink! language support in IDEs, code editors and other development tools, ink! analyzer creates two main components:
- [A modular domain-specific semantic analysis library for ink!](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/analyzer) built on a [resilient and lossless parser](https://analyze.ink/blog/introducing-ink-analyzer#1-semantic-analyzer).
- A [Language Server Protocol (LSP)](https://microsoft.github.io/language-server-protocol/) [implementation](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server) built on top of the aforementioned semantic analysis library.

These two components can be reused to add ink! language support to multiple IDEs, code editors and other development tools.

In particular, a large number of IDEs and code editors support LSP servers either via configurable LSP clients or robust LSP client libraries/APIs/modules, including [Visual Studio Code, Visual Studio, Vim / Neovim, Emacs, Atom, Sublime Text, Acme, Lapce, Eclipse and many more](https://microsoft.github.io/language-server-protocol/implementors/tools/).

ink! analyzer makes it relatively easy for:
- Users to enable ink! language support for their IDE, code editor or other development tool if it has either a native/built-in or third-party LSP client that can be configured to launch an LSP server using an executable command (i.e. the path to an [installed ink! Language Server binary](https://github.com/ink-analyzer/ink-analyzer/tree/master/crates/lsp-server#installation)) and can use stdio (standard in/standard out) as the message transport.
- Developers to either build extensions/plugins/integrations that add ink! language support to any tool with robust LSP client libraries/APIs/modules, or add first-class ink! language support to an existing LSP client (e.g. an open-source extension/plugin/integration).

In addition to [distributing compiled ink! Language Server (`ink-lsp-server`) binaries for most of the major platforms/architectures](https://github.com/ink-analyzer/ink-analyzer/releases),
ink! analyzer additionally distributes a [Visual Studio Code extension](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer) that ships with a bundled ink! Language Server as a showcase and [reference implementation](https://github.com/ink-analyzer/ink-vscode) for the latter use case.

## Diving Deeper

To learn more about ink! analyzer, read the [introductory blog post](https://analyze.ink/blog/introducing-ink-analyzer) and/or check out the [ink! analyzer organization on GitHub](https://github.com/ink-analyzer) for source code, technical documentation, installation and usage instructions, and links to useful resources.

Issues, bug reports, PRs and feature requests are welcome at the respective GitHub repositories 🙂.
````

## File: versioned_docs/version-v4/third-party-tools/inkathon.mdx
````
---
title: ink!athon DApp Boilerplate
slug: /getting-started/inkathon 
---

# ink!athon DApp Boilerplate

ink!athon is a starter kit for full-stack dApp development with ink! smart contracts and a React-based frontend in one place. With convenient helper scripts and a pre-configured project setup, it lets you scaffold any dApp quickly. It's developed by the same team that is behind [AZERO.ID](https://azero.id), where this boilerplate is used in production.

## Getting started

* Try out an interactive example deployment under [inkathon.xyz](https://inkathon.xyz).
* To get started with development, head over to the [ink!athon repository](https://github.com/scio-labs/inkathon) and check its README.

## Workshop Video

Get a quickstart into the boilerplate with this talk recording by [Dennis Zoma](https://twitter.com/dennis_zoma) at the sub0 Developer Conference in Lisbon 2023: **[Start Building dApps on ink!](https://www.youtube.com/watch?v=SoNLZfsd0mQ)** (46 min).

[![inkathon Workshop Video Preview Image](/img/inkathon-workshop-video-preview.jpg)](https://www.youtube.com/watch?v=SoNLZfsd0mQ)

## Architecture

The starter kit is set up as a monorepo with two packages.

* `packages/contracts`: ink! smart contracts with:
  * `Greeter` example contract
  * shorthand build & deploy scripts that export metadata and contract addresses
  * pre-configured `substrate-contracts-node`
  * extensible JS/TS `scripts/` setup
* `packages/frontend`: Next.js frontend with:
  * `polkadot-js/api` & `scio-labs/use-inkathon` dependencies 
  * pre-configured to import deployments & addresses from above
  * styling with tailwindcss and/or chakra-ui
  * components for balance checking, wallet connection, network information, and sample contract interaction

![inkathon Architecture Diagram](/img/inkathon-architecture.jpg)


## Community & Support

import { BigCTA } from '/src/components/BigCTA'

<BigCTA
  title="Telegram Group"
  emphasized="Join"
  cta="the conversation"
  url="https://t.me/inkathon"
/>
````

## File: versioned_docs/version-v4/third-party-tools/openbrush.md
````markdown
---
title: OpenBrush
slug: /getting-started/use-openbrush
---

[OpenBrush] is a library for smart contract development on ink! maintained by the
[Brushfam](https://github.com/Supercolony-net) team.

It provides standard contracts based on [Polkadot Standard Proposals (PSPs)](https://github.com/w3f/PSPs),
as well as higher-level contracts and Rust macros that generate ink! code.

Using OpenBrush is simple, you only add the dependency to your `Cargo.toml` file.
You can find an example [here](https://learn.brushfam.io/docs/OpenBrush/smart-contracts/overview).

### Which standards and contract components does it contain?

- **PSP22**: Fungible Token (*ERC20 equivalent*) with extensions.
- **PSP34**: Non-Fungible Token (*ERC721 equivalent*) with extensions.
- **PSP37**: ERC1155 equivalent with extensions.
- **Ownable** Restrict access to action for non-owners.
- **Access Control**: Define a set of roles and restrict access to an action by roles.
- **Reentrancy Guard**: Prevent reentrant calls to a function.
- **Pausable**: Pause/Unpause the contract to disable/enable some operations.
- **Timelock Controller**: Execute transactions with some delay.
- **Payment Splitter**: Split the amount of native tokens between participants.

### Generic Trait Implementation

OpenBrush adds support for generic Trait implementations, so that you can
split a Trait and its implementation into different files. This can
increase the readability and maintainability of your smart-contract
code base ([detailed description](https://learn.brushfam.io/docs/OpenBrush/smart-contracts/example/setup_project)).

### Wrapper around Traits: `#[openbrush::wrapper]`

If you know that the other contract implements a trait and 
the trait is attributed with ` #[openbrush::trait_definition]`
you only need that trait definition and the address of the other contract 
in order to call a method from the deployed third-party contract.
The wrapper is an attribute macro named `#[openbrush::wrapper]` for traits. 
It will generate a callable structure of the other contract with the name defined
by a user:
```rust
// You can create wrapper in the place where you defined the trait
// Or if you import **everything** from the file where you define trait
#[openbrush::wrapper]
type Trait1Ref = dyn Trait1;
```

The benefits of such mechanism is a functional polymorphism.
Instead of working with the concrete implementation of the trait as a dependency
in you contract, you only interact with its interface. 
That means that you do not need to import other contracts as dependencies
to the calling contract.
If you need to update the implementation of the trait within the calling contract,
you only need to replace the called contract address. The wrapper does not guarantee
that the given address refers to a contract that implements the given trait.

Additionally, the wrapper supports multiple traits (i.e. `dyn Erc20 + Ownable + Erc721`)
without losing the syntax highlighting from your favourite IDE.

See [this example](https://github.com/727-Ventures/openbrush-contracts#wrapper-around-traits)
for more information.

### Documentation

- [OpenBrush Github repo](https://github.com/727-Ventures/openbrush-contracts)
- [Official Docs](https://learn.brushfam.io/docs/OpenBrush)
- [OpenBrush website](https://openbrush.io/)
- [Substrate Seminar (Youtube)](https://www.youtube.com/watch?v=I5OFGNVvzOc)
- [How to use modifiers](https://medium.com/supercolony/how-to-use-modifiers-for-ink-smart-contracts-using-openbrush-7a9e53ba1c76)

## Typechain-Polkadot

Another tool helpful for ink! smart contracts development is [Typechain-Polkadot](https://github.com/727-Ventures/typechain-polkadot).

Typechain-Polkadot is used to generate Typescript wrappers around your smart contract.
This can be used for UI development or in integration tests of your ink! smart contracts.
The library uses [`polkadot-js/api`](https://github.com/polkadot-js/api) under the hood,
but is especially useful because all calls and queries are typed, therefore the chance of
getting some error during a call is mitigated.

## Sol2Ink

[Sol2Ink](https://github.com/727-Ventures/sol2ink) is a tool which can support migrations
from Solidity to ink!. Solidity code is passed to Sol2Ink and converted to an ink! contract.
The tool can also be used to learn the differences between Solidity and ink! code.

### Questions?

If you have any questions about how to use any of these tools, or just about the ink! smart contracts in general, you can join the [Brushfam element channel](https://matrix.to/#/!utTuYglskDvqRRMQta:matrix.org?via=matrix.org&via=t2bot.io&via=web3.foundation) or ask a question on the [Substrate Stack Exchange](https://substrate.stackexchange.com/).

[OpenBrush]: https://github.com/727-Ventures/openbrush-contracts
[PSPs]: https://github.com/w3f/PSPs
````

## File: versioned_docs/version-v4/third-party-tools/subwallet.md
````markdown
---
title: SubWallet
slug: /getting-started/subwallet
---

# SubWallet

SubWallet is a comprehensive non-custodial wallet designed for the Polkadot, Substrate, and Ethereum ecosystems. It provides support for importing, managing, and interacting with various [smart contract types](https://docs.subwallet.app/main/#token-standard-support), including **PSP22** and **PSP34**.

## Installation

SubWallet is available on multiple platforms:

- **Browser extension:** Available for Chrome, Firefox, Edge, and Brave.
- **Mobile app:** Available for [Android](https://apps.apple.com/us/app/subwallet-polkadot-wallet/id1633050285) and [iOS](https://play.google.com/store/apps/details?id=app.subwallet.mobile).
- **Web Dashboard:** Accessible through [Web Dashboard](https://web.subwallet.app/).

## Getting Started

1. [Install SubWallet](https://docs.subwallet.app/main/extension-user-guide/getting-started/install-subwallet)
2. [Create or Import Wallet](https://docs.subwallet.app/main/extension-user-guide/account-management/create-a-new-account-with-seed-phrase)
3. [Import Tokens](https://docs.subwallet.app/main/extension-user-guide/import-and-manage-customized-assets/import-and-manage-customized-tokens) (e.g., **PSP22**)
4. [Import NFTs](https://docs.subwallet.app/main/extension-user-guide/import-and-manage-customized-assets/import-nft) (e.g., **PSP34**)
5. [Transfer Tokens](https://docs.subwallet.app/main/extension-user-guide/receive-and-transfer-assets/transfer-tokens/single-chain-transfer) (e.g., **PSP22**)
6. [Transfer NFTs](https://docs.subwallet.app/main/extension-user-guide/receive-and-transfer-assets/transfer-nft) (e.g., **PSP34**)

## Documentation

- [GitHub Repository](https://github.com/Koniverse/SubWallet-Extension/)
- [User Manual](https://docs.subwallet.app/)

For more information, visit the official [SubWallet website](https://www.subwallet.app/).
````

## File: versioned_docs/version-v6/basics/mutating-values.md
````markdown
---
title: Mutating Storage Values
slug: /basics/mutating-values
hide_title: true
---

![Storage Mutating Title Picture](/img/title/storage-mutating.svg)

# Mutating Storage Values

It's time to modify some storage!

## Mutable and Immutable Functions

You may have noticed that the function template included `self` as the first parameter of the
contract functions. It is through `self` that you gain access to all your contract functions and
storage items.

If you are simply _reading_ from the contract storage, you only need to pass `&self`. But
if you want to _modify_ storage items, you will need to explicitly mark it as mutable,
`&mut self`.

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.my_number
    }

    #[ink(message)]
    pub fn my_setter(&mut self, new_value: u32) {
        self.my_number = new_value;
    }
}
```
````

## File: versioned_docs/version-v6/basics/reading-values.md
````markdown
---
title: Reading Values from Storage
slug: /basics/reading-values
hide_title: true
---

![Storage Read Title Picture](/img/title/storage-read.svg)

# Reading Values from Storage

Reading from storage is where the fun begins!

## Contract Functions

As you can see in the contract template, all of your contract functions are part of your contract module.

```rust
impl MyContract {
    // Public and Private functions can go here
}
```

### Public and Private Functions

In Rust, you can make as many implementations as you want. As a stylistic choice, we recommend
breaking up your implementation definitions for your private and public functions:

```rust
impl MyContract {
    /// Public function
    #[ink(message)]
    pub fn my_public_function(&self) {
        /* --snip-- */
    }

    /// Private function
    fn my_private_function(&self) {
        /* --snip-- */
    }

    /* --snip-- */
}
```

You can also choose to split things up however is most clear for your project.

Note that all public functions must use the `#[ink(message)]` attribute.

## Getting a Value

We already showed you how to initialize a storage value in the chapter [Storing Values](./storing-values.md).
Getting the value is just as simple:

```rust
impl MyContract {
    #[ink(message)]
    pub fn my_getter(&self) -> u32 {
        self.number
    }
}
```

In Rust, if the last expression in a function does not have a semicolon it will be the return value.
````

## File: versioned_docs/version-v6/linter/rules/no_main.md
````markdown
---
title: no_main
hide_title: true
description: no_main lint documentation
---
# no_main
## What it does
Checks if a contract is annotated with the `no_main` inner attribute.

## Why is this necessary?
Contracts must be annotated with `no_main` inner attribute when compiled for on-chain
execution.

## Example

```rust
// Bad: Contract does not contain the `no_main` attribute,
// so it cannot be compiled to Wasm
#![cfg_attr(not(feature = "std"), no_std)]
#[ink::contract]
mod my_contract { /* ... */ }
```

Use instead:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]
#[ink::contract]
mod my_contract { /* ... */ }
```
````

## File: versioned_docs/version-v6/linter/rules/non_fallible_api.md
````markdown
---
title: non_fallible_api
hide_title: true
description: non_fallible_api lint documentation
---
# non_fallible_api
## What it does

The lint detects potentially unsafe uses of methods for which there are safer alternatives.

## Why is this bad?

In some standard collections in ink!, there are two types of implementations: non-fallible
(e.g. `get`) and fallible (e.g. `try_get`). Fallible alternatives are considered safer,
as they perform additional checks for incorrect input parameters and return `Result::Err`
when they are used improperly. On the other hand, non-fallible methods do not provide these
checks and will panic on incorrect input, placing the responsibility on the user to
implement these checks.

For more context, see: [ink#1910](https://github.com/use-ink/ink/pull/1910).

## Example

Consider the contract that has the following `Mapping` field:

```rust
#[ink(storage)]
pub struct Example { map: Mapping<String, AccountId> }
```

The following usage of the non-fallible API is unsafe:

```rust
// Bad: can panic if `input_string` doesn't fit into the static buffer
self.map.insert(input_string, &self.sender);
```

It could be replaced with the fallible version of `Mapping::insert`:

```rust
// Good: returns Result::Err on incorrect input
self.map.try_insert(input_string, &self.sender);
```

Otherwise, the user could explicitly check the encoded size of the argument in their code:

```rust
// Good: explicitly checked encoded size of the input
if String::encoded_size(&input_string) < ink_env::BUFFER_SIZE {
  self.map.insert(input_string, &self.sender);
}
```
````

## File: versioned_docs/version-v6/linter/rules/primitive_topic.md
````markdown
---
title: primitive_topic
hide_title: true
description: primitive_topic lint documentation
---
# primitive_topic
## What it does
Checks for ink! contracts that use the
[`#[ink(topic)]`](../../macros-attributes/topic.md) annotation with primitive number
types. Topics are discrete events for which it makes sense to filter. Typical examples of
fields that should be filtered are `AccountId`, `bool` or `enum` variants.

## Why is this bad?
It typically doesn't make sense to annotate types like `u32` or `i32` as a topic, if those
fields can take continuous values that could be anywhere between `::MIN` and `::MAX`. An
example of a case where it doesn't make sense at all to have a topic on the storage field
is something like `value: Balance` in the examle below.

## Example
```rust
// Bad
// It typically makes no sense to filter `Balance`, since its value may varies from `::MAX`
// to `::MIN`.
#[ink(event)]
pub struct Transaction {
    #[ink(topic)]
    src: Option<AccountId>,
    #[ink(topic)]
    dst: Option<AccountId>,
    #[ink(topic)]
    value: Balance,
}
```

Use instead:

```rust
// Good
// Filtering transactions based on source and destination addresses.
#[ink(event)]
pub struct Transaction {
    #[ink(topic)]
    src: Option<AccountId>,
    #[ink(topic)]
    dst: Option<AccountId>,
    value: Balance,
}
```
````

## File: versioned_docs/version-v6/linter/rules/storage_never_freed.md
````markdown
---
title: storage_never_freed
hide_title: true
description: storage_never_freed lint documentation
---
# storage_never_freed
## What it does
This lint ensures that for every storage field with a collection type, when there is an
operation to insert new elements, there's also an operation for removing elements.

## Why is this bad?
When a user executes a contract function that writes to storage, they have to put a
deposit down for the amount of storage space used. Whoever frees up that storage at some
later point gets the deposit back. Therefore, it is always a good idea to make it possible
for users to free up their storage space.

## Example
In the following example there is a storage field with the `Mapping` type that has an
function that inserts new elements:

```rust
#[ink(storage)]
pub struct Transaction {
    values: Mapping<AccountId, AccountId>,
}

fn add_value(&mut self, k: &AccountId, v: &AccountId) {
    // ...
    self.values.insert(k, v);
    // ...
}
```

But, ideally, there also should be a function that allows the user to remove elements from
the Mapping freeing storage space:

```rust
fn del_value(&mut self, k: &AccountId) {
    // ...
    self.values.remove(k);
    // ...
}
```
````

## File: versioned_docs/version-v6/linter/rules/strict_balance_equality.md
````markdown
---
title: strict_balance_equality
hide_title: true
description: strict_balance_equality lint documentation
---
# strict_balance_equality
## What it does
Looks for strict equalities with balance in ink! contracts.

## Why is this bad?
The problem with strict balance equality is that it is always possible to forcibly send
tokens to a contract. For example, using
[`terminate_contract`](https://use-ink.github.io/ink/ink_env/fn.terminate_contract.html).
In such a case, the condition involving the contract balance will work incorrectly, what
may lead to security issues, including DoS attacks and draining contract's gas.

## Known problems
There are many ways to implement balance comparison in ink! contracts. This lint is not
trying to be exhaustive. Instead, it addresses the most common cases that may occur in
real-world contracts and focuses on precision and lack of false positives.

## Example
Assume, there is an attacker contract that sends all its funds to the target contract when
terminated:

```rust
#[ink::contract]
pub mod attacker {
  // ...
  #[ink(message)]
  pub fn attack(&mut self, target: &AccountId) {
      self.env().terminate_contract(target);
  }
}
```

If the target contains a condition with strict balance equality, this may be manipulated by
the attacker:

```rust
#[ink::contract]
pub mod target {
  // ...
  #[ink(message)]
  pub fn do_something(&mut self) {
      if self.env().balance() != 100 { // Bad: Strict balance equality
          // ... some logic
      }
  }
}
```

This could be mitigated using non-strict equality operators in the condition with the
balance:

```rust
#[ink::contract]
pub mod target {
  // ...
  #[ink(message)]
  pub fn do_something(&mut self) {
      if self.env().balance() < 100 { // Good: Non-strict equality
          // ... some logic
      }
  }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/anonymous.md
````markdown
---
title: "#[ink(anonymous)]"
slug: /macros-attributes/anonymous
hide_title: true
---

![Text/anon Title Picture](/img/title/text/anon.svg)

Applicable to ink! events.

Tells the ink! codegen to treat the ink! event as anonymous which omits the event signature as 
topic upon emitting. Similar to anonymous events in Solidity. 

Anonymous events have similar semantics as in Solidity in that their event signature won't be 
included in their event topics serialization to reduce event emitting overhead. This is 
especially useful for user defined events.
    
The signature of the event is by default one of the topics of the event, except if you annotate the
event with `#[ink(anonymous)]`. The attribute implies that it is not possible to filter for 
specific anonymous events by the signature topic.

## Example

```rust
#[ink(event)]
#[ink(anonymous)]
pub struct MyEvent {
    #[ink(topic)]
    field_1: i32,
    field_2: bool,
}
```

The equivalent syntax for standalone `#[ink::event]` definitions (not defined inline in a 
contract) is:

```rust
#[ink::event(anonymous)]
pub struct MyEvent {
    #[ink(topic)]
    field_1: i32,
    field_2: bool,
}
```
````

## File: versioned_docs/version-v6/macros-attributes/constructor.md
````markdown
---
title: "#[ink(constructor)]"
slug: /macros-attributes/constructor
hide_title: true
---

![Text/constructor Title Picture](/img/title/text/constructor.svg)

Applicable to a method.

Flags a method (or multiple methods) for the ink! storage struct as constructor making it available to the API for instantiating the contract.

There must be at least one `#[ink(constructor)]` defined method.

Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
upon contract instantiation. A contract may define multiple such constructors which
allow users of the contract to instantiate a contract in multiple different ways.


## Example

```rust
#[ink::contract]
mod erc20 {
    #[ink(storage)]
    pub struct Erc20 { ... }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self { .. }

        #[ink(constructor)]
        pub fn total_supply(&self) -> Balance { .. }

        // etc.
    }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/default.md
````markdown
---
title: "#[ink(default)]"
slug: /macros-attributes/default
hide_title: true
---

![Text/default Title Picture](/img/title/text/default.svg)

Applicable to ink! messages and constructors.

Works as a hint for UIs to determine if constructor/message should be picked as default.

It's also used to select the constructor to include in Solidity compatible metadata.

At most one constructor or message can be marked as default.

## Example

```rust
#[ink(message, default)]
pub fn im_default(&self) {    
}
```
````

## File: versioned_docs/version-v6/macros-attributes/event.md
````markdown
---
title: "#[ink::event]"
slug: /macros-attributes/event
hide_title: true
---

![Text/event2 Title Picture](/img/title/text/event2.svg)

Applicable on `struct` definitions.

Defines an ink! event. A contract can define multiple such ink! events.

Events can now be defined independently of contracts. The legacy syntax of events defined 
within a contract module using `#[ink(event)]` continues to be valid.

[See our section on Events](../basics/events.md) for a detailed description and examples.
````

## File: versioned_docs/version-v6/macros-attributes/implementation.md
````markdown
---
title: "#[ink(impl)]"
slug: /macros-attributes/impl
hide_title: true
---

![Text/impl Title Picture](/img/title/text/impl.svg)

This attribute supports a niche case that is rarely needed.

Can be applied on ink! implementation blocks in order to make ink! aware
of them. This is useful if such an implementation block doesn't contain
any other ink! attributes, so it would be flagged by ink! as a Rust item.
Adding `#[ink(impl)]` on such implementation blocks makes them treated
as ink! implementation blocks thus allowing to access the environment
etc.

Note that ink! messages and constructors still need to be explicitly
flagged as such.

## Example

An implementation block can be defined as a trait implementation
for the ink! storage struct using the `#[ink(impl)]` annotation ‒ even
if none of its interior items have any ink! specific attributes on them:

```rust
use core::convert::TryFrom;

#[ink::contract]
mod my_module {
    #[ink(storage)]
    pub struct MyStorage {
        /* storage fields */
    }

    #[ink(impl)]
    impl MyStorage {
        fn my_method(&self) -> i32 {
            /* method implementation */
        }
    }

    impl MyStorage {
      #[ink(constructor)]
      pub fn my_constructor() -> Self {
          /* constructor implementation */
      }

      #[ink(message)]
      pub fn my_message(&self) {
          /* message implementation */
      }
    }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/message.md
````markdown
---
title: "#[ink(message)]"
slug: /macros-attributes/message
hide_title: true
---

![Text/message Title Picture](/img/title/text/message.svg)

Applicable to methods.

Flags a method for the ink! storage struct as message making it available to the API for calling the contract.

Note that all public functions must use the `#[ink(message)]` attribute

There must be at least one `#[ink(message)]` defined method.

Methods flagged with `#[ink(message)]` are special in that they are dispatchable
upon contract invocation. The set of ink! messages defined for an ink! smart contract
define its API surface with which users are allowed to interact.

An ink! smart contract can have multiple such ink! messages defined.

An ink! message with a `&self` receiver may only read state whereas an ink! message
with a `&mut self` receiver may mutate the contract's storage.

```rust
#[ink(message)]
pub fn purely_reading(&self, from: AccountId) {
    // actual implementation
}

#[ink(message)]
pub fn mutates_storage(&mut self, from: AccountId) {
    // actual implementation
}
```


## Messages Return Value

The return value of a message needs to implement `scale::Encode`.

It is notable that the collections under `ink_storage` ‒ such as e.g. `Vec` or `HashMap` ‒
don't implement `scale::Encode`. This means you can't just return a `Vec` from an ink! message.
This restriction is intentional ‒ returning a complete data structure with a potentially unbounded
content is an anti-pattern for smart contracts. Just think about the unpredictable gas costs.

If you _really really_ need to return a data structure in its entirety then use the ones from
`ink_prelude` (e.g. `ink_prelude::vec::Vec`). Those implement `scale::Encode`.


## Example

Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
as follows:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {

        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/namespace.md
````markdown
---
title: "#[ink(namespace = \"…\")]"
slug: /macros-attributes/namespace
hide_title: true
---

![Text/namespace Title Picture](/img/title/text/namespace.svg)

Applicable to ink! trait implementation blocks.

Applied on ink! trait implementation blocks to disambiguate other trait
implementation blocks with equal names.

## Example

```rust
#[ink(namespace = "my_namespace")]
impl MyTrait for MyStorage {
    #[ink(message)]
    fn my_message(&self) {}
}
```
    
This changes the resulting selectors of all the ink! messages and ink! constructors within the trait implementation.
Thus allowing disambiguation between trait implementations with overlapping message or constructor names.
````

## File: versioned_docs/version-v6/macros-attributes/overview.md
````markdown
---
title: Overview
slug: /macros-attributes
hide_title: true
---

![Text/contract Title Picture](/img/title/text/contract.svg)

An ink! module is the module that is flagged by `#[ink::contract]` containing all the ink! definitions.
All ink! attributes are available to specify inside an ink! module.

## Merging Attributes

It is possible to merge attributes that share a common flagged entity.
The example below demonstrates this for a payable message with a custom selector.

```rust
#[ink(message)]
#[ink(payable)]
#[ink(selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
We can also write the above ink! message definition in the following way:
```rust
#[ink(message, payable, selector = "0xCAFEBABE")]
pub fn transfer(&mut self, from: AccountId, to: AccountId, value: Balance) -> Result<(), Error> {
    // actual implementation
}
```
````

## File: versioned_docs/version-v6/macros-attributes/payable.md
````markdown
---
title: "#[ink(payable)]"
slug: /macros-attributes/payable
hide_title: true
---

![Text/payable Title Picture](/img/title/text/payable.svg)

Applicable to ink! messages.

Allows receiving value as part of the call of the ink! message.
ink! constructors are implicitly payable, due to the initial endowment which a contract requires.

An ink! message by default will reject calls that additional fund the smart contract.
Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
flag to it. An example below:

Note that ink! constructors are always implicitly payable and thus cannot be flagged
as such.

```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: false }
        }

        /// Flips the current value.
        #[ink(message)]
        #[ink(payable)] // You can either specify payable out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value.
        #[ink(message, payable)] // or specify payable inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```

## Example

```rust
#[ink(message, payable)]
pub fn pay_me(&self) {
    let _transferred = self.env().transferred_value();
}
```

See the [`examples/contract-transfer`](https://github.com/use-ink/ink-examples/blob/main/contract-transfer/lib.rs) contract for a more extensive example.
````

## File: versioned_docs/version-v6/macros-attributes/storage.md
````markdown
---
title: "#[ink(storage)]"
slug: /macros-attributes/storage
hide_title: true
---

![Text/storage Title Picture](/img/title/text/storage.svg)

Applicable on `struct` definitions. 

Applied on `struct` types in order to flag them for being
the contract's storage definition.
There can only be one ink! storage definition per contract.

There must be exactly one `#[ink(storage)]` struct.

This struct defines the layout of the storage that the ink! smart contract operates on.
The user is able to use a variety of built-in facilities, combine them in various ways
or even provide their own implementations of storage data structures.

For more information visit the `ink_storage` crate documentation.

## Example


```rust
#[ink::contract]
mod flipper {

    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        pub fn construct() -> Self { Flipper { value: false } }

        #[ink(message)]
        pub fn message(&self) {}
    }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/topic.md
````markdown
---
title: "#[ink(topic)]"
slug: /macros-attributes/topic
hide_title: true
---

![Text/topic Title Picture](/img/title/text/topic.svg)

Applied on fields of ink! event types to indicate that they are topics.

Tells the ink! codegen to provide a topic hash for the given field. Every ink! event can only have a limited number of such topic field.
The semantics are similar to indexed event arguments in Solidity.

## Example

```rust
#[ink(event)]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,

    #[ink(topic)]
    to: Option<AccountId>,

    amount: Balance
}
```
````

## File: versioned_docs/version-v6/testing/testnet/Faucet.tsx
````typescript
import React, { useMemo, useState } from 'react'
import ReCAPTCHA from 'react-google-recaptcha'

const RECAPTCHA_SITE_KEY = '6LcgFI4nAAAAAATrEMoJ6zBacsx5udc1UhGFXemH'
const FAUCET_URL = 'https://rococo-faucet.parity-testnet.parity.io/drip/web'

const Faucet = () => {
  const [captcha, setCaptcha] = useState<string | null>(null)
  const acc = useMemo(() => {
    if (typeof window === 'undefined') return '';
    const params = new URLSearchParams(window?.location?.search);
    return params?.get('acc') || undefined;
  }, [])
  const [address, setAddress] = useState<string | undefined>(acc)
  const [hash, setHash] = useState<string>()
  const [error, setError] = useState<string>()
  const [inProgress, setInProgress] = useState(false)

  const handleRequest = async () => {
    try {
      setHash(undefined)
      setError(undefined)
      setInProgress(true)

      const body = {
        address,
        parachain_id: '1002',
        recaptcha: captcha,
      }

      const fetchResult = await fetch(FAUCET_URL, {
        method: 'POST',
        body: JSON.stringify(body),
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json',
        },
      })
      const result = await fetchResult.json()
      if ('error' in result) {
        setError(result.error)
      } else {
        setHash(result.hash)
      }
    } catch (e) {
      // eslint-disable-next-line no-console
      console.error(e)
      setError('Hmm... something went wrong.')
    } finally {
      setInProgress(false)
    }
  }

  return (
    <div className="faucetContainer">
      <h3 className="faucetTitle">Get Testnet Tokens</h3>
      <div className="faucetPlantContainer">
        <img src="/img/plantOne.svg" alt="illustration of a sea grass plant" className="faucetPlantOne" />
        <img src="/img/plantTwo.svg" alt="illustration of a sea plant" className="faucetPlantTwo" />
      </div>
      <div className="faucetHeroContainer">
        <img src="/img/chest.svg" alt="treasure chest" className="faucetHeroImage" />
      </div>
      <form className="withHero">
        <fieldset>
          <label htmlFor="address-input">Your SS58 Address</label>
          <input
            className="addressInput"
            id="address-input"
            type="text"
            value={address}
            placeholder="e.g. 5HprbfKUFdN4qfweVbgRtqDPHfNtoi8NoWPE45e5bD5AEKiR"
            onChange={(e) => {
              setAddress(e.target.value)
              setError(undefined)
              setHash(undefined)
            }}
          />
        </fieldset>
        <ReCAPTCHA sitekey={RECAPTCHA_SITE_KEY} onChange={setCaptcha} />
        <button
          disabled={inProgress || !captcha || !address}
          onClick={async (e) => {
            e.preventDefault()
            await handleRequest()
          }}
        >
          {inProgress ? 'Requesting...' : 'Request'}
        </button>
      </form>

      <div className="faucetResultContainer">
        {hash && (
          <button
            className="faucet-success w-full border-none"
            onClick={() => window.open(`https://rococo.subscan.io/extrinsic/${hash}`, '_blank')}
          >
            <div className="faucet-success-ic">
              <p className="faucet-success-msg">Your funds have been sent!</p>
              <p className="faucet-success-cta">Click here to view the transaction</p>
            </div>
          </button>
        )}
        {error && <p className="error">{error}</p>}
      </div>
    </div>
  )
}

export default Faucet
````

## File: docs/basics/cross-contract-calling.md
````markdown
---
title: Cross-Contract Calling
slug: /basics/cross-contract-calling
hide_title: true
---

![Cross Contract Title Picture](/img/title/cross-contract.svg)

# Cross-Contract Calls

In ink! contracts it is possible to call messages and constructors of other
on-chain contracts.

There are a few approaches to performing these cross-contract calls in ink!:

1. Contract references (i.e `ContractRef`)
1. Builders (i.e `CreateBuilder` and `CallBuilder`)

Contract references can only be used for cross-contract calls to other ink! contracts.
Builders can be used to issue cross-contract calls to any Wasm contract, such as those
written in ink!, Solang, or ask!.

## Contract References

Contract references refer to structs that are generated by the ink! code generation for the
purposes of cross-contract calls.

They give developers a type-safe way of interacting with a contract.

A downside to using them is that you need to import the contract you want to call as a
dependency of your own contract.

If you want to interact with a contract that is already on-chain you will need to use the
[`Builders`](#builders) approach instead.

### `BasicContractRef` walkthrough

We will walk through the [`cross-contract-calls`](https://github.com/use-ink/ink-examples/tree/master/cross-contract-calls)
example in order to demonstrate how cross-contract calls using contract references work.

The general workflow will be:

1. Prepare `OtherContract` to be imported to other contracts
1. Import `OtherContract` into `BasicContractRef`
1. Upload `OtherContract` on-chain
1. Instantiate `OtherContract` using `BasicContractRef`
1. Call `OtherContract` using `BasicContractRef`

#### Prepping `OtherContract`

We need to make sure that the ink! generated contract ref for `OtherContract` is
available to other pieces of code.

We do this by re-exporting the contract reference as follows:

```rust
pub use self::other_contract::OtherContractRef;
```

#### Importing `OtherContract`

Next, we need to import `OtherContract` to our `BasicContractRef` contract.

First, we add the following lines to our `Cargo.toml` file:

```toml
# In `basic_contract_ref/Cargo.toml`

other_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }

# -- snip --

[features]
default = ["std"]
std = [
    "ink/std",
    # -- snip --
    "other_contract/std",
]
```

Two things to note here:

1. If we don't specify the `ink-as-dependency` feature we will end up with linking
   errors.
2. If we don't enable the `std` feature for `std` builds we will not be able to generate
   our contract's metadata.

#### Wiring `BasicContractRef`

First, we will import the contract reference of `OtherContract`, and declare the
reference to be part of our storage struct.

```rust
// In `basic_contract_ref/lib.rs`

use other_contract::OtherContractRef;

#[ink(storage)]
pub struct BasicContractRef {
    other_contract: OtherContractRef,
}
```

Next, we to add a way to instantiate `OtherContract`. We do this from the constructor of our
of contract.

```rust
// In `basic_contract_ref/lib.rs`

#[ink(constructor)]
pub fn new(other_contract_code_hash: Hash) -> Self {
    let other_contract = OtherContractRef::new(true)
        .code_hash(other_contract_code_hash)
        .endowment(0)
        .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])
        .instantiate();

    Self { other_contract }
}
```

Note that for instantiating a contract we need access to the uploaded on-chain
`code_hash`. We will get back to this later.

Once we have an instantiated reference to `OtherContract` we can call its messages just
like normal Rust methods!

```rust
// In `basic_contract_ref/lib.rs`

#[ink(message)]
pub fn flip_and_get(&mut self) -> bool {
    self.other_contract.flip();
    self.other_contract.get()
}
```

#### Uploading `OtherContract`

You will need the [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node)
running in the background for the next steps.

We can upload `OtherContract` using `cargo-contract` as follows:

```
# In the `basic_contract_ref` directory
cargo contract build --manifest-path other_contract/Cargo.toml
cargo contract upload --manifest-path other_contract/Cargo.toml --suri //Alice
```

If successful, this will output in a `code_hash` similar to:

```
Code hash "0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa"
```

We can then use this `code_hash` to instantiate our `BasicContractRef` contract.

#### Instantiating `OtherContract` through `BasicContractRef`

We will first need to instantiate `BasicContractRef`.

```
# In the `basic_contract_ref` directory
cargo contract build
cargo contract instantiate \
    --constructor new \
    --args 0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa \
    --suri //Alice --salt $(date +%s)
```

If successful, this will output in a contract address for `BasicContractRef` similar to:

```
Contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq
```

#### Calling with `OtherContract` through `BasicContractRef`

Finally, we can call the `OtherContract` methods through `BasicContractRef` as follows:

```
cargo contract call --contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq \
    --message flip_and_get --suri //Alice --dry-run
```

Which will result in something like:

```
Result Success!
Reverted false
Data Ok(true)
```

## Builders

The
[`CreateBuilder`](https://docs.rs/ink_env/5.0.0/ink_env/call/struct.CreateBuilder.html)
and
[`CallBuilder`](https://docs.rs/ink_env/5.0.0/ink_env/call/struct.CallBuilder.html)
offer low-level, flexible interfaces for performing cross-contract calls. The
`CreateBuilder` allows you to instantiate already uploaded contracts, and the
`CallBuilder` allows you to call messages on instantiated contracts.

### CreateBuilder

The `CreateBuilder` offers an an easy way for you to **instantiate** a contract. Note
that you'll still need this contract to have been previously uploaded.

:::note

For a refresher on the difference between `upload` and `instantiate`
[see here](../getting-started/deploying.md).

:::

In order to instantiate a contract you need a reference to your contract, just like in
[the previous section](#contract-references).

Below is an example of how to instantiate a contract using the `CreateBuilder`. We will:

- instantiate the uploaded contract with a `code_hash` of `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- instantiating with the `new` constructor
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- generate the address (`AccountId`) using the specified `salt_bytes`
- and we expect it to return a value of type `MyContractRef`

```rust
use contract::MyContractRef;
let my_contract: MyContractRef = build_create::<MyContractRef>()
    .instantiate_v1()
    .code_hash(Hash::from([0x42; 32]))
    .gas_limit(0)
    .endowment(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))
            .push_arg(42)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])
    .returns::<MyContractRef>()
    .instantiate();
```

Since `CreateBuilder::instantiate()` returns a contract reference, we can use this
contract reference to call messages just like in the
[previous section](#contract-references).

### CallBuilder

The `CallBuilder` gives you a couple of ways to call messages from other contracts. There
are two main approaches to this: `Call`s and `DelegateCall`s. We will briefly cover both
here.

#### CallBuilder: Call

When using `Call`s the `CallBuilder` requires an already instantiated contract.

We saw an example of how to use the `CreateBuilder` to instantiate contracts in the
[previous section](#contract-references).

Below is an example of how to call a contract using the `CallBuilder`. We will:

- make a regular `Call`
- to a contract at the address `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- calling the `flip` message
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- and we expect it to return a value of type `bool`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .call(AccountId::from([0x42; 32]))
    .call_v1()
    .gas_limit(0)
    .transferred_value(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<bool>()
    .invoke();
```

Note:

Message arguments will be encoded in the order in which they are provided to the `CallBuilder`.
This means that they should match the order (and type) they appear in the function
signature.

You will not be able to get any feedback about this at compile time. You will only
find out your call failed at runtime!

#### CallBuilder: Delegate Call

You can also use the `CallBuilder` to craft calls using `DelegateCall` mechanics.
If you need a refresher on what delegate calls are,
[see this article](https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c).

In the case of `DelegateCall`s, we don't require an already instantiated contract.
We only need the `code_hash` of an uploaded contract.

Below is an example of how to delegate call a contract using the `CallBuilder`. We will:

- make a `DelegateCall`
- to a contract with a `code_hash` (not contract address!) of `0x4242...`
- calling the `flip` message
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- and we expect it to return an `i32`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .delegate(ink::primitives::Hash::from([0x42; 32]))
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<i32>()
    .invoke();
```

### Builder Error Handling

The `CreateBuilder` and the `CallBuilder` both offer error handling with the
`try_instantiate()` and `try_invoke()` methods respectively.

These allow contract developers to handle two types of errors:

1. Errors from the underlying execution environment (e.g the Contracts pallet)
2. Error from the programming language (e.g `LangError`s)

See the documentation for
[`try_instantiate`](https://docs.rs/ink_env/5.0.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate),
[`try_invoke`](https://docs.rs/ink_env/5.0.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-2),
[`ink::env::Error`](https://docs.rs/ink_env/5.0.0/ink_env/enum.Error.html)
and
[`ink::LangError`](https://docs.rs/ink/5.0.0/ink/enum.LangError.html)
for more details on proper error handling.

:::tip

Because the `CallBuilder` requires only a contract's `AccountId` and message `selector`,
we can call Solidity contracts compiled using the [Solang](https://github.com/hyperledger/solang)
compiler and deployed to a chain that supports the `pallet-contracts`.
See [here](https://github.com/xermicus/call_solidity) for an example of how to do that.

The reverse, calls from Solidity to ink!, are **not** supported by Solang, but there are
plans to implement this in the future.

:::
````

## File: docs/frontend/overview.md
````markdown
---
title: Overview
slug: /frontend/overview
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Overview

Now after you [wrote](../getting-started/creating.md), [compiled](../getting-started/compiling.md) and [deployed your smart contract](../getting-started/deploying.md), it is time to craft a user experience around it.

This experience can take many shapes from mobile app to interactive terminal applications. In this section we are focusing on the most prominent shape in web3 right now, web apps.

Although we love Rust, the native language of the web is JavaScript. Thereby naturally the best tools for creating web experiences are available for JavaScript. Hence, the tools for smart contract interaction with JavaScript are the most advanced as well. To be precise all JavaScript tools mentioned here, actually leverage TypeScript to offer a JavaScript and a typesafe TypeScript experience.

## JavaScript/TypeScript Tools

There are several levels of abstraction where you can start your journey creating a web frontend for your contracts. Each levels offers different advantages and disadvantages. The following list is of tools. They are sorted from the most generic no third party library way to interact with Polkadot's smart contracts to the most opinionated template using libraries and proven frontend frameworks.

### Using no libraries

- [RPC Interface](https://wiki.polkadot.network/docs/build-node-interaction) **(not recommended)**: nodes participating in the blockchain network offer an [JSON RPC interface](https://www.jsonrpc.org/) to interact with the blockchains state and capabilities.

### Low level libraries

- [`@polkadot/api`](https://polkadot.js.org/docs/api) **(not recommended)**: allows for most general interaction with Polkadot-SDK based blockchains from JavaScript. In order to talk to smart-contracts, one would use the `pallet-contracts` runtime calls.

- [`@polkadot/api-contract`](https://polkadot.js.org/docs/api-contract) **(recommended)**: abstraction on top of `@polkadot/api` for the `pallet-contracts`. Makes interaction with smart contracts more comfortable and type safe.

* [`dedot`](https://docs.dedot.dev/ink-smart-contracts/intro) **(recommended)**: Next-gen TypeScript client for Polkadot & Polkadot SDK-based networks, offering fully type-safe APIs for interacting with ink! smart contracts. Dedot simplifies the process of generating TypeScript bindings for your contracts, deploying them, executing queries and transactions, performing dry runs for validation, and decoding contract events with full type safety.

### React

- [`useInkathon`](https://github.com/scio-labs/use-inkathon) **(recommended)**: A hooks library for the popular frontend javascript framework React with focus on smart-contract interactions. Built using `@polkadot/api` & `@polkadot/api-contract`.
- [`typink`](https://docs.dedot.dev/typink) **(recommended)**: A comprehensive toolkit designed to simplify and accelerate ink! dApp development. Typink provides fully type-safe React hooks to streamlines interactions with ink! smart contracts, ensuring a seamless developer experience. With its built-in CLI, Typink enables you to bootstrap new projects in seconds, offering multi-chain support and flexible options for wallet connectors. [Getting started now!](../getting-started/typink)

### React and Next.js

- [`inkathon`](https://github.com/scio-labs/inkathon) **(recommended)**: Full Stack web app template using the popular full stack template `Nextjs`. Itself is using `useInkathon`. The fastest way to get up and running with a smart contract and a corresponding web app.

### Examples

For inspiration how to get started building your full stack dApp. Make sure to visit our [Smart Contracts Examples section](../examples/contracts.mdx) or [repository directly](https://github.com/use-ink/ink-examples). These examples not only offer the smart contract code but also have an accompanied frontend project. Checkout the `README.md` for details how to setup and run these frontend examples.

## Other Languages

Of course the browser and JavaScript should not be the one and only platform for smart contract frontends. It's just the most mature for smart contract frontend tooling.

The following is a list of libraries which could be used to craft smart-contract dApps on other platforms than the web.

- [novasamatech/substrate-sdk-ios](https://github.com/novasamatech/substrate-sdk-ios): low level generic iOS SDK for substrate.

- [novasamatech/substrate-sdk-android](https://github.com/novasamatech/substrate-sdk-android): low level Android SDK for substrate.

- [paritytech/subxt](https://github.com/paritytech/subxt): Rust library to submit extrinsics (transactions) to a substrate node via RPC.

- [polkascan/py-substrate-interface](https://github.com/polkascan/py-substrate-interface/blob/master/docs/usage/ink-contract-interfacing.md): Python library to interface with Substrate nodes.
````

## File: docs/intro/intro.mdx
````
---
title: Welcome!
description: Welcome to ink!, the Rust smart contract language of Polkadot.
hide_title: true
slug: /
hide_table_of_contents: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

<br />

<center>
    <img src={useBaseUrl('/img/title/ink!-5.1.svg')} title="The ink! 5.1 smart contracts toolkit release" width="800" style={{ marginBottom: 10 }} />
</center>

<center className="ignoreP">
    <a href="https://github.com/use-ink/ink-examples">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=GitHub&logoColor=black&label=ink!%20Examples&labelColor=white&color=blue" />
    </a>
    &nbsp;
    <a href="https://substrate.stackexchange.com/questions/tagged/ink?tab=Votes">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=StackExchange&label=ink!%20Support%20on%20StackExchange&labelColor=white&color=blue" />
    </a>
    &nbsp;
    <a href="https://t.me/inkathon">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=Telegram&label=ink!%20Support%20on%20Telegram&labelColor=white&color=blue" />
    </a>
    <br/>
</center>

<center className="ignoreP">
    <a href="https://twitter.com/ink_lang">
        <img style={{height: 25}} src="https://img.shields.io/twitter/follow/ink_lang?label=Follow%20us%20on%20X" />
    </a>
    &nbsp;
    <a href="http://youtube.com/@ink-lang">
        <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=YouTube&logoColor=eb3f25&label=ink!%20YouTube&labelColor=white&color=blue" />
    </a>
</center>

<h3 style={{ lineHeight: 1.4 + 'em', marginTop: 0.5 + 'em' }}>
  <center>
    <em>
      ink! is a programming language for smart contracts.<br />
      You can use it with blockchains built on <a href="https://github.com/paritytech/substrate">Substrate</a>.
    </em>
  </center>
</h3>

## Learn More

<div className="row">
  <div className="col text--center">
    <a href="https://www.parity.io/blog/what-is-paritys-ink">
      <img src={useBaseUrl('/img/what-is-ink.png')} width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      What is Polkadot's ink!?<br />
      <a href="https://www.parity.io/blog/what-is-paritys-ink">» view page</a>
    </p>
  </div>
  <div className="col text--center">
    <a href="https://docs.substrate.io/tutorials/smart-contracts/">
      <img src={useBaseUrl('/img/tutorial.png')} width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      Guided Beginners Tutorial<br />
      <a href="https://docs.substrate.io/tutorials/smart-contracts/">» view tutorial</a>
    </p>
  </div>
  <div className="col text--center">
    <a target="_parent" href="/faq/migrating-from-ink-4-to-5">
      <img src={useBaseUrl('/img/migration-guide.jpg')} width="250" style={{ borderRadius: 10, border: '1px solid slategrey' }} />
    </a>
    <p>
      Migrate to ink! 5.0<br />
      <a target="_parent" href="/faq/migrating-from-ink-4-to-5">» view migration guide</a>
    </p>
  </div>
</div>

## Our Pitch

<div className="pitch">
    <div className="row">
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/rust.svg')} width="100" />
        <p>Inherent safety-guarantees with the Rust programming language.</p>
      </div>
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/ecosystem.svg')} width="100" />
        <p>Ability to use all the normal Rust tooling ‒ clippy, crates.io, IDE’s, etc.</p>
      </div>
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/interop.svg')} width="100" />
        <p>Interoperability with Solidity contracts.</p>
      </div>
    </div>

    <br />
    &nbsp;
    <br />

    <div className="row">
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/migration-path.svg')} width="100" />
        <p>Clear migration path for graduating to a parachain.</p>
      </div>
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/wasm.svg')} width="100" />
        <p>Established industry standard for the compiler target.</p>
      </div>
      <div className="col text--center">
        <img src={useBaseUrl('/img/icons/polkadot.svg')} width="100" />
        <p>Native to Polkadot. Complements your Substrate parachain perfectly.</p>
      </div>
    </div>
</div>

## Where can I deploy ink! contracts?

<div className="row" style={{ marginTop: -10 }}>
    <div className="col text--left">
        <h3><img src= {useBaseUrl('/img/chains/production.svg')} className="chainHeader" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://alephzero.org">
            <img src= {useBaseUrl('/img/chains/aleph-zero.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://astar.network">
            <img src= {useBaseUrl('/img/chains/astar.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://shiden.astar.network">
            <img src= {useBaseUrl('/img/chains/shiden.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="http://phala.network">
            <img src= {useBaseUrl('/img/chains/phala.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org">
            <img src= {useBaseUrl('/img/chains/pendulum.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org/amplitude">
            <img src= {useBaseUrl('/img/chains/amplitude.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.ternoa.network/">
            <img src= {useBaseUrl('/img/chains/ternoa.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://krest.peaq.network/">
            <img src= {useBaseUrl('/img/chains/krest.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= {useBaseUrl('/img/chains/mainnet-soon.svg')} className="chainHeader mainnetSoon" /></h3>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://t3rn.io">
            <img src= {useBaseUrl('/img/chains/t3rn.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://enjin.io">
            <img src= {useBaseUrl('/img/chains/enjin.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://zeitgeist.pm">
            <img src= {useBaseUrl('/img/chains/zeitgeist.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.peaq.network">
            <img src= {useBaseUrl('/img/chains/peaq.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://bit.country">
            <img src= {useBaseUrl('/img/chains/bitcountry.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://github.com/yerbatech">
            <img src= {useBaseUrl('/img/chains/yerba.svg')} className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--left">
        <h3><img src= {useBaseUrl('/img/chains/on-testnet.svg')} className="chainHeader" /></h3>
        <a href="/testnet">
            <img src= {useBaseUrl('/img/chains/testnet.svg')} className="chain" />
        </a>
    </div>
    <div className="col">&nbsp;</div>
</div>

## Smart Contract Examples

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src={useBaseUrl('/img/icons/flipper.svg')} width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src={useBaseUrl('/img/icons/erc20.svg')} width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src={useBaseUrl('/img/icons/nft.svg')} width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br />

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src={useBaseUrl('/img/icons/upgradable.svg')} width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src={useBaseUrl('/img/icons/multisig.svg')} width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src={useBaseUrl('/img/icons/rand-extension.svg')} width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>

## Wallet Support

<table className="wallet-table text--center">
    <tr>
        <th></th>
        <th className="text--left">Contract Interactions</th>
        <th className="text--left">Tokens (PSP-22)</th>
        <th className="text--left">NFTs (PSP-34)</th>
    </tr>
    <tr>
        <th>
            <a href="https://www.subwallet.app/" title="SubWallet" >
                <img src= {useBaseUrl('/img/wallets/subwallet.svg')} className="wallet" alt="SubWallet" width="200"/>
            </a>
        </th>
        <td><img src= {useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td><img src= {useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td><img src= {useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
    </tr>
    <tr>
        <th>
            <a href="https://polkadot.js.org/extension/" title="Polkadot{.js}">
                <img src= {useBaseUrl('/img/wallets/polkadot-js.svg')} className="wallet" alt="Polkadot{.js}" width="200"/>
            </a>
        </th>
        <td><img src= {useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <th>
            <a href="https://www.talisman.xyz/" title="Talisman">
                <img src= {useBaseUrl('/img/wallets/talisman.svg')} className="wallet" alt="Talisman" width="200"/>
            </a>
        </th>
        <td><img src= {useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark"/></td>
        <td></td>
        <td></td>
    </tr>
</table>

You can read more on standards [here](../standards/overview.md).
````

## File: docs/third-party-tools/typink.md
````markdown
---
title: Typink
slug: /getting-started/typink
---

# Introducing Typink

## Overview

Typink is a comprehensive toolkit designed to simplify and accelerate ink! dApp development. Typink provides fully type-safe React hooks to streamline interactions with ink! smart contracts, ensuring a seamless developer experience. With its built-in CLI, Typink enables you to bootstrap new projects in seconds, offering multi-chain support and flexible options for wallet connectors (e.g. [SubConnect](https://github.com/Koniverse/SubConnect-v2), [Talisman Connect](https://github.com/TalismanSociety/talisman-connect), ...).

## Why Typink?

Typink provides a type-safe, flexible, and efficient way to build ink! dApps:

✅ Fully Type-Safe React Hooks – Ensures reliability in contract interactions. <br/>
✅ Built-in CLI – Kickstart projects in seconds with `create-typink`. <br/>
✅ Decoupled Wallet Integration – Supports various wallet connectors or custom implementations. <br/>
✅ Multi-Chain Support – Effortlessly switch networks with lazy initialization. <br/>


## Quick look

1. Fully Type-Safe React Hooks

![Fully Type-Safe React Hooks](https://docs.dedot.dev/~gitbook/image?url=https%3A%2F%2F486742009-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FMrQp7F5eE70nr7yUHeEZ%252Fuploads%252F0O9vuGWWnB13Bt1sW28o%252Ftypink-suggestions.gif%3Falt%3Dmedia%26token%3Dd4ac08dc-0286-42ad-835a-a53038f7a74c&width=768&dpr=2&quality=100&sign=f35c0200&sv=2)

2. Built-in CLI `create-typink` to spin up new projects in seconds

![create-typink](https://docs.dedot.dev/~gitbook/image?url=https%3A%2F%2F486742009-files.gitbook.io%2F%7E%2Ffiles%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FMrQp7F5eE70nr7yUHeEZ%252Fuploads%252FqzCwGVTJqyrqi8MSC6aW%252Fimage.png%3Falt%3Dmedia%26token%3D03aacbe8-996c-4c32-8284-c340570e512a&width=768&dpr=2&quality=100&sign=489982ed&sv=2)

## Get started

- [Start a new Typink dApp project](https://docs.dedot.dev/typink/getting-started/start-a-new-dapp)
- [Migrate from an existing dApp](https://docs.dedot.dev/typink/getting-started/migrate-from-existing-dapp)
- [Documentation](https://docs.dedot.dev/typink)
- [GitHub Repository](https://github.com/dedotdev/typink)
- [Tutorial: Develop a PSP22 Transfer dApp with Typink](https://docs.dedot.dev/help-and-faq/tutorials/develop-ink-dapp-using-typink)

## Join the community

Join the [Dedot & Typink Telegram Group](https://t.me/JoinDedot) to ask questions, share ideas, and collaborate on ink! dApp development! Whether you’re looking for support or want to contribute, we’d love to have you on board. [Join us now!](https://t.me/JoinDedot)

---
**Build with confidence. Build with Typink.**
````

## File: versioned_docs/version-v4/basics/cross-contract-calling.md
````markdown
---
title: Cross-Contract Calling
slug: /basics/cross-contract-calling
hide_title: true
---

![Cross Contract Title Picture](/img/title/cross-contract.svg)

# Cross-Contract Calls

In ink! contracts it is possible to call messages and constructors of other
on-chain contracts.

There are a few approaches to performing these cross-contract calls in ink!:

1. Contract references (i.e `ContractRef`)
1. Builders (i.e `CreateBuilder` and `CallBuilder`)

Contract references can only be used for cross-contract calls to other ink! contracts.
Builders can be used to issue cross-contract calls to any Wasm contract, such as those
written in ink!, Solang, or ask!.

## Contract References

Contract references refer to structs that are generated by the ink! code generation for the
purposes of cross-contract calls.

They give developers a type-safe way of interacting with a contract.

A downside to using them is that you need to import the contract you want to call as a
dependency of your own contract.

If you want to interact with a contract that is already on-chain you will need to use the
[`Builders`](#builders) approach instead.

### `BasicContractRef` walkthrough

We will walk through the [`cross-contract-calls`](https://github.com/use-ink/ink-examples/tree/master/cross-contract-calls)
example in order to demonstrate how cross-contract calls using contract references work.

The general workflow will be:

1. Prepare `OtherContract` to be imported to other contracts
1. Import `OtherContract` into `BasicContractRef`
1. Upload `OtherContract` on-chain
1. Instantiate `OtherContract` using `BasicContractRef`
1. Call `OtherContract` using `BasicContractRef`

#### Prepping `OtherContract`

We need to make sure that the ink! generated contract ref for `OtherContract` is
available to other pieces of code.

We do this by re-exporting the contract reference as follows:

```rust
pub use self::other_contract::OtherContractRef;
```

#### Importing `OtherContract`

Next, we need to import `OtherContract` to our `BasicContractRef` contract.

First, we add the following lines to our `Cargo.toml` file:

```toml
# In `basic_contract_ref/Cargo.toml`

other_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }

# -- snip --

[features]
default = ["std"]
std = [
    "ink/std",
    # -- snip --
    "other_contract/std",
]
```

Two things to note here:

1. If we don't specify the `ink-as-dependency` feature we will end up with linking
   errors.
2. If we don't enable the `std` feature for `std` builds we will not be able to generate
   our contract's metadata.

#### Wiring `BasicContractRef`

First, we will import the contract reference of `OtherContract`, and declare the
reference to be part of our storage struct.

```rust
// In `basic_contract_ref/lib.rs`

use other_contract::OtherContractRef;

#[ink(storage)]
pub struct BasicContractRef {
    other_contract: OtherContractRef,
}
```

Next, we to add a way to instantiate `OtherContract`. We do this from the constructor of our
of contract.

```rust
// In `basic_contract_ref/lib.rs`

#[ink(constructor)]
pub fn new(other_contract_code_hash: Hash) -> Self {
    let other_contract = OtherContractRef::new(true)
        .code_hash(other_contract_code_hash)
        .endowment(0)
        .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])
        .instantiate();

    Self { other_contract }
}
```

Note that for instantiating a contract we need access to the uploaded on-chain
`code_hash`. We will get back to this later.

Once we have an instantiated reference to `OtherContract` we can call its messages just
like normal Rust methods!

```rust
// In `basic_contract_ref/lib.rs`

#[ink(message)]
pub fn flip_and_get(&mut self) -> bool {
    self.other_contract.flip();
    self.other_contract.get()
}
```

#### Uploading `OtherContract`

You will need the [`substrate-contracts-node`](https://github.com/paritytech/substrate-contracts-node)
running in the background for the next steps.

We can upload `OtherContract` using `cargo-contract` as follows:

```
# In the `basic_contract_ref` directory
cargo contract build --manifest-path other_contract/Cargo.toml
cargo contract upload --manifest-path other_contract/Cargo.toml --suri //Alice
```

If successful, this will output in a `code_hash` similar to:

```
Code hash "0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa"
```

We can then use this `code_hash` to instantiate our `BasicContractRef` contract.

#### Instantiating `OtherContract` through `BasicContractRef`

We will first need to instantiate `BasicContractRef`.

```
# In the `basic_contract_ref` directory
cargo contract build
cargo contract instantiate \
    --constructor new \
    --args 0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa \
    --suri //Alice --salt $(date +%s)
```

If successful, this will output in a contract address for `BasicContractRef` similar to:

```
Contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq
```

#### Calling with `OtherContract` through `BasicContractRef`

Finally, we can call the `OtherContract` methods through `BasicContractRef` as follows:

```
cargo contract call --contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq \
    --message flip_and_get --suri //Alice --dry-run
```

Which will result in something like:

```
Result Success!
Reverted false
Data Ok(true)
```

## Builders

The
[`CreateBuilder`](https://docs.rs/ink_env/4.3.0/ink_env/call/struct.CreateBuilder.html)
and
[`CallBuilder`](https://docs.rs/ink_env/4.3.0/ink_env/call/struct.CallBuilder.html)
offer low-level, flexible interfaces for performing cross-contract calls. The
`CreateBuilder` allows you to instantiate already uploaded contracts, and the
`CallBuilder` allows you to call messages on instantiated contracts.

### CreateBuilder

The `CreateBuilder` offers an an easy way for you to **instantiate** a contract. Note
that you'll still need this contract to have been previously uploaded.

:::note

For a refresher on the difference between `upload` and `instantiate`
[see here](../getting-started/deploying.md).

:::

In order to instantiate a contract you need a reference to your contract, just like in
[the previous section](#contract-references).

Below is an example of how to instantiate a contract using the `CreateBuilder`. We will:

- instantiate the uploaded contract with a `code_hash` of `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- instantiating with the `new` constructor
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- generate the address (`AccountId`) using the specified `salt_bytes`
- and we expect it to return a value of type `MyContractRef`

```rust
use contract::MyContractRef;
let my_contract: MyContractRef = build_create::<MyContractRef>()
    .code_hash(Hash::from([0x42; 32]))
    .gas_limit(0)
    .endowment(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))
            .push_arg(42)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])
    .returns::<MyContractRef>()
    .instantiate();
```

Since `CreateBuilder::instantiate()` returns a contract reference, we can use this
contract reference to call messages just like in the
[previous section](#contract-references).

### CallBuilder

The `CallBuilder` gives you a couple of ways to call messages from other contracts. There
are two main approaches to this: `Call`s and `DelegateCall`s. We will briefly cover both
here.

#### CallBuilder: Call

When using `Call`s the `CallBuilder` requires an already instantiated contract.

We saw an example of how to use the `CreateBuilder` to instantiate contracts in the
[previous section](#contract-references).

Below is an example of how to call a contract using the `CallBuilder`. We will:

- make a regular `Call`
- to a contract at the address `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- calling the `flip` message
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- and we expect it to return a value of type `bool`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .call(AccountId::from([0x42; 32]))
    .gas_limit(0)
    .transferred_value(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<bool>()
    .invoke();
```

Note:

Message arguments will be encoded in the order in which they are provided to the `CallBuilder`.
This means that they should match the order (and type) they appear in the function
signature.

You will not be able to get any feedback about this at compile time. You will only
find out your call failed at runtime!

#### CallBuilder: Delegate Call

You can also use the `CallBuilder` to craft calls using `DelegateCall` mechanics.
If you need a refresher on what delegate calls are,
[see this article](https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c).

In the case of `DelegateCall`s, we don't require an already instantiated contract.
We only need the `code_hash` of an uploaded contract.

Below is an example of how to delegate call a contract using the `CallBuilder`. We will:

- make a `DelegateCall`
- to a contract with a `code_hash` (not contract address!) of `0x4242...`
- calling the `flip` message
- with the following arguments
  - a `u8` with value `42`
  - a `bool` with value `true`
  - an array of 32 `u8` with value `0x10`
- and we expect it to return an `i32`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .delegate(ink::primitives::Hash::from([0x42; 32]))
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<i32>()
    .invoke();
```

### Builder Error Handling

The `CreateBuilder` and the `CallBuilder` both offer error handling with the
`try_instantiate()` and `try_invoke()` methods respectively.

These allow contract developers to handle two types of errors:

1. Errors from the underlying execution environment (e.g the Contracts pallet)
2. Error from the programming language (e.g `LangError`s)

See the documentation for
[`try_instantiate`](https://docs.rs/ink_env/4.3.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate),
[`try_invoke`](https://docs.rs/ink_env/4.3.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-2),
[`ink::env::Error`](https://docs.rs/ink_env/4.3.0/ink_env/enum.Error.html)
and
[`ink::LangError`](https://docs.rs/ink/4.3.0/ink/enum.LangError.html)
for more details on proper error handling.

:::tip

Because the `CallBuilder` requires only a contract's `AccountId` and message `selector`,
we can call Solidity contracts compiled using the [Solang](https://github.com/hyperledger/solang)
compiler and deployed to a chain that supports the `pallet-contracts`.
See [here](https://github.com/xermicus/call_solidity) for an example of how to do that.

The reverse, calls from Solidity to ink!, are **not** supported by Solang, but there are
plans to implement this in the future.

:::
````

## File: versioned_docs/version-v4/intro/ink-vs-solidity.md
````markdown
---
title: ink! vs. Solidity
hide_title: true
slug: /ink-vs-solidity
---

![Solidity Title Picture](/img/title/solidity.svg)

# ink! vs. Solidity

The following table gives a brief comparison of features between ink! and Solidity:

<div class="comparison">

|                       | ink!                        | Solidity      |
| :-------------------- | :-------------------------- | :------------ |
| Virtual Machine       | Any Wasm VM                 | EVM           |
| Encoding              | Wasm                        | EVM Byte Code |
| Language              | Rust                        | Standalone    |
| Overflow Protection   | Enabled by default          | Yes           |
| Constructor Functions | Multiple                    | Single        |
| Tooling               | Anything that supports Rust | Custom        |
| Versioning            | Semantic                    | Semantic      |
| Has Metadata?         | Yes                         | Yes           |
| Multi-File Project    | Planned                     | Yes           |
| Storage Entries       | Variable                    | 256 bits      |
| Supported Types       | Docs                        | Docs          |
| Has Interfaces?       | Yes (Rust Traits)           | Yes           |

</div>

## Solidity to ink! Guide

### Table of Contents

- [Solidity to ink! Guide](#solidity-to-ink-guide)
- [Table of Contents](#table-of-contents)
- [Converting a Solidity contract to ink!](#converting-a-solidity-contract-to-ink)
  - [1. Generate a new ink! contract](#1-generate-a-new-ink-contract)
  - [2. Build the contract](#2-build-the-contract)
  - [3. Convert Solidity class fields to Rust struct](#3-convert-solidity-class-fields-to-rust-struct)
  - [4. Convert each function](#4-convert-each-function)
- [Best Practices + Tips](#best-practices--tips)
- [Syntax Equivalencies](#syntax-equivalencies)
  - [`public function`](#public-function)
  - [`mapping declaration`](#mapping-declaration)
  - [`mapping usage`](#mapping-usage)
  - [`struct`](#struct)
  - [`assertions / requires`](#assertions--requires)
  - [`timestamp`](#timestamp)
  - [`contract caller`](#contract-caller)
  - [`contract's address`](#contracts-address)
  - [`bytes`](#bytes)
  - [`uint256`](#uint256)
  - [`payable`](#payable)
  - [`received deposit / payment`](#received-deposit--payment)
  - [`contract balance`](#contract-balance)
  - [`transfer tokens from contract`](#transfer-tokens-from-contract)
  - [`events & indexed`](#events--indexed)
  - [`errors and returning`](#errors-and-returning)
    - [`throw`](#throw)
    - [`assert`](#assert)
    - [`require and revert`](#require-and-revert)
  - [`nested mappings + custom / advanced structures`](#nested-mappings--custom--advanced-structures)
  - [`cross-contract calling`](#cross-contract-calling)
  - [`submit generic transaction / dynamic cross-contract calling`](#submit-generic-transaction--dynamic-cross-contract-calling)
- [Limitations of ink! v3](#limitations-of-ink-v3)
- [Troubleshooting Errors](#troubleshooting-errors)
- [unit testing (off-chain)](#unit-testing-off-chain)

## Converting a Solidity Contract to ink!

### 1. Generate a new ink! contract

Run the following command to generate the skeleton for an ink! contract.
The command will set up the boilerplate code for ink!'s "Hello, World!"
(the [`flipper`](https://github.com/use-ink/ink-examples/tree/main/flipper) contract)).

```
cargo contract new <contract-name>
```

### 2. Build the contract

```
cargo contract build
```

### 3. Convert Solidity class fields to Rust struct

Solidity is an object-oriented language, and uses classes. ink! (Rust) does not use classes.

An example Solidity class looks like:

<!-- Markdown syntax highlighting does not support Solidity. C++ seems to be the best match -->

```c++
contract MyContract {
    bool private _theBool;
    event UpdatedBool(bool indexed _theBool);

    constructor(bool theBool_) {
        require(theBool_ == true, "theBool_ must start as true");

        _theBool = theBool_;
    }

    function setBool(bool newBool) public returns (bool boolChanged) {
        if _theBool == newBool {
               boolChanged = false;
        } else {
            boolChanged = true;
        }

        _theBool = newBool;
        // emit event
        UpdatedBool(newBool);
    }
}
```

And the equivalent contract in ink! looks like:

```rust
#![cfg_attr(not(feature = "std"), no_std)]

use ink_lang as ink;

#[ink::contract]
mod mycontract {
    #[ink(storage)]
    pub struct MyContract {
        the_bool: bool, // class members become struct fields
    }

    #[ink(event)]
    pub struct UpdatedBool {
        #[ink(topic)] // -> indexed
        the_bool: bool,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new(the_bool: bool) -> Self {
            assert!(the_bool == true, "the_bool must start as true");
            Self { the_bool }
        }

        #[ink(message)] // functions become struct implementations
        pub fn set_bool(&mut self, new_bool: bool) -> bool {
            let bool_changed = true;

            if self.the_bool == new_bool{
                bool_changed = false;
            }else{
                bool_changed = true;
            }

            self.the_bool = new_bool;

            self.env().emit_event(UpdatedBool {
                the_bool: new_bool
            });

            // return
            bool_changed
        }
    }
}
```

A few key differences are:

- Solidity class variables / members will be placed in the contract struct in ink!
- All class methods in Solidity are `impl`emented for the contract struct in ink!
- Solidity frequently prefixes variables with an underscore (`_name`). ink! / Rust only prefixes with an underscore for _unused_ variables.
- Solidity uses camelCase. ink! uses snake_case.
- In Solidity, the variable type comes before the variable name (e.g. bool myVar). While ink! specifies var type after the var name (e.g. my_var: bool)

### 4. Convert each function

- Start converting each function one by one.
  - A recommended approach is to, if possible, skip cross-contract calls at first and use mock data instead
  - This way off-chain unit tests can be written to test the core functionality
    - unit tests are off-chain and do not work with cross-contract calls
  - Once fully tested, start adding in cross-contract calls and perform on-chain manual + integration tests
- Ensure that function's visibility (public, private) are matched in ink!
- In Solidity, if a function returns a `bool success`, ink! will use a `Result<()>` instead (`Result::Ok` or `Result::Err`).

Solidity return example:

```c++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract Example {
    uint128 public data;

    constructor(){}

    function setData(uint128 newData) public returns (
        bool success,
        string memory reason
        ) {

        if (newData == 0) {
            return (false, "Data should not be zero");
        }

        data = newData;
        return (true, "");
    }
}
```

The equivalent contract in ink!:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod example {
    #[ink(storage)]
    pub struct Example {
        data: u128,
    }

    #[derive(Debug, scale::Encode, scale::Decode, PartialEq, Eq)]
    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
    pub enum Error {
        DataShouldNotBeZero,
    }

    pub type Result<T> = core::result::Result<T, Error>;

    impl Example {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self { data: 0 }
        }

        #[ink(message)]
        pub fn set_data(&mut self, new_data: u128) -> Result<()> {
            if new_data == 0 {
                return Err(Error::DataShouldNotBeZero);
            }

            self.data = new_data;
            Ok(())
        }
    }
}
```

## Best Practices + Tips

- If the Solidity contract uses a `string`, it is recommended to use a `Vec<u8>` to avoid the overhead of a `String`. See [here](https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract) for more details on why. The smart contract should only contain the information that strictly needs to be placed on the blockchain and go through consensus. The UI should be used for displaying strings.
- Double check all `.unwrap()`s performed. Solidity does not have as strict checking as ink! does. For example, a mapping field can be accessed as simple as `myMapping[someKey]`. ink!, however, requires `self.my_mapping.get(some_key).unwrap()`. A useful way to handle `None` cases is to use `.unwrap_or(some_val)`.
- Run the contracts node with `substrate-contracts-node -lerror,runtime::contracts=debug` for debug prints, and errors to be displayed in the nodes console.
- When passing parameters to a helper, it is recommended to pass references (even for primitives) as Wasm is more efficient with references.
  For example (see [erc20](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) example):

```rust
/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
#[ink(message)]
pub fn balance_of(&self, owner: AccountId) -> Balance {
    self.balance_of_impl(&owner)
}

/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
///
/// # Note
///
/// Prefer to call this method over `balance_of` since this
/// works using references which are more efficient in Wasm.
#[inline]
fn balance_of_impl(&self, owner: &AccountId) -> Balance {
    self.balances.get(owner).unwrap_or_default()
}
```

- Just as in Solidity, ink! does not have floating point numbers due to the non-deterministic nature. Instead, the frontend should add decimal points as needed.

## Syntax Equivalencies

### `public function`

```c++
// solidity
function fnName() public {}
// or
// by default, functions are public
function fnName() {}
```

```rust
// ink!
#[ink(message)]
pub fn fn_name(&self) {}
```

### `mapping declaration`

```c++
// solidity
mapping(address => uint128) private mapName;
```

```rust
//ink!
use ink_storage::{
    traits::SpreadAllocate,
    Mapping,
};

#[ink(storage)]
#[derive(SpreadAllocate)]
pub struct ContractName {
    map_name: Mapping<AccountId, u128>,
}
```

When using a map in ink!, `ink_lang::utils::initialize_contract` must be used in the constructor. See [here](../datastructures/mapping.md) for more details.

### `mapping usage`

```c++
// solidity

// insert / update
aMap[aKey] = aValue;

// get
aMap[aKey]
```

```rust
// ink!

//insert / update
self.a_map.insert(&a_key, &a_value);

// get
self.a_map.get(a_key).unwrap()
```

### `struct`

```c++
// solidity
struct MyPerson{
    address person;
    u64 favNum;
}
```

```rust
// ink!
struct MyPerson {
    person: AccountId,
    fav_num: u64,
}
```

### `assertions / requires`

```c++
// solidity
require(someValue < 10, "someValue is not less than 10");
```

```rust
// ink!
assert!(some_value < 10, "some_value is not less than 10");
```

### `timestamp`

```c++
// solidity
block.timestamp
```

```rust
// ink!
self.env().block_timestamp()
```

### `contract caller`

```c++
// solidity
address caller = msg.sender;
```

```rust
// ink!
let caller: AccountId = self.env().caller();
```

### `contract's address`

```c++
// solidity
address(this)
```

```rust
// ink!
self.env().account_id()
```

### `bytes`

Solidity has a type `bytes`. `bytes` is (essentially) equivalent to an array of uint8. So, `bytes` in Solidity => `Vec<u8>` or `[u8; ...]` in ink!. See [here](https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity) for more details. If desired, a `bytes` struct can be created in ink! to replicate the `bytes` type in Solidity.

### `uint256`

Solidity uses `uint256` and `uint` to represent a 256-bit type.

Solidity is 256-bit / 32-byte word optimized. Meaning, using `uint256` in Solidity contracts will reduce gas usage -- but increase storage usage. The largest size ink! has built in is a `u128`. ink! compiles to Wasm. The largest primitive Wasm has is 64bit (due to most computers using 64bit). So, there is no benefit to using any larger primitive over a collection.

When porting a `uint256` from Solidity to ink!, it is recommended to, with discretion, determine the range of the value, and choose the appropriate size (u8, u16, u32, u64, u128). If a 256-bit hash value is required, ink! has a `Hash` primitive available. In the event a value needs to be 256-bit, it is recommended to use an array (e.g. `[u64; 4]`).

### `payable`

```c++
// solidity
function myFunction() payable returns (uint64) {}
```

```rust
#[ink(message, payable)]
pub fn my_function(&self) -> u64 {}
```

### `received deposit / payment`

```C++
// solidity
msg.value
```

```rust
// ink!
self.env().transferred_value()
```

### `contract balance`

```c++
// solidity
address(this).balance
```

```rust
// ink!
self.env().balance()
```

### `transfer tokens from contract`

```c++
// solidity
recipient.send(amount)
```

```rust
// ink!
if self.env().transfer(recipient, amount).is_err() {
    panic!("error transferring")
}
```

### `events & indexed`

```c++
// solidity

event MyCoolEvent(
    u128 indexed indexedValue,
    u128 notIndexedValue,
);

// emit event
emit MyCoolEvent(someValue, someOtherValue);
```

```rust
// ink!

#[ink(event)]
pub struct MyCoolEvent {
    #[ink(topic)]
    indexed_value: u128,

    not_indexed_value: u128,
}

// emit event
self.env().emit_event(MyCoolEvent {
    indexed_value: some_value,
    not_indexed_value: some_other_value
});
```

### `errors and returning`

Solidity has several error handling mechanisms: `assert`, `require`, `revert`, and `throw`. Each of these will revert the changed state when called. See [this article](https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e) for details on these.

ink! uses a `Result` enum (`Ok(T)`, `Err(E)`), `assert!` and `panic!`. [This Stack Exchange](https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts) answer and [GitHub discussion](https://github.com/use-ink/ink/issues/641) provide more details on these.

#### `throw`

Throw is deprecated in Solidity and would throw an invalid opcode error (no details) and revert the state. As an alternative to the `if...{throw;}` pattern in Solidity, a `Result::Err` should be returned for expected errors, and an `assert!` should be used for errors that should not occur.

#### `assert`

In Solidity, `assert` is used as internal guards against errors in the _code_. In general, properly functioning code should never hit a failing assert. `assert` in Solidity does not have error strings. In ink!, use `assert!`. `assert!` will `panic!` if it evaluates to _false_. The state will be reverted, and a `CalleeTrapped` will be returned. The (optional) error string will be printed to the debug buffer.

```rust
// ink!
assert!(caller == owner, "caller is not owner")
```

#### `require and revert`

In Solidity, `require` is used for general (normal) errors -- such as errors that occur based on user input. `require` does have the option for an error string. `revert` is very similar to `require` except that `revert` will be called in `if ... else` chains. Both `require` and `revert` will revert the chain state. In ink!, `if ... { return Err(Error::SomeError) }` should be used for `require` or `revert`. When a `Result::Err` is returned in ink!, then all state is reverted.

In general, `Result::Err` should be used when a _calling contract_ needs to know _why_ a function failed. Otherwise, `assert!` should be used as it has less overhead than a `Result`.

```c++
// Solidity
function myFunction(bool returnError) public pure {
    require(!returnError, "my error here");

    // or

    if returnError {
        revert("my error here");
    }
}
```

```rust
// ink!

#[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]
#[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
pub enum Error {
    /// Provide a detailed comment on the error
    MyError,
}

// result type
pub type Result<T> = core::result::Result<T, Error>;

// ...

#[ink(message)]
pub fn my_function(&self, return_error: bool) -> Result<()> {
    if return_error{
        return Err(Error::MyError)
    }
    Ok(())
}
```

### `nested mappings + custom / advanced structures`

In Solidity, it is easy to do nested mappings. It is not as straightforward in ink!.

imagine the following scenario

```c++
// solidity
contract Dao {
    struct Proposal {
        mapping (address => bool) votedYes
    }

    mapping (address => bool) public isWhitelisted;
    Proposal[] public proposals;
}
```

in ink! this _seems_ like it could be represented like so:

```rust
#[ink::contract]
mod dao {

    use ink::{
        prelude::vec::Vec,
        storage::Mapping,
    };

    #[ink(storage)]
    pub struct Proposal {
        voted_yes: Mapping<AccountId, bool>,
    }

    #[ink(storage)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }
    }
}
```

However, this will cause an error due to the nested mapping. [This answer](https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract) explains in detail why nested mappings are not allowed

So, as of now, to get around this issue an alternate data structure will need to be used. A data-structure that can be interchanged with the `Mapping` syntax and with minimal additional implementations is the `BTreeMap`. `BTreeMap` is less efficient than `Mapping`, but is an easy workaround until nested mappings are allowed. This will be used in the nested struct. Additional `derive`s will need to be added to be compatible with the #[ink(storage)] struct (see below).

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod dao {

    use ink::{
        prelude::{
            collections::BTreeMap,
            vec::Vec,
        },
        storage::Mapping,
    };

    #[derive(
        scale::Encode,
        scale::Decode,
        Debug,
    )]
    #[cfg_attr(
        feature = "std",
        derive(scale_info::TypeInfo)
    )]
    pub struct Proposal {
        voted_yes: BTreeMap<AccountId, bool>,
    }

    #[ink(storage)]
    #[derive(Debug)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }

        #[ink(message)]
        pub fn add_proposal(&mut self) {
            self.proposals.push(Proposal {
                voted_yes: BTreeMap::new(),
            });
        }

        #[ink(message)]
        pub fn vote(&mut self, proposal_id: u32, vote: bool) {
            let proposal = self.proposals
                .get_mut(proposal_id as usize)
                .unwrap();

            proposal.voted_yes
                .insert(Self::env().caller(), vote);
        }

        #[ink(message)]
        pub fn get_proposal(&self, proposal_id: u32) -> BTreeMap<AccountId, bool> {
            self.proposals
                .get(proposal_id as usize)
                .unwrap()
                .voted_yes
                .clone()
        }
    }
}
```

### `cross-contract calling`

In ink!, to do [cross-contract calling](../basics/cross-contract-calling.md), the contract will need to be added to the project. Ensure the contract is properly exporting its Structs. See the `erc20` contract example:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

// make the structs visible
pub use self::erc20::{
    Erc20,
    // this is necessary
    Erc20Ref,
};

#[ink::contract]
pub mod erc20 {}
```

In the new cross-called contract's Cargo.toml, add (or edit) the following:

```
[lib]
name = "erc20"
path = "lib.rs"
crate-type = [
	# Used for normal contract Wasm blobs.
	"cdylib",
    # Used for ABI generation. Necessary for importing as a dependency
    "rlib",
]

[features]
ink-as-dependency = []
```

`ink-as-dependency` "tells the ink! code generator to always or never compile the smart contract as if it was used as a dependency of another ink! smart contract" ([source](../basics/cross-contract-calling.md)).

Then, In the main contract's Cargo.toml, import the contract that will be cross-called.

```rust
erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }
```

And make sure to add it to the `std` field of the .toml file.

```rust
[features]
default = ["std"]
std = [
    # ...

    "erc20/std",
]
```

Now, import the cross-called-contract to the main contract:

```rust
// example
use erc20::Erc20Ref;
```

There are two methods to setup the other contract.

1. Instantiate the cross-called-contract in the main contract's constructor.  
   See [here](../basics/cross-contract-calling.md) for a tutorial, and [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator) for an example.
2. Or, add the `AccountId` of an already deployed contract.
   Here is an example constructor to set this up:

   ```rust
   use my_other_contract::MyOtherContractRef;
   // ...
   fn new(contract_id: AccountId) -> Self {
        // for already deployed contract
        let contract_ref: MyOtherContractRef =
            ink_env::call::FromAccountId::from_account_id(contract_id);
        Self {contract_ref}
   }
   ```

Now, to perform the cross-contract call:

```rust
{
    self.contract_ref.some_external_function(a_param);
}
```

Note: as of now (ink! v3.3.1), when using cross-contract calls, emitting events will not work and compile errors will occur. See [issue #1000](https://github.com/use-ink/ink/issues/1000). Furthermore, the compiler will throw an error saying that (for example) Erc20Ref does not implement `SpreadAllocate`. This [issue #1149](https://github.com/use-ink/ink/issues/1149) explains more and has a workaround. These issues will be fixed in [issue #1134](https://github.com/use-ink/ink/issues/1134).

### `submit generic transaction / dynamic cross-contract calling`

```c++
// solidity

// invokes function found at`addr`, sends the `_amount` to the `addr`, and the `_transactionData` payload.
addr.call.value(_amount)(_transactionData)
```

```rust
// ink!

// ...

use ink_env::call::{
    build_call,
    Call,
    ExecutionInput,
    Selector,
};

/// A wrapper that allows us to encode a blob of bytes.
///
/// We use this to pass the set of untyped (bytes) parameters to the `CallBuilder`.
struct CallInput<'a>(&'a [u8]);

impl<'a> scale::Encode for CallInput<'a> {
    fn encode_to<T: Output + ?Sized>(&self, dest: &mut T) {
        dest.write(self.0);
    }
}

// ...

// see: https://github.com/use-ink/ink-examples/blob/main/multisig/lib.rs#L535
fn invoke_transaction(
    &mut self,
    callee: AccountId,
    transfer_amount: u128,
    function_selector: [u8; 4],
    transaction_data: Vec<u8>,
    gas_limit: u64) -> Result<()> {

    let result = build_call::<<Self as ::ink_lang::reflect::ContractEnv>::Env>()
        .call_type(
            Call::new()
                .callee(callee) // contract to call
                .gas_limit(*gas_limit)
                .transferred_value(transfer_amount), // value to transfer with call
        )
        .exec_input(
            ExecutionInput::new(Selector::from(*function_selector))
                    .push_arg(CallInput(transaction_data)), // SCALE-encoded parameters
        )
        .returns::<()>()
        .fire()
        .map_err(|_| Error::TransactionFailed);
    result
}

```

Note: the `function_selector` bytes can be found in the generated `target/ink/<contract-name>.json`.

## Limitations of ink! v3

- Multi-file projects are not supported with pure ink!
  - implementing traits / interfaces will not work
  - There are alternatives that do add this functionality such as OpenBrush
- Nested structs and data structures can be difficult to use
- Cross-contract calling prevents events from being emitted. See [here](https://github.com/use-ink/ink/issues/1000) for details.
- Cross-contract calling can not be tested off-chain with unit tests.
  On-chain integration tests will need to be used.

## Troubleshooting Errors

- `ERROR: Validation of the Wasm failed.`

```
ERROR: Validation of the Wasm failed.

ERROR: An unexpected panic function import was found in the contract Wasm.
This typically goes back to a known bug in the Rust compiler:
https://github.com/rust-lang/rust/issues/78744

As a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations, but unfortunately we are currently not
aware of a better workaround until the bug in the compiler is fixed.
```

**Solution**  
Add the following to the contract Cargo.toml:

```
[profile.release]
overflow-checks = false
```

- `"failed to load bitcode of module '...' "`

This happens when trying to import a contract for cross-contract calling.

**Solution**  
Ensure that the following is added to Cargo.toml contract import:`

```
features = ["ink-as-dependency"]
```

so the import would look like:

```
mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}
```

## unit testing (off-chain)

- Unit tests are an integral part of smart-contract development and ensuring your code works off-chain before testing on-chain.
- To run ink! tests, use the command `cargo test`. Add the `--nocapture` flag for debug prints to show.
- From the contract module, make sure to make the contract struct and anything else that is going to be used in the unit tests public. For example:

```rust
// top of file
#![cfg_attr(not(feature = "std"), no_std, no_main)]


pub use self::mycontract::{
    MyContract
};
```

- Off-chain unit tests will not work with cross-contract calls.
  One workaround to ensure unit tests are still passing is to provide mock data.

An easy approach is to use conditional compiling with `#[cfg(test)]` and `#[cfg(not(test))]`.

Note: This solution may not be the best option. A more effective approach can be found in our current E2E test. Please refer to [the showcased example here](https://github.com/use-ink/ink-examples/tree/main/multi-contract-caller).

For example, here is a read-only ERC20 cross-contract call:

```rust
// only compiles when *not* running tests
#[cfg(not(test))]
fn get_token_balance(&self, caller: &AccountId) -> Balance {
    // calls the external ERC-20 contract
    self.token.balance_of(*caller)
}

// only compiles when running tests
#[cfg(test)]
fn get_token_balance(&self, _: &AccountId) -> Balance {
    // arbitrary value
    1
}
```

And if the cross-contract call _writes_ to storage, a mock field can be added to the contract struct. For example:

```rust
#[ink(storage)]
pub struct MyContract {
    #[cfg(test)]
    mock_field: SomeStruct, // will serve as a fake storage
}

...

// on-chain, performs cross-contract call
#[cfg(not(test))]
fn do_some_write(&mut self) {
    self.external_contract.write_to_field(0xDEADBEEF);
}


// testing environment only
#[cfg(test)]
fn do_some_write(&mut self) {
    self.mock_field.my_fake_storage_item = 0xDEADBEEF;
}
```

- useful code to interact and modify the contract environment for testing

[ink_env docs](https://docs.rs/ink_env/4.3.0/ink_env/index.html)

```rust
// get the default accounts (alice, bob, ...)
let accounts = ink::env::test::default_accounts::<ink::env::DefaultEnvironment>();
accounts.alice //usage example

// set which account calls the contract
ink::env::test::set_caller::<ink::env::DefaultEnvironment>(accounts.bob);

// get the contract's address
let callee = ink::env::account_id::<ink::env::DefaultEnvironment>();

// set the contracts address.
// by default, this is alice's account
ink::env::test::set_callee::<ink::env::DefaultEnvironment>(callee);

// transfer native currency to the contract
ink::env::test::set_value_transferred::<ink::env::DefaultEnvironment>(2);

// increase block number (and block timestamp).
// this can be placed in a loop to advance the block many times
ink::env::test::advance_block::<ink::env::DefaultEnvironment>();

// generate arbitrary AccountId
AccountId::from([0x01; 32]);

// generate arbitrary Hash
Hash::from([0x01; 32])

// macro for tests that are expected to panic.
#[should_panic]
```
````

## File: versioned_docs/version-v6/basics/metadata/metadata.md
````markdown
---
title: Metadata
hide_title: true
slug: /basics/metadata
---

![Metadata Title Picture](/img/title/metadata-revive.svg)

# Metadata

You can think of "Metadata" this way: when a contract is built,
the product of this process is a binary (the `.polkavm` file) that 
contains just the bytecode of your contract. 

Without further information it's
not possible to know what this bytecode refers to. For example,
which functions can be called in there or what their arguments
are. This additional information that describes what the raw binary
is about is called metadata — data that describes other data.

Metadata is used to describe a contract in a language agnostic way. It is
intended to be used by third party tools (e.g. UIs, block explorers) in order to correctly
call contract functions and interpret events.

ink! supports two formats of metadata:

* [The Solidity format](./solidity-format.md)
* [Our own ink! format](./ink-format.md)

The reason why we support two formats is that Solidity is a subset of
the types that Rust allows for. E.g. Rust's `Option` or `Result` are
not supported by the Solidity type system.

So developers have a choice which metadata they want to generate for a contract.
They can decide when invoking `cargo-contract`:

```bash
$ cargo contract build ---metadata <ink|solidity>
```

Generating Solidity metadata is only possible if all constructor and message 
arguments + return types can be mapped to fitting Solidity types.
````

## File: versioned_docs/version-v6/basics/metadata/solidity-format.md
````markdown
---
title: Solidity Format
hide_title: true
slug: /basics/metadata/solidity
---

![Metadata Title Picture](/img/title/solidity.svg)

# Solidity Format

:::caution
This page has not yet been written for ink! v6.

TODO @davidsemakula
:::
````

## File: versioned_docs/version-v6/basics/contract-verification.md
````markdown
---
title: Contract Verification
slug: /basics/verification/contract-verification
hide_title: true
---

![intro image](/img/title/verification.svg)

# Contract Verification

Contract verification is the process of matching a deployed ink! contract
with the source code and metadata generated when it was built.

The verification process for Rust-based smart contract languages is more
complex than EVM-based languages such as Solidity due to the Rust
compiler not providing deterministic builds of contracts.

In order to verify an ink! smart contract, the verification
process must recompile the contract in an identical host environment to
which it was originally built. The simplest way to do this is using a Docker
container.

:::note
Contract verification tools are available from `cargo-contract` version 6.0 on.
To install it, run

```bash
$ cargo install cargo-contract --locked --version ^6
```

:::

## Verifiable build

As mentioned earlier, due to the non-deterministic nature of Rust compilation,
smart contract developers are advised to build their project inside
a Docker container we provide. Luckily, `cargo contract build`
provides the `--verifiable` flag for this purpose.

The steps for the verifiable build production are:

1. [Install Docker Engine](https://docs.docker.com/engine/install/)
2. (Linux users) Make sure you complete the [post-installation step](https://docs.docker.com/engine/install/linux-postinstall/).
   This is required for the correct operation of the command.
3. Ensure Docker Engine is up and running, and the socket is accessible.
4. Simply run `cargo contract build --verifiable`.

This will pull the image with the version that corresponds to your `cargo-contract` crate version,
perform a build, and write artifacts in the standard output directory.

If everything is correct, you can verify the image version in the metadata file.
It should contain a key-value `image` after the `contract` information:

```json
  "contract": {
    "name": "flipper",
    "version": "6.0.0",
    "authors": [
      "Use Ink <ink@use.ink>"
    ]
  },
  "image": "use-ink/contracts-verifiable:6.0.0",
```

You are now ready to deploy your contract to a production chain.

:::note
The image is `amd64` based. Therefore, the build times can be significantly slower
on Apple Silicon machines. To overcome the issue enable _Rosetta for x86/amd64 emulation_
in _Settings_ → _Features in development_ tab in Docker Desktop App.
:::

## Verifying contracts

Similar to Etherscan, you want to ensure that the given contract bundle
is indeed a copy of some well-known contract code.

`cargo contract verify` allows you to verify the given cargo project
against a reference contract bundle.

Simply run `cargo contract verify <path>` in your contract's directory.

If the reference contract was not built inside a Docker container, the command
will compare the build info from the reference contract with the current environment
to ensure a match in environment.

:::warning
If you are not using standardized verifiable builds. It is your responsibility
to ensure deterministic environment both for build and verification of
smart contracts.
:::

If the build info from the `.contract` file matches the environment and a
Docker `image` is present in metadata, `cargo contract` will build the
project inside the specified `image` Docker container.
Otherwise, a local build is carried out.

Upon completion, the built contract bundle is compared to the reference one
and the result is returned.

## Advanced usage

If you would like to carry out other operations inside a deterministic environment
you can use our Docker image. It is available on [Docker Hub](https://hub.docker.com/repository/docker/useink/contracts-verifiable/general).
The entry point is set to `cargo contract` allowing you to specify other commands to be
executed.

:::tip
If you are building a multi-contract project,
make sure you are executing the build in the parent directory in order to mount the directory
of all contracts to be visible. Specify a relative manifest path to the root contract:

```bash
$ cargo contract build 
    --verifiable
    --manifest-path ink-project-a/Cargo.toml
```
:::

You can find a Dockerfile and further documentation on image usage
in [the `cargo-contract` repository](https://github.com/use-ink/cargo-contract/tree/master/build-image)
````

## File: versioned_docs/version-v6/basics/env-functions.md
````markdown
---
title: Environment Functions
slug: /basics/environment-functions
---

![Env Function Title Picture](/img/title/env-function.svg)

# Environment Functions

ink! exposes a number of handy environment functions.
A full overview [is found here](https://docs.rs/ink_env/6.0.0/ink_env/#functions).

In an `#[ink(constructor)]`  use `Self::env()` to access those,
in an `#[ink(message)]` use `self.env()`.
So `Self::env().caller()` or `self.env().caller()`.

Some handy functions include:

* [`caller()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.caller.html): Returns the address of the caller of the executed contract.
* [`address()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.address.html): Returns the address of the executed contract.
* [`balance()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.balance.html): Returns the balance of the executed contract.
* [`block_number()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.block_number.html): Returns the current block number.
* [`emit_event(…)`](https://docs.rs/ink_env/6.0.0/ink_env/fn.emit_event.html): Emits an event with the given event data.
* [`transfer(…)`](https://docs.rs/ink_env/6.0.0/ink_env/fn.transfer.html): Transfers value from the contract to the destination account ID.
* [`hash_bytes(…)`](https://docs.rs/ink_env/6.0.0/ink_env/fn.hash_bytes.html): Conducts the crypto hash of the given input and stores the result in output.
* […and many more](https://docs.rs/ink_env/6.0.0/ink_env/#functions).
````

## File: versioned_docs/version-v6/basics/events.md
````markdown
---
title: Events
slug: /basics/events
hide_title: true
---

![Balloons 1 Title Picture](/img/title/balloons-1.svg)

# Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

![Contract execution via transaction](/img/events-revive.svg)

## Example

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
#[ink::contract]
mod erc20 {
    /// Defines an event that is emitted
    /// every time value is transferred.
    #[ink(event)]
    pub struct Transferred {
        from: Option<AccountId>,
        to: Option<AccountId>,
        value: Balance,
    }

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }

    impl Erc20 {
        #[ink(constructor)]
        pub fn new(initial_supply: Balance) -> Self {
            let caller = Self::env().caller();
            Self::env().emit_event(Transferred {
                from: None,
                to: Some(caller),
                value: initial_supply,
            });
            Self { total_supply: initial_supply }
        }

        #[ink(message)]
        pub fn total_supply(&self) -> Balance {
            self.total_supply
        }
    }
}
```

See our [`ERC20 example contract`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) 
for an elaborate example which uses events.

## Event Definition

Since ink! version 5.0, events can be defined independently of the contract which emits them. 
Events can now be defined once and shared across multiple contracts. 

This is useful for events for contracts which conform to standards such as ERC-20: 
contract indexers/explorers are now able to group all e.g. `Transferred` events.

This is how an event definition looks:

```rust
use ink::primitives::AccountId;

#[ink::event]
pub struct Transferred {
    #[ink(topic)]
    from: Option<AccountId>,
    #[ink(topic)]
    to: Option<AccountId>,
    amount: u128,
}
```
> Note that generics are [not currently supported](https://github.com/use-ink/ink/issues/2044)
> , so the concrete types of `Environment` 
> specific types such as `AccountId` must match up with the types used in the contract.

This definition can exist within a contract definition module (inline events), in a different 
module in the same crate or even in a different crate to be shared by multiple contracts.

### Legacy syntax for inline Event definitions

Events defined within a `#[ink::contract]` module can continue to use the original syntax for an 
event definition, using the `#[ink(event)]` attribute. Under the covers this is simply expanded 
to the new top level `#[ink::event]` macro, so both events defined using the legacy style and 
using the new `event` attribute macro directly will behave exactly the same.

### Topics

When an event is emitted, 0 or more topics can be associated with it. The event is then indexed 
together with other events with the same topic value.

An event's fields can be annotated with `#[ink(topic)]` (see example), which will result in a 
topic derived from the value of that field being emitted together with the event.

Topics are by default a 32 byte array (`[u8; 32]`), although this is configurable on the 
Polkadot SDK runtime level. If the SCALE encoded bytes of a field value are `<= 32`, then the 
encoded bytes are used directly as the topic value. 

For example, in the common case of indexing a field of type `AccountId`, where the default 
`AccountId` type is 32 bytes in length, the topic value will be the encoded account id itself. This 
makes it easy to filter for all events which have a topic of a specific `AccountId`.

If however the size of the encoded bytes of the value of a field exceeds 32, then the encoded 
bytes will be hashed using the `Blake2x256` hasher.

> Topics are a native concept in the Polkadot SDK, and can be queried via [`EventTopics`](https://docs.rs/frame-system/latest/frame_system/pallet/storage_types/struct.EventTopics.html)

How to choose which fields to make topics? A good rule of thumb is to ask yourself if somebody 
might want to search for this topic. For this reason the `amount` in the example `Transferred` event
above was not made indexable ‒ there will most probably be a lot of different events with differing
amounts each.

#### Signature Topic

By default all events have a signature topic. This allows indexing of all events of the same 
type, emitted by different contracts. The `#[ink::event]` macro generates a signature topic at 
compile time by hashing the name of the event concatenated with the *names of the types* of the all 
the field 
names:
```
blake2b("Event(field1_type,field2_type)")`
```
So for our `Transferred` example it will be: 
```
blake2b("Transferred(Option<AccountId>,Option<AccountId>,u128)")`
```

:::caution
Important caveat: because the *name* of the field type is used, refactoring an event 
definition to use a type alias or a fully qualified type will change the signature topic, even
though the underlying type is the same. Two otherwise identical definitions of an event with the 
same name and same field types but different field type names will have different signature 
topics.
:::

When decoding events emitted from a contract, signature topics are now required to determine which 
type of event to decode into. 

#### Anonymous Events

Events annotated with `anonymous` will not have a signature topic generated and published with the
event.

For inline events, this can be done by marking the event with the `anonymous` attribute e.g.

```rust
#[ink(event, anonymous)]
pub struct Event { .. }
```
or
```rust
#[ink(event)]
#[ink(anonymous)]
pub struct Event { .. }
```

For events defined using the `#[ink::event]` macro, the `anonymous` flag needs to be added as an 
argument:

```rust
#[ink::event(anonymous)]
pub struct Event { .. }
```

Without a signature topic, indexers will not be able to index over the type of the event, which 
may be desirable for some contracts, and would be a small gas cost optimization if necessary.

However, when interacting with the contract from a client, no signature topic means that another 
way is required to determine the type of the event to be decoded into (i.e. how do we know it is 
a `Transferred` event, not an `Approval` event. One way would be to try decoding for each type 
of event defined in the metadata of the contract until one succeeds. If calling a specific 
`message`, it may be known up front what type of event that message will raise, so the client 
code could just decode into that event directly.

## Emitting Events in a Constructor

In a constructor events are emitted via `Self::env().emit_event()`.
See this example:

```rust
#[ink(constructor)]
pub fn new(initial_value: Balance) -> Self {
    let caller = Self::env().caller();
    let mut balances = HashMap::new();
    balances.insert(caller, initial_supply);

    Self::env().emit_event(Transferred {
        from: None,
        to: Some(caller),
        amount: initial_supply
    });

    Self { total_supply: initial_supply, balances }
}
```

## Emitting Events from Messages

In a message events are emitted via `self.env().emit_event()`:

```rust
#[ink(message)]
pub fn transfer(&mut self, to: AccountId, amount: Balance) -> Result {
    let from = self.env().caller();
    // implementation hidden
    self.env().emit_event(Transferred {
        from: Some(from),
        to: Some(to),
        amount
    });
    Ok(())
}
```

## Cost of using Events

When using events and topics, developers should be mindful of the costs associated. 

Firstly: if optimizing for contract size, using events will increase the size of the final code size. So 
minimizing or eliminating event usage where necessary will reduce contract size. The same can be 
said for the execution (aka gas) costs when using events. We recommend considering the cost of 
events when using them, and measuring the code size and gas costs with different usage patterns 
when optimizing.
````

## File: versioned_docs/version-v6/basics/trait-definitions.md
````markdown
---
title: Trait Definitions
slug: /basics/trait-definitions
hide_title: true
---

![Text/trait Title Picture](/img/title/text/trait.svg)

Through the `#[ink::trait_definition]` proc. macro it is now possible to define your very own trait definitions that are then implementable by ink! smart contracts.

This allows to define shared smart contract interfaces to different concrete implementations.
Note that this ink! trait definition can be defined anywhere, even in another crate!

See our [`ERC20-Trait example contract`](https://github.com/use-ink/ink-examples/blob/main/trait-erc20/lib.rs) 
for an elaborate example which uses trait definitions.

### Example

Defined in the `base_erc20.rs` module.

```rust
#[ink::trait_definition]
pub trait BaseErc20 {
    /// Returns the total supply.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    /// Transfers `amount` from caller to `to`.
    #[ink(message, payable)]
    fn transfer(&mut self, to: AccountId, amount: Balance);
}
```

An ink! smart contract definition can then implement this trait definition as follows:

```rust
#[ink::contract]
mod erc20 {
    use base_erc20::BaseErc20;

    #[ink(storage)]
    pub struct Erc20 {
        total_supply: Balance,
        // more fields ...
    }
    
    impl Erc20 {
        /// Creates a new ERC-20 contract and initializes it with the initial supply for the instantiator.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            // implementation ...
        }
    }

    impl BaseErc20 for Erc20 {
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            // implementation ...
        }

        #[ink(message, payable)]
        fn transfer(&mut self, to: AccountId, amount: Balance) {
            // implementation ...
        }
    }
}
```

Calling the above `Erc20` explicitly through its trait implementation can be done just as if it was normal Rust code:

```rust
// --- Instantiating the ERC-20 contract:
//
let mut erc20 = <Erc20 as BaseErc20>::new(1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
let mut erc20 = Erc20::new(1000);

// --- Retrieving the total supply:
//
assert_eq!(<Erc20 as BaseErc20>::total_supply(&erc20), 1000);
// --- Is just the same as:
use base_erc20::BaseErc20;
assert_eq!(erc20.total_supply(), 1000);
```

There are still many limitations to ink! trait definitions and trait implementations.
For example, it is not possible to define associated constants or types or have default implemented methods.
These limitations exist because of technical intricacies, however, please expect that many of those will be tackled in future ink! releases.




Marks trait definitions to ink! as special ink! trait definitions.

There are some restrictions that apply to ink! trait definitions that
this macro checks. Also ink! trait definitions are required to have specialized
structure so that the main [`#[ink::contract]`](https://docs.rs/ink/6.0.0/ink/attr.contract.html) macro can
properly generate code for its implementations.

# Example: Definition

```rust
type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;

#[ink::trait_definition]
pub trait Erc20 {
    /// Returns the total supply of the ERC-20 smart contract.
    #[ink(message)]
    fn total_supply(&self) -> Balance;

    // etc.
}
```

# Example: Implementation

Given the above trait definition you can implement it as shown below:

```rust
#[ink::contract]
mod base_erc20 {
    /// We somehow cannot put the trait in the doc-test crate root due to bugs.
    #[ink_lang::trait_definition]
    pub trait Erc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance;
    }

    #[ink(storage)]
    pub struct BaseErc20 {
        total_supply: Balance,
        // etc ..
    }

    impl BaseErc20 {
        /// Constructs a new ERC-20 compliant smart contract using the initial supply.
        #[ink(constructor)]
        fn new(initial_supply: Balance) -> Self {
            Self { total_supply: initial_supply }
        }
    }

    impl Erc20 for BaseErc20 {
        /// Returns the total supply of the ERC-20 smart contract.
        #[ink(message)]
        fn total_supply(&self) -> Balance {
            self.total_supply
        }

        // etc ..
    }
}
```
````

## File: versioned_docs/version-v6/basics/xcm.md
````markdown
---
title: XCM
slug: /basics/xcm
hide_title: true
---

![Xcm Title Picture](/img/title/xcm.svg)

# Cross-Consensus Messaging (XCM)

:::caution
This page has not yet been updated to ink! v6.

TODO 
:::

XCM allows for cross-chain communications, enabling ink! smart contract to interact with other chains.
You can learn more about XCM in the [Polkadot Wiki](https://wiki.polkadot.network/docs/learn/xcm).

As of ink! v5.1.0, two new functions, [`xcm_execute`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_execute.html) and [`xcm_send`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_send.html), have been introduced.
These functions enable sending and executing XCM from within ink! contracts.

:::info
In versions of ink! prior to v5.1.0, the [call_runtime](https://docs.rs/ink/5.1.0/ink/struct.EnvAccess.html#method.call_runtime) host function or a custom chain extension can be used to send or execute an XCM from ink! contracts.
:::

## `xcm_execute`

The [`xcm_execute`](https://docs.rs/ink/latest/ink/struct.EnvAccess.html#method.xcm_execute) function executes the XCM locally. It first checks the message to ensure that no barriers or filters will block the execution, and then executes it locally, using the contract's account as the origin.

The following code snippet demonstrates how to use `xcm_execute` to perform a [reserve-backed transfer](https://wiki.polkadot.network/docs/learn/xcm/journey/transfers-reserve#1-initiatereservewithdraw):

```rust
#[ink(message)]
pub fn reserve_transfer(&mut self, value: Balance) -> Result<(), RuntimeError> {
    // The beneficiary of the transfer.
    // Here, the beneficiary is the caller's account on the relay chain.
    let beneficiary: Location = AccountId32 {
        network: None,
        id: *self.env().caller().as_ref(),
    }.into();

    // Create an XCM message.
    let message: Xcm<()> = Xcm::builder_unsafe()

     // Withdraw the relay's native token derivative from the contract's account.
     .withdraw_asset((Parent, amount))

    // The initiate_reserve_withdraw instruction takes the derivative token from the holding register and burns it.
    // It then sends the nested XCM to the reserve in this example, the relay chain.
    // Upon receiving the XCM, the reserve will withdraw the asset from our chain's sovereign account, and deposit on the caller's account.
    .initiate_reserve_withdraw(
        All,
        Parent,
        Xcm::builder_unsafe()
            .buy_execution((Here, fee), Unlimited)
            .deposit_asset(All, beneficiary)
            .build(),
    )
    .build();

    self.env().xcm_execute(&VersionedXcm::V4(message))?;
    Ok(())
}
```

## `xcm_send`

The [`xcm_send`](https://docs.rs/ink_env/5.1.0/ink_env/fn.xcm_send.html) function enables sending XCM to be executed by another chain.
Messages sent originate from the contract's account. Consequently, the receiving chain will process the message using the contract's sovereign account as the origin.

The following example demonstrates how to use `xcm_send`. In this example, we send an XCM to the relay chain.
This XCM will execute using the contract's sovereign account as the origin of the call.
It will then transfer, some `value` from this account to the caller's account.

```rust
#[ink(message)]
pub fn send_funds(&mut self, value: Balance, fee: Balance) -> Result<(), RuntimeError> {
    // The destination of the XCM message. Assuming we run the contract on a parachain, the parent will be the relay chain.
    let destination: Location = Parent.into();

    // the asset to be sent, since we are sending the XCM to the relay chain,
    // this represents `value` amount of the relay chain's native asset.
    let assets: Asset = (Here, value).into();

    // The beneficiary of the asset.
    // Here, the beneficiary is the caller's account on the relay chain.
    let beneficiary: Location = AccountId32 {
        network: None,
        id: *self.env().caller().as_ref(),
    }.into();

    // Create an XCM message
    let message: Xcm<()> = Xcm::builder()

        // Withdraw the asset from the origin (the sovereign account of the contract on the relay chain)
        .withdraw_asset(assets.clone().into())

        // Buy execution to pay the fee on the relay chain
        .buy_execution((Here, fee).into(), WeightLimit::Unlimited)

        // Deposit the asset to the caller's account on the relay chain
        .deposit_asset(assets.into(), beneficiary)
        .build();

    // Send the constructed XCM message to the relay chain, using the xcm_send host function.
    self.env().xcm_send(
        &VersionedLocation::V4(destination),
        &VersionedXcm::V4(message),
    )?;

    Ok(())
}
```
````

## File: versioned_docs/version-v6/datastructures/custom.md
````markdown
---
title: Custom Data Structures
slug: /datastructures/custom-datastructure
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Custom Data Structures

The `ink_storage` crate provides useful utilities and data structures to organize and
manipulate the contract's storage. However, contract authors should know that they can
also create their own custom data structures.

## Using custom types on storage
Any custom type wanting to be compatible with ink! storage must implement the
[`Storable`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/trait.Storable.html)
trait, so it can be SCALE
[`encoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Encode.html)
and
[`decoded`](https://docs.rs/parity-scale-codec/3.2.2/parity_scale_codec/trait.Decode.html).
Additionally, the traits
[`StorageLayout`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/trait.StorageLayout.html)
and [`TypeInfo`](https://docs.rs/scale-info/2.3.1/scale_info/trait.TypeInfo.html)
are required as well. But don't worry, usually these traits can just be derived:

```rust
/// A custom type that we can use in our contract storage
#[ink::scale_derive(Encode, Decode, TypeInfo)]
#[cfg_attr(
    feature = "std",
    derive(ink::storage::traits::StorageLayout)
)]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Even better: there is a macro
[`#[ink::storage_item]`](https://docs.rs/ink_macro/6.0.0/ink_macro/attr.storage_item.html),
which derives all necessary traits for you. If there is no need to implement any special
behavior, the above code example can be simplified further as follows:

```rust
/// A custom type that we can use in our contract storage
#[ink::storage_item]
pub struct Inner {
    value: bool,
}

#[ink(storage)]
pub struct ContractStorage {
    inner: Inner,
}
```

Naturally, you can as well implement any required trait manually. Please directly refer to
the relevant trait documentations for more information.

:::note

The `#[ink::storage_item]` macro is responsible for storage key calculation of 
non-[`Packed`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/trait.Packed.html) 
types. Without it, the key for non-`Packed` fields will be zero. Using this macro is 
necessary if you don't plan to use a
[`ManualKey`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/struct.ManualKey.html) 
on a non-`Packed` type.

Types with custom implementations of the ink! storage traits can still use this macro only 
for key calculation by disabling the derives: `#[ink::storage_item(derive = false)]`.

:::

## Generic storage fields

It is possible to use generic data types in your storage, as long as any generic type
satisfies the required storage trait bounds. In fact, we already witnessed this in the
previous sections about the
[`Mapping`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.Mapping.html).

Let's say you want a mapping where accessing a non-existent key should just return
it's default value, akin to how mappings work in Solidity. Additionally, you want to know
how many values there are in the mapping (its length). This could be implemented as a
thin wrapper around the ink! `Mapping` as follows:

```rust
/// Values for this map need to implement the `Default` trait.
/// Naturally, they also must be compatible with contract storage.
/// Note that the underlying `Mapping` type only supports `Packed` values.
#[ink::storage_item]
pub struct DefaultMap<K, V: Packed + Default> {
    values: Mapping<K, V>,
    length: u32,
}

impl<K: Encode, V: Packed + Default> DefaultMap<K, V> {
    /// Accessing non-existent keys will return the default value.
    pub fn get(&self, key: &K) -> V {
        self.values.get(key).unwrap_or_default()
    }

    /// Inserting into the map increases its length by one.
    pub fn set<I, U>(&mut self, key: I, value: &U)
    where
        I: scale::EncodeLike<K>,
        E: scale::EncodeLike<V> + Storable,
    {
        if self.values.insert(key, value).is_none() {
            self.length += 1
        }
    }

    /// Removing a value from the map decreases its length by one.
    pub fn remove(&mut self, key: &K) {
        if self.values.take(key).is_some() {
            self.length -= 1
        }
    }

    /// Return how many values the mapping contains
    pub fn len(&self) -> u32 {
        self.length
    }
}

/// `DefaultMap` is compatible with contract storage.
#[ink(storage)]
pub struct MyContract {
    my_map: DefaultMap<BlockNumber, Balance>,
}
```

:::caution

Generic data types may substantially increase your contracts overall code size, making it
more costly to store on-chain.

The reason for this is [Rust's monomorphization](https://rustwasm.github.io/twiggy/concepts/generic-functions-and-monomorphization.html).

:::
````

## File: versioned_docs/version-v6/datastructures/overview.md
````markdown
---
title: Overview
slug: /datastructures/overview
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Overview

The `ink_storage` crate acts as the standard storage library for ink! smart contracts.
At the moment it provides two primitives for interacting with storage,
[`Mapping`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.Mapping.html)
and [`Lazy`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.Lazy.html).

`Mapping` is a mapping of key-value pairs directly to the contract storage. It is very
similar to traditional hash tables and comparable to the `mapping` type Solidity offers.
As a core ingredient to the ink! language, its main advantage is being simple and
lightweight: It favors being efficient in terms of gas costs and code size
over providing a lot of high-level functionality found in other implementations
like the `ink::prelude::collections::HashMap` type.
Overall, the ink! `Mapping` will be a solid choice for most contracts. Moreover, smart
contracts developers can implement advanced features themselves.

`Lazy` is a wrapper type that can be used over any other storage compatible type.
This allows smart contract developers fine-grained manual control over the layout of
the contract storage by assigning a separate storage cell for the field. For example,
it can be used to prevent the contract from eagerly loading large storage fields
during each contract call.
Conceivably, it may be desirable to change certain aspects on how your contract deals with
its storage variables. You can find out more about this in the section about the ink!
[Storage Layout](./storage-layout.md).
````

## File: versioned_docs/version-v6/datastructures/storagevec.md
````markdown
---
title: Working with StorageVec
slug: /datastructures/storagevec
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Working with `StorageVec`

In this section we demonstrate how to work with ink!'s
[`StorageVec`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.StorageVec.html).

## Example: Using a `StorageVec`

Here is an example of an append-only on-chain log:

```rust
#[ink(storage)]
pub struct MyContract {
    on_chain_log: ink::storage::StorageVec<String>,
}
```

The following example contract utilizes a `StorageVec` to log each operation on chain (similar to emitting events but the contract can access them).

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    use ink::prelude::{format, string::String};
    use ink::storage::StorageVec;

    #[ink(storage)]
    pub struct MyContract {
        on_chain_log: StorageVec<String>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                on_chain_log: Default::default(),
            }
        }

        /// Donate money to the contract.
        #[ink(message, payable)]
        pub fn donate(&mut self) {
            let caller = self.env().caller();
            let endowment = self.env().transferred_value();

            let log_message = format!("{caller:?} donated {endowment}");

            self.on_chain_log.push(&log_message);
        }

        /// How many donations had the contract so far?
        #[ink(message)]
        pub fn log_length(&self) -> u32 {
            self.on_chain_log.len()
        }

        /// What was the last donation to the contract?
        #[ink(message)]
        pub fn last_donation(&self) -> Option<String> {
            self.on_chain_log.peek()
        }
    }
}

```

## Difference between `StorageVec` and Rusts `Vec` type

Any Rust `Vec<T>` will exhibit `Packed` storage layout; where
`StorageVec` stores each value under it's own storage key.

Hence, any read or write from or to a `Vec` on storage will load
or store _all_ of its elements.

This can be undesirable:
The cost of reading or writing a _single_ element grows linearly
corresponding to the number of elements in the vector (its length).
Additionally, the maximum capacity of the _whole_ vector is limited by
the size of [ink!'s static buffer](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
used during ABI encoding and decoding (default 16 KiB).

`StorageVec` on the other hand allows to access each element individually.
Thus, it can theoretically grow to infinite size.
However, we currently limit the length at 2 ^ 32 elements. In practice,
even if the vector elements are single bytes, it'll allow to store
more than 4 GB data in blockchain storage.

### Caveats

Iterators are not provided. `StorageVec` is expected to be used to
store a lot elements, where iterating through the elements would be
rather inefficient. Manually iterating over the elements using a loop
is possible but considered an anti-pattern for most cases.

For the same reason, operations which would require re-ordering
stored elements are not supported. Examples include inserting and
deleting elements at arbitrary positions or sorting elements.

The decision whether to use `Vec<T>` or `StorageVec` can be seen as an
optimization problem with several factors:
* How large you expect the vector to grow
* The size of individual elements being stored
* How frequently reads, writes and iterations happen

For example, if a vector is expected to stay small but is frequently
iterated over. Choosing a `Vec<T>` instead of `StorageVec` will be
preferred as individual storage reads are much more expensive as
opposed to retrieving and decoding the whole collection with a single
storage read.

### Storage Layout

At given `StorageKey` `K`, the length of the `StorageVec` is hold.
Each element `E` is then stored under a combination of the `StorageVec`
key `K` and the elements index.

Given `StorageVec` under key `K`, the storage key `E` of the `N`th
element is calculated as follows:

`E = scale::Encode((K, N))`

## Considerations when using the `StorageVec` type

`StorageVec` is a `Lazy` type similar to `Mapping`.

Hence, the same considerations apply to `StorageVec` too:
- [Storage loading behavior](../datastructures/mapping.md#storage-loading-behavior)
- [Use fallible storage methods for dynamically sized values](../datastructures/mapping.md#use-fallible-storage-methods-for-dynamically-sized-values)
- [Updating values](../datastructures/mapping.md#updating-values)

## Rust Docs

See here for the Rust documentation of this data structure:
[`StorageVec`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.StorageVec.html).
````

## File: versioned_docs/version-v6/debugging/replays.md
````markdown
---
title: Replays
slug: /contract-debugging/transaction-extrinsic-replays
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

:::caution
This section has not yet been updated to ink! v6.

TODO Verify if this still works.
:::


# Replays
On this page we'll examine possibilities of replaying on-chain action.

## Replay and Debug a Block

To replay a transaction, you can use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to create a local fork of the chain and replay the block with trace-level logging.

Assuming you have a node that you can connect to at `$ENDPOINT` and the transaction you want to replay is in block `$BLOCK_HASH`, you can use the following command:

```bash
$ npx @acala-network/chopsticks@latest run-block \
    --endpoint $ENDPOINT \
    --block $BLOCK_HASH \
    --runtime-log-level 5 \
    | grep runtime::contracts
```

This command replays the block with trace-level logging enabled. By filtering the output with `runtime::contracts`, you can view all the contract calls in the block:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [246, 118, 44, 201]
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 1, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
```

From here, you can identify the call you are interested in and decode the data payload:

```bash
$ echo 254, 91, 216, 234, 1, 0, 0, 0 \
    | tr ',' ' ' \
    | xargs printf '%02x' \
    | xargs cargo contract decode message -d
```

This command will output the following:

```
Decoded data: inc_by { n: 1 }
```

## Fork Node and Replay Transactions

:::caution
This section has not yet been updated to ink! v6.

TODO Verify if this still works.
:::

You can also use [Chopstick](https://github.com/AcalaNetwork/chopsticks) to start a local fork of your chain.

This command starts a fork beginning at block `$BLOCK_HASH`. You can connect to this fork using `ws://localhost:8000` to submit extrinsics via PolkadotJs or `cargo contract`:

```bash
$ npx @acala-network/chopsticks@latest \
    --endpoint $ENDPOINT \
    --block $BLOCK_HASH \
    --runtime-log-level 5
```

Here, for example, you can re-run the transaction that we decoded in the previous section:

```bash
$ cargo contract call \
    --contract $CONTRACT_ADDR \
    --message inc_by --args 1 \
    --suri //Alice \
    --url ws://localhost:8000
```

Since trace-level logging is used, you will receive detailed information about all the host functions called during the execution of the contract:

```
runtime::contracts           TRACE: call ExportedFunction::Call account: , input_data: [254, 91, 216, 234, 2, 0, 0, 0]
runtime::contracts           TRACE: call result ExecReturnValue { flags: (empty), data: [0] }
runtime::contracts           DEBUG: Execution finished with debug buffer: seal0::value_transferred(out_ptr: 65488, out_len_ptr: 65516) = Ok(())
seal0::input(out_ptr: 65536, out_len_ptr: 65524) = Ok(())
seal1::get_storage(key_ptr: 65536, key_len: 4, out_ptr: 65540, out_len_ptr: 65524) = Ok(Success)
seal2::set_storage(key_ptr: 65536, key_len: 4, value_ptr: 65540, value_len: 4) = Ok(4)
seal0::seal_return(flags: 0, data_ptr: 65536, data_len: 1) = Err(TrapReason::Return(ReturnData { flags: 0, data: [0] }))
```
````

## File: versioned_docs/version-v6/faq/migrating-from-ink-3-to-4.md
````markdown
---
title: "Migration: ink! v3 → v4"
slug: /faq/migrating-from-ink-3-to-4
---

![Migration 3.x To 4.0 Title Picture](/img/title/migration-3.x-to-4.0.svg)

We've made a couple of breaking changes from ink! 3.x to ink! 4.0.
On this page we outline how you can migrate existing clients and
contracts from 3.x to 4.0.

:::caution
This migration guide is only for your code base!

If you have an existing contract on-chain you cannot just
upgrade the code on-chain ‒ you also have to migrate your data,
since the way ink! 4.0 stores data and reads it (i.e. the storage
layout) changes from ink! 3.x to 4.0.
:::

## Compatibility

ink! 4.0 is compatible with:

- Stable Rust >= 1.63.0
- `scale` >=3
- `scale-info` >= 2.3
- `pallet-contracts` >= `polkadot-v0.9.37`
- `substrate-contracts-node` >= `v0.24.0`
- `polkadot-js/api` and `polkadot-js/api-contract` >= 9.10.2

## `cargo-contract` 2.0

Together with ink! 4.0 we've released `cargo-contract` 2.0.
You have to use this latest version of `cargo-contract` for ink! 4.0
contracts.
You can upgrade via:

```rust
cargo install cargo-contract --force --version 2
```

Make sure that e.g. your CI also uses `cargo-contract` 2 with ink! 4.
If you have wrapper scripts around `cargo-contract` you should
ensure that this version is enforced, otherwise users will get an error.

:::note
`cargo-contract` no longer requires `binaryen` or `wasm-opt` as an
external dependency. We required those because of `wasm-opt` tool
(which is part of `binaryen`). Fortunately we were able to find a way of
installing `wasm-opt` now as part of the `cargo-contract` installation
process.
:::

## Rust `stable` instead of `nightly`

ink! 4.0 and `cargo-contract` use `stable` Rust now.
This means no more `cargo +nightly contract` is required, you
can just use a stable Rust toolchain now (>= Rust 1.63).

## New entrance `ink` crate

The `ink_lang` crate has been replaced in [#1223](https://github.com/use-ink/ink/pull/1223)
by a new top level `ink` crate. All existing sub-crates are reexported and should be used via
the new `ink` crate, so e.g. `ink::env` instead of `ink_env`. Contract authors should now import
the top level `ink` crate instead of the individual crates.

### Migration

- In `Cargo.toml` Replace all individual `ink_*` crate dependencies with the `ink` crate.
- In the contract source:
  - Remove the commonly used `use ink_lang as ink` idiom.
  - Replace all usages of individual crates with reexports, e.g. `ink_env` ➜ `ink::env`.

## Storage API + Layout

With [#1331](https://github.com/use-ink/ink/pull/1331) the way `ink!` reads and writes
to a contract's storage changed. Storage keys are generated at compile-time, and user facing
abstractions which determine how contract data is laid out in storage are different now.

### Migration

- Initialize `Mapping` fields with `Mapping::default()` instead of `ink_lang::utils::initialize_contract` in
  constructors. See [`erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) and other examples which use a `Mapping`.
- `SpreadAllocate`, `SpreadLayout`, `PackedLayout`, `PackedAllocate` have been removed.

## Removal of `wee-alloc` support

ink! uses a bump allocator by default, additionally we supported another allocator
(`wee-alloc`) through a feature flag. `wee-alloc` is no longer maintained and
we removed support for it in [#1403](https://github.com/use-ink/ink/pull/1403).

## Removal of `eth_compatibility` crate

As part of [#1233](https://github.com/use-ink/ink/pull/1233)
the `eth_compatibility` crate was removed. The `ecdsa_to_eth_address()`
function from it can now be found [in the `ink_env` crate](https://docs.rs/ink_env/4.0.0/ink_env/fn.ecdsa_to_eth_address.html).

```rust
ink_env::ecdsa_to_eth_address(&pub_key, &mut output);
```

## `ink_storage::Mapping`

The function signature of `Mapping::insert(key, val)` changed to
`Mapping::insert(key, val) -> Option<u32>`.
The return value is the size of the pre-existing value at the specified key if any (in bytes).

Two new useful functions were added:

- [`Mapping::contains(key)`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.contains)
  in [#1224](https://github.com/use-ink/ink/pull/1224).
- [`Mapping::take()`](https://docs.rs/ink_storage/4.0.0/ink_storage/struct.Mapping.html#method.take)
  to get a value while removing it from storage in [#1461](https://github.com/use-ink/ink/pull/1461).

In case you were working around those two functions you can now
use them directly; they are more gas-efficient than e.g. executing
a `get(key).is_none()` instead of `contains(key)`.

## Storage functions in `ink_env`

As part of [#1224](https://github.com/use-ink/ink/pull/1224) the return type
of [`ink_env::set_contract_storage()`](https://docs.rs/ink_env/4.0.0/ink_env/fn.set_contract_storage.html)
was changed to return an `Option<u32>` instead of `()`.

A new function [`ink_env::take_contract_storage`](https://docs.rs/ink_env/4.0.0/ink_env/fn.take_contract_storage.html)
was introduced.

## Removal of `ink_env::random` function

We had to remove the [`ink_env::random`](https://docs.rs/ink_env/3.3.1/ink_env/fn.random.html)
function (in [#1442](https://github.com/use-ink/ink/pull/1442)).
This function allowed contract developers getting random entropy.
There is unfortunately no way how this can be done safely enough
with built-in Substrate primitives on-chain currently. We're
following the recommendation of our auditors to remove it.

The alternative right now is to provide random entropy off-chain to
the contract, to use a random entropy oracle, or to have a chain-extension
that does this, in case the chain has a possibility to do so.

We hope to bring this function back in a future release of ink!, the
best hope right now is that it could come back with
[Sassafras](https://wiki.polkadot.network/docs/learn-consensus#badass-babe-sassafras),
a block production protocol for future versions of Polkadot.

If you're interested in more information on this check out
[the Substrate PR](https://github.com/paritytech/substrate/pull/13204) which
deprecated the random interface of `pallet-contracts`.

## Constructors can now return `Result<Self, MyContractError>`

With [#1446](https://github.com/use-ink/ink/pull/1446) we introduced
the possibility for constructors to return either `Self` (as usual) or
`Result<Self, MyContractError>`.

This enables contract developers to bubble up encoded error objects to
clients/frontends about a failure. In ink! 3.x it was only possible to
panic in the constructor in case an error occurred, resulting in loss
of this information.

## Chain extension's `returns_result` removed

The `returns_result` flag has been removed from the `#[ink(extension = …)]` attribute in
[#1569](https://github.com/use-ink/ink/pull/1569).
We now infer this information at compile time. If `handle_status` is set to `true`,
the return type will still be wrapped into `Result` as before.

## Contract Metadata (ABI)

The most detailed way to grasp what changed is to look at
[this PR](https://github.com/use-ink/ink-docs/pull/138), which
updated the metadata page in our documentation.

### Add support for language level errors (`LangError`)

Under the hood, ink! now generates code that results in each message
and constructor returning a `Result<Message::Output, LangError>` (or
for constructors `Result<Constructor::Output, LangError>`).
This happens even if the message/constructor doesn't have a return type,
we default to the unit type `()` in that case.

A [`LangError`](https://docs.rs/ink/4.0.0/ink/enum.LangError.html)
is a type of error which doesn't originate from the contract itself,
nor from the underlying execution environment (so the Contracts pallet
in this case).

An example of where this would arise is if a caller tries to use a non-existent message
selector for a contract. Previously, the contract would trap and not allow the caller to
do any sort of error handling if it encountered a non-existent selector.

This change doesn't affect how you write a contract! It affects clients and
frontends though, since it breaks the API in two ways:

first, all contract messages now have a `Result` return type, and second a new field,
`lang_error`, will be introduced as part of the contract spec. The second change allows
other languages (such as Solang) to use an equivalent `LangError`.

<details>
  <summary>
    Click here for a snippet of the new metadata for the Flipper contract.
  </summary>
<p>

```json
"messages": [
  {
    "args": [],
    "docs": [
      " Flips the current value of the Flipper's boolean."
    ],
    "label": "flip",
    "mutates": true,
    "payable": false,
    "returnType": {
      "displayName": [
        "ink",
        "MessageResult"
      ],
      "type": 1
    },
    "selector": "0x633aa551"
  }],
"lang_error": {
  "displayName": [
    "ink",
    "LangError"
  ],
  "type": 3
},
{
  "id": 3,
  "type": {
    "def": {
      "variant": {
        "variants": [
          {
            "index": 1,
            "name": "CouldNotReadInput"
          }
        ]
      }
    },
    "path": [
      "ink_primitives",
      "LangError"
    ]
  }
}

```

</p>
</details>

### Version field

As part of [#1313](https://github.com/use-ink/ink/pull/1313) the ink! ABI was
changed to have a proper version field as part of the ink! metadata object.
This enables querying the ABI version in a less-ambiguous way.

Before:

```json
"source": {...},
"contract": {...},
"V3": {
  "spec": {...},
  "storage": {...},
  "types": {...}
}

```

After:

```json
{
  "source": {...},
  "contract": {...},
  "spec": {...},
  "storage": {...},
  "types": [...],
  "version": "4"
}
```

### The Storage Layout (`storage`)

The storage layout under the `storage` key changed for v4. If you have an application
that is using it consider reading the updated documentation:

- [General storage documentation](../../../versioned_docs/version-v4/datastructures/overview.md)
- [Storage metadata format](../../../versioned_docs/version-v4/datastructures/storage-in-metadata.md)

## Removal of `AccountId` `Default` implementation

In [#1255](https://github.com/use-ink/ink/pull/1255) we removed the `Default` trait
implementation on `AccountId`s.

The `Default` implementation of `AccountId` returned the zero-address, which is
problematic since the
[zero-address in the `sr25519` and `ed25519` curves has a known private key](https://substrate.stackexchange.com/questions/982/why-does-the-all-0-public-key-have-a-known-private-key-in-sr25519-and-ed25519).

Developers commonly reach for defaults, and the zero-address in particular, making it an
unsafe trait implementation to have given the consequences.

Imagine a developer sending tokens to the zero-address to be burned, only to find that
they've been stolen because the private key is known.

If you were previously using `AccountId`'s `Default` implementation in your code you
have a couple of different options for how to move forward. These will depend on what
exactly you were using the zero-address for.

If you were using it as a burn address:

- You can pick another address to use, assuming that you've actually picked a random
  address
- Consider a solution that involves reducing total issuance, instead of transferring
  tokens to a random address

If you were using it as a privileged account:

- Change the account
- Add checks to ensure that calls coming from the zero-address are rejected

You should also now consider dealing with `AccountId`'s as `Option<AccountId>`'s. This is
more idiomatic Rust, and also conveys the meaning of a "null" or "empty" address much
better.

## Updates to the `CallBuilder` and `CreateBuilder` APIs

There's been several changes to the
[`CallBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html)
and
[`CreateBuilder`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html)
APIs.

In [#1604](https://github.com/use-ink/ink/pull/1604) we renamed the
`CallBuilder::fire()` method to
[`CallBuilder::invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.invoke-2).
This brings more consistency across our APIs which were already using the `invoke`
terminology.

In [#1512](https://github.com/use-ink/ink/pull/1512) and [#1525](https://github.com/use-ink/ink/pull/1525)
we added support for handing
`LangError`s from the `CreateBuilder` and `CallBuilder`, respectively.

If you want to handle errors from either `Builder` you can use the new
[`CreateBuilder::try_instantiate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate)
or
[`CallBuilder::try_invoke()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-1)
methods.

Because of the addition of those methods we also removed any error handling from the
non-`try_` methods in [#1602](https://github.com/use-ink/ink/pull/1602). This means
that the `CallBuilder::invoke()` and `CreateBuilder::instantiate()` methods return values
directly, and panic when they encounter an error.

Lastly, in [#1636](https://github.com/use-ink/ink/pull/1636) we added two methods to
the `CallBuilder` to streamline
[`Call`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.Call.html)
and
[`DelegateCall`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.DelegateCall.html)
workflows:

- For `Call` you can use
  [`CallBuilder::call()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.call) (this replaces `CallBuilder::callee()`)
- For `DelegateCall` you can use [`CallBuilder::delegate()`](https://docs.rs/ink_env/4.0.0/ink_env/call/struct.CallBuilder.html#method.delegate)

## Removal of `[lib.crate-type]` and `[lib.name]` from contract manifest

Earlier versions of `cargo-contract` required that these two fields were specified in the
contract manifest explicitly, as follows:

```toml
[lib]
name = "flipper"
path = "lib.rs"
crate-type = [
    # Used for normal contract Wasm blobs.
    "cdylib",
    # Use to generate ABI
    "rlib",
]
```

However, with [cargo-contract#929](https://github.com/use-ink/cargo-contract/pull/929) we changed this behavior to:

- Use the contract name by default, removing the need for the `name` field
- Compile contracts as `rlib`s by default, and automatically changing to `cdylib` as
  needed

This means that your new manifest should look like:

```toml
[lib]
path = "lib.rs"
```
````

## File: versioned_docs/version-v6/getting-started/calling.md
````markdown
---
title: Call your contract
slug: /getting-started/calling-your-contract
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Call Your Contract

Now that your contract has been fully deployed, we can start interacting with it! Flipper only has
two functions: `flip()` and `get()`. We will show you what it's like to play with both of them.

## RPC calls vs. Transactions

There are two ways of calling a contract:

### Dry-run via RPC

Remote procedure calls, or RPC methods, are a way for an external program – for example, a browser
or front-end application – to communicate with a Polkadot SDK node. 
For example, you might use an RPC method to read a stored value, submit a transaction, or request
information about the chain a node is connected to.

If a user interface displays the value of a contract (e.g. the balance of an account in
an ERC-20 contract), then this is typically done via RPC. Specifically it is done by
executing a synchronous dry-run of the contract method and returning its result.
The following schema depicts this.

![Contract dry-run via RPC](/img/rpc-revive.svg)

RPC calls don't require any tokens, they just require a connection to a node in the 
network. It's important to note that the execution won't result in any state mutations
on the blockchain, it really just is a dry-run.

### State mutating via submitting a Transaction 

The other method of executing a call to a contract is by submitting a transaction
on-chain. This requires tokens of the network to pay for the cost of the transaction.
The transaction will be put in a transaction pool and asynchronously processed.
The important implication here is that during submission of the transaction no result
is available. This is different from an RPC call.

The typical pattern for how a client can recognize the result of the contract call is
to have the contract emit an event and have the client actively listen for such an
event. Typically libraries (like `polkadot-js/api`) provide API functions to do just that.
The important take-away is that contract developers have to make sure that events
are emitted if they want clients to be able to pick up on them.

![Contract execution via transaction](/img/events-revive.svg)

## Using the Contracts UI

### 1. `get()` function

We set the initial value of the Flipper contract
`value` to `false` when we instantiated the contract. Let's check that this is the case.

In the **Message to Send** section, select the "**get(): bool**" message and accept the default
values for the other options.

Press **"Read"** and confirm that it returns the value `false`:

![An image of Flipper RPC call with false](/img/flipper-false.png)

### 2. `flip()` function

So let's make the value turn `true` now!

The alternative message to send with the UI is `flip()`. Again, accept the default values for the other options and click **Call contract**

![An image of a Flipper transaction](/img/send-as-transaction.png)

If the transaction was successful, we should then be able to go back to the `get()` function and see our updated storage:

![An image of Flipper RPC call with true](/img/flipper-true.png)

## Using `cargo-contract`

Calling a contract can also be done via the command-line! 

### 1. `get()` function

```bash
$ cargo contract build
$ cargo contract instantiate --execute --suri //Alice --args true

# The output of this command will contain the contract address in
# this format: 
#     Contract 5DXR2MxThkyZvG3s4ubu9yRdNiifchZ9eNV8i6ErGx6u1sea
# Insert it in the command below.

$ cargo contract call 
  --contract <insert-contract-address> 
  --message get 
  --suri //Alice
```

### 2. `flip()` function

```bash
$ cargo contract call 
  --contract <insert-contract-address>
  --message flip
  --execute
  --suri //Alice
```
````

## File: versioned_docs/version-v6/linter/overview.md
````markdown
---
title: Overview
hide_title: true
description: An overview of ink! linter
---

![Text/linter Title Picture](/img/title/text/linter.svg)

:::caution
This page has not yet been edited for ink! v6 yet.

TODO @peterwht
:::

# Overview

# Overview
ink! includes the linter — a security tool designed to identify typical security issues in smart contracts. The linter is meant to seamlessly fit into the smart contracts development process, ensuring that contracts are thoroughly checked during the build phase before they are deployed to the blockchain.

## Installation
Our linter requires two crates and a fixed Rust toolchain version. You can use
these commands to install the required dependencies:

```bash
export TOOLCHAIN_VERSION=nightly-2025-02-20
rustup install $TOOLCHAIN_VERSION
rustup component add rust-src --toolchain $TOOLCHAIN_VERSION
rustup run $TOOLCHAIN_VERSION cargo install cargo-dylint dylint-link
```

Note that the linter requires this specific version of the toolchain, 
since it uses the internal Rust compiler API. That's also why we require
nightly for the linter, these internal crates are not accessible on stable.

## Usage
The linter operates via `cargo-contract`.

To perform a build with extra code analysis (i.e. the ink! linting rules), run the
following command within the contract directory:

```bash
$ cargo contract build --lint
```

This command compiles the contract and applies all linting checks. You can find the complete list of lints along with their descriptions in this documentation.

## Suppressing linter warnings
To suppress linter warnings in your ink! smart-contract, you can use `allow` attributes. You can apply these attributes either to a particular piece of code or globally.

Here's how to suppress the specific linter warnings:

```rust
// Suppressing the `primitive_topic` lint globally
#[cfg_attr(dylint_lib = "ink_linting", allow(primitive_topic))]

#[ink(message)]
pub fn test(&mut self) {
    // Suppressing the `strict_balance_equality` lint in a specific place
    #[cfg_attr(dylint_lib = "ink_linting", allow(strict_balance_equality))]
    if self.env().balance() == 10 { /* ... */ }
}
```
````

## File: versioned_docs/version-v6/testing/testnet/overview.md
````markdown
---
title: Contracts on Paseo
hide_title: true
slug: /testnet
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Testnet Title Picture](/img/title/testnet.svg)

# Contracts on Paseo

:::caution
This section has not yet been updated to ink! v6.

TODO @peterwht Please review this page.
:::


[Paseo](https://wiki.polkadot.network/docs/build-pdk#paseo-testnet) is a testnet for
Polkadot and Kusama parachains.

## How can I use it?
### (1) Create an Account

As a first step, you should create an account. This can be done via command-line
tools (e.g. `subxt`) or via a wallet (e.g. with the `polkadot-js` browser extension).
See [here](https://wiki.polkadot.network/docs/learn-account-generation) for a detailed guide.

### (2) Get Testnet Tokens

As a second step, you have to get `PAS` testnet tokens through the [Paseo Faucet](https://faucet.polkadot.io/).

Alternatively, you can use the [Matrix chat room](https://wiki.polkadot.network/docs/learn-DOT#getting-tokens-on-the-paseo-testnet).
You must send a message like this:

```
!drip <PASEO_ADDRESS>
```

If everything worked out, the `PAS` tokens will show up in your account.
In case you are using the `polkadot-js` frontend, you can see them under
[the "Accounts" tab for Paseo](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpaseo.dotters.network#/accounts).

<img src={useBaseUrl('img/pas-in-wallet.png')} alt="Paseo testnet tokens in wallet" />

### (3) Deploy Your Contract

Once you have `PAS` on Paseo you can deploy by following the instructions in the Pop Docs [here](https://learn.onpop.io/contracts/guides/deploy-on-pop-testnet#:~:text=Transfer%20from%20Paseo%20Relay%20Network%20to%20Pop%20Testnet).
The only difference is that instead of using the `Alice` account you will use the one you generated.
````

## File: versioned_docs/version-v6/background/ink-vs-solidity.md
````markdown
---
title: ink! vs. Solidity
hide_title: true
slug: /background/ink-vs-solidity
---

<head>
    <meta name="title" content="Polkadot's ink! vs. Solidity" />
    <meta name="description" content="Comparison of Polkadot's ink! vs. Solidity." />
    <meta name="keywords" content="Polkadot, Solidity, Ethereum, ink!, Smart Contracts" />
    <meta property="og:title" content="Polkadot's ink! vs. Solidity" />
    <meta property="og:description" content="Comparison of Polkadot's ink! vs. Solidity." />
</head>

![Solidity Title Picture](/img/title/solidity.svg)

:::caution
This page has not been updated for ink! v6 yet.

TODO @peterwht Please re-read this page.
:::

# ink! vs. Solidity

The following table gives a brief comparison of features between ink! and Solidity:

<div class="comparison">

|                       | ink!                        | Solidity      |
| :-------------------- | :-------------------------- | :------------ |
| Virtual Machine       | Any Wasm VM                 | EVM           |
| Encoding              | Wasm                        | EVM Byte Code |
| Language              | Rust                        | Standalone    |
| Overflow Protection   | Enabled by default          | Yes           |
| Constructor Functions | Multiple                    | Single        |
| Tooling               | Anything that supports Rust | Custom        |
| Versioning            | Semantic                    | Semantic      |
| Has Metadata?         | Yes                         | Yes           |
| Multi-File Project    | Planned                     | Yes           |
| Storage Entries       | Variable                    | 256 bits      |
| Supported Types       | Docs                        | Docs          |
| Has Interfaces?       | Yes (Rust Traits)           | Yes           |

</div>

## Converting a Solidity Contract to ink!

In the following, we'll explain how to convert a Solidity contract to ink!.

### 1. Generate a new ink! contract

Run the following command to generate the skeleton for an ink! contract.
The command will set up the boilerplate code for ink!'s "Hello, World!"
(the [`flipper`](https://github.com/use-ink/ink-examples/tree/main/flipper) contract)).

```
cargo contract new <contract-name>
```

### 2. Build the contract

```
cargo contract build
```

### 3. Convert Solidity class fields to Rust struct

Solidity is an object-oriented language, and uses classes. ink! (Rust) does not use classes.

An example Solidity class looks like:

<!-- Markdown syntax highlighting does not support Solidity. C++ seems to be the best match -->

```C++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract MyContract {
    bool private _theBool;
    event UpdatedBool(bool indexed _theBool);

    constructor(bool theBool) {
        require(theBool == true, "theBool must start as true");

        _theBool = theBool;
    }

    function setBool(bool newBool) public returns (bool boolChanged) {
        if (_theBool == newBool) {
            boolChanged = false;
        } else {
            boolChanged = true;
        }

        _theBool = newBool;

        // emit event
        emit UpdatedBool(newBool);
    }
}
```

And the equivalent contract in ink! looks like:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    #[ink(storage)]
    pub struct MyContract {
        the_bool: bool, // class members become struct fields
    }

    #[ink(event)]
    pub struct UpdatedBool {
        #[ink(topic)] // -> indexed
        the_bool: bool,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new(the_bool: bool) -> Self {
            assert!(the_bool == true, "the_bool must start as true");
            Self { the_bool }
        }

        #[ink(message)] // functions become struct implementations
        pub fn set_bool(&mut self, new_bool: bool) -> bool {
            let bool_changed: bool;

            if self.the_bool == new_bool{
                bool_changed = false;
            }else{
                bool_changed = true;
            }

            self.the_bool = new_bool;

            self.env().emit_event(UpdatedBool {
                the_bool: new_bool
            });

            // return
            bool_changed
        }
    }
}
```

A few key differences are:

- Solidity class variables / members will be placed in the contract struct in ink!
- All class methods in Solidity are `impl`emented for the contract struct in ink!
- Solidity frequently prefixes variables with an underscore (`_name`). ink! / Rust only prefixes with an underscore for _unused_ variables.
- Solidity uses camelCase. ink! uses snake_case.
- In Solidity, the variable type comes before the variable name (e.g. bool myVar). While ink! specifies var type after the var name (e.g. my_var: bool)

### 4. Convert each function

- Start converting each function one by one.
  - A recommended approach is to, if possible, skip cross-contract calls at first and use mock data instead
  - This way off-chain unit tests can be written to test the core functionality
    - unit tests are off-chain and do not work with cross-contract calls
  - Once fully tested, start adding in cross-contract calls and perform on-chain manual + integration tests
- Ensure that function's visibility (public, private) are matched in ink!
- In Solidity, if a function returns a `bool success`, ink! will use a `Result<()>` instead (`Result::Ok` or `Result::Err`).

Solidity return example:

```c++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract Example {
    uint128 public data;

    constructor(){}

    function setData(uint128 newData) public returns (
        bool success,
        string memory reason
        ) {

        if (newData == 0) {
            return (false, "Data should not be zero");
        }

        data = newData;
        return (true, "");
    }
}
```

The equivalent contract in ink!:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod example {
    #[ink(storage)]
    pub struct Example {
        data: u128,
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    #[derive(Debug, PartialEq, Eq)]
    pub enum Error {
        DataShouldNotBeZero,
    }

    pub type Result<T> = core::result::Result<T, Error>;

    impl Example {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self { data: 0 }
        }

        #[ink(message)]
        pub fn set_data(&mut self, new_data: u128) -> Result<()> {
            if new_data == 0 {
                return Err(Error::DataShouldNotBeZero);
            }

            self.data = new_data;
            Ok(())
        }
    }
}
```

## Best Practices + Tips

- If the Solidity contract uses a `string`, it is recommended to use a `Vec<u8>` to avoid the overhead of a `String`. See [here](https://substrate.stackexchange.com/questions/1174/why-is-it-a-bad-idea-to-use-string-in-an-ink-smart-contract) for more details on why. The smart contract should only contain the information that strictly needs to be placed on the blockchain and go through consensus. The UI should be used for displaying strings.
- Double check all `.unwrap()`s performed. Solidity does not have as strict checking as ink! does. For example, a mapping field can be accessed as simple as `myMapping[someKey]`. ink!, however, requires `self.my_mapping.get(some_key).unwrap()`. A useful way to handle `None` cases is to use `.unwrap_or(some_val)`.
- Run the contracts node with `ink-node -lerror,runtime::contracts=debug` for debug prints, and errors to be displayed in the nodes console.
- When passing parameters to a helper, it is recommended to pass references (even for primitives) as Wasm is more efficient with references.
  For example (see [erc20](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) example):

```rust
/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
#[ink(message)]
pub fn balance_of(&self, owner: AccountId) -> Balance {
    self.balance_of_impl(&owner)
}

/// Returns the account balance for the specified `owner`.
///
/// Returns `0` if the account is non-existent.
///
/// # Note
///
/// Prefer to call this method over `balance_of` since this
/// works using references which are more efficient in Wasm.
#[inline]
fn balance_of_impl(&self, owner: &AccountId) -> Balance {
    self.balances.get(owner).unwrap_or_default()
}
```

- Just as in Solidity, ink! does not have floating point numbers due to the non-deterministic nature. Instead, the frontend should add decimal points as needed.

## Syntax Equivalencies

### `public function`

```c++
// solidity
function fnName() public {}
// or
// by default, functions are public
function fnName() {}
```

```rust
// ink!
#[ink(message)]
pub fn fn_name(&self) {}
```

### `mapping declaration`

```c++
// solidity
mapping(address => uint128) private mapName;
```

```rust
//ink!
use ink::storage::Mapping;

#[ink(storage)]
pub struct ContractName {
    map_name: Mapping<AccountId, u128>,
}
```

### `mapping usage`

```c++
// solidity

// insert / update
aMap[aKey] = aValue;

// get
aMap[aKey]
```

```rust
// ink!

//insert / update
self.a_map.insert(&a_key, &a_value);

// get
self.a_map.get(a_key).unwrap()
```

### `struct`

```c++
// solidity
struct MyPerson{
    address person;
    u64 favNum;
}
```

```rust
// ink!
struct MyPerson {
    person: AccountId,
    fav_num: u64,
}
```

### `assertions / requires`

```c++
// solidity
require(someValue < 10, "someValue is not less than 10");
```

```rust
// ink!
assert!(some_value < 10, "some_value is not less than 10");
```

### `timestamp`

```c++
// solidity
block.timestamp
```

```rust
// ink!
self.env().block_timestamp()
```

### `contract caller`

```c++
// solidity
address caller = msg.sender;
```

```rust
// ink!
let caller: AccountId = self.env().caller();
```

### `contract's address`

```c++
// solidity
address(this)
```

```rust
// ink!
self.env().account_id()
```

### `bytes`

Solidity has a type `bytes`. `bytes` is (essentially) equivalent to an array of uint8. So, `bytes` in Solidity => `Vec<u8>` or `[u8; ...]` in ink!. See [here](https://ethereum.stackexchange.com/questions/91119/difference-between-byte-and-uint8-datatypes-in-solidity) for more details. If desired, a `bytes` struct can be created in ink! to replicate the `bytes` type in Solidity.

### `uint256`

Solidity uses `uint256` and `uint` to represent a 256-bit type.

Solidity is 256-bit / 32-byte word optimized. Meaning, using `uint256` in Solidity contracts will reduce gas usage -- but increase storage usage. The largest size ink! has built in is a `u128`. ink! compiles to Wasm. The largest primitive Wasm has is 64bit (due to most computers using 64bit). So, there is no benefit to using any larger primitive over a collection.

When porting a `uint256` from Solidity to ink!, it is recommended to, with discretion, determine the range of the value, and choose the appropriate size (u8, u16, u32, u64, u128). If a 256-bit hash value is required, ink! has a `Hash` primitive available. In the event a value needs to be 256-bit, it is recommended to use an array (e.g. `[u64; 4]`).

### `payable`

```c++
// solidity
function myFunction() payable returns (uint64) {}
```

```rust
#[ink(message, payable)]
pub fn my_function(&self) -> u64 {}
```

### `received deposit / payment`

```C++
// solidity
msg.value
```

```rust
// ink!
self.env().transferred_value()
```

### `contract balance`

```c++
// solidity
address(this).balance
```

```rust
// ink!
self.env().balance()
```

### `transfer tokens from contract`

```c++
// solidity
recipient.send(amount)
```

```rust
// ink!
if self.env().transfer(recipient, amount).is_err() {
    panic!("error transferring")
}
```

### `events & indexed`

```c++
// solidity

event MyCoolEvent(
    u128 indexed indexedValue,
    u128 notIndexedValue,
);

// emit event
emit MyCoolEvent(someValue, someOtherValue);
```

```rust
// ink!

#[ink(event)]
pub struct MyCoolEvent {
    #[ink(topic)]
    indexed_value: u128,

    not_indexed_value: u128,
}

// emit event
self.env().emit_event(MyCoolEvent {
    indexed_value: some_value,
    not_indexed_value: some_other_value
});
```

### `errors and returning`

Solidity has several error handling mechanisms: `assert`, `require`, `revert`, and `throw`. Each of these will revert the changed state when called. See [this article](https://medium.com/blockchannel/the-use-of-revert-assert-and-require-in-solidity-and-the-new-revert-opcode-in-the-evm-1a3a7990e06e) for details on these.

ink! uses a `Result` enum (`Ok(T)`, `Err(E)`), `assert!` and `panic!`. [This Stack Exchange](https://substrate.stackexchange.com/questions/2391/panic-in-ink-smart-contracts) answer and [GitHub discussion](https://github.com/use-ink/ink/issues/641) provide more details on these.

#### `throw`

Throw is deprecated in Solidity and would throw an invalid opcode error (no details) and revert the state. As an alternative to the `if...{throw;}` pattern in Solidity, a `Result::Err` should be returned for expected errors, and an `assert!` should be used for errors that should not occur.

#### `assert`

In Solidity, `assert` is used as internal guards against errors in the _code_. In general, properly functioning code should never hit a failing assert. `assert` in Solidity does not have error strings. In ink!, use `assert!`. `assert!` will `panic!` if it evaluates to _false_. The state will be reverted, and a `CalleeTrapped` will be returned. The (optional) error string will be printed to the debug buffer.

```rust
// ink!
assert!(caller == owner, "caller is not owner")
```

#### `require and revert`

In Solidity, `require` is used for general (normal) errors -- such as errors that occur based on user input. `require` does have the option for an error string. `revert` is very similar to `require` except that `revert` will be called in `if ... else` chains. Both `require` and `revert` will revert the chain state. In ink!, `if ... { return Err(Error::SomeError) }` should be used for `require` or `revert`. When a `Result::Err` is returned in ink!, then all state is reverted.

In general, `Result::Err` should be used when a _calling contract_ needs to know _why_ a function failed. Otherwise, `assert!` should be used as it has less overhead than a `Result`.

```c++
// Solidity
function myFunction(bool returnError) public pure {
    require(!returnError, "my error here");

    // or

    if returnError {
        revert("my error here");
    }
}
```

```rust
// ink!

#[derive(Debug, PartialEq, Eq)]
#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Error {
    /// Provide a detailed comment on the error
    MyError,
}

// result type
pub type Result<T> = core::result::Result<T, Error>;

// ...

#[ink(message)]
pub fn my_function(&self, return_error: bool) -> Result<()> {
    if return_error{
        return Err(Error::MyError)
    }
    Ok(())
}
```

### `nested mappings + custom / advanced structures`

In Solidity, it is easy to do nested mappings. It is not as straightforward in ink!.

imagine the following scenario

```c++
// solidity
contract Dao {
    struct Proposal {
        mapping (address => bool) votedYes
    }

    mapping (address => bool) public isWhitelisted;
    Proposal[] public proposals;
}
```

in ink! this _seems_ like it could be represented like so:

```rust
#[ink::contract]
mod dao {

    use ink::{
        prelude::vec::Vec,
        storage::Mapping,
    };

    #[ink(storage)]
    pub struct Proposal {
        voted_yes: Mapping<AccountId, bool>,
    }

    #[ink(storage)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }
    }
}
```

However, this will cause an error due to the nested mapping. [This answer](https://substrate.stackexchange.com/questions/1659/how-to-have-a-mapping-in-a-custom-structure-inside-an-ink-contract) explains in detail why nested mappings are not allowed

So, as of now, to get around this issue an alternate data structure will need to be used. A data-structure that can be interchanged with the `Mapping` syntax and with minimal additional implementations is the `BTreeMap`. `BTreeMap` is less efficient than `Mapping`, but is an easy workaround until nested mappings are allowed. This will be used in the nested struct. Additional `derive`s will need to be added to be compatible with the #[ink(storage)] struct (see below).

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod dao {

    use ink::{
        prelude::{
            collections::BTreeMap,
            vec::Vec,
        },
        storage::Mapping,
    };

    #[derive(Debug)]
    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub struct Proposal {
        voted_yes: BTreeMap<AccountId, bool>,
    }

    #[ink(storage)]
    #[derive(Debug)]
    pub struct Dao {
        proposals: Vec<Proposal>,
        is_whitelisted: Mapping<AccountId, bool>,
    }

    impl Dao{
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {
                is_whitelisted: Mapping::default(),
                proposals: Vec::new(),
            }
        }

        #[ink(message)]
        pub fn add_proposal(&mut self) {
            self.proposals.push(Proposal {
                voted_yes: BTreeMap::new(),
            });
        }

        #[ink(message)]
        pub fn vote(&mut self, proposal_id: u32, vote: bool) {
            let proposal = self.proposals
                .get_mut(proposal_id as usize)
                .unwrap();

            proposal.voted_yes
                .insert(Self::env().caller(), vote);
        }

        #[ink(message)]
        pub fn get_proposal(&self, proposal_id: u32) -> BTreeMap<AccountId, bool> {
            self.proposals
                .get(proposal_id as usize)
                .unwrap()
                .voted_yes
                .clone()
        }
    }
}
```

### `cross-contract calling`

In ink!, to do [cross-contract calling](../basics/cross-contract-calling.md), the contract will need to be added to the project. Ensure the contract is properly exporting its Structs. See the `erc20` contract example:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

// make the structs visible
pub use self::erc20::{
    Erc20,
    // this is necessary
    Erc20Ref,
};

#[ink::contract]
pub mod erc20 {}
```

In the new cross-called contract's Cargo.toml, add (or edit) the following:

```
[lib]
name = "erc20"
path = "lib.rs"
crate-type = [
	# Used for normal contract Wasm blobs.
	"cdylib",
    # Used for ABI generation. Necessary for importing as a dependency
    "rlib",
]

[features]
ink-as-dependency = []
```

`ink-as-dependency` "tells the ink! code generator to always or never compile the smart contract as if it was used as a dependency of another ink! smart contract" ([source](../basics/cross-contract-calling.md)).

Then, In the main contract's Cargo.toml, import the contract that will be cross-called.

```rust
erc20 = { path = "erc20", default-features = false, features = ["ink-as-dependency"] }
```

And make sure to add it to the `std` field of the .toml file.

```rust
[features]
default = ["std"]
std = [
    # ...

    "erc20/std",
]
```

Now, import the cross-called-contract to the main contract:

```rust
// example
use erc20::Erc20Ref;
```

There are two methods to setup the other contract.

1. Instantiate the cross-called-contract in the main contract's constructor.  
   See [here](../basics/cross-contract-calling.md) for a tutorial, and [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts/delegator) for an example.
2. Or, add the `AccountId` of an already deployed contract.
   Here is an example constructor to set this up:

   ```rust
   use my_other_contract::MyOtherContractRef;
   // ...
   fn new(contract_id: AccountId) -> Self {
        // for already deployed contract
        let contract_ref: MyOtherContractRef =
            ink_env::call::FromAccountId::from_account_id(contract_id);
        Self {contract_ref}
   }
   ```

Now, to perform the cross-contract call:

```rust
{
    self.contract_ref.some_external_function(a_param);
}
```

Note: as of now (ink! v3.3.1), when using cross-contract calls, emitting events will not work and compile errors will occur. See [issue #1000](https://github.com/use-ink/ink/issues/1000). Furthermore, the compiler will throw an error saying that (for example) Erc20Ref does not implement `SpreadAllocate`. This [issue #1149](https://github.com/use-ink/ink/issues/1149) explains more and has a workaround. These issues will be fixed in [issue #1134](https://github.com/use-ink/ink/issues/1134).

### `submit generic transaction / dynamic cross-contract calling`

invokes function found at `callee` contract address, sends the `transferAmount` to the `callee`, and the `transactionData` payload.

```c++
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.1;

contract CallContract {

    constructor() {}

    function invokeTransaction(
        address payable callee,
        uint transferAmount,
        bytes4 functionSelector,
        string memory transactionData
    ) public returns(bool success, bytes memory message) {

        bytes memory _data = abi
            .encodePacked(functionSelector, transactionData);

        (success, message) = callee
            .call{value: transferAmount}(_data);

        return (success, message);
    }
}
```

The equivalant in Ink!:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod call_contract {
    use ink::{
        env::call::{
            build_call,
            Call,
            ExecutionInput,
            Selector
        },
        prelude::vec::Vec,
    };

    #[ink(storage)]
    #[derive(Default)]
    pub struct CallContract {}

    #[derive(Debug, PartialEq, Eq, scale::Encode, scale::Decode)]
    #[cfg_attr(feature = "std", derive(scale_info::TypeInfo))]
    pub enum Error {
        TransactionFailed,
    }
    type Result<T> = core::result::Result<T, Error>;


    impl CallContract{
        #[ink(constructor)]
        pub fn new() -> Self {
            Default::default()
        }

        #[ink(message, payable)]
        pub fn invoke_transaction(
            &mut self,
            callee: AccountId,
            transfer_amount: u128,
            function_selector: [u8; 4],
            transaction_data: Vec<u8>,
            gas_limit: Option<u64>,
        ) -> Result<()> {

            let transaction_result = build_call::<<Self as ::ink::env::ContractEnv>::Env>()
                .call_type(
                    Call::new(callee) // contract to call
                        .gas_limit(gas_limit.unwrap_or_default())
                        .transferred_value(transfer_amount), // value to transfer with call
                )
                .exec_input(
                    ExecutionInput::new(Selector::new(function_selector))
                        .push_arg(transaction_data), // SCALE-encoded parameters
                )
                .returns::<()>()
                .try_invoke();

            match transaction_result {
                Ok(Ok(_)) => Ok(()),
                _ => Err(Error::TransactionFailed),
            }
        }
    }
}
```

Note: the `function_selector` bytes can be found in the generated `target/ink/<contract-name>.json`.

## Limitations of ink! v4

- Multi-file projects are not supported with pure ink!
  - implementing traits / interfaces will not work
  - There are alternatives that do add this functionality such as OpenBrush

## Troubleshooting Errors

- `ERROR: Validation of the Wasm failed.`

```
ERROR: Validation of the Wasm failed.

ERROR: An unexpected panic function import was found in the contract Wasm.
This typically goes back to a known bug in the Rust compiler:
https://github.com/rust-lang/rust/issues/78744

As a workaround try to insert `overflow-checks = false` into your `Cargo.toml`.
This will disable safe math operations, but unfortunately we are currently not
aware of a better workaround until the bug in the compiler is fixed.
```

**Solution**  
Add the following to the contract Cargo.toml:

```
[profile.release]
overflow-checks = false
```

- `"failed to load bitcode of module '...' "`

This happens when trying to import a contract for cross-contract calling.

**Solution**  
Ensure that the following is added to Cargo.toml contract import:`

```
features = ["ink-as-dependency"]
```

so the import would look like:

```
mycontract = { path = "mycontract/", default-features = false, features = ["ink-as-dependency"]}
```

## unit testing (off-chain)

- Unit tests are an integral part of smart-contract development and ensuring your code works off-chain before testing on-chain.
- To run ink! tests, use the command `cargo test`. Add the `--nocapture` flag for debug prints to show.
- From the contract module, make sure to make the contract struct and anything else that is going to be used in the unit tests public. For example:

```rust
// top of file
#![cfg_attr(not(feature = "std"), no_std, no_main)]


pub use self::mycontract::{
    MyContract
};
```

- Off-chain unit tests will not work with cross-contract calls.
  One workaround to ensure unit tests are still passing is to provide mock data.

An easy approach is to use conditional compiling with `#[cfg(test)]` and `#[cfg(not(test))]`.

Note: This solution may not be the best option. A more effective approach can be found in our current E2E test. Please refer to [the showcased example here](https://github.com/use-ink/ink-examples/tree/main/multi-contract-caller).

For example, here is a read-only ERC20 cross-contract call:

```rust
// only compiles when *not* running tests
#[cfg(not(test))]
fn get_token_balance(&self, caller: &AccountId) -> Balance {
    // calls the external ERC-20 contract
    self.token.balance_of(*caller)
}

// only compiles when running tests
#[cfg(test)]
fn get_token_balance(&self, _: &AccountId) -> Balance {
    // arbitrary value
    1
}
```

And if the cross-contract call _writes_ to storage, a mock field can be added to the contract struct. For example:

```rust
#[ink(storage)]
pub struct MyContract {
    #[cfg(test)]
    mock_field: SomeStruct, // will serve as a fake storage
}

...

// on-chain, performs cross-contract call
#[cfg(not(test))]
fn do_some_write(&mut self) {
    self.external_contract.write_to_field(0xDEADBEEF);
}


// testing environment only
#[cfg(test)]
fn do_some_write(&mut self) {
    self.mock_field.my_fake_storage_item = 0xDEADBEEF;
}
```

- useful code to interact and modify the contract environment for testing

[ink_env docs](https://docs.rs/ink_env/4.3.0/ink_env/index.html)

```rust
// get the default accounts (alice, bob, ...)
let accounts = ink::env::test::default_accounts::<ink::env::DefaultEnvironment>();
accounts.alice //usage example

// set which account calls the contract
ink::env::test::set_caller::<ink::env::DefaultEnvironment>(accounts.bob);

// get the contract's address
let callee = ink::env::account_id::<ink::env::DefaultEnvironment>();

// set the contracts address.
// by default, this is alice's account
ink::env::test::set_callee::<ink::env::DefaultEnvironment>(callee);

// transfer native currency to the contract
ink::env::test::set_value_transferred::<ink::env::DefaultEnvironment>(2);

// increase block number (and block timestamp).
// this can be placed in a loop to advance the block many times
ink::env::test::advance_block::<ink::env::DefaultEnvironment>();

// generate arbitrary AccountId
AccountId::from([0x01; 32]);

// generate arbitrary Hash
Hash::from([0x01; 32])

// macro for tests that are expected to panic.
#[should_panic]
```
````

## File: versioned_docs/version-v6/background/polkadot-sdk.md
````markdown
---
title: Polkadot SDK
hide_title: true
slug: /background/polkadot-sdk
---

<head>
    <meta name="description" content="Explanation of how ink! ties into Polkadot SDK and `pallet-revive`." />
    <meta name="keywords" content="Polkadot SDK, ink!, pallet-revive, Smart Contracts" />
    <meta property="og:title" content="How does ink! tie into Polkadot SDK?" />
    <meta property="og:description" content="Explanation of how ink! ties into Polkadot SDK and `pallet-revive`." />
</head>

![Polkadot SDK Title Picture](/img/title/polkadot.svg)

# Polkadot SDK

ink! is a programming language for smart contracts; blockchains built with [the Polkadot SDK](https://polkadot.com/platform/sdk)
can choose from a number of smart contract languages which one(s) they want to support.
ink! is one of them. It is an opinionated language that we have built by extending the popular Rust programming language with functionality needed to make it smart contract compatible.

## How does ink! tie into Polkadot SDK?

[Polkadot SDK](https://polkadot.com/platform/sdk) is a framework for building blockchains – those can be standalone blockchains or blockchains connected to [Kusama](http://kusama.network) or [Polkadot](http://polkadot.network), so called _parachains_. The Polkadot SDK contains a number of modules, in Polkadot SDK terminology those are called _pallets_. Polkadot SDK comes with a set of pallets for many requirements modern blockchains typically have – staking, fungible tokens, non-fungible tokens, governance, etc.

Polkadot SDK also ships with a module for smart contracts, this module is called [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive).
If a parachain is developed in the Polkadot SDK it can easily add smart contract functionality by including this pallet.

How does ink! come into play here? ink! is a programming language, specifically it is an embedded domain-specific language for the popular Rust programming language. This means that you can use all the normal Rust syntax plus some specifics that we added to make the language suitable for the smart contract world. The `pallet-revive` takes these ink! contracts and executes them safely. So in short: _with ink! you can write smart contracts in Rust for blockchains built with the Polkadot SDK that include `pallet-revive`_.

![](/img/ink-pallet-contracts.png)

## How does the `pallet-revive` work?

`pallet-revive` was intentionally designed in a way that it is decoupled from the language that is used to write smart contracts. The pallet is only the execution environment and it takes RISC-V binary files as input. Smart contracts for this pallet have to be compiled to the RISC-V target architecture.

For contract developers this means they can use ink! for writing smart contracts, but can also decide on other languages. 
Right now the pallet supports ink! (Rust) and Solidity (via [Parity's revive compiler](https://github.com/paritytech/revive)).

It's not hard to add new languages. There just needs to be a compiler for the language down to RISC-V bytecode, then it's possible to implement the API of `pallet-revive`. This API at the moment consists of about 50 functions for anything a smart contract may desire: storage access, cryptographic functionality, environmental information like block numbers, access to functions for getting random numbers or self-terminate the contract, etc. Not all of those have to be implemented in the language ‒ the ink! "Hello, World!" requires just six API functions. The following schema depicts this relationship:

![](/img/ink-polkavm-riscv-solidity.svg)

We think this design is more future-proof than some architectures found in competing ecosystems. There is no tight coupling between language and execution environment. RISC-V is an industry standard and a multitude of programming languages can nowadays be compiled down to it. If in, say ten years time, researchers come up with an innovative language for writing smart contracts (or a subset of an existing language) then as long as there is a compiler that supports RISC-V it will be easy to make this language compatible with `pallet-revive`.

## Why include `pallet-revive` on a parachain?

There are a couple use cases for including smart contract functionality on a parachain. We distinguish three big ones.

### Use Case 1: Smart Contracts as "first-class citizens"
The most obvious use case is a parachain which provides smart contracts as a “first-class citizen”, meaning smart contracts are the central value proposition of the chain.

Those chains typically take the off-the-shelf `pallet-revive` and create additional innovation on top of it.
An example for this is [Pop Network](https://onpop.io/).

### Use Case 2: Smart Contracts as "second-class citizens"
There is another not so obvious use case for `pallet-revive`: smart contracts as “second-class citizens” on an existing chain. By this we mean that the central value proposition of the chain has nothing to do with smart contracts, but it still includes them as an add-on.

We provide an API (called [chain extensions](../macros-attributes/chain-extension.md)) with which a parachain can expose certain parts of its business logic to smart contract developers. Through this, smart contract developers can utilize the business logic primitives of the chain to build a new application on top of it. Think for example of a decentralized exchange blockchain. This chain would in its simplest form have an order book to place bids and asks ‒ there is no need for taking untrusted, Turing-complete, programs from the outside. The parachain could decide to expose the order book into smart contracts though, giving external developers the option of building new applications that utilize the order book. For example, to upload trading algorithms as smart contracts to the chain.

Smart contracts here are an opportunity to up the user engagement and drive usage of the chain's native token. And the billing for utilizing the chain comes already built-in with the pallet ‒ users have to pay gas fees for the execution of their smart contract.

### Use Case 3: Smart Contracts as a first step into Polkadot or Kusama
A third big use case for `pallet-revive` is to prototype an idea as a proof-of-concept smart contract before leasing a dedicated parachain slot on Polkadot or Kusama.

The time to develop a smart contract and deploy it is shorter than the onboarding story for a parachain. One can deploy a proof-of-concept smart contract first, see if it gains traction and the idea holds up to the real world. Only subsequently, once there is a need for e.g. cheaper transaction fees, more efficient execution, or a governance mechanism for the community, the smart contract could be migrated to a dedicated parachain runtime with its own slot. ink! contracts and Polkadot SDK runtimes are both written in Rust and share similar primitives, this enables a clear path to graduate from a smart contract to its own runtime. Developers can reuse large parts of their code, their tests, as well as frontend and client code.

![](/img/ink-gateway.jpg)

## Smart Contracts vs. Parachains
One of the first questions we typically get when somebody learns about Polkadot SDK, Polkadot, or Kusama is when to develop a parachain vs. when to develop a smart contract.

The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In the Polkadot SDK terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains ‒ except for that they don't have to build their own security, are upgradable, and interoperable.

It's noteworthy that a parachain's state transition function doesn't get further validated ‒ it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

For smart contracts, on the other hand, an existing parachain has to include `pallet-revive` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-revive` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-revive` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract ‒ a smart contract sits on top of a parachain_.

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.

![](/img/smart-contract-vs-parachain.png)
````

## File: versioned_docs/version-v6/background/why-rust.md
````markdown
---
title: Why Rust for Smart Contracts?
hide_title: true
slug: /background/why-rust-for-smart-contracts
---

<head>
    <meta name="description" content="Explanation why Rust is a great language for smart contracts." />
    <meta name="keywords" content="ink!, Rust, Smart Contracts" />
    <meta property="og:title" content="Why Rust for Smart Contracts?" />
    <meta property="og:description" content="Explanation why Rust is a great language for smart contracts." />
</head>

![Rust Title Picture](/img/title/rust.svg)

# Why Rust for Smart Contracts?

ink! chooses not to invent a new programming language, but rather adapt a subset of Rust to serve our purpose.
If this doesn't already convince you, you find many more good reasons here:

* <span class="highlight">Rust is an ideal smart contract language:</span> It is type safe, memory safe, and free of undefined behaviors. It generates small binaries because it doesn’t include extra bloat, like a garbage collector, and advanced optimizations and tree shaking remove dead code. Through compiler flags, Rust can automatically protect against integer overflow.

* <span class="highlight">Rust ecosystem:</span> You gain all the support available to the Rust ecosystem for free. As the language develops, ink! will automatically gain access to new features and functionality, improving how you can write smart contracts in the future.

* <span class="highlight">Tooling:</span> Because ink! follows Rust standards, tools like rustfmt, clippy and rust-analyzer already work out of the box.
The same goes for code formatting and syntax highlighting in most modern text editors.
Also, Rust has an integrated test and benchmark runner,

* <span class="highlight">No overhead:</span> Minimal runtime.

* <span class="highlight">Safe & Efficient:</span> Zero-cost & safe abstractions.

* <span class="highlight">Productive:</span> Cargo + <a href="https://crates.io">crates.io</a> Ecosystem.

* <span class="highlight">1st class RISC-V:</span> The Rust compiler has excellent support for the RISC-V bytecode architecture.
That's because it leverages LLVM as its backend to generate machine code for the RISC-V architecture.

* <span class="highlight">Small Size:</span> In the space-constrained blockchain world size is important. 
The Rust compiler is a great help for that, since it reorders struct fields in order 
to make each type as small as possible. Thus, Rust data structures are very compact,
in many cases even more compact than in C.
````

## File: versioned_docs/version-v6/basics/metadata/ink-format.md
````markdown
---
title: ink! Format
hide_title: true
slug: /basics/metadata/ink
---

![Metadata Title Picture](/img/title/metadata-revive.svg)

# ink! Metadata

The ink! metadata is generated when a contract is built using `cargo-contract`, e.g
`cargo contract build`.
It can be found in your contract's target directory under the name
`<contract-name>.json`.

:::note

The metadata is also contained in your `<contract-name>.contract` file. The difference is
that the `.contract` file also contains the binary of your contract (under `source.contract_binary`).

:::

## `<contract-name>.json`
The metadata is defined by the following **required** keys:
- `source`: Information about the contract's binary.
- `contract`: Metadata about the contract.
- `abi`: Raw JSON of the contract's abi metadata, generated during contract compilation.

It may _optionally_ contain the following keys:
- `user`: Additional user-defined metadata.

```json
{
  "source": {
    "hash": "...",
    "language": "...",
    "compiler": "..."
  },
  "contract": {
    "name": "...",
    "version": "...",
    "authors": [
      "..."
    ]
  },
  "spec": {
    "constructors": ["..."],
    "messages": ["..."]
  }
}
```

:::note

Notice that we don't have an `abi` key, but we instead use the `spec` field to specify
the contract's ABI. You can read more about that in the [ABI documentation](#abi).

:::

The following sections will dive deeper into how these sections are made up.

### `source`
This object contains information about how the contract was built.

It consists of the following **required** keys:
- `hash`: The hash of the contract's binary.
- `language`: The language used to write the contract.
- `compiler`: The compiler used to compile the contract.

It may _optionally_ include the following keys:
- `contract_binary`: The actual binary code of the contract, for optionally bundling the code with the metadata.
- `build_info`: Extra information about the environment in which the contract was built.

```json
"source": {
  "hash": "0x157014494527fee27a82e49bbd9eea10c0713bb0566f6def37f4595db86236ff",
  "language": "ink! 6.0.0",
  "compiler": "rustc 1.85.0"
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/master/crates/metadata/src/lib.rs#L197).

:::

### `contract`
This object contains extra metadata about the contract.

The **required** keys include:
 - `name`: The name of the smart contract.
 - `version`: The version of the smart contract.
 - `authors`: The authors of the smart contract.

It can _optionally_ include the following keys:
 - `description`: The description of the smart contract.
 - `documentation`: Link to the documentation of the smart contract.
 - `repository`: Link to the code repository of the smart contract.
 - `homepage`: Link to the homepage of the smart contract.
 - `license`: The license of the smart contract.

```json
"contract": {
  "name": "flipper",
  "version": "6.0.0",
  "authors": [
    "Use Ink <ink@use.ink>"
  ]
}
```

:::info

If you're interested in the code reference from `cargo-contract`
see [here](https://github.com/use-ink/cargo-contract/blob/master/crates/metadata/src/lib.rs#L469).

:::

### ABI
This is the specification of the contract.

Unlike the previous metadata sections the structure of the object stored here is not
defined. Instead, it is up to each programming language (e.g. ink! or Solidity) to
define their own metadata format which will then be stored here.

In this document we will focus on the ink! ABI.

The ink! metadata consists of the following **required** sections
 - `spec`: The description of the contract (e.g constructors, messages, events, etc.).
 - `storage`: The layout of the storage data structure
 - `types`: A read-only registry containing types in their portable form for
   serialization.
 - `version`: The version of the ink! metadata.

```json
"spec": { ... },
"storage": { ... },
"types": { ... },
"version": "..."
```

:::info

If you're interested in the code reference from ink!
see [here](https://github.com/use-ink/ink/blob/master/crates/metadata/src/lib.rs#L82).

:::

#### `spec`
The contract `spec` consists of the following **required** keys:
- `constructors`: The set of constructors of the contract.
    - `label`: The label of the constructor. In case of a trait provided constructor the
      label is prefixed with the trait label.
    - `selector`: The selector hash of the message.
    - `payable`: If the constructor accepts any `value` from the caller.
    - `default`: If the constructor is marked as default, useful for UIs.
    - `args`: The parameters of the deployment handler.
    - `docs`: The deployment handler documentation.
- `messages`: The external messages of the contract.
    - `label`: The label of the message. In case of trait provided messages and
      constructors the prefix by convention in ink! is the label of the trait.
    - `selector`: The selector hash of the message.
    - `mutates`: If the message is allowed to mutate the contract state.
    - `payable`: If the message accepts any `value` from the caller.
    - `default`: If the message is marked as default, useful for UIs.
    - `args`: The parameters of the message.
    - `return_type`: The return type of the message.
    - `docs`: The message documentation.
- `environment`: Configuration of the types that the host blockchain operates with. 
You can check default types in the [Environment](../environment.md) section.
  - `accountId`: The type describing an account address.
  - `balance`: The type describing balance values.
  - `blockNumber`: The type describing a block number. 
  - `chainExtension`: The type describing the chain extension for the environment. 
For more information about usage and definition check [this section](../../macros-attributes/chain-extension.md).
  - `maxEventTopics`: The maximum number of supported event topics provided by the runtime.
  - `timestamp`: the type describing a timestamp.
- `events`: The events of the contract.
    - `label`: The label of the event.
    - `args`: The event arguments.
    - `docs`: The event documentation.
- `docs`: The contract documentation.
- `lang_error`: The language specific error type.

:::note

While all these keys are required, they may be empty. For example, if a contract does not
define any events then the `events` key would contain an empty array `[]`.

:::

:::tip ink! 3.x Compatibility Note

The `lang_error` field was introduced as part of ink! 4.0. This represents an error which
comes from the smart contracting language itself, and not the contract nor the underlying
environment (i.e. `pallet-revive`).

All ink! messages and constructors now return a `Result` which uses this as the `Error`
variant (see the [`LangError`](https://docs.rs/ink/6.0.0/ink/enum.LangError.html) docs for more).

:::

```json
"spec": {
  "constructors": [
    {
      "args": [
        { ... }
      ],
      "docs": [
        "Creates a new flipper smart contract initialized with the given value."
      ],
      "label": "new",
      "payable": false,
      "default": false,
      "selector": "0x9bae9d5e"
    }
  ],
  "docs": [],
  "events": [],
  "lang_error": {
    "displayName": [
      "ink",
      "LangError"
    ],
    "type": 3
  },
  "messages": [
    {
      "args": [],
      "docs": [
        " Flips the current value of the Flipper's boolean."
      ],
      "label": "flip",
      "mutates": true,
      "payable": false,
      "default": false,
      "returnType": null,
      "selector": "0x633aa551"
    }
  ]
}
```

#### `storage`
This key describes the storage layout of an ink! contract. It tracks some of the
different structures which can be placed in storage.

It consists of the following _optional_ keys (depending on what data structures are used
by the contract):

- `root`: The root cell defines the storage key for all sub-trees
    - `root_key`: The root key of the sub-tree.
    - `layout`: The storage layout of the unbounded layout elements.
- `leaf`: The root cell defines the storage key for all sub-trees
    - `key`: The offset key into the storage.
    - `ty`: The type of the encoded entity.
- `hash`: A layout that hashes values into the entire storage key space.
    - `offset`: The key offset used by the strategy.
    - `strategy`: The hashing strategy to layout the underlying elements.
    - `layout`: The storage layout of the unbounded layout elements.
- `array`: An array of associated storage cells encoded with a given type.
    - `offset`: The offset key of the array layout. This is the same key as the element
      at index 0 of the array layout.
    - `len`: The number of elements in the array layout.
    - `layout`: The layout of the elements stored in the array layout.
- `struct`: A struct layout with fields of different types.
    - `name`: The name of the struct.
    - `fields`: The fields of the struct layout.
- `enum`: An enum layout with a discriminant telling which variant is layed out.
    - `name`: The name of the enum.
    - `dispatch_key`: The key where the discriminant is stored to dispatch the variants.
    - `variants`: The variants of the enum.

```json
"storage": {
  "root": {
    "layout": {
      "struct": {
        "fields": [
          {
            "layout": {
              "leaf": {
                "key": "0x00000000",
                "ty": 0
              }
            },
            "name": "value"
          }
        ],
        "name": "Flipper"
      }
    },
    "root_key": "0x00000000"
  }
}
```

#### `types`
This object contains the type registry for the smart contract. It consists of an array of
type objects, each of which is defined as follows:
- `id`: Numerical ID for referencing the type.
- `ty`: The definition of the type.
    - `path`: The unique path to the type. Can be empty for built-in types.
    - `params`: The generic type parameters of the type in use. Empty for non generic
      types.
    - `def`: The actual type definition.
    - `docs`: Documentation.

The type definition object (`def`) supports the following `primitive` types:
- `bool`, `char`, `str`, `u8`, `u16`, `u32`, `u64`, `u128`, `i8`, `i16`, `i32`, `i64`, `i128`.

It also supports a variety of complex built-in and user-defined types. However, we will
not dig into them here. If you are interested in learning more take a look at the
[`scale-info`](https://github.com/paritytech/scale-info) crate.

```json
"types": [
  {
    "id": 0,
    "type": {
      "def": {
        "primitive": "bool"
      }
    }
  }
]
```

Other parts of the metadata, such as the `storage` object, will reference individual
types from this type registry using the `id` key.

#### `version`
This indicates the version of the ABI format the generated metadata conforms to. This is
distinct from any concept of Rust's crate versioning.

```json
"version": "6"
```

### `user`
This is an _optional_ field used to add user-defined metadata. Some examples of things
you may want to include here:
- `moon_phase`: Phase of the moon during which the smart contract works.
- `favorite_blockchain`: The favorite blockchain of the contract authors (answer: Polkadot!).
````

## File: versioned_docs/version-v6/basics/contract-template.md
````markdown
---
title: Contract Template
hide_title: true
slug: /basics/contract-template
---

![Macro Title Picture](/img/title/macro.svg)

# Contract Template

On this page we'll go over the elements of a basic contract.

## Creating a template

Change into your working directory and run:

```bash
$ cargo contract new foobar
```

This will create a new project folder named `foobar`.

```bash
$ cd foobar/
```

In the `lib.rs` file you find initial scaffolded code, which you can use as a starting point.

Quickly check that it compiles, and the trivial tests pass with:

```bash
$ cargo test
```

Also check that you can build the contract by running:

```bash
$ cargo contract build
```

`cargo test` builds the contract for `std`, `cargo contract build` for an 
on-chain deployment (`no_std` with a RISC-V target).

If everything looks good, then we are ready to start programming!

## Template Content

The template contains scaffolded code that provides a starting point
for writing an ink! contract. In the following we'll take a look
at what the files contain.
The files you get locally will look similar, just that we added
explanatory comments here.

### `Cargo.toml`

```toml
[package]
name = "foobar"
version = "0.1.0"
authors = ["[your_name] <[your_email]>"]
edition = "2021"

[dependencies]
# The `ink` crate contains the ink! eDSL and re-exports
# a number of other ink! specific crates. For example,
# `ink::env` is the `ink_env` crate that contains functions
# to interact with a contract's environment (querying information
# about a caller, the current block number, etc.).
ink = { version = "6", default-features = false }

[dev-dependencies]
# This developer dependency is for the End-to-End testing framework.
ink_e2e = { path = "../../crates/e2e" }

[lib]
name = "foobar"
path = "lib.rs"

[features]
default = ["std"]
std = [
    "ink/std",
]
ink-as-dependency = []

# This feature is just a convention, so that the end-to-end tests
# are only executed if `cargo test` is explicitly invoked with
# `--features e2e-tests`.
e2e-tests = []
```

### `lib.rs`

Every ink! contract is required to contain:

* Exactly one `#[ink(storage)]` struct.
* At least one `#[ink(constructor)]` function.
* At least one `#[ink(message)]` function.

The scaffolded code will look similar to the following, we've
changed the comments though to explain what is going on there
on a high level.

```rust
// If the `std` feature from the `Cargo.toml` is not enabled
// we switch on `no_std`, this has the effect of Rusts standard
// library not being included in our contract.
//
// The Rust standard library is OS-dependent and Wasm is
// architecture independent.
#![cfg_attr(not(feature = "std"), no_std, no_main)]

// This is the ink! macro, the starting point for your contract.
// Everything below it might look like Rust code, but it is actually
// run through a parser in ink!.
#[ink::contract]
pub mod flipper {
    /// This is the contract's storage.
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// A constructor that the contract can be initialized with.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            /* --snip-- */
        }

        /// An alternative constructor that the contract can be
        /// initialized with.
        #[ink(constructor)]
        pub fn new_default() -> Self {
            /* --snip-- */
        }

        /// A state-mutating function that the contract exposes to the
        /// outside world.
        ///
        /// By default functions are private, they have to be annotated
        /// with `#[ink(message)]` and `pub` to be available from the
        /// outside.
        #[ink(message)]
        pub fn flip(&mut self) {
            /* --snip-- */
        }

        /// A public contract function that has no side-effects.
        ///
        /// Note that while purely reading functions can be invoked
        /// by submitting a transaction on-chain, this is usually
        /// not done as they have no side-effects and the transaction
        /// costs would be wasted.
        /// Instead those functions are typically invoked via RPC to
        /// return a contract's state.
        #[ink(message)]
        pub fn get(&self) -> bool {
            /* --snip-- */
        }
    }

    #[cfg(test)]
    mod tests {
        use super::*;

        /// This attribute denotes that the test is executed in
        /// a simulated, mocked blockchain environment. There are
        /// functions available to influence how the test environment
        /// is configured (e.g. setting an account to a specified balance).
        #[ink::test]
        fn default_works() {
            /* --snip-- */
        }

        /* --snip-- */
    }

    #[cfg(all(test, feature = "e2e-tests"))]
    mod e2e_tests {
        use super::*;
        use ink_e2e::build_message;

        type E2EResult<T> = std::result::Result<T, Box<dyn std::error::Error>>;

        /// With this attribute the contract will be compiled and deployed
        /// to a Substrate node that is required to be running in the
        /// background.
        ///
        /// We offer API functions that enable developers to then interact
        /// with the contract. ink! will take care of putting contract calls
        /// into transactions that will be submitted to the Substrate chain.
        ///
        /// Developers can define assertions on the outcome of their transactions,
        /// such as checking for state mutations, transaction failures or
        /// incurred gas costs.
        #[ink_e2e::test]
        async fn it_works(mut client: ink_e2e::Client<C, E>) -> E2EResult<()> {
            /* --snip-- */
        }

        /* --snip-- */
    }
}
```
````

## File: versioned_docs/version-v6/basics/gas.md
````markdown
---
title: Gas
slug: /basics/gas
hide_title: true
---

![Gas Title Picture](/img/title/gas.svg)

## What is "Gas" in ink!?

For ink!, the term Gas refers to the resources used by a contract call.
It's important for smart contracts that the caller has to pay for any utilized resource.

Those resources can be either storage space (for storing data in the contract's storage)
or computational time (for executing the contract and its logic). The term Gas encompasses both
of these resources: `Gas = (refTime, proofSize)`.

The terms hereby refer to:

`refTime`: The amount of computational time that can be used for execution, in picoseconds.

`proofSize`: The amount of storage in bytes that a transaction is allowed to read.

The term `refTime` comes from "reference time", referring to the Polkadot SDK Weights system, where
computation time is benchmarked on reference hardware. You can read more details
[here](https://docs.polkadot.com/polkadot-protocol/glossary/#weight).

The term `proofSize` is only relevant for parachains on the [Polkadot](https://polkadot.network/)
or [Kusama](https://kusama.network/) networks.
_It can be ignored for standalone chains (like [Aleph Zero](https://alephzero.org/))._
On a high level, `proofSize` is the size of the proof that individual parachains send to
the Polkadot or Kusama relay chain to allow re-executing their block for validation
(this is called Proof of Validity).
Phrased differently: Layer-1 chains send a proof of validity to a Layer-0 chain to validate the block.
This Proof of Validity contains everything necessary to execute the block -- the code of each contract
that is executed plus the storage each contract reads and writes.

:::info
Blockchains that support ink! are built using Polkadot SDK which uses the concept of Weight
to describe the usage of resources.
Specifically, the terms above come from the Polkadot SDK "Weights V2" system.
For ink!, Gas is a synonym to the concept called "Weight" in this SDK.
The Weights concept is similar to what smart contract developers might know from other
ecosystems, but is more fine grained. It also tracks the utilized bandwidth, not just
execution. For ink! smart contracts the utilized bandwidth is the `proofSize` explained above.

We decided on using the term "Gas" to make onboarding easier for developers from other
smart contract ecosystems. So: `Gas = Weight = (refTime, proofSize)`.
:::
````

## File: versioned_docs/version-v6/basics/selectors.md
````markdown
---
title: Selectors
hide_title: true
slug: /basics/selectors
---

![Selector Hex Title Picture](/img/title/selector-hex.svg)

# Selectors

Selectors in ink! are a language agnostic way of identifying constructors and messages.
They are four-byte hexadecimal strings which look something like: `0x633aa551`.

You can find the selector of an ink! constructor or message in your
[contract metadata](./metadata/metadata.md) by looking for the `selector` field of the dispatchable
you're interested in.

Here is an example of how you can grab the message name and selector from your contract
metadata using [`jq`](https://stedolan.github.io/jq/).

```bash
$ cat target/ink/flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"flip: 0x633aa551"
```

## Selector Calculation

If you do not have access to a contract's metadata, you can also calculate it yourself.

The algorithm ink! uses is fairly straightforward:
1. Get _just_ the name of the constructor or message
2. Compute the `BLAKE2` hash of the name
3. Take the first four bytes of the hash as the selector

Let's walk through a short example of what this looks like in practice. Consider the
following message:

```rust
#[ink(message)]
fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
    unimplemented!()
}
```

To calculate the selector we:
1. Grab the name of the message, `frobinate`
2. Compute `BLAKE2("frobinate") = 0x8e39d7f22ef4f9f1404fe5200768179a8b4f2b67799082d7b39f6a8ca82da8f1`
3. Grab the first four bytes, `0x8e39d7f2`

## Selector Calculation: ink! Traits

These rules change a bit if you define any messages using the `[ink::trait_definition]`
[macro](./trait-definitions.md). For our first step, instead of taking _just_ the
message name, we now also add the _trait name_ to the selector calculation.

```
cat target/ink/trait-flipper.json | jq '.spec.messages[0] | "\(.label): \(.selector)"'
"Flip::flip: 0xaa97cade"
```

Let's see what this would look like in practice. Consider the following trait:

```rust
#[ink::trait_definition]
pub trait Frobinate {
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool;
}

-- snip --

impl Frobinate for Contract {
    #[ink(message)]
    fn frobinate(&mut self, fro: bool, bi: u32, nate: AccountId) -> bool {
        unimplemented!()
    }
}
```

To calculate the selector we:
1. Grab the name of the trait **and** the name of the message, `Frobinate::frobinate`
2. Compute `BLAKE2("Frobinate::frobinate") = 0x8915412ad772b2a116917cf75df4ba461b5808556a73f729bce582fb79200c5b`
3. Grab the first four bytes, `0x8915412a`

:::tip

Don't worry if you're not able to calculate the `BLAKE2` hash of a string by hand. You
can use [Shawn's Substrate Utilities](https://www.shawntabrizi.com/substrate-js-utilities/)
to do it for you!

:::
````

## File: versioned_docs/version-v6/datastructures/mapping.md
````markdown
---
title: Working with Mapping
slug: /datastructures/mapping
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Working with Mapping

In this section we demonstrate how to work with ink! [`Mapping`](https://docs.rs/ink_storage/6.0.0/ink_storage/struct.Mapping.html).

Here is an example of a mapping from a user to a `Balance`:

```rust
#[ink(storage)]
pub struct MyContract {
    /// Assign a balance to every account.
    balances: ink::storage::Mapping<AccountId, Balance>,
}
```

This means that for a given key, you can store a unique instance of a value type. In this
case, each "user" gets credited their own balance.

## Example: Using a `Mapping`

The following example contract utilizes a `Mapping` so that anyone can deposit and withdraw
balance for their own account:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    use ink::storage::Mapping;

    #[ink(storage)]
    pub struct MyContract {
        /// Assign a balance to every account ID
        balances: Mapping<AccountId, Balance>,
    }

    impl MyContract {
        /// Constructor to initialize the contract with an empty mapping.
        #[ink(constructor, payable)]
        pub fn new() -> Self {
            let balances = Mapping::default();
            Self { balances }
        }

        /// Retrieve the balance of the caller.
        #[ink(message)]
        pub fn get_balance(&self) -> Option<Balance> {
            let caller = self.env().caller();
            self.balances.get(caller)
        }

        /// Credit more money to the contract.
        #[ink(message, payable)]
        pub fn transfer(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap_or(0);
            let endowment = self.env().transferred_value();
            self.balances.insert(caller, &(balance + endowment));
        }

        /// Withdraw all your balance from the contract.
        pub fn withdraw(&mut self) {
            let caller = self.env().caller();
            let balance = self.balances.get(caller).unwrap();
            self.balances.remove(caller);
            self.env().transfer(caller, balance).unwrap()
        }
    }
}

```

## Considerations when using the `Mapping` type

One of the main purposes of the ink! `Mapping` is to allow storing a lot of values.

:::note

There are many additional data structures accessible under `ink::prelude::collections`,
such as `HashMap` or `BTreeMap` (to name a few). Note that these data structures all exhibit
`Packed` storage loading behavior, as opposed to the ink! `Mapping`!

:::

### Storage loading behavior

Each `Mapping` value lives under it's own storage key. Briefly, this means that `Mapping`s
are lazily loaded in ink!. In other words, if your message only accesses a single key of a
mapping, it will not load the whole mapping but only the value being accessed.

```rust
// This causes only a single storage access and the decoding of a single "MyValue" struct,
// no matter how many elements there are inside the mapping.
let foo: MyValue = my_mapping.get(0)?;

for n in 0..5 {
    // This causes a storage access and a decoding operation for each loop iteration.
    // It is not possible to "fetch" all key/value pairs directly at once.
    let bar: MyValue = my_mapping.get(n)?;
}
```

Furthermore, it follows that mapping values do not have a contiguous storage layout, and it is
not possible to iterate over the contents of a map.


### Use fallible storage methods for dynamically sized values
Reading from or writing to a `Mapping` implies encoding or decoding
the according `Mapping` key and value. This happens transparently under the hood.
However, because the static buffer used to store the encoded data is of limited
size, it can fail and trap the contract.

:::note

The static buffer defaults to 16KB in size.

:::

This can be an issue for values with dynamically sized types.
It is recommended to use fallible storage methods (prefixed with `try_`) for
`Mapping`s containing dynamically sized values.

Consider a `Mapping` with `String` values like so:

```rust
#[ink(storage)]
pub struct MyContract {
    on_chain_log: Mapping<u64, String>,
    nonce: u64,
}
```

If the `String` overgrows the static buffer size, it will no longer fit into the mapping:

```rust
#[ink(message)]
pub fn do_something(&mut self, data: String) {
    let caller = self.env().caller();

    let log_message = format!("{caller:?}: {data}");

    // Panics if log_message overgrows the static buffer size!
    self.on_chain_log.insert(&self.nonce, &log_message);

    self.nonce += 1;
}
```

Instead, consider using the fallible `try_insert` method to handle the situation:

```rust
#[ink(message)]
pub fn do_something2(&mut self, data: String) {
    let caller = self.env().caller();

    let log_message = format!("{caller:?}: {data}");

    // `try_insert` will not panic but return an error instead.
    if self
        .on_chain_log
        .try_insert(&self.nonce, &log_message)
        .is_err()
    {
        // We get the chance to handle this problem properly:
        // Restrain the log message to a size guaranteed to fit.
        let log_message = format!("{caller:?}: <data omitted>");
        self.on_chain_log.insert(&self.nonce, &log_message);
    }

    self.nonce += 1;
}
```

We provide fallible `try_` versions for all storage operations on `Mapping`.

### Updating values

The attentive reader may have noticed that accessing mapping values via the `Mapping::get()`
method will result in an owned value (a local copy), as opposed to a direct reference
into the storage. Changes to this value won't be reflected in the contract's storage
"automatically". To avoid this common pitfall, the value must be inserted again at the same
key after it was modified. The `transfer` function from above example illustrates this:

```rust
pub fn transfer(&mut self) {
    let caller = self.env().caller();
    // `balance` is a local value and not a reference to the value on storage!
    let balance = self.balances.get(caller).unwrap_or(0);
    let endowment = self.env().transferred_value();
    // The following line of code would have no effect to the balance of the
    // caller stored in contract storage:
    //
    // balance += endowment;
    //
    // Instead, we use the `insert` function to write it back like so:
    self.balances.insert(caller, &(balance + endowment));
}
```
````

## File: versioned_docs/version-v6/datastructures/storage-in-metadata.md
````markdown
---
title: Storage Metadata Format
slug: /datastructures/storage-in-metadata
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

:::caution
This page has not yet been edited for ink! v6.
There are many mentions of `pallet-contracts` and its internals here.
This info needs to be checked for validity in `pallet-revive`.

We should also highlight that this is for the ink! Metadata Format.

TODO
:::

# Storage Metadata Format

The storage layout of a contract is reflected inside the metadata. It allows third-party
tooling to work with contract storage and can also help to better understand the storage
layout of any given contract.

Given a contract with the following storage:

```rust
#[ink(storage)]
pub struct MyContract {
    balance: Balance,
    block: BlockNumber,
    lazy: Lazy<bool>,
}
```

The storage will be reflected inside the metadata as like follows:

```json
"root": {
  "layout": {
    "struct": {
      "fields": [
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 0
            }
          },
          "name": "balance"
        },
        {
          "layout": {
            "leaf": {
              "key": "0x00000000",
              "ty": 1
            }
          },
          "name": "block"
        },
        {
          "layout": {
            "root": {
              "layout": {
                "leaf": {
                  "key": "0xb1f4904e",
                  "ty": 2
                }
              },
              "root_key": "0xb1f4904e"
            }
          },
          "name": "lazy"
        }
      ],
      "name": "MyContract"
    }
  },
  "root_key": "0x00000000"
}
```

We observe that the storage layout is represented as a tree, where tangible storage values
end up inside a `leaf`. Because of
[`Packed`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/trait.Packed.html)
encoding, leafs can share the same storage key, and
in order to reach them you'd need to fetch and decode the whole storage cell under this key.

A `root_key` is meant to either be used to directly access a `Packed` storage field
or to serve as the base key for calculating the actual keys needed to access values in
non-`Packed` fields (such as `Mapping`s).

## Storage key calculation for ink! `Mapping` values

Base storage keys are always 4 bytes in size. However, the storage API of the contracts
pallet supports keys of arbitrary length. In order to reach a mapping value, the storage
key of said value is calculated at runtime.

The formula to calculate the base storage key `S` used to access a mapping value under the
key `K` for a mapping with base key `B` can be expressed as follows:

```
S = scale::encode(B) + scale::encode(K)
```

Where the base key `B` is the `root_key` (of type `u32`) found in the contract metadata.

In words, SCALE encode the base (root) key of the mapping and concatenate it with the
SCALE encoded key of the mapped value to obtain the actual storage key used to
access the mapped value.

Given the following contract storage, which maps accounts to a balance:

```rust
#[ink(storage)]
pub struct Contract {
    roles: Mapping<AccountId, Balance, ManualKey<0x12345678>>,
}
```

Now let's suppose we are interested in finding the balance for the account 
`5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY`. The storage key is calculated as follows:

1. SCALE encode the base key of the mapping (`0x12345678u32`), resulting in `0x78563412`
2. SCALE encode the `AccountId`, which will be 
   `0xd43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.
   Note that you'll need to convert the SS58 into a `AccountId32` first.
3. Concatenating those two will result in the key 
   `0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d`.

```rust
let account_id = "5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY";
let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
let storage_key = &(0x12345678u32, account).encode();
println!("0x{}", hex::encode(storage_key));
// 0x78563412d43593c715fdd31c61141abd04a99fd6822c8558854ccde39a5684e7a56da27d
```

## Accessing storage items with the `contractsApi` runtime call API

There are two ways to query for storage fields of smart contracts from outside a contract.
Both methods are accessible via the [`polkadot-js`](https://polkadot.js.org/apps/) web UI.

The straight forward way to query a contracts storage is via a
[`runtime API`](https://polkadot.js.org/apps/#/runtime) call, using the `contractsApi`
endpoint provided by the contracts pallet. The endpoint provides a `getStorage` method,
which just expects a contract address and a storage key as arguments.

For example, to access the root storage struct under the key `0x00000000` of a contract,
just specify the contract's address and the storage key `0x00000000` as-is. The API call
will return the scale-encoded root storage struct of the contract.

## Accessing storage items with the `childState` RPC call API

Under the hood, each contract gets its own
[child trie](https://paritytech.github.io/substrate/master/frame_support/storage/child/index.html), where its storage items are actually stored.

Additionally, the contracts pallet uses the
[`Blake2 128 Concat`](https://paritytech.github.io/substrate/master/frame_support/struct.Blake2_128Concat.html)
[`Transparent hashing algorithm`](https://docs.substrate.io/build/runtime-storage/#transparent-hashing-algorithms)
to calculate storage keys for any stored item inside the child trie.
You'll need to account for that as well.

With that in mind, to directly access storage items of any on-chain contract using a
childState [`RPC call`](https://polkadot.js.org/apps/#/rpc), you'll need the following:
- The child trie ID of the contract, represented as a [`PrefixedStorageKey`](https://docs.rs/sp-storage/10.0.0/sp_storage/struct.PrefixedStorageKey.html)
- The hashed storage key of the storage field

### Finding the contracts child trie ID

The child trie ID is the `Blake2_256` hash of the contracts instantiation nonce
concatenated to it's `AccountId`. You can find it in
[`polkadot-js chainstate query interface`](https://polkadot.js.org/apps/#/chainstate),
where you need to execute the `contracts_contractInfoOf` state query.

It can also be calculate manually according to the following code snippet. The
instantiation note of the contract must be still be known. You can get it using the
`contracts_nonce` chain state query in polkadot-js UI.

```rust
use sp_core::crypto::Ss58Codec;
use parity_scale_codec::Encode;

// Given our contract ID is 5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4
let account: AccountId32 =
    Ss58Codec::from_string("5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4").unwrap();
// Given our instantiation nonce was 1
let nonce: u64 = 1;

// The child trie ID can be calculated as follows:
let trie_id = (&account, nonce).using_encoded(Blake2_256::hash);
```

### Calculate the `PrefixedStorageKey` from the child trie ID
A `PrefixedStorageKey` based on the child trie ID can be constructed using the `ChildInfo`
primitive as follows:

```rust
use sp_core::storage::ChildInfo;
let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
```

### Calculate the storage key using transparent hashing

Finally, we calculate the hashed storage key of the storage item we are wanting to access.
The algorithm is simple: `Blake2_128` hash the storage key and then concatenate the unhashed
key to the hash. Given you want to access the storage item under the `0x00000000`,
it will look like this in code:

```rust
use frame_support::Blake2_128Concat;

// The base key is 0x00000000
let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
```

### A full example

Let's recap the last few paragraphs into a full example. Given:

* A contract at address `5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4`
* With instantiation nonce of `1`
* The root storage struct is to be found at base key `0x00000000`

The following Rust program demonstrates how to calculate the `PrefixedStorageKey` of the
contracts child trie, as well as the hashed key for the storage struct, which can then be
used with the `chilstate` RPC endpoint function `getStorage` in polkadot-js to receive
the root storage struct of the contract:

```rust
use frame_support::{sp_runtime::AccountId32, Blake2_128Concat, Blake2_256, StorageHasher};
use parity_scale_codec::Encode;
use sp_core::{crypto::Ss58Codec, storage::ChildInfo};
use std::ops::Deref;

fn main() {
    // Find the child storage trie ID
    let account_id = "5DjcHxSfjAgCTSF9mp6wQBJWBgj9h8uh57c7TNx1mL5hdQp4";
    let account: AccountId32 = Ss58Codec::from_string(account_id).unwrap();
    let instantiation_nonce = 1u64;
    let trie_id = (account, instantiation_nonce).using_encoded(Blake2_256::hash);
    assert_eq!(
        hex::encode(trie_id),
        "2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b"
    );

    // Calculate the PrefixedStorageKey based on the trie ID
    let prefixed_storage_key = ChildInfo::new_default(&trie_id).into_prefixed_storage_key();
    println!("0x{}", hex::encode(prefixed_storage_key.deref()));
    // 0x3a6368696c645f73746f726167653a64656661756c743a2fa252b7f996d28fd5d8b11098c09e56295eaf564299c6974421aa5ed887803b

    // Calculate the storage key using transparent hashing
    let storage_key = Blake2_128Concat::hash(&[0, 0, 0, 0]);
    println!("0x{}", hex::encode(&storage_key));
    // 0x11d2df4e979aa105cf552e9544ebd2b500000000
}
```
````

## File: versioned_docs/version-v6/debugging/decoding.md
````markdown
---
title: Decode raw transactions
slug: /contract-debugging/decoding-transactions
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Decode Data Payload

You can use a block explorer (or an app like Polkadot.js) to retrieve the data
payload of a contract transaction. [cargo-contract](https://github.com/use-ink/cargo-contract) supports decoding
this data.

```bash
# From your contract directory
$ cargo contract decode message -d fe5bd8ea01000000
```

This command will output the method name and parameters encoded in the data payload:

```
Decoded data: inc_by { n: 1 }
```

If the contract was called through a cross-contract interaction, the payload will not be available in the transaction. In such cases, you can use the approach described in the next section to access it.
````

## File: versioned_docs/version-v6/debugging/events.md
````markdown
---
title: Debug Events
slug: /contract-debugging/debug-events
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Emit debugging events

The idea here is to add a feature to your contract's `Cargo.toml`. You can 
name it e.g. `debug`.
In your contract you would then emit debug information if the flag is set.

This allows for emitting debug events in the contract, that can be checked 
for in your tests.

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod debugging_strategies {
    #[cfg(feature = "debug")]
    use ink::prelude::{
        borrow::ToOwned,
        format,
        string::String,
    };

    #[ink::event]
    #[cfg(feature = "debug")]
    pub struct DebugEvent {
        message: String,
    }

    #[ink(storage)]
    #[derive(Default)]
    pub struct DebuggingStrategies {}

    impl DebuggingStrategies {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self {}
        }

        #[ink(message)]
        pub fn get(&self) {
            #[cfg(feature = "debug")]
            self.env().emit_event(DebugEvent {
                message: format!("received {:?}", self.env().transferred_value())
                    .to_owned(),
            });
            // …
        }
    }
}
```

This event will be shown when you call a contract. You can also access it in E2E tests:

```rust
#[ink_e2e::test(features = ["debug"])]
async fn e2e_debugging_event_emitted<Client: E2EBackend>(
    mut client: Client,
) -> E2EResult<()> {
    // given
    // create contract
    /* --snip-- */

    // when
    // call contract
    /* --snip-- */

    // then
    // the contract wil have emitted an event
    let contract_events = call_res.contract_emitted_events()?;
    assert_eq!(1, contract_events.len());
    let contract_event = &contract_events[0];
    let debug_event: DebugEvent =
        ink::scale::Decode::decode(&mut &contract_event.event.data[..])
            .expect("encountered invalid contract event data buffer");
    assert_eq!(debug_event.message, "received 0");

    Ok(())
}
```

We've put the above into a complete example. You can see the full source code
[here](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies/lib.rs).
````

## File: versioned_docs/version-v6/debugging/overview.md
````markdown
---
title: Overview
slug: /contract-debugging/
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Overview

On a high-level there are two workflows for debugging your contract:

* You can write tests using one of the mechanisms described on the
  [Contract Testing](./overview.md) page.
* You can interact with your contract via a UI or command-line. The  
  workflow is described on the [Call Your Contract](../getting-started/calling.md) page.

In each of those two options you have access to more detailed debugging
information. 

In this chapter we'll examine different debugging techniques using these
two workflows.
````

## File: versioned_docs/version-v6/debugging/pre-compiles.md
````markdown
---
title: Pre-compiles
slug: /contract-debugging/pre-compiles
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Pre-compile

We don't have any examples for debugging with pre-compiles yet. 

Our intention is to add an explanation here, once the pre-compile API 
in `pallet-revive` is released.

The overarching with pre-compiles for debugging is to implement one that 
outputs log information to the node process console (`stdout` or `stderr`).
This pre-compile could then be called from within an ink! contract.
````

## File: versioned_docs/version-v6/debugging/return_value.md
````markdown
---
title: Return value
slug: /contract-debugging/return-value
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Return an error message

You can return a specific error message from your contract via 
[`ink::return_value(REVERT, err);`](https://docs.rs/ink_env/5.1.1/ink_env/fn.return_value.html).

If you do a dry-run of the contract call, you can read this data.


You cannot read the data if you submit the extrinsic on-chain
(i.e. execute the contract call "for real", on-chain). This is because extrinsic 
do not return data. They are executed in a transaction pool, asynchronous.

Furthermore, since you "REVERT" the transaction, it will just fail with
`ExtrinsicFailed`.

Here's an example:

```rust
#[ink::message]
fn get(&self) {
    ink::return_value(
        ink::env::ReturnFlags::REVERT,
        format!("received {:?}", self.env().transferred_value()).as_bytes();
    );
}
```

We've put the above into a complete example. You can see the full source code
[here](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies/lib.rs).
````

## File: versioned_docs/version-v6/debugging/sandbox.md
````markdown
---
title: Sandbox
slug: /contract-debugging/sandbox
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Sandbox API

In the chapter on [Testing Strategies](../testing/sandbox.md), we explain that ink! supports
two means of End-to-End testing:

* `#[ink_e2e::test]`:
  The End-to-End tests spawn a local node process in the backend
  and submit transactions against it, returning the output to you.

* `#[ink_e2e::test(backend(runtime_only))]` 
  With these settings, the End-to-End tests will be executed in
  a sandbox. The sandbox contains the `pallet-revive`, but anything
  that the node would do is mocked and can be influenced (block numbers, etc.).

You can utilize the DRink! library that is described on
[Testing Strategies](../testing/sandbox.md) to influence the state of the mocked 
sandbox. This is very useful for debugging, and we invite you to read the linked page.
````

## File: versioned_docs/version-v6/debugging/tracing.md
````markdown
---
title: Tracing API
slug: /contract-debugging/pallet-revive-tracing-api
hide_title: true
---

![Magnifying Glass Title Picture](/img/title/magnifying-glass.svg)

# Tracing APIs

The [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src) 
has implemented a tracing API.
This is what the Ethereum-debugging tools use when interacting with `pallet-revive`.

You can utilize the tracing API in your E2E tests:

```rust
/// This test illustrates how to use the `pallet-revive` tracing functionality.
#[ink_e2e::test]
async fn e2e_tracing<Client: E2EBackend>(mut client: Client) -> E2EResult<()> {
    // given
    let mut constructor = DebuggingStrategiesRef::new();
    let contract = client
        .instantiate("debugging_strategies", &ink_e2e::bob(), &mut constructor)
        .submit()
        .await
        .expect("instantiate failed");
    let call_builder = contract.call_builder::<DebuggingStrategies>();

    let call = call_builder.instantiate_and_call(contract.code_hash);
    let call_res = client
        .call(&ink_e2e::alice(), &call)
        .value(1_337_000_000)
        .submit()
        .await?;

    // when
    let trace: ink_e2e::CallTrace = call_res.trace.expect("trace must exist");
    assert_eq!(trace.calls.len(), 2);
    // This is how the object looks:
    // ```
    // CallTrace {
    //     from: 0x9621dde636de098b43efb0fa9b61facfe328f99d,
    //     gas: 1497105168000,
    //     gas_used: 1548337586000,
    //     to: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,
    //     input: Bytes(
    //         0x829da98747d85e35d0b3ca3c7ceeac09b63ec2754e6a05eb6d2d5b92fb916da126364dd4,
    //     ),
    //     output: Bytes(0x0001),
    //     error: None,
    //     revert_reason: None,
    //     calls: [
    //         CallTrace {
    //             from: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,
    //             gas: 711404887000,
    //             gas_used: 205987649000,
    //             to: 0xfd8bf44f34a2d2cec42b8ab31ede1bb1bc366e8e,
    //             input: Bytes(0x9bae9d5e),
    //             output: Bytes(0x0000),
    //             error: None,
    //             revert_reason: None,
    //             calls: [],
    //             logs: [],
    //             value: Some(0),
    //             call_type: Call,
    //         },
    //         CallTrace {
    //             from: 0xd71ff7085ed0e3e8b6c8e95eb6094f4311ae8e2f,
    //             gas: 124370129000,
    //             gas_used: 163567881000,
    //             to: 0xfd8bf44f34a2d2cec42b8ab31ede1bb1bc366e8e,
    //             input: Bytes(0x2f865bd9),
    //             output: Bytes(0x0001),
    //             error: None,
    //             revert_reason: None,
    //             calls: [],
    //             logs: [],
    //             value: Some(0),
    //             call_type: Call,
    //         },
    //     ],
    //     logs: [],
    //     value: Some(0),
    //     call_type: Call,
    // }
    // ```

    // then
    #[allow(non_upper_case_globals)]
    const NativeToEthRatio: u128 = 1_000_000; // todo add to environment
    assert_eq!(
        trace.value,
        Some(ink::U256::from(1_337_000_000 * NativeToEthRatio))
    );

    Ok(())
}
```

We've put the above into a complete example. You can see the full source code
[here](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies/lib.rs).
````

## File: versioned_docs/version-v6/getting-started/cargo-contract.md
````markdown
---
title: Install cargo-contract
slug: /cargo-contract-cli
---

`cargo-contract` is a command-line (CLI) tool that helps you set up and manage
smart contracts written with ink!.

The tool has a number of handy capabilities:

```
$ cargo contract       
Utilities to develop ink! smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new              Setup and create a new smart contract project
  build            Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check            Check that the code builds for PolkaVM; does not output any `<name>.contract` artifact to the `target/` directory
  upload           Upload contract code
  instantiate      Instantiate a contract
  call             Call a contract
  account          Account handling and information
  encode           Encodes a contracts input calls and their arguments
  decode           Decodes a contracts input or output data (supplied in hex-encoding)
  remove           Remove contract code
  info             Display information about a contract
  storage          Inspect the on-chain storage of a contract
  verify           Verifies that a given contract binary matches the build result of the specified workspace
  generate-schema  Generates schema from the current metadata specification
  verify-schema    Verify schema from the current metadata specification
  rpc              Make a raw RPC call
  help             Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version
```

## Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

You can then use `cargo contract --help` to start exploring the commands made available to you.

## Usage

In order to initialize a new ink! project you can use:

```bash
$ cargo contract new flipper
```

This will create a folder `flipper` in your work directory.
The folder contains a scaffold `Cargo.toml` and a `lib.rs`, which both contain the necessary building blocks for using ink!.

The `lib.rs` contains our hello world contract ‒ the `Flipper`, which we explain in the next section.

In order to build the contract just execute these commands in the `flipper` folder:

```bash
$ cargo contract build
```

As a result you'll get the file `target/flipper.contract`. It's a JSON which bundles the contract's
metadata and its RISC-V binary blob. This file needs to be used when deploying the contract.
You additionally get the individual `target/flipper.polkavm` and `target/flipper.json` in the folder as well.
The `.polkavm` extension is used because the interpreter for the RISC-V bytecode
is a component called [PolkaVM](http://github.com/paritytech/polkavm).
````

## File: versioned_docs/version-v6/getting-started/compiling.md
````markdown
---
title: Compile your contract
slug: /getting-started/building-your-contract
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Cargo Contract Title Picture](/img/title/cargo-contract.svg)

# Compile Your Contract

Run the following command in your `flipper` directory to compile your smart contract:

```bash
$ cargo contract build
```

This command will build the following for your contract: 
a binary, a metadata file (which contains the
contract's ABI) and a `.contract` file which bundles both.

In principle, you can also build your contract using just the normal Rust build workflow
(`cargo build`). We'll use `cargo-contract` though, as it invokes `cargo build` with an
optimal set of flags.

If all goes well, you should see a `target` folder that contains these files:

```
target
  └─ ink
    └─ flipper.polkavm     <-- Raw contract binary
    └─ flipper.json        <-- Metadata for the contract
    └─ flipper.contract    <-- JSON file that combines binary + metadata
```

You can think of "Metadata" this way: the raw `.polkavm` binary contains just
the bytecode of your contract. Without further information it's
not possible to know what this bytecode refers to. For example,
which functions can be called in there or what their arguments
are. This additional information that describes what the raw binary
is about is called metadata — data that describes other data.

<p>
    <img src={useBaseUrl('/img/metadata-polkavm.svg')} />
</p>

The purpose of each file is:

* `flipper.polkavm`: This is the raw contract bytecode that will be deployed on-chain.
* `flipper.json`: The isolated metadata, which is not stored on-chain.
It's big and would take up too much space and costs.
This file is used by e.g. a dApp user interface to know how to communicate with the on-chain contract.
* `flipper.contract`: Combines both the contract's bytecode and the metadata. This file
is used when you are using `cargo-contract` to interact with a contract
or when you use a developer UI like [Contracts UI](https://ui.use.ink).

Let's take a look at the structure of the `flipper.json`:

```json
{
  "source": {...},
  "contract": {...},
  "spec": {
    "constructors": [...],
    "docs": [],
    "events": [],
    "messages": [...],
  },
  "storage": {...},
  "types": [...],
  "version": "6"
}
```

This file describes all the interfaces that can be used to interact with your contract:

* `types` provides the custom *data types* used throughout the rest of the JSON.
* `storage` defines all the *storage* items managed by your contract and how to ultimately access them.
* `spec` stores information about the callable functions like *constructors* and *messages* a
user can call to interact with the contract. It also has helpful information like the *events*
that are emitted by the contract or any *docs*.
  
If you look closely at the constructors and messages, you will also notice a `selector` which
contains a 4-byte hash of the function name. This selector is used to route your contract calls to the correct
functions.

You can open up the `flipper.contract` file in any text editor. You'll notice that it's
nearly the same as the `flipper.json`. The only difference is that the `.contract` file contains
an additional field with the hex-encoded binary of your contract:

```json
{
    "source": {
        …
        "contract_binary": "0x006173…",
    },
    …
}
```

:::info
Pipe the `flipper.json` through [`jq`](https://jqlang.org/) to pretty-print it: `cat flipper.json | jq`.
:::

## Debug vs. Release Build

By default, `cargo-contract` builds the contract in debug mode. This means
that debugging information will be preserved.
If you e.g. panic like this:

```rust
self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {
    panic!("Failed to `set_code_hash` to {code_hash:?} due to {err:?}")
});
```

The return value of a contract during a dry-run will contain this textual panic message.
To support functionality like this the debug build of a contract includes some
heavy-weight logic which increases the contract's size.

For contracts that are supposed to run in production you should always build the
contract with `--release`:

```bash
$ cargo contract build --release
```

This will ensure that nothing unnecessary is compiled into the binary blob, making
your contract faster and cheaper to deploy and execute.

:::info
With this behavior `cargo-contract` mirrors how `cargo` behaves for Rust programs:
the `--release` flag has to be passed explicitly to `cargo build`.
:::
````

## File: versioned_docs/version-v6/getting-started/creating.md
````markdown
---
title: Create an ink! Project
slug: /getting-started/creating-an-ink-project
hide_title: true
---

![Heart Title Picture](/img/title/heart.svg)

# Creating an ink! Project

ink! is an [Embedded Domain Specific Language](https://wiki.haskell.org/Embedded_domain_specific_language) (eDSL):
a domain-specific language of the Rust programming language.
That means:

* we allow only a subset of the Rust programming language features to be used
  for writing smart contracts. For example, it is not possible do any 
  multi-threading operations or access the web.
* we provide annotations, macros, and primitives that are needed when writing
  smart contracts. For example, annotations on what the smart contract's storage
  struct is or what an event is.

ink! is just standard Rust in a well-defined "contract format" with specialized `#[ink(…)]` attribute macros. These attribute macros tell ink! what the different parts of your Rust smart contract represent, and ultimately allow ink! to do all the magic needed to create Polkadot SDK compatible RISC-V bytecode!

## Create a new project
Use the ink! CLI to generate an initial smart contract with some scaffolding code.

Make sure you are in your working directory, and then run:

```bash
$ cargo contract new flipper
```

This command will create a new project folder named `flipper` with this content:

```
flipper
  └─ lib.rs         <-- Contract Source Code
  └─ Cargo.toml     <-- Rust Dependencies and ink! Configuration
  └─ .gitignore
```

## Contract Source Code

For the `lib.rs` file, `cargo-contract` automatically generates the source code for the "Flipper" contract, which is about the simplest "smart" contract you can build. You can take a sneak peak as to what will come by looking at the source code here:
[Flipper Example Source Code](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

The Flipper contract is nothing more than a `bool` which gets flipped from `true` to `false` through the `flip()` function. 

## Testing Your Contract

At the bottom of the `lib.rs` you'll see some simple test cases which verify the functionality of the contract.
We can quickly test this code is functioning as expected:

```bash
$ cargo test
```

To which you should see a successful test completion:

```bash
$ cargo test
running 2 tests
test flipper::tests::it_works ... ok
test flipper::tests::default_works ... ok

test result: ok. 2 passed; 0 failed; 0 ignored; 0 measured; 0 filtered out
```

Now that we are feeling confident things are working, we can actually compile this contract to a RISC-V binary in the next step.
````

## File: versioned_docs/version-v6/getting-started/deploying.md
````markdown
---
title: Deploy your contract
slug: /getting-started/deploy-your-contract
hide_title: true
---

![Rocket Title Picture](/img/title/rocket.svg)

# Deploy Your Contract

Now that we have generated the contract binary from our source code and connected to a local node, we want
to deploy this contract onto our local node.

Smart contract deployment on `pallet-revive` is a little different than on traditional smart contract
blockchains.

Whereas a completely new blob of smart contract source code is deployed each time you push a
contract on other platforms, `pallet-revive` opts to optimize this behavior. For example, the standard
ERC20 token has been deployed to Ethereum thousands of times, sometimes only with changes to the
initial configuration (through the Solidity `constructor` function). Each of these instances take
up space on the blockchain equivalent to the contract source code size, even though no code was
actually changed.

For `pallet-revive`, the contract deployment process is split into two steps:

1. Putting your contract code on the blockchain
2. Creating an instance of your contract

With this pattern, contract code like the ERC20 standard can be put on the blockchain one single
time, but instantiated any number of times. No need to continually upload the same source code over
and waste space on the blockchain.

## Using the Contracts UI

:::caution
This section on the Contracts UI has not yet been updated to ink! v6.

TODO @peterwht Please review this section.
:::

### 1. Upload Contract Code

Here we will upload the contract code and instantiate one copy of the contract on the blockchain
(which is usually why we upload the contract code in the first place):

- Go to https://ui.use.ink
- Click the **Add New Contract** button in the sidebar.
- Click the **Upload New Contract Code** button in the Add New Contract page.
- Choose an **Instantiation account** (e.g. ALICE).
- Give the contract a descriptive **Name** (e.g. Flipper Contract).
- Drag the `flipper.contract` file that contains the bundled binary blob and metadata into the drag
  & drop area. You will see the UI parse the metadata and enabling the button that takes you to the next step.
- Click the **Next** button

![Flipper Instantiate Contract 01](/img/contracts-ui-0.png)

### 2. Instantiate a Contract on the Blockchain

Smart contracts exist as an extension of the account system on the blockchain. Thus creating an
instance of this contract will create a new `AccountId` which will store any balance managed by the
smart contract and allow us to interact with the contract.

Now a screen displays the information that represents our smart contract. We are going to
instantiate a copy of the smart contract:

- Accept the default options for the contract **Deployment Constructor**.
- Accept the default options **Max Gas Allowed** of `200000`.
- Click on `Next`

![Flipper Instantiate Contract 02](/img/contracts-ui-1.png)

The transaction is now queued, review your data and click **Upload and Instantiate** or go back and modify your inputs.

![Flipper Instantiate Contract 03](/img/contracts-ui-2.png)

When you click **Upload and Instantiate** you should see
the extrinsic `instantiateWithCode` is processing, and a flurry of events appear including the
creation of a new account (`system.NewAccount`) and the instantiation of the contract
(`contracts.Instantiated`).
You will be redirected to a new page, where you can interact with the newly created contract instance.

![Flipper Instantiate Success](/img/contracts-ui-3.png)

## Using `cargo-contract`

Contracts can be deployed via the command-line as well. With `cargo-contract`
it's just a simple sequence of:

```bash
$ cargo contract build
$ cargo contract instantiate --suri //Alice --args true
```
````

## File: versioned_docs/version-v6/macros-attributes/chain-extension.md
````markdown
---
title: "#[ink::chain_extension]"
slug: /macros-attributes/chain-extension
hide_title: true
---

![Text/chain Ext Title Picture](/img/title/text/chain-ext.svg)

:::caution
This page has not yet been edited for ink! v6 yet.

TODO 
:::

In the default configuration of the `contracts-pallet` a smart contract can only interact with the runtime
via its well defined set of basic smart contract interface functions. This API already allows a whole variety of
interaction between the `contracts-pallet` and the executed smart contract. For example it is possible
to call and instantiate other smart contracts on the same chain, emit events, query context information
or run built-in cryptographic hashing procedures.

If this basic set of features is not enough for a particular Polkadot SDK built blockchain it is possible
to easily extend this API using the so-called chain extension feature.

<center>
  <img src="/img/venn.png" width="50%" />
</center>

With chain extensions you can expose parts of your runtime logic
to smart contract developers.

:::note
The ink! examples repository contains [the `rand-extension` example](https://github.com/use-ink/ink-examples/tree/main/rand-extension).
This is a complete example of a chain extension implemented in both ink! and Polkadot SDK.
:::

## Structure

The interface consists of an error code that indicates lightweight errors
as well as the definition of some chain extension methods.

The overall structure follows that of a simple Rust trait definition.
The error code is defined as an associated type definition of the trait definition.
The methods are defined as associated trait methods without implementation.

Chain extension methods must not have a `self` receiver such as `&self` or `&mut self`
and must have inputs and output that implement SCALE codec. Their return value follows
specific rules that can be altered using the `handle_status` attribute and
alternation between  `Result` and Non-`Result` types which are described in more detail below.

## Usage

Usually the chain extension definition using this proc. macro is provided
by the author of the chain extension in a separate crate.
ink! smart contracts using this chain extension simply depend on this crate
and use its associated environment definition in order to make use of
the methods provided by the chain extension.

## Macro Attributes

The macro supports only one required argument: `extension = N: u16`.
The runtime may have several chain extensions at the same time. The `extension`
identifier points to the corresponding chain extension in the runtime.
The value should be the same as during the definition of the chain extension.
You can consult the 
[chain extension module documentation](https://paritytech.github.io/polkadot-sdk/master/pallet_contracts/chain_extension/index.html)
if you are unsure how to find the chain extension code.
Otherwise, you should consult the target chain's documentation 
for specifications of any chain extensions it exposes.

:::note
If the chain extension is not used in a tuple in the runtime configuration, 
`extension = N: u16` can take any `u16` number.
:::

## Method Attributes

There are two different attributes with which the chain extension methods
can be flagged:

| Attribute | Required | Default Value | Description |
|:----------|:--------:|:--------------|:-----------:|
| `ink(function = N: u16)` | Yes | - | Determines the unique function ID within the chain extension. |
| `ink(handle_status = flag: bool)` | Optional | `true` | Assumes that the returned status code of the chain extension method always indicates success and therefore always loads and decodes the output buffer of the call. |

As with all ink! attributes multiple of them can either appear in a contiguous list:

```rust
type Access = i32;

#[ink::chain_extension(extension = 12)]
pub trait MyChainExtension {
    type ErrorCode = i32;

    #[ink(function = 5, handle_status = false)]
    fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

…or as multiple standalone ink! attributes applied to the same item:

```rust
type Access = i32;

#[ink::chain_extension(extension = 12)]
pub trait MyChainExtension {
  type ErrorCode = i32;

  #[ink(function = 5)]
  #[ink(handle_status = false)]
  fn key_access_for_account(key: &[u8], account: &[u8]) -> Access;
}
```

## Details: `handle_status`

Default value: `true`

By default all chain extension methods should return a `Result<T, E>` where `E: From<Self::ErrorCode>`.
The `Self::ErrorCode` represents the error code of the chain extension.
This means that a smart contract calling such a chain extension method first queries the returned
status code of the chain extension method and only loads and decodes the output if the returned
status code indicates a successful call.
This design was chosen as it is more efficient when no output besides the error
code is required for a chain extension call. When designing a chain extension try to utilize the
error code to return errors and only use the output buffer for information that does not fit in
a single `u32` value.

A chain extension method that is flagged with `handle_status = false` assumes that the returned error code
will always indicate success. Therefore it will always load and decode the output buffer and loses
the `E: From<Self::ErrorCode` constraint for the call.

Note that if a chain extension method does not return `Result<T, E>` where `E: From<Self::ErrorCode>`,
but `handle_status = true` it will still return a value of type `Result<T, Self::ErrorCode>`.

## Usage: `handle_status` + `Result<T, E>` return type

Use both `handle_status = false` and non-`Result` return type for the same chain extension method
if a call to it may never fail and never returns a `Result` type.

## Combinations

Due to the possibility to flag a chain extension method with `handle_status` and either (1) return `Result<T, E>`
or (2) return just `T`
there are 4 different cases with slightly varying semantics:

| `handle_status` | Returns `Result<T, E>` | Effects |
|:---------------:|:----------------:|:--------|
|`true` |`true` | The chain extension method is required to return a value of type `Result<T, E>` where `E: From<Self::ErrorCode>`. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. |
|`true` |`false`| The chain extension method may return any non-`Result` type. A call will always check if the returned status code indicates success and only then will load and decode the value in the output buffer. The actual return type of the chain extension method is still `Result<T, Self::ErrorCode>` when the chain extension method was defined to return a value of type `T`. |
|`false`|`true` | The chain extension method is required to return a value of type `Result<T, E>`. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |
|`false`|`false`| The chain extension method may return any non-`Result` type. A call will always assume that the returned status code indicates success and therefore always load and decode the output buffer directly. |

## Error Code

Every chain extension defines exactly one `ErrorCode` using the following syntax:

```rust
#[ink::chain_extension]
pub trait MyChainExtension {
    type ErrorCode = MyErrorCode;

    // more definitions ...
}
```

The defined `ErrorCode` must implement `FromStatusCode` which should be implemented as a
more or less trivial conversion from the `u32` status code to a `Result<(), Self::ErrorCode>`.
The `Ok(())` value indicates that the call to the chain extension method was successful.

By convention an error code of `0` represents success.
However, chain extension authors may use whatever suits their needs.

## Example: Definition

In the below example a chain extension is defined that allows its users to read and write
from and to the runtime storage using access privileges:

```rust
/// Custom chain extension to read to and write from the runtime.
#[ink::chain_extension(extension = 12)]
pub trait RuntimeReadWrite {
    type ErrorCode = ReadWriteErrorCode;

    /// Reads from runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<Vec<u8>, Self::ErrorCode>`.
    #[ink(function = 1, returns_result = false)]
    fn read(key: &[u8]) -> Vec<u8>;

    ///
    /// Reads from runtime storage.
    ///
    /// Returns the number of bytes read and up to 32 bytes of the
    /// read value. Unused bytes in the output are set to 0.
    ///
    /// # Errors
    ///
    /// If the runtime storage cell stores a value that requires more than
    /// 32 bytes.
    ///
    /// # Note
    ///
    /// This requires `ReadWriteError` to implement `From<ReadWriteErrorCode>`
    /// and may potentially return any `Self::ErrorCode` through its return value.
    #[ink(function = 2)]
    fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;

    /// Writes into runtime storage.
    ///
    /// # Note
    ///
    /// Actually returns a value of type `Result<(), Self::ErrorCode>`.
    #[ink(function = 3)]
    fn write(key: &[u8], value: &[u8]);

    /// Returns the access allowed for the key for the caller.
    ///
    /// # Note
    ///
    /// Assumes to never fail the call and therefore always returns `Option<Access>`.
    #[ink(function = 4, handle_status = false)]
    fn access(key: &[u8]) -> Option<Access>;

    /// Unlocks previously acquired permission to access key.
    ///
    /// # Errors
    ///
    /// If the permission was not granted.
    ///
    /// # Note
    ///
    /// Assumes the call to never fail and therefore does _NOT_ require `UnlockAccessError`
    /// to implement `From<Self::ErrorCode>` as in the `read_small` method above.
    #[ink(function = 5, handle_status = false)]
    fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum ReadWriteErrorCode {
  InvalidKey,
  CannotWriteToKey,
  CannotReadFromKey,
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum ReadWriteError {
  ErrorCode(ReadWriteErrorCode),
  BufferTooSmall { required_bytes: u32 },
}

impl From<ReadWriteErrorCode> for ReadWriteError {
  fn from(error_code: ReadWriteErrorCode) -> Self {
    Self::ErrorCode(error_code)
  }
}

impl From<scale::Error> for ReadWriteError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub struct UnlockAccessError {
  reason: String,
}

impl From<scale::Error> for UnlockAccessError {
  fn from(_: scale::Error) -> Self {
    panic!("encountered unexpected invalid SCALE encoding")
  }
}

#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Access {
  ReadWrite,
  ReadOnly,
  WriteOnly,
}

impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
  fn from_status_code(status_code: u32) -> Result<(), Self> {
    match status_code {
      0 => Ok(()),
      1 => Err(Self::InvalidKey),
      2 => Err(Self::CannotWriteToKey),
      3 => Err(Self::CannotReadFromKey),
      _ => panic!("encountered unknown status code"),
    }
  }
}
```

All the error types and other utility types used in the chain extension definition
above are often required to implement various traits such as SCALE's `Encode` and `Decode`
as well as `scale-info`'s `TypeInfo` trait.

A full example of the above chain extension definition can be seen
[here](https://github.com/use-ink/ink/blob/017f71d60799b764425334f86b732cc7b7065fe6/crates/lang/macro/tests/ui/chain_extension/simple.rs).

## Example: Environment

In order to allow ink! smart contracts to use the above defined chain extension it needs
to be integrated into an `Environment` definition as shown below:

```rust
type RuntimeReadWrite = i32;

use ink::env::{Environment, DefaultEnvironment};

pub enum CustomEnvironment {}

impl Environment for CustomEnvironment {
    const MAX_EVENT_TOPICS: usize =
        <DefaultEnvironment as Environment>::MAX_EVENT_TOPICS;

    type AccountId = <DefaultEnvironment as Environment>::AccountId;
    type Balance = <DefaultEnvironment as Environment>::Balance;
    type Hash = <DefaultEnvironment as Environment>::Hash;
    type BlockNumber = <DefaultEnvironment as Environment>::BlockNumber;
    type Timestamp = <DefaultEnvironment as Environment>::Timestamp;

    type ChainExtension = RuntimeReadWrite;
}
```

Above we defined the `CustomEnvironment` which defaults to ink!'s `DefaultEnvironment`
for all constants and types but the `ChainExtension` type which is assigned to our newly
defined chain extension.

## Example: Usage

An ink! smart contract can use the above defined chain extension through the `Environment`
definition defined in the last example section using the `env` macro parameter as
shown below.

Note that chain extension methods are accessible through `Self::extension()` or
`self.extension()`. For example as in `Self::extension().read(..)` or `self.extension().read(..)`.

```rust
#[ink::contract(env = CustomEnvironment)]
mod read_writer {

    #[ink(storage)]
    pub struct ReadWriter {}

    impl ReadWriter {
        #[ink(constructor)]
        pub fn new() -> Self { Self {} }

        #[ink(message)]
        pub fn read(&self, key: Vec<u8>) -> Result<Vec<u8>, ReadWriteErrorCode> {
            self.env()
                .extension()
                .read(&key)
        }

        #[ink(message)]
        pub fn read_small(&self, key: Vec<u8>) -> Result<(u32, [u8; 32]), ReadWriteError> {
            self.env()
                .extension()
                .read_small(&key)
        }

        #[ink(message)]
        pub fn write(
            &self,
            key: Vec<u8>,
            value: Vec<u8>,
        ) -> Result<(), ReadWriteErrorCode> {
            self.env()
                .extension()
                .write(&key, &value)
        }

        #[ink(message)]
        pub fn access(&self, key: Vec<u8>) -> Option<Access> {
            self.env()
                .extension()
                .access(&key)
        }

        #[ink(message)]
        pub fn unlock_access(&self, key: Vec<u8>, access: Access) -> Result<(), UnlockAccessError> {
            self.env()
                .extension()
                .unlock_access(&key, access)
        }
    }

    /// Custom chain extension to read to and write from the runtime.
    #[ink::chain_extension(extension = 12)]
    pub trait RuntimeReadWrite {
          type ErrorCode = ReadWriteErrorCode;
          #[ink(function = 1)]
          fn read(key: &[u8]) -> Vec<u8>;
          #[ink(function = 2)]
          fn read_small(key: &[u8]) -> Result<(u32, [u8; 32]), ReadWriteError>;
          #[ink(function = 3)]
          fn write(key: &[u8], value: &[u8]);
          #[ink(function = 4, handle_status = false)]
          fn access(key: &[u8]) -> Option<Access>;
          #[ink(function = 5, handle_status = false)]
          fn unlock_access(key: &[u8], access: Access) -> Result<(), UnlockAccessError>;
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum ReadWriteErrorCode {
          InvalidKey,
          CannotWriteToKey,
          CannotReadFromKey,
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum ReadWriteError {
          ErrorCode(ReadWriteErrorCode),
          BufferTooSmall { required_bytes: u32 },
    }
    impl From<ReadWriteErrorCode> for ReadWriteError {
         fn from(error_code: ReadWriteErrorCode) -> Self {
             Self::ErrorCode(error_code)
         }
    }
    impl From<scale::Error> for ReadWriteError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }

    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub struct UnlockAccessError {
         reason: String,
    }
    impl From<scale::Error> for UnlockAccessError {
         fn from(_: scale::Error) -> Self {
             panic!("encountered unexpected invalid SCALE encoding")
         }
    }
    #[ink::scale_derive(Encode, Decode, TypeInfo)]
    pub enum Access {
         ReadWrite,
         ReadOnly,
         WriteOnly,
    }
    impl ink::env::chain_extension::FromStatusCode for ReadWriteErrorCode {
         fn from_status_code(status_code: u32) -> Result<(), Self> {
             match status_code {
                 0 => Ok(()),
                 1 => Err(Self::InvalidKey),
                 2 => Err(Self::CannotWriteToKey),
                 3 => Err(Self::CannotReadFromKey),
                 _ => panic!("encountered unknown status code"),
             }
         }
    }
    pub enum CustomEnvironment {}
    impl ink::env::Environment for CustomEnvironment {
         const MAX_EVENT_TOPICS: usize =
             <ink::env::DefaultEnvironment as ink::env::Environment>::MAX_EVENT_TOPICS;

         type AccountId = <ink::env::DefaultEnvironment as ink::env::Environment>::AccountId;
         type Balance = <ink::env::DefaultEnvironment as ink::env::Environment>::Balance;
         type Hash = <ink::env::DefaultEnvironment as ink::env::Environment>::Hash;
         type BlockNumber = <ink::env::DefaultEnvironment as ink::env::Environment>::BlockNumber;
         type Timestamp = <ink::env::DefaultEnvironment as ink::env::Environment>::Timestamp;

         type ChainExtension = RuntimeReadWrite;
    }
}
```

## Using Multiple Chain Extensions

It is possible to use multiple exposed chain extensions in the single environment of a smart contract.
The declaration procedure of the chain extension stays the same.

Suppose we want to combine two chain extension called `Psp22Extension` and `FetchRandom`, ink! provides
a useful macro [`ink::combine_extensions!`](https://docs.rs/ink/6.0.0/ink/macro.combine_extensions.html) that allows to construct the structure combining 
the aforementioned chain extensions like so:
```rust
ink::combine_extensions! {
    /// This extension combines the `FetchRandom` and `Psp22Extension` extensions.
    /// It is possible to combine any number of extensions in this way.
    ///
    /// This structure is an instance that is returned by the `self.env().extension()` call.
    pub struct CombinedChainExtension {
        /// The instance of the `Psp22Extension` chain extension.
        ///
        /// It provides you access to `PSP22` functionality.
        pub psp22: Psp22Extension,
        /// The instance of the `FetchRandom` chain extension.
        ///
        /// It provides you access to randomness functionality.
        pub rand: FetchRandom,
    }
}
```

The combined structure is called `CombinedChainExtension`, and we can refer to it 
when specifying the chain extension type in `Environment`:
```rust
type ChainExtension = CombinedChainExtension;
```

Each extension's method can be called by accessing it via the name of the field of `CombineChainExtension`:
```rust
self.env().extension().rand.<method_name_in_rand_ext>()
// or
self.env().extension().psp22.<method_name_in_psp22_ext>()
// e.g.
self.env().extension().psp22.total_supply()
```

:::note
The ink! repository contains the [full example](https://github.com/use-ink/ink-examples/tree/main/combined-extension) illustrating how to combine existing chain extensions 
and mock them for testing.
:::


## Mocking Chain Extension

You can mock chain extensions for unit testing purposes. 
This can be achieved by implementing the [`ink::env::test::ChainExtension`](https://docs.rs/ink_env/6.0.0/ink_env/test/trait.ChainExtension.html) trait.

```rust
/// Opaque structure
struct MockedPSP22Extension;

// Implementing 
impl ink::env::test::ChainExtension for MockedPSP22Extension {
    fn ext_id(&self) -> u16 {
        // It is identifier used by `psp22_extension::Psp22Extension` extension.
        // Must be the same as the once specified in `#[ink::chain_extension(extension = _)]`
        13
    }

    // Call dispatcher.
    // Call specific code based on the function id which is dispatched from the contract/
    fn call(&mut self, func_id: u16, _input: &[u8], output: &mut Vec<u8>) -> u32 {
        match func_id {
            // `func_id` of the `total_supply` function.
            // must match `#[ink(function = _)]` of the corresponding method
            0x162d => {
                ink::scale::Encode::encode_to(&TOTAL_SUPPLY, output);
                0
            },
            // Other functions
            _ => {
                1
            }
        }
    }
}
```

## Technical Limitations

- Due to technical limitations it is not possible to refer to the `ErrorCode` associated type
  using `Self::ErrorCode` anywhere within the chain extension and its defined methods.
  Instead chain extension authors should directly use the error code type when required.
  This limitation might be lifted in future versions of ink!.
- It is not possible to declare other chain extension traits as super traits or super
  chain extensions of another.
````

## File: versioned_docs/version-v6/macros-attributes/contract.md
````markdown
---
title: "#[ink::contract]"
hide_title: true
slug: /macros-attributes/contract
---

![Text/contract Title Picture](/img/title/text/contract.svg)

:::caution
This page has not yet been updated for ink! v6.

TODO @davidsemakula Please add the `abi` header argument.
:::

# \#[ink::contract]

The `#[ink::contract]` macro is the entry point for writing ink! smart contracts.

If you are a beginner trying to learn ink! we recommend starting
from the [Getting Started](../getting-started/setup.md) page of this documentation.

## Description

The macro does analysis on the provided smart contract code and generates
proper code.

## Usage

### Header Arguments

The `#[ink::contract]` macro can be provided with some additional comma-separated
header arguments:

### `compile_as_dependency: bool`

Tells the ink! code generator to **always** or **never**
compile the smart contract as if it was used as a dependency of another ink!
smart contract.

Normally this flag is only really useful for ink! developers who
want to inspect code generation of ink! smart contracts.
The author is not aware of any particular practical use case for users that
makes use of this flag but contract writers are encouraged to disprove this.

Note that it is recommended to make use of the built-in crate feature
`ink-as-dependency` to flag smart contract dependencies listed in a contract's
`Cargo.toml` as actual dependencies to ink!.

**Usage Example:**
```rust
#[ink::contract(compile_as_dependency = true)]
mod my_contract {
    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** Depends on the crate feature propagation of `Cargo.toml`.

### `env: impl Environment`

Tells the ink! code generator which environment to use for the ink! smart contract.
The environment must implement the `Environment` (defined in `ink_env`) trait and provides
all the necessary fundamental type definitions for `Balance`, `AccountId` etc.

When using a custom `Environment` implementation for a smart contract all types
that it exposes to the ink! smart contract and the mirrored types used in the runtime
must be aligned with respect to SCALE encoding and semantics.

**Usage Example:**

Given a custom `Environment` implementation:
```rust
pub struct MyEnvironment;

impl ink::env::Environment for MyEnvironment {
    const MAX_EVENT_TOPICS: usize = 3;

    type AccountId = u64;
    type Balance = u128;
    type Hash = [u8; 32];
    type Timestamp = u64;
    type BlockNumber = u32;
    type ChainExtension = ::ink::env::NoChainExtension;
}
```
A user might implement their ink! smart contract using the above custom `Environment`
implementation as demonstrated below:

```rust
#[ink::contract(env = MyEnvironment)]
mod my_contract {
    pub struct MyEnvironment;

    impl ink::env::Environment for MyEnvironment {
        const MAX_EVENT_TOPICS: usize = 3;
        type AccountId = u64;
        type Balance = u128;
        type Hash = [u8; 32];
        type Timestamp = u64;
        type BlockNumber = u32;
        type ChainExtension = ::ink::env::NoChainExtension;
    }

    #[ink(storage)]
    pub struct MyStorage;

    impl MyStorage {
        #[ink(constructor)]
        pub fn construct() -> Self { MyStorage {} }

        #[ink(message)]
        pub fn message(&self) {}
    }
    // ...
}
```

**Default value:** `DefaultEnvironment` defined in `ink_env` crate.

## Analysis

The `#[ink::contract]` macro fully analyses its input smart contract
against invalid arguments and structure.

Some example rules include but are not limited to:

- There must be exactly one `#[ink(storage)]` struct.

     This struct defines the layout of the storage that the ink! smart contract operates on.
     The user is able to use a variety of built-in facilities, combine them in various ways
     or even provide their own implementations of storage data structures.

     For more information visit the `ink_storage` crate documentation.

     **Example:**

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn construct() -> Self { Flipper { value: false } }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(constructor)]` defined method.

     Methods flagged with `#[ink(constructor)]` are special in that they are dispatchable
     upon contract instantiation. A contract may define multiple such constructors which
     allow users of the contract to instantiate a contract in multiple different ways.

     **Example:**

     Given the `Flipper` contract definition above we add an `#[ink(constructor)]`
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             #[ink(message)]
             pub fn message(&self) {}
         }
     }
     ```

- There must be at least one `#[ink(message)]` defined method.

     Methods flagged with `#[ink(message)]` are special in that they are dispatchable
     upon contract invocation. The set of ink! messages defined for an ink! smart contract
     define its API surface with which users are allowed to interact.

     An ink! smart contract can have multiple such ink! messages defined.

     **Note:**

     - An ink! message with a `&self` receiver may only read state whereas an ink! message
       with a `&mut self` receiver may mutate the contract's storage.

     **Example:**

     Given the `Flipper` contract definition above we add some `#[ink(message)]` definitions
     as follows:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message)]
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Payable Messages:**

     An ink! message by default will reject calls that additional fund the smart contract.
     Authors of ink! smart contracts can make an ink! message payable by adding the `payable`
     flag to it. An example below:

     Note that ink! constructors are always implicitly payable and thus cannot be flagged
     as such.

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(payable)] // You can either specify payable out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, payable)] // ...or specify payable inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

     **Controlling the messages selector:**

     Every ink! message and ink! constructor has a unique selector with which the
     message or constructor can be uniquely identified within the ink! smart contract.
     These selectors are mainly used to drive the contract's dispatch upon calling it.

     An ink! smart contract author can control the selector of an ink! message or ink!
     constructor using the `selector` flag. An example is shown below:

     ```rust
     #[ink::contract]
     mod flipper {
         #[ink(storage)]
         pub struct Flipper {
             value: bool,
         }

         impl Flipper {
             #[ink(constructor)]
             #[ink(selector = "0xDEADBEEF")] // Works on constructors as well.
             pub fn new(initial_value: bool) -> Self {
                 Flipper { value: false }
             }

             /// Flips the current value.
             #[ink(message)]
             #[ink(selector = "0xCAFEBABE")] // You can either specify selector out-of-line.
             pub fn flip(&mut self) {
                 self.value = !self.value;
             }

             /// Returns the current value.
             #[ink(message, selector = "0xFEEDBEEF")] // ...or specify selector inline.
             pub fn get(&self) -> bool {
                 self.value
             }
         }
     }
     ```

## Interacting with the Contract Executor

The `ink_env` crate provides facilities to interact with the contract executor that
connects ink! smart contracts with the outer world.

For example it is possible to query the current call's caller via:

```rust
use ink_env;
ink::env::test::run_test::<ink::env::DefaultEnvironment, _>(|_| {
    let caller = ink::env::caller::<ink::env::DefaultEnvironment>();
    let _caller = caller;
    Ok(())
}).unwrap();
```

However, ink! provides a much simpler way to interact with the contract executor
via its environment accessor. An example below:

```rust
#[ink::contract]
mod greeter {
    #[ink(storage)]
    pub struct Greeter;

    impl Greeter {
        #[ink(constructor)]
        pub fn new() -> Self {
            let caller = Self::env().caller();
            let message = format!("thanks for instantiation {:?}", caller);
            ink::env::debug_println(&message);
            Greeter {}
        }

        #[ink(message, payable)]
        pub fn fund(&mut self) {
            let caller = self.env().caller();
            let value = self.env().transferred_balance();
            let message = format!("thanks for the funding of {:?} from {:?}", value, caller);
            ink::env::debug_println(&message);
        }
    }
}
```

## Events

An ink! smart contract may define events that it can emit during contract execution.
Emitting events can be used by third party tools to query information about a contract's
execution and state.

The following example ink! contract shows how an event `Transferred` is defined and
emitted in the `#[ink(constructor)]`.

```rust
 #[ink::contract]
 mod erc20 {
     /// Defines an event that is emitted every time value is transferred.
     #[ink(event)]
     pub struct Transferred {
         from: Option<AccountId>,
         to: Option<AccountId>,
         value: Balance,
     }

     #[ink(storage)]
     pub struct Erc20 {
         total_supply: Balance,
         // more fields ...
     }

     impl Erc20 {
         #[ink(constructor)]
         pub fn new(initial_supply: Balance) -> Self {
             let caller = Self::env().caller();
             Self::env().emit_event(Transferred {
                 from: None,
                 to: Some(caller),
                 value: initial_supply,
             });
             Self { total_supply: initial_supply }
         }

         #[ink(message)]
         pub fn total_supply(&self) -> Balance {
             self.total_supply
         }
     }
 }
```

## Example: Flipper

The below code shows the complete implementation of the so-called Flipper
ink! smart contract.
For us it acts as the "Hello, World!" of the ink! smart contracts because
it is minimal while still providing some more or less useful functionality.

It controls a single `bool` value that can be either `false` or `true`
and allows the user to flip this value using the `Flipper::flip` message
or retrieve the current value using `Flipper::get`.

```rust
#[ink::contract]
pub mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        /// Creates a new flipper smart contract initialized with the given value.
        #[ink(constructor)]
        pub fn new(init_value: bool) -> Self {
            Self { value: init_value }
        }

        /// Flips the current value of the Flipper's bool.
        #[ink(message)]
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        /// Returns the current value of the Flipper's bool.
        #[ink(message)]
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v6/macros-attributes/selector.md
````markdown
---
title: "#[ink(selector = S:u32)]"
slug: /macros-attributes/selector
hide_title: true
---

![Text/selector Title Picture](/img/title/text/selector.svg)

:::caution
This section has not yet been updated to ink! v6.

TODO @davidsemakula Please review this page in light of our ABI updates. 
:::

### 1. Upload Contract Code

Applicable to ink! messages and ink! constructors.

By default, ink! creates a selector for each message and constructor.
This is necessary since the contract is compiled to a binary blob and functions are invoked by invoking the
selector, which identifies a method ‒ method names are no longer available in these underlying layers.

Using this attribute it is possible to specify a concrete dispatch selector for the flagged entity. This allows a contract author to precisely control the selectors of their APIs making it possible to rename their API without breakage.

A selector must be a `u32` decodable integer. For example

- `selector = 0xCAFEBABE`
- `selector = 42`

An exception is the fallback selector `_`, allowing contract calls not matching any of the other message selectors to be dispatched to a fallback message. Fallback messages can be `payable`.

:::info
The term wildcard selector is just a synonym for fallback selector.
:::

## Examples

```rust
#[ink(message, selector = 0xC0DECAFE)]
fn my_message_1(&self) {}

#[ink(message, selector = 42)]
fn my_message_2(&self) {}

#[ink(message, payable, selector = _)]
fn my_fallback(&self) {}
```
… then the selector of `my_message_1` is `[0xC0, 0xDE, 0xCA, 0xFE]` and the selector of `my_message_2` is `[0, 0, 0, 42]`
since setting the selector manually overrides the automatically generated selector.

## Controlling the messages selector

Every ink! message and ink! constructor has a selector with which the
message or constructor can be uniquely identified within the ink! smart contract.
Non-unique message or constructor selector lead to a compile time error.
These selectors are mainly used to drive the contract's dispatch upon calling it.

An ink! smart contract author can control the selector of an ink! message or ink!
constructor using the `selector` flag. An example is shown below:

```rust
#[ink::contract]
mod flipper {
    #[ink(storage)]
    pub struct Flipper {
        value: bool,
    }

    impl Flipper {
        #[ink(constructor)]
        #[ink(selector = 0xDEADBEEF)] // Works on constructors as well.
        pub fn new(initial_value: bool) -> Self {
            Flipper { value: initial_value }
        }

        #[ink(message)]
        #[ink(selector = 0xCAFEBABE)] // You can either specify selector out-of-line.
        pub fn flip(&mut self) {
            self.value = !self.value;
        }

        #[ink(message, selector = 0xC0DECAFE)] // ...or specify the selector inline.
        pub fn get(&self) -> bool {
            self.value
        }
    }
}
```
````

## File: versioned_docs/version-v6/standards/overview.md
````markdown
---
title: Overview
slug: /standards/overview
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Standards Title Picture](/img/title/standards.svg)

:::caution
This page has not yet been edited for ink! v6 yet.

TODO @peterwht
:::

# Overview

Standards are maintained by the community initiative ink!hub.
You can find them here: [github.com/inkdevhub/standards](https://github.com/inkdevhub/standards).

## Wallet Support

<table className="wallet-table text--center">
    <tr>
        <th></th>
        <th className="text--left">Contract Interactions</th>
        <th className="text--left">Tokens (PSP-22)</th>
        <th className="text--left">NFTs (PSP-34)</th>
    </tr>
    <tr>
        <th>
            <a href="https://www.subwallet.app/" title="SubWallet" >
                <img src={useBaseUrl('/img/wallets/subwallet.svg')} className="wallet" alt="SubWallet" width="200"/>
            </a>
        </th>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
    </tr>
    <tr>
        <th>
            <a href="https://polkadot.js.org/extension/" title="Polkadot{.js}">
                <img src={useBaseUrl('/img/wallets/polkadot-js.svg')} className="wallet" alt="Polkadot{.js}" width="200"/>
            </a>
        </th>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark" /></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <th>
            <a href="https://www.talisman.xyz/" title="Talisman">
                <img src={useBaseUrl('/img/wallets/talisman.svg')} className="wallet" alt="Talisman" width="200"/>
            </a>
        </th>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark"/></td>
        <td></td>
        <td></td>
    </tr>
    <tr>
        <th>
            <a href="https://metamask.io" title="MetaMask">
                <img src={useBaseUrl('/img/wallets/metamask.svg')} className="wallet" alt="metamask" width="200"/>
            </a>
        </th>
        <td><img src={useBaseUrl('/img/icons/checkmark1.svg')} className="checkmark"/></td>
        <td></td>
        <td></td>
    </tr>
</table>


## PSP-22

A standard for a fungible token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard fungible token interface for WebAssembly smart contracts, just like [EIP-20](https://github.com/ethereum/EIPs/edit/master/EIPS/eip-20.md) for the Ethereum ecosystem.

## PSP-34

A standard for a Non-Fungible Token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard Non-Fungible Token interface for WebAssembly smart contracts, just like [EIP-721](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md) for the Ethereum ecosystem.

## PSP-37

A standard for a Multi Token interface for WebAssembly smart contracts which run on Substrate's [`contracts` pallet](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts).

This proposal aims to define the standard Multi Token interface for WebAssembly smart contracts, just like [EIP-1155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1155.md) for the Ethereum ecosystem.
````

## File: versioned_docs/version-v6/testing/testnet/faucet.md
````markdown
---
title: Faucet
slug: /faucet
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Faucet Title Picture](/img/title/faucet.svg)

:::caution
This section has not yet been updated to ink! v6.

TODO @peterwht Please review this page.
:::

# Faucet

<!-- import Faucet from "./Faucet"; -->

The community-maintained Polkadot testnet "Paseo" provides a faucet: 
[Paseo Faucet](https://faucet.polkadot.io/).
By requesting funds from the link above you will receive `PAS`
tokens to your account on this parachain.

The polkadot-js UI will display them under [the "Accounts" tab for the Contracts parachain](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fpaseo.dotters.network#/accounts):

<img src={useBaseUrl('img/pas-in-wallet.png')} alt="Paseo testnet tokens in wallet" />
````

## File: versioned_docs/version-v6/testing/e2e.md
````markdown
---
title: "E2E: Node Process"
hide_title: true
slug: /contract-testing/end-to-end-e2e-testing
---

![Testing1 Title Picture](/img/title/testing1.svg)

# End-to-End (E2E) Tests

E2E testing enables developers to write a test that will not only test the contract in an
isolated manner; instead the contract will be tested _together_ with all components that
will be involved on-chain – so from end to end. This way of testing resembles closely
how the contract will actually behave in production.

As part of the test, the contract will be compiled and deployed to a Polkadot SDK node that
is running in the background. ink! offers API functions that enable developers to then
interact with the contract via transactions that they create and submit to the blockchain.

You as a developer can define assertions on the outcome of their transactions, such as checking
for state mutations, transaction failures or incurred gas costs.

Your chain configuration will be tested together with the smart contract. And if your
chain has pallets that are involved with the smart contract execution, those will be
part of the test execution as well.

ink! does not put any requirements on the Polkadot SDK node in the background – for example,
you can run a node that contains a snapshot of a live network.

## Example

The following code example illustrates a basic E2E test for the
[flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

```rust
#[ink_e2e::test]
async fn default_works<Client: E2EBackend>(mut client: Client) -> E2EResult<()> {
    // When the function is entered, the contract was already
    // built in the background via `cargo contract build`.
    // The `client` object exposes an interface to interact
    // with the Polkadot SDK node.
    
    // given
    let mut constructor = FlipperRef::new_default();

    // when
    let contract = client
        .instantiate("flipper", &ink_e2e::bob(), &mut constructor)
        .submit()
        .await
        .expect("instantiate failed");
    let call_builder = contract.call_builder::<Flipper>();

    // then
    let get = call_builder.get();
    let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await?;
    assert!(matches!(get_res.return_value(), false));

    Ok(())
}
```

You can run the above test by going to the `flipper` folder in
[the ink! examples directory](https://github.com/use-ink/ink-examples/tree/main).

Before you can run the test, you have to install a Polkadot SDK
node with `pallet-revive`. By default, e2e tests require that you install [`ink-node`](https://github.com/use-ink/ink-node). You do not need to run it in the background since the node is started for each test independently.
The easiest way is to 
[download a binary from our releases page](https://github.com/use-ink/ink-node/releases)
(Linux and Mac).
Alternatively, you can build the node by yourself.
The build instructions and pre-requisites can be found
[here](https://github.com/use-ink/ink-node?tab=readme-ov-file#build-locally).

If you want to run any other node with `pallet-revive` you need to change `CONTRACTS_NODE` environment variable:

```bash
$ export CONTRACTS_NODE="YOUR_CONTRACTS_NODE_PATH"
```

And finally execute the following command to start e2e test execution.

```bash
$ cargo test --features e2e-tests
```
````

## File: versioned_docs/version-v6/testing/overview.md
````markdown
---
title: Overview
hide_title: true
slug: /contract-testing/overview
---

![Testing1 Title Picture](/img/title/testing1.svg)

# Testing Strategies

ink! supports three different stages of testing: unit, integration
and end-to-end tests. In this chapter we'll explain what the purpose
of each stage is about and how to use it.

![ink! Testing Strategies](/img/testing.png)

Generally you can think of those three types of testing as a pyramid
with the top being the most elaborate test. The End-to-End (E2E)
tests at the top will test the lower layers of the pyramid as part
of them.
````

## File: versioned_docs/version-v6/testing/sandbox.md
````markdown
---
title: "E2E: Sandbox"
hide_title: true
slug: /contract-testing/drink
---

![Drink Title Picture](/img/title/drink.svg)

:::note
TODO This page has not yet been reviewed for ink! v6.
:::

# DRink!

Apart from the core ink! testing framework, we also provide the [DRink!](https://github.com/use-ink/drink) library.
It offers an intermediate solution between integration and E2E testing.

Intuitively, DRink! maintains a full in-memory blockchain state and allows you to interact with it directly.
This gives a notably robust methodology in contrast to the off-chain engine facilitated by the `ink::test` macro.
Nevertheless, it is essential to note that the absence of the entire node layer makes the environment less realistic compared to the comprehensive setup employed in the end-to-end tests.

## Comparison to the other testing strategies

To better assess when DRink! performs better than other testing methods, it is crucial to gain a deeper understanding of the consequences of its unique design and the trade-offs it entails.

1. **Speed:** since DRink! doesn't spawn any node or background process, everything happens locally, within the testing thread.
This means that the execution can be synchronous and significantly faster than the E2E tests.
Therefore, its performance should be comparable to the unit or integration testing.
Also, there is no block production or finalization delay, which is a noticeable factor in the E2E tests.
Thanks to that, we can launch long-running simulations in a reasonable time.

2. **Testing multiple contracts:** since we are working with a full blockchain state, we can perform any interaction with the contracts, which includes working with mutliple contracts at the same time.
Of course, this is the same as in the E2E tests, but it is not possible in either the unit or integration tests.

3. **Working with arbitrary runtimes:** similarly to the E2E tests, where we can spawn any node with customized runtime (Polkadot's term for the state transition function), in DRink! tests we can work with any blockchain runtime we want.

4. **Full control over runtime state:** we hold the state of the blockchain and exercise full control over it, so we can easily manipulate it however we want.
This covers manipulating block number, timestamp, account balances, etc.
Some of these are also possible in the E2E tests, but usually they require more effort or overhead.

5. **Powerful features:** thanks to the unique design of DRink!, we can easily take advantage of some powerful, not available in other testing strategies, features:

   - **contract mocking:** you can mock any contract or message you want, specifying the default behavior or the exact return value.
   - **enhanced debugging and call tracing:** you can get more insights into the contract execution process, like stack trace, debug buffers and more.

Nevertheless, there are some drawbacks of DRink! as well:

1. **No node layer:** since we don't spawn any node, we don't have access to the node layer, which means that we can't test any node-related functionality, like RPC calls, block production, etc.

2. **Artificial, isolated environment:** this is the main trade-off of DRink!.
It might give a false sense of security, while in the real environment, the contract could behave differently.
The discrepancy can be mitigated by a careful and precise simulation and setup of the environment, but it is still a factor to consider.

3. **No typed contract API:** currently, DRink! works with string-encoded arguments and values, which means that we lose the type safety and convenience that was present in the other testing frameworks.
Fortunately, this is going to change soon, as there is an ongoing effort to integrate it with [ink-wrapper](https://github.com/Cardinal-Cryptography/ink-wrapper) library.

## When to use `DRink!`?

Usually, DRink! is a good choice for the development phase of your project.
When the iteration speed is crucial, and you want to quickly test your contracts, DRink! will offer a versatile, yet highly efficient testing environment.
However, you must not forget that it is not a replacement for the E2E tests, which should be run before the deployment to the production network, as well as in your CI/CD pipelines.

DRink! also comes in handy when you need to:
 - mock some parts of your contract suite
 - debug the execution process
 - launch long-running simulations, that would normally take a lot of time when relying on a real block-time

## How to use DRink!?

There are three ways to use DRink!:

### Directly as a library

This way you gain access to full DRink! power in your test suites.

`drink` library is continuously published to [crates.io](https://crates.io/crates/drink), so you can use it in your project with either `cargo add drink` or by adding the following line to your `Cargo.toml`:
```toml
drink = { version = "0.8" }
```

Then, you can write your tests like this:
```rust
#[cfg(test)]
mod tests {
    /// This will take care of building all contract dependencies in the compilation phase and gather all contract 
    /// bundles (metadata and the compiled code) into a single registry.
    #[drink::contract_bundle_provider]
    enum BundleProvider {}

   /// Within `drink::test` macro, you are provided with a `session` object, which is a wrapper around the
   /// blockchain state. You can use it to deploy contracts, call their methods, and more.
    #[drink::test]
    fn deploy_and_call_a_contract(mut session: Session) -> Result<(), Box<dyn Error>> {
        let result: bool = sesison
            .deploy_bundle_and(BundleProvider::local(), "new", &["true"], NO_SALT, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call_and("flip", NO_ARGS, NO_ENDOWMENT)?
            .call("get", NO_ARGS, NO_ENDOWMENT)??;
        assert_eq!(result, false);
    }
}
```

You can check some helpful and verbose examples [here](https://github.com/inkdevhub/drink/tree/main/examples), including the [**quick start guide**](https://github.com/inkdevhub/drink/tree/main/examples/quick-start-with-drink).

### As an alternative backend to ink!'s E2E testing framework

DRink! is already integrated with the ink! framework and can be used as a drop-in replacement for the standard E2E testing environment.
Just use corresponding argument in the test macro:
```rust
#[ink_e2e::test(backend(runtime_only))]
```
to your test function and you have just switched from E2E testcase to DRink!-based one, that doesn't use any running node in the background!

For a full example check out [ink! repository](https://github.com/use-ink/ink-examples/tree/main/e2e-runtime-only-backend).

### With a command line tool

We provide a CLI which puts DRink! behind friendly TUI.
For more details, consult [its README](https://github.com/inkdevhub/drink/blob/main/drink-cli/README.md).

Similarly to `drink` library, `drink-cli` is published to [crates.io](https://crates.io/crates/drink-cli) as well.
You can install it with:
```shell
cargo install drink-cli
```
````

## File: versioned_docs/version-v6/testing/unit-integration.md
````markdown
---
title: Unit & Integration
hide_title: true
slug: /contract-testing/unit-integration-tests
---

![Testing1 Title Picture](/img/title/testing1.svg)

# Tests

On this page we lay out the different use-cases for unit vs. integration tests.

## Unit Tests

Testing contracts off-chain is done by `cargo test` and users can simply use the standard Rust
routines of creating unit test modules within the ink! project:

```rust
#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn my_test() { ... }
}
```

Test instances of contracts can be created with something like:

```rust
let contract = MyContract::my_constructor(a, b);
```

Messages can simply be called on the returned instance as if `MyContract::my_constructor` returns a
`Self` instance.

See the [flipper example](https://github.com/use-ink/ink-examples/blob/main/flipper/lib.rs).

## Integration Tests

For integration tests, the test is annotated with our `#[ink::test]`
attribute instead of `#[test]`. This attribute denotes that
the test is then executed in a simulated, mocked blockchain environment.
Here functions are available to influence how the test environment
is configured (e.g. setting a specified balance of an account to
simulate how a contract would behave when interacting with it).

If you annotate a test with the `#[ink::test]` attribute it
will be executed in a simulated environment, similar to as it
would be run on-chain.
You then have fine-grained control over how a contract is called; 
for example you can influence the block advancement, the value transferred to it,
by which account it is called, which storage it is run with, etc..

See the [`examples/erc20`](https://github.com/use-ink/ink-examples/blob/main/erc20/lib.rs) contract on how to utilize those or [the documentation](https://docs.rs/ink/6.0.0/ink/attr.test.html) for details.

At the moment there are some known limitations to our off-chain environment,
and we are working on making it behave as close to the real chain environment
as possible.

:::note
One limitation of the off-chain testing framework is that it
currently only supports a `DefaultEnvironment`.

See [here](../basics/environment.md) for an explanation of what an environment is.
:::

### Example

```rust
#[cfg(test)]
mod tests {
    // Conventional unit test that works with assertions.
    #[ink::test]
    fn test1() {
        // test code comes here as usual
    }

    // Conventional unit test that returns some Result.
    // The test code can make use of operator-`?`.
    #[ink::test]
    fn test2() -> Result<(), ink::env::Error> {
        // test code that returns a Rust Result type
    }
}
```

## How do you find out if a test requires the off-chain environment?

If the test recursively uses or invokes methods that call a function defined
in `self.env()` or `Self::env()`.

An example is the following:

```rust
let caller: AccountId = self.env().caller();
```
````

## File: versioned_docs/version-v6/background/contracts-vs-rollups.md
````markdown
---
title: Smart Contracts vs. Rollups
hide_title: true
slug: /background/smart-contracts-vs-polkadot-rollups
---

<head>
    <meta name="description" content="Comparison of Polkadot Rollups/Parachains and Smart Contracts." />
    <meta name="keywords" content="Polkadot, Rollups, Parachain, Smart Contracts" />
    <meta property="og:title" content="Smart Contracts vs. Polkadot Rollups" />
    <meta property="og:description" content="Comparison of Polkadot Rollups/Parachains and Smart Contracts." />
</head>

![Polkadot Title Picture](/img/title/polkadot.svg)

# Smart Contracts vs. Polkadot Rollups

One of the first questions we typically get when somebody learns about the Polkadot SDK SDK is when to develop a
rollup (i.e. a parachain) vs. when to develop a smart contract.

## The Difference
The distinction here is that in the context of Polkadot and Kusama a parachain leases a slot for a couple of months for up to two years. The deal with a lease is that the parachain gets a fixed slot for executing its business logic (typically referred to as its _state transition function_) and can persist its modified state in a block. In Polkadot SDK terminology this state transition function is called the chain's _runtime_.

The distinction to other ecosystems here is that, in the context of Polkadot, parachains and smart contracts exist at different layers of the stack: _smart contracts sit on top of parachains_. Parachains would usually be described as layer-1 blockchains — except for that they don't have to build their own security, are upgradable, and interoperable.

## Polkadot Rollups
It's noteworthy that a parachain's state transition function doesn't get further validated — it's up to the parachain how it utilizes its slot time. The parachain already pre-paid for its slot when it won the slot auction on Polkadot or Kusama. This means the parachain can build its own (blockchain) world! For example, it can decide on how transaction fees are charged ‒ or even if transaction fees are charged at all. These options are crucial when building new or more user-friendly business models. 

Other distinguishing factors between parachains that we observe in the wild are differences in how governance works or the crypto-economics. There are some constraints on how the parachain can build its world though. Like physics in the real world it has to adhere to certain ground rules. For Polkadot and Kusama that's for example the consensus algorithm for the Relay Chain to communicate with the parachain. From those ground rules the advantages of Polkadot and Kusama emerge. Advantages like the aforementioned shared security, cross-chain communication, or guaranteed execution slot time.

## Smart Contracts
For smart contracts, on the other hand, an existing parachain has to include the `pallet-revive` for users to deploy smart contracts. The deployed smart contract is always untrusted code. Anyone (or any program) that has tokens of the chain can upload a smart contract without requiring permission. Smart contracts allow _permissionless_ deployment of _untrusted_ programs on a blockchain. The `pallet-revive` has to assume that these programs are adversarial, it has to put a number of safety pillars in place to ensure that the contract can not e.g. stall the chain or cause state corruption of other contracts. For `pallet-revive` those safety pillars include mechanisms like gas metering or deposits for storing data on-chain.

_To restate this important distinction: developing a parachain runtime is different from developing a smart contract — a smart contract sits on top of a parachain_.

## The Trade-off

![Smart Contract vs. Rollup](/img/smart-contract-vs-rollup.svg)

The trade-off is that with a parachain one has the freedom to decide on (nearly) all the rules that make up the parachain. With a smart contract one is constrained by what the chain allows and the safety pillars that necessarily have to be in place. A smart contract can never be as fast as a native pallet built in the parachain runtime ‒ there is too much logic in between.
A smart contract on the other hand has less friction for developing and deploying it. Developers don't have to take care of governance, crypto-economics, etc. One just needs a few tokens and can go on its merry way deploying a smart contract. It's as simple as that.
````

## File: versioned_docs/version-v6/background/migrate-to-parachain.md
````markdown
---
title: Migrate an ink! contract to a Rollup
hide_title: true
slug: /background/migrate-ink-contracts-to-polkadot-frame-parachain-rollup
---

![Polkadot Title Picture](/img/title/polkadot.svg)

# Migrate an ink! contract to a Polkadot SDK Runtime

Smart contracts written in ink! are a great starting point for developing applications in the Polkadot ecosystem. Developers can go from an idea to a fully functioning web3 application "in production" in a matter of hours or days. This allows faster feedback on ideas, to validate whether there is user demand in the first place, and to easily iterate and refine the implementation.

For many applications, smart contracts are good enough. However, they are exposed to the inherent limitations of the smart contract execution environment: 
    
1. Sharing of blockspace with other smart contracts, volatile "gas" fees.
2. Default model enforces gas fees being paid by the end user.
3. Relative poor performance of interpreted smart contract (untrusted) code compared to pre-compiled Parachain runtime (trusted) code.
4. Limited access to the host chain environment and any special functionality provided by an extensive suite of customisable FRAME pallets.

Once a web3 application has proven it can work, the team may consider "upgrading" to a Parachain to unlock the full power of a dedicated App Chain. Compared to developing and deploying a smart contract, this requires considerably more time and expertise, which is why we encourage to start with ink! where possible, at least at the prototype stage.

Much of the difficulty in launching a parachain comes in configuring a node implementation, bootstrapping and maintaining a collator network, deploying to testnets, managing infrastructure, acquiring "Coretime" (previously via a slot auction). All of which is time consuming and costly. This is important to note because this guide will focus on the migration of the code from ink! to `FRAME`, which might be a learning curve but overall a minor part of the overall migration, and a one-off cost.

## Utilizing existing FRAME pallets

There is a rich library of FRAME pallets, which may provide a drop in replacement for some (or all) of your smart contract functionality. For example, for a [PSP22](../standards/overview.md) (similar to ERC20) fungible token contract, this could be replaced either by the native Parachain token itself via `pallet_balances` or by an asset on `pallet_assets`. Governance functions could be replaced by e.g. `pallet_democracy`, and so on. See [`polkadot-sdk`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame) for a range of pre-built pallets which can be used to handle some common functions.

## Similarities and differences between ink! and `FRAME`

### Similar

The biggest advantage we have when migrating from ink! to `FRAME` is that both are Rust based DSLs, in both cases actual Rust (or Rust-like)  code annotated with attributes expands into Rust code for handling all the boilerplate for integrating into their respective execution environments. Indeed the modern `FRAME 2.0` was originally inspired by the ink! approach of attribute macros annotating Rust code.

So we can assume that the developer performing the migration is already familiar with Rust and its development environment, which is already a huge headstart for developing with `FRAME`. 

Next we can assume some familiarity with the execution environment, after all a contract is running inside of `pallet_contracts` and is invoked in a similar way via a pallet dispatchable, has access to storage (sandboxed to the contract), and can emit events.

### Different

The biggest difference is that a contract is user uploaded and therefore untrusted code, so there are restrictions to what the contract is able to do and it will perform slower because it is interpreted. For example, a contract can only read and write from its own sandboxed storage.

Runtime code built using `FRAME` is trusted, can be pre-compiled and therefore executes significantly faster (though that may change if/when contracts are able to target [PolkaVM](https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811)). Pallets have direct access to other pallets and have full access to the Parachain storage, and the permissioning can be configured as desired.

Because ink! is executing in a more constrained environment, it is able to be much more opinionated and therefore a simpler language. Because execution is metered (pay as you go execution by the user), there is no need to worry about benchmarking for "weight" calculation. `FRAME` is more powerful, but necessarily more complicated.

## Example Migration

We'll use the [`DNS` example](https://github.com/use-ink/ink-examples/blob/main/dns/lib.rs) contract to demonstrate a migration.

### Setup

Start by cloning the [Parachain Template](https://github.com/paritytech/polkadot-sdk-parachain-template) which contains a [template pallet](https://github.com/paritytech/polkadot-sdk-parachain-template/blob/master/pallets/template/src/lib.rs) which we can modify.

Now we will move down the contract from top to bottom and begin the migration of code.

### Event Definitions

First thing we encounter are events. E.g.:

```rust
#[ink(event)]
pub struct Register {
    #[ink(topic)]
    name: Hash,
    #[ink(topic)]
    from: AccountId,
}
```

Each of these structs annotated with `#[ink(event)]` can be translated to a variant in the pallet `Error` enum annotated with `#[pallet::error]`. Any of the ink! environment type aliases (both `Hash` and `AccountId` in the above example) must be translated to their equivalent associated type on the `Config` trait e.g. `AccountId` -> `T::AccountId`. Also the `#[ink(topic)]` annotations must be removed: topics must be calculated manually when the event is emitted, and will be covered later. Remove the `#[pallet::generate_deposit(pub(super) fn deposit_event)]` and the final `Event` type will look like:


```rust
#[pallet::event]
pub enum Event<T: Config> {
    Register {
        name: T::Hash,
        from: T::AccountId,
    },
    SetAddress {
        name: T::Hash,
        from: T::AccountId,
        old_address: Option<T::AccountId>,
        new_address: T::AccountId,
    },
    Transfer {
        name: T::Hash,
        from: T::AccountId,
        old_owner: Option<T::AccountId>,
        new_owner: T::AccountId,
    }
}
```

### Storage

The storage layout of the contract is defined by the following struct:

```rust
#[ink(storage)]
pub struct DomainNameService {
    /// A hashmap to store all name to addresses mapping.
    name_to_address: Mapping<Hash, AccountId>,
    /// A hashmap to store all name to owners mapping.
    name_to_owner: Mapping<Hash, AccountId>,
    /// The default address.
    default_address: AccountId,
}
```
In ink!, the layout of the contract storage is defined by this top level `struct`. A brief recap of how this is used:
- Constructors must return an initialized instance of this struct, which is then written to storage. 
- Non mutable messages e.g. `#[ink(message)] fn message(&self, ..)` will load an instance of this struct and pass it as `&self`.
- Mutable messages e.g. `#[ink(message)] fn message(&mut self, ..)`, will load an instance of the struct and persist it if the message succeeds in executing.
- Fields of type `Mapping` or `Lazy` are not written directly into the same storage slot as the parent, but are wrappers around direct reads/writes to storage under many or a single key respectively.

In `FRAME`, all storage operations happen eagerly via "type aliases" annotated with `#[pallet::storage]`. So for each field in the `#[ink(storage)]` struct, we require a corresponding pallet storage definition.

`default_address: AccountId` translates to:

```rust
#[pallet::storage]
pub type DefaultAddress<T: Config> = StorageValue<_, T::AccountId>;
```

`name_to_address: Mapping<Hash, AccountId>,` translates to a `StorageMap` like so:

```rust
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

`name_to_owner: Mapping<Hash, AccountId>,` also translates to a `StorageMap`:

```rust
#[pallet::storage]
pub type NameToOwner<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```

Reading and writing these storage values must all be done explicitly, in contrast with ink! which can do so automatically for non "lazy" values. When it comes to migrating the messages, this will be demonstrated.

### Error Definition

Simply copy across the variants of the `enum Error` to the equivalent `#[pallet::error]` definition. In our case we end up with:

```rust
#[pallet::error]
pub enum Error<T> {
    /// Returned if the name already exists upon registration.
    NameAlreadyExists,
    /// Returned if caller is not owner while required to.
    CallerIsNotOwner,
}
```
Note that the `T` generic parameter is not used in this case, the `error` macro handles the generation of `PhantomData<T>`. If we use some environmental types we can use the `T` similar to the event definition.

### Constructors

In this example, the single constructor is simply initializing the storage to empty values. 

```rust
 #[ink(constructor)]
pub fn new() -> Self {
    Default::default()
}
```
This code is executed when the contract instance was initialized.

Our use case is a migration, so we will assume that the existing data must be migrated from contract storage to the pallet storage. This will be covered in the [Data Migration](#data-migration) section.

No code migration is required then for this constructor.

### Messages

#### Mutable

There are 3 mutable messages (that can change the state of the contract): `register`, `set_address` and `transfer`. This guide will demonstrate `register`, and the other two can follow a similar pattern. The message is defined as so, with added numerical comments to show the translation to the equivalent `FRAME` code.

```rust
#[ink(message)]
pub fn register(&mut self, name: Hash) -> Result<()> {
    // 1.
    let caller = self.env().caller();
    // 2.
    if self.name_to_owner.contains(name) {
        return Err(Error::NameAlreadyExists)
    }
    // 3.
    self.name_to_owner.insert(name, &caller);
    // 4.
    self.env().emit_event(Register { name, from: caller });
    // 5.
    Ok(())
}
```

Before proceeding, it is necessary to add a custom `deposit_event` function for raising events which accepts topics:

```rust
impl<T: Config> Pallet<T> {
    fn deposit_event(topics: Vec<T::Hash>, event: Event<T>) {
        <frame_system::Pallet<T>>::deposit_event_indexed(
            &topics,
            <T as Config>::RuntimeEvent::from(event).into()
        )
    }
}
```
Now we can translate the `register` message into a "Dispatchable":

```rust
#[pallet::call_index(0)]
#[pallet::weight(Weight::from_parts(10_000, 0)
    .saturating_add(T::DbWeight::get().reads(1))
    .saturating_add(T::DbWeight::get().writes(1)))]
pub fn register(origin: OriginFor<T>, name: T::Hash) -> DispatchResultWithPostInfo {
    // 1.
    let caller = ensure_signed(origin)?;
    // 2.
    ensure!(!NameToOwner::<T>::contains_key(&name), Error::<T>::NameAlreadyExists);
    // 3.
    <NameToOwner<T>>::insert(name, &caller);
    // 4.
    Self::deposit_event(
        &[name.clone(), T::Hashing::hash_of(&caller)],
        Event::Register { name, from: caller }
    );
    // 5.
    Ok(().into())
}
```
Compare the numbered annotations from the ink! contract message and the `FRAME` dispatchable, and you can see they are very similar, just different APIs for interacting with the environment and with storage.

For `4.`, in `FRAME` we need to generate the topic list manually which is done automatically in ink! via the annotations.

#### Weights

The `pallet::weight` attribute defines the `weight` of the dispatchable i.e. the amount of onchain resources it is estimated to consume. Because we are now writing trusted code, we can define this up front (no runtime gas metering). The number in the `weight` is typically generated via a benchmarking process. It is important to integrate this process and set a non-arbitrary value here before deploying to a production chain. 
You can read more [here](https://docs.polkadot.com/polkadot-protocol/basics/blocks-transactions-fees/fees/).

#### Immutable (read only) messages

`ink!` messages can return a value, which when executed as an RPC "dry-run" (not via a transaction), are used to read the state of contracts. Dispatchables in `FRAME` cannot return values directly. There are two ways to read the state from a FRAME pallet:

1. Reading from `#[pallet::storage]` items directly, client libraries will generate an API to do this from the runtime metadata. See e.g. [`subxt`](https://github.com/paritytech/subxt/blob/master/subxt/examples/storage_fetch.rs)
2. Via runtime APIs, RPC methods that can be wired up directly into query methods on a pallet. See [here](https://docs.polkadot.com/polkadot-protocol/basics/node-and-runtime/#runtime-apis) for more info.

In our case, `1.` is good enough, so the following read only message:

```rust
#[ink(message)]
pub fn get_address(&self, name: Hash) -> AccountId {
    self.get_address_or_default(name)
}

fn get_address_or_default(&self, name: Hash) -> AccountId {
    self.name_to_address
        .get(name)
        .unwrap_or(self.default_address)
}
```
Can be queried *without* any modifications to the `NameToAddress` storage type:

```rust
#[pallet::storage]
pub type NameToAddress<T: Config> = StorageMap<_, Blake2_128Concat, T::Hash, T::AccountId>;
```
`subxt` would generate the following accessor for querying the storage:

```rust
let storage_query = my_custom_chain::storage().dns().name_to_address(&name);

// Use that query to `fetch` a result. This returns an `Option<_>`, which will be
// `None` if no value exists at the given address. You can also use `fetch_default`
// where applicable, which will return the default value if none exists.
let result = api
    .storage()
    .at_latest()
    .await?
    .fetch(&storage_query)
    .await?;
```

### Data Migration

Data migration can be done at either genesis time or once the custom parachain is up and running. 

#### Retrieving the data from the contract

In both cases the first steps are to first download the current state of the contract at a fixed point in time, and then ensuring that no changes can be made to the contract after that. 

This could be done by using `set_code_hash` to update the source code of the contract to a special contract which allows only querying and downloading the state of the current contract, and no mutating messages.

An alternative would be querying the contract storage directly, but currently there are no good tools for this, and it would require some key calculation for retrieving the data at all storage locations. Additionally the contract would still need to be "frozen" somehow to ensure no changes can be made to the contract state.

#### Initializing the pallet 

Once the data has been downloaded and serialized, it can be used to initialize the state of the custom parachain runtime. This can be hardcoded in a `#[pallet::genesis_build]` impl block. See [here](https://docs.polkadot.com/develop/parachains/deployment/generate-chain-specs/) for more info.

Alternatively the state could be initialized via dispatchable extrinsic(s) which initialize the storage.

### Adjusting UIs

User interfaces will need to be adjusted to interact with a pallet rather than a contract. This should be relatively straightforward since client libraries usually have first-class support for interacting with Polkadot SDK pallets, and the signing etc. should already be integrated.
````

## File: versioned_docs/version-v6/background/why-riscv.md
````markdown
---
title: Why RISC-V and PolkaVM for Smart Contracts?
hide_title: true
slug: /background/why-riscv-and-polkavm-for-smart-contracts
---

<head>
    <meta name="description" content="Discover available bounties and contribute to the ink! ecosystem." />
    <meta name="keywords" content="Polkadot, PolkaVM, RISC-V, RISCV, Smart Contracts" />
    <meta property="og:title" content="Why RISC-V and PolkaVM for Smart Contracts?" />
    <meta property="og:description" content="Discover available bounties and contribute to the ink! ecosystem." />
</head>

import useBaseUrl from '@docusaurus/useBaseUrl';

<img src={useBaseUrl('/img/title/polkadot-riscv.svg')} title="RISC-V" className="titlePic"  />

## 🤔 Shortcomings of WebAssembly for Smart Contracts

From ink! v1 to v5, the execution platform was Substrate's smart contracts
module [`pallet-contracts`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts/).
This pallet required the smart contracts that were uploaded to be in the _WebAssembly
(Wasm) bytecode format_. So ink! contracts were always compiled to a WebAssembly binary.
This could be done by invoking `cargo build`/`rustc` directly or via our CLI tool
[`cargo-contract`](https://github.com/use-ink/cargo-contract) (which executes the
Rust compiler with optimal flags for smart contracts).

As an ongoing research project Parity was always looking at alternatives to WebAssembly
for smart contract execution. Some of those investigations are
persisted in the Polkadot Forum. The forum post on [the eBPF investigation](https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084)
(eBPF is used in Solana) highlights some shortcomings of WebAssembly for smart contracts.

## 🧑‍🔬 RISC-V + PolkaVM 

During 2023, Parity core developer Jan Bujak ([@koute](https://github.com/koute)) did another
exploration on alternatives for WebAssembly. [His forum post](https://forum.polkadot.network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434)
gives a great overview on how he landed at RISC-V and its potential.
His explorations yielded promising results and a new project
was started: [PolkaVM](https://github.com/paritytech/polkavm)
([the announcement contains more info](https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811)).
PolkaVM is intended to be a very fast RISC-V based virtual machine. Jan
regularly shared performance benchmarks in the Polkadot Forum. Those were very
good and got community enthusiasm started.
For blockchains a very fast performance correlates with transaction throughput
and transaction costs, which implies improved scalability and reduced costs for users.

## 🤝 `pallet-revive`

Parity in late 2024 forked Substrate's `pallet-contracts` into a new project called
[`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive).
Smart contracts that are uploaded to this new pallet have to be
in the RISC-V bytecode format, and no longer in WebAssembly.

Besides the contract binary format, a number of other significant changes were
made to provide first-class support for Solidity contracts:

    * Extensive changes were made in the inner logic of the pallet to bring its behavior
    closer to the EVM (e.g. types, events, and debugging was changed to be Solidity
    compatible).

    * In the `pallet-contracts` era, the idea for Solidity compatibility was a project
    called [Solang](https://github.com/hyperledger-solang/solang/). It's a Solidity
    compiler that parses Solidity syntax and outputs WebAssembly.
    Parsing the Solidity syntax turned out to be a complex undertaking. Solidity
    as a language is also evolving and provided a moving target.<br/><br/>
    As an iteration on that approach, for `pallet-revive` Parity started a new
    project called [`revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src) ᠆
    a compiler from the Solidity bytecode YUL to a RISC-V
    contract that can be executed on `pallet-revive`.
    This bytecode is more stable than the language syntax. Plus Solidity developers
    can continue to use the Solidity compiler `solc` to compile their contracts.

    * An RPC wrapper that maps Ethereum RPC's onto Substrate was created.

At the time of writing, `pallet-revive` is deployed to the Polkadot testnet Westend
(on the AssetHub parachain).
A launch on Polkadot's canary network Kusama is targeted for early Q2/25.
The Polkadot launch is targeted for Q3/25.

## 🙌 Migrating ink! to RISC-V + PolkaVM + `pallet-revive`

`pallet-revive` and RISC-V are seen as the future of smart contracts in the Polkadot
ecosystem. We agree with that vision and are excited to work on making the ink! stack
ready for it!
In autumn 2024 the ink! Alliance created [a Polkadot treasury proposal](https://forum.polkadot.network/t/treasury-ink-alliance-for-a-more-successful-plaza/9692)
around this.
The Polkadot community signaled its alignment and gave us the mandate of
migrating ink! to this new stack.

Hence, v5 of ink! and `cargo-contract` were the last versions supporting `pallet-contracts`
and Wasm. We can still backport important fixes, but the coming releases (`>= v6`) will
all no longer be compatible. In case you want to create a PR for a backport, we have
v5 release branches [here](https://github.com/use-ink/ink/tree/v5.x) and [here](https://github.com/use-ink/cargo-contract/tree/v5.x.x).

We have created [this migration guide](/docs/v6/faq/migrating-from-ink-5-to-6) from ink! v5 to v6.
All breaking changes and new features are documented there.

What has not yet been migrated is [Contracts UI](https://github.com/use-ink/contracts-ui)
and external libraries (such as [ink!athon](https://inkathon.xyz/), the
[ink! Analyzer VS Code extension](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer),
`polkadot-js`, …).
We are in contact with the maintainers of these external libraries about migrating 
them as well.
````

## File: versioned_docs/version-v6/basics/cross-contract-calling.md
````markdown
---
title: Cross-Contract Calling
slug: /basics/cross-contract-calling
hide_title: true
---

![Cross Contract Title Picture](/img/title/cross-contract.svg)

:::caution
This page has to be reviewed in light of our ABI changes.

TODO @davidsemakula or @peterwht
:::

# Cross-Contract Calls

In ink! contracts it is possible to call messages and constructors of other
on-chain contracts.

There are a few approaches to performing these cross-contract calls in ink!:
1. Contract references (i.e `ContractRef`)
1. Builders (i.e `CreateBuilder` and `CallBuilder`)

Contract references can only be used for cross-contract calls to other ink! contracts.
Builders can be used to issue cross-contract calls to any RISC-V contract, such as those
written in ink! or Solidity.

## Contract References

Contract references refer to structs that are generated by the ink! code generation for the
purposes of cross-contract calls.

They give developers a type-safe way of interacting with a contract.

A downside to using them is that you need to import the contract you want to call as a
dependency of your own contract.

If you want to interact with a contract that is already on-chain you will need to use the
[`Builders`](#builders) approach instead.

### `BasicContractRef` walkthrough

We will walk through the [`cross-contract-calls`](https://github.com/use-ink/ink-examples/tree/master/cross-contract-calls)
example in order to demonstrate how cross-contract calls using contract references work.

The general workflow will be:
1. Prepare `OtherContract` to be imported to other contracts
1. Import `OtherContract` into `BasicContractRef`
1. Upload `OtherContract` on-chain
1. Instantiate `OtherContract` using `BasicContractRef`
1. Call `OtherContract` using `BasicContractRef`

#### Prepping `OtherContract`

We need to make sure that the ink! generated contract ref for `OtherContract` is
available to other pieces of code.

We do this by re-exporting the contract reference as follows:

```rust
pub use self::other_contract::OtherContractRef;
```

#### Importing `OtherContract`

Next, we need to import `OtherContract` to our `BasicContractRef` contract.

First, we add the following lines to our `Cargo.toml` file:

```toml
# In `basic_contract_ref/Cargo.toml`

other_contract = { path = "other_contract", default-features = false, features = ["ink-as-dependency"] }

# -- snip --

[features]
default = ["std"]
std = [
    "ink/std",
    # -- snip --
    "other_contract/std",
]
```

Two things to note here:
1. If we don't specify the `ink-as-dependency` feature we will end up with linking
   errors.
2. If we don't enable the `std` feature for `std` builds we will not be able to generate
   our contract's metadata.

#### Wiring `BasicContractRef`

First, we will import the contract reference of `OtherContract`, and declare the
reference to be part of our storage struct.

```rust
// In `basic_contract_ref/lib.rs`

use other_contract::OtherContractRef;

#[ink(storage)]
pub struct BasicContractRef {
    other_contract: OtherContractRef,
}
```

Next, we to add a way to instantiate `OtherContract`. We do this from the constructor of our
of contract.

```rust
// In `basic_contract_ref/lib.rs`

#[ink(constructor)]
pub fn new(other_contract_code_hash: Hash) -> Self {
    let other_contract = OtherContractRef::new(true)
        .code_hash(other_contract_code_hash)
        .endowment(0)
        .salt_bytes([0xDE, 0xAD, 0xBE, 0xEF])
        .instantiate();

    Self { other_contract }
}
```

Note that for instantiating a contract we need access to the uploaded on-chain
`code_hash`. We will get back to this later.

Once we have an instantiated reference to `OtherContract` we can call its messages just
like normal Rust methods!

```rust
// In `basic_contract_ref/lib.rs`

#[ink(message)]
pub fn flip_and_get(&mut self) -> bool {
    self.other_contract.flip();
    self.other_contract.get()
}
```

#### Uploading `OtherContract`

You will need the [`ink-node`](https://github.com/use-ink/ink-node)
running in the background for the next steps.

We can upload `OtherContract` using `cargo-contract` as follows:

```
# In the `basic_contract_ref` directory
cargo contract build --manifest-path other_contract/Cargo.toml
cargo contract upload --manifest-path other_contract/Cargo.toml --suri //Alice
```

If successful, this will output in a `code_hash` similar to:

```
Code hash "0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa"
```

We can then use this `code_hash` to instantiate our `BasicContractRef` contract.

#### Instantiating `OtherContract` through `BasicContractRef`

We will first need to instantiate `BasicContractRef`.

```
# In the `basic_contract_ref` directory
cargo contract build
cargo contract instantiate \
    --constructor new \
    --args 0x74a610235df4ff0161f0247e4c9d73934b70c1520d24ef843f9df9fcc3e63caa \
    --suri //Alice --salt $(date +%s)
```

If successful, this will output in a contract address for `BasicContractRef` similar to:

```
Contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq
```

#### Calling with `OtherContract` through `BasicContractRef`

Finally, we can call the `OtherContract` methods through `BasicContractRef` as follows:

```
cargo contract call --contract 5CWz6Xnivp9PSoZq6qPRP8xVAShZgtNVGTCLCsq3qzqPV7Rq \
    --message flip_and_get --suri //Alice --dry-run
```

Which will result in something like:

```
Result Success!
Reverted false
Data Ok(true)
```

## Builders
The
[`CreateBuilder`](https://docs.rs/ink_env/6.0.0/ink_env/call/struct.CreateBuilder.html)
and
[`CallBuilder`](https://docs.rs/ink_env/6.0.0/ink_env/call/struct.CallBuilder.html)
offer low-level, flexible interfaces for performing cross-contract calls. The
`CreateBuilder` allows you to instantiate already uploaded contracts, and the
`CallBuilder` allows you to call messages on instantiated contracts.

### CreateBuilder
The `CreateBuilder` offers an an easy way for you to **instantiate** a contract. Note
that you'll still need this contract to have been previously uploaded.

:::note

For a refresher on the difference between `upload` and `instantiate`
[see here](../getting-started/deploying.md).

:::

In order to instantiate a contract you need a reference to your contract, just like in
[the previous section](#contract-references).

Below is an example of how to instantiate a contract using the `CreateBuilder`. We will:
- instantiate the uploaded contract with a `code_hash` of `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- instantiating with the `new` constructor
- with the following arguments
    - a `u8` with value `42`
    - a `bool` with value `true`
    - an array of 32 `u8` with value `0x10`
- generate the address (`AccountId`) using the specified `salt_bytes`
- and we expect it to return a value of type `MyContractRef`

```rust
use contract::MyContractRef;
let my_contract: MyContractRef = build_create::<MyContractRef>()
    .instantiate_v1()
    .code_hash(Hash::from([0x42; 32]))
    .gas_limit(0)
    .endowment(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("new")))
            .push_arg(42)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .salt_bytes(&[0xDE, 0xAD, 0xBE, 0xEF])
    .returns::<MyContractRef>()
    .instantiate();
```

Since `CreateBuilder::instantiate()` returns a contract reference, we can use this
contract reference to call messages just like in the
[previous section](#contract-references).

### CallBuilder
The `CallBuilder` gives you a couple of ways to call messages from other contracts. There
are two main approaches to this: `Call`s and `DelegateCall`s. We will briefly cover both
here.

#### CallBuilder: Call
When using `Call`s the `CallBuilder` requires an already instantiated contract.

We saw an example of how to use the `CreateBuilder` to instantiate contracts in the
[previous section](#contract-references).

Below is an example of how to call a contract using the `CallBuilder`. We will:
- make a regular `Call`
- to a contract at the address `0x4242...`
- with no gas limit specified (`0` means unlimited)
- sending `10` units of transferred value to the contract instance
- calling the `flip` message
- with the following arguments
    - a `u8` with value `42`
    - a `bool` with value `true`
    - an array of 32 `u8` with value `0x10`
- and we expect it to return a value of type `bool`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .call(AccountId::from([0x42; 32]))
    .call_v1()
    .gas_limit(0)
    .transferred_value(10)
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<bool>()
    .invoke();
```

Note:

Message arguments will be encoded in the order in which they are provided to the `CallBuilder`.
This means that they should match the order (and type) they appear in the function
signature.

You will not be able to get any feedback about this at compile time. You will only
find out your call failed at runtime!

#### CallBuilder: Delegate Call
You can also use the `CallBuilder` to craft calls using `DelegateCall` mechanics.
If you need a refresher on what delegate calls are,
[see this article](https://medium.com/coinmonks/delegatecall-calling-another-contract-function-in-solidity-b579f804178c).

In the case of `DelegateCall`s, we don't require an already instantiated contract.
We only need the `code_hash` of an uploaded contract.

Below is an example of how to delegate call a contract using the `CallBuilder`. We will:
- make a `DelegateCall`
- to a contract with a `code_hash` (not contract address!) of `0x4242...`
- calling the `flip` message
- with the following arguments
    - a `u8` with value `42`
    - a `bool` with value `true`
    - an array of 32 `u8` with value `0x10`
- and we expect it to return an `i32`

```rust
let my_return_value = build_call::<DefaultEnvironment>()
    .delegate(ink::primitives::Hash::from([0x42; 32]))
    .exec_input(
        ExecutionInput::new(Selector::new(ink::selector_bytes!("flip")))
            .push_arg(42u8)
            .push_arg(true)
            .push_arg(&[0x10u8; 32])
    )
    .returns::<i32>()
    .invoke();
```

### Builder Error Handling
The `CreateBuilder` and the `CallBuilder` both offer error handling with the
`try_instantiate()` and `try_invoke()` methods respectively.

These allow contract developers to handle two types of errors:
1. Errors from the underlying execution environment (e.g the Contracts pallet)
2. Error from the programming language (e.g `LangError`s)

See the documentation for
[`try_instantiate`](https://docs.rs/ink_env/6.0.0/ink_env/call/struct.CreateBuilder.html#method.try_instantiate),
[`try_invoke`](https://docs.rs/ink_env/6.0.0/ink_env/call/struct.CallBuilder.html#method.try_invoke-2),
[`ink::env::Error`](https://docs.rs/ink_env/6.0.0/ink_env/enum.Error.html)
and
[`ink::LangError`](https://docs.rs/ink/6.0.0/ink/enum.LangError.html)
for more details on proper error handling.

:::tip

Because the `CallBuilder` requires only a contract's `AccountId` and message `selector`,
we can call Solidity contracts compiled using [Parity's revive compiler](https://github.com/paritytech/revive)
compiler and deployed to a chain that supports the `pallet-revive`.

TODO update link below to fitting example in the `ink-examples` repo
See [here](https://github.com/xermicus/call_solidity) for an example of how to do that.
:::
````

## File: versioned_docs/version-v6/basics/environment.md
````markdown
---
title: Chain Environment Types
slug: /basics/chain-environment-types
hide_title: true
---

![Environment Title Picture](/img/title/environment.svg)

# Chain Environment Types

ink! defines a trait [`Environment`](https://use-ink.github.io/ink/ink_env/trait.Environment.html)
and also a default implementation of that trait ‒ [`DefaultEnvironment`](https://use-ink.github.io/ink/ink_env/enum.DefaultEnvironment.html).

These are the types that ink! uses, if no explicit steps are taken:

```rust
/// The fundamental types of the default configuration.
#[derive(Debug, Clone, PartialEq, Eq)]
#[cfg_attr(feature = "std", derive(TypeInfo))]
pub enum DefaultEnvironment {}

impl Environment for DefaultEnvironment {
    const MAX_EVENT_TOPICS: usize = 4;

    type AccountId = AccountId;
    type Balance = Balance;
    type Hash = Hash;
    type Timestamp = Timestamp;
    type BlockNumber = BlockNumber;
    type ChainExtension = NoChainExtension;
    type EventRecord = EventRecord;
}
```

The context here is that you can use ink! on any blockchain that was built with
the [Polkadot SDK](https://polkadot.com/platform/sdk) and includes the
[`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive)
module.

Chains built with the Polkadot SDK can decide on their own which types they want
to use for e.g. the chain's block number or account id's. For example,
chains that intend to be compatible to Ethereum typically use the same
type as Ethereum for their `AccountId`.

Most Polkadot SDK chains stay with the default types though and
ink! just uses those by default as well. It is possible to configure
a different environment in the contract macro ([documentation here](https://use-ink.github.io/ink/ink/attr.contract.html#header-arguments))
though:

```rust
#[ink::contract(env = MyCustomTypes)]
```

:::caution
If you write a contract for a chain that deviates from our default
types (`DefaultEnvironment`), you have to make sure to configure that chain's
`Environment` for your contract!
:::
````

## File: versioned_docs/version-v6/basics/storing-values.md
````markdown
---
title: Storing Values
slug: /basics/storing-values
hide_title: true
---

![Storage Title Picture](/img/title/storage.svg)

# Storing Values

Here is how you store simple values in storage:

```rust
#[ink(storage)]
pub struct MyContract {
    // Store a bool
    my_bool: bool,
    // Store some number
    my_number: u32,
}
/* --snip-- */
```

## Supported Types

ink! contracts may store types that are encodable and decodable with the
[Parity SCALE Codec](https://github.com/paritytech/parity-scale-codec) which includes most Rust common data
types such as `bool`, `u{8,16,32,64,128}`, `i{8,16,32,64,128}`, `String`, tuples, and arrays.

Furthermore, ink! provides [Polkadot SDK](https://polkadot.com/platform/sdk) specific types like `AccountId`, `Balance`, and `Hash` to smart contracts as if
they were primitive types.

### String, Vector and More

The [`ink_prelude`](https://docs.rs/ink_prelude/6.0.0/ink_prelude/index.html) crate provides an efficient approach to import commonly used Rust types such as `String` and `Vec`, ensuring safe usage within an ink! contract.

This simplifies the type referencing process between the `std` and `no_std` environments. Typically, these types are defined within the `std` crate in the `std` environment, and the `alloc` crate in the `no_std` environment. Given that ink! smart contract code is compiled in both environments (`no_std` for production and `std` for unit tests), developers might find themselves writing intricate conditional compilation macros. The `ink_prelude` crate conveniently re-exports these types, eliminating this complexity.

You can use the prelude definitions like this:

```rust
#[ink::contract]
mod MyContractWithStringsAndArrays {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;

    #[ink(storage)]
    pub struct MyContract {
        // Store some String
        my_string: String,
        // Store some u32 in a vec
        my_vector: Vec<u32>,
    }
    /* --snip-- */
}
```

### Mapping

ink! also provides a `Mapping` storage type. You can read more about it [here](../datastructures/mapping.md).

### Polkadot SDK Types

Here is an example of how you would store substrate types `AccountId`, `Balance` and `Hash`:

```rust
#[ink::contract]
mod MyContract {

    // Our struct will use those default ink! types
    #[ink(storage)]
    pub struct MyContract {
        // Store some AccountId
        my_account: AccountId,
        // Store some Balance
        my_balance: Balance,
        // Store some Hash
        my_hash: Hash,
    }
    /* --snip-- */
}
```

### Enum

Enum can be used as a datatype as well. It's use in the example in the [Struct](#struct) section.

```rust
pub enum Status {
    /// An auction has not started yet.
    NotStarted,
    /// We are in the starting period of the auction, collecting initial bids.
    OpeningPeriod,
    /// We are in the ending period of the auction, where we are taking snapshots
    /// of the winning bids.
}
```

### Struct

You can even combine all the above mentioned types in a custom `struct` which you can then store in the contract's storage.

```rust
mod MyContract {
    use ink::prelude::string::String;
    use ink::prelude::vec::Vec;


    pub struct Auction {
        /// Branded name of the auction event.
        name: String,
        /// Some hash identifying the auction subject.
        subject: Hash,
        /// Auction status.
        status: Status, // Enum: Usage shown in next section
        /// Candle auction can have no winner.
        /// If auction is finalized, that means that the winner is determined.
        finalized: bool,
        /// vector
        vector: Vec<u8>,
    }

    #[ink(storage)]
    pub struct MyContract {
        // Store Auctions in a vec
        auctions: Vec<Auction>,
    }
}
```

The values of an enum should be referenced as `Status::OpeningPeriod`.

## Initializing Storage in Constructors

Constructors are how values get initialized.
Every ink! smart contract must have a constructor which is run once when a contract is created. ink! smart contracts can have multiple constructors:

Note that if you have a contract whose storage contains `Mapping'`s you will need to use
`ink_lang::utils::initialize_contract` in your constructor. See the
[`Mapping` documentation](../datastructures/mapping.md) for more details.

```rust
#[ink::contract]
mod mycontract {

    #[ink(storage)]
    pub struct MyContract {
        number: u32,
    }

    impl MyContract {
        /// Constructor that initializes the `u32` value to the given `init_value`.
        #[ink(constructor)]
        pub fn new(init_value: u32) -> Self {
            Self {
                number: init_value,
            }
        }

        /// Constructor that initializes the `u32` value to the `u32` default.
        #[ink(constructor)]
        pub fn default() -> Self {
            Self {
                number: Default::default(),
            }
        }
    /* --snip-- */
    }
}
```
````

## File: versioned_docs/version-v6/basics/upgradeability.md
````markdown
---
title: Upgradeable Contracts
slug: /basics/upgradeable-contracts
hide_title: true
---

![Upgradeable Contract Title Picture](/img/title/upgradeable-contract.svg)

# Upgradeable Contracts

Even though smart contracts are intended to be immutable by design,
it is often necessary to perform an upgrade of a smart contract. 

The developer may need to fix a critical bug or introduce a new feature.
ink! supports different upgrade strategies that we describe on this page.

## Proxy Forwarding

This method relies on the ability of contracts to proxy calls to other contracts.

### Properties

- Forwards any call that does not match a selector of itself to another contract.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the contract to which calls are forwarded.

```
User ---- tx ---> Proxy ----------> Implementation_v0
                     |
                      ------------> Implementation_v1
                     |
                      ------------> Implementation_v2
```

### Example

Our proxy contract will have these 2 storage fields:

```rust
#[ink(storage)]
pub struct Proxy {
    /// The `AccountId` of a contract where any call that does not match a
    /// selector of this contract is forwarded to.
    forward_to: AccountId,
    /// The `AccountId` of a privileged account that can update the
    /// forwarding address. This address is set to the account that
    /// instantiated this contract.
    admin: AccountId,
}
```

We then need a way to change the address of a contract to which we forward calls to
and the actual message selector to proxy the call:

```rust
impl Proxy {
    /// Changes the `AccountId` of the contract where any call that does
    /// not match a selector of this contract is forwarded to.
    ///
    /// # Note
    /// Only one extra message with a well-known selector `@` is allowed.
    #[ink(message, selector = @)]
    pub fn change_forward_address(&mut self, new_address: AccountId) {
        assert_eq!(
            self.env().caller(),
            self.admin,
            "caller {:?} does not have sufficient permissions, only {:?} does",
            self.env().caller(),
            self.admin,
        );
        self.forward_to = new_address;
    }

    /// Fallback message for a contract call that doesn't match any
    /// of the other message selectors.
    ///
    /// # Note:
    ///
    /// - We allow payable messages here and would forward any optionally supplied
    ///   value as well.
    /// - If the self receiver were `forward(&mut self)` here, this would not
    ///   have any effect whatsoever on the contract we forward to.
    #[ink(message, payable, selector = _)]
    pub fn forward(&self) -> u32 {
        ink::env::call::build_call::<ink::env::DefaultEnvironment>()
            .call(self.forward_to)
            .transferred_value(self.env().transferred_value())
            .call_flags(
                ink::env::CallFlags::default()
                    .set_forward_input(true)
                    .set_tail_call(true),
            )
            .invoke()
            .unwrap_or_else(|err| {
                panic!(
                    "cross-contract call to {:?} failed due to {:?}",
                    self.forward_to, err
                )
            });
        unreachable!(
            "the forwarded call will never return since `tail_call` was set"
        );
    }
}
```

:::tip

Take a look at the selector pattern in the attribute macro: by declaring `selector = _`
we specify that all other messages should be handled by this message selector.

:::

Using this pattern, you can introduce other message to your proxy contract.
Any messages that are not matched in the proxy contract 
will be forwarded to the specified contract address.

## Delegating execution to foreign Contract Code with `delegate_call`

Similar to proxy-forwarding we can delegate execution to another code hash uploaded on-chain.

### Properties 

- Delegates any call that does not match a selector of itself to another contract.
- Code is required to be uploaded on-chain, but is not required to be instantiated.
- State is stored in the storage of the original contract which submits the call.
- Storage layout must be identical between both contract codes.

```
                                (Storage of Contract A)
User ---- tx ---> Contract A ----------> Code_v0
                     |                     ^
                     |                     |
                     ⌊_____________________⌋
                    Storage is delegated to
```

### Example

Suppose we have defined of the caller contract as following:

```rust
#[ink(storage)]
pub struct Delegator {
    addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
    counter: i32,
}
```

Then let's define two messages that separately calls to update `addresses` and `counter` separately:

```rust
/// Increment the current value using delegate call.
#[ink(message)]
pub fn inc_delegate(&self, contract_addr: ink::H160) {
    let selector = ink::selector_bytes!("inc");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(contract_addr)
        // if the receiver is set to `&mut self`,
        // then any changes made in `inc_delegate()` before the delegate call
        // will be persisted, and any changes made within delegate call will be discarded.

        // Therefore, it is advised to use `&self` receiver with a mutating delegate call,
        // or `.set_tail_call(true)` to flag that any changes made by delegate call should be flushed into storage. 
        // .call_flags(CallFlags::default().set_tail_call(true))
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}

/// Adds entry to `addresses` using delegate call.
/// Note that we don't need `set_tail_call(true)` flag
/// because `Mapping` updates the storage instantly on-demand.
#[ink(message)]
pub fn add_entry_delegate(&mut self, contract_addr: ink::H160) {
    let selector = ink::selector_bytes!("append_address_value");
    let _ = build_call::<DefaultEnvironment>()
        .delegate(contract_addr)
        .exec_input(ExecutionInput::new(Selector::new(selector)))
        .returns::<()>()
        .try_invoke();
}
```

ink! provides an intuitive call builder API for you to compose your call.
As you can see that `inc_delegate()` can be built a call in slightly different manner than `add_entry_delegate()`.
That's because if the delegated code modifies layout-full storage
(i.e. it contains at least non-`Lazy`, non-`Mapping` field),
either the receiver should be set to `&self` or the `.set_tail_call(true)` flag of `CallFlags` needs to be specified, and the storage layouts must match.

This is due to the way ink! execution call stack is operated. Non-`Lazy`, non-`Mapping` field are first loaded into the memory.
If `&mut self` receiver is used, then when delegate call is completed, the original state before the call will be persisted and flushed into the storage.
Therefore, `.set_tail_call(true)` needs to be set to indicate that, that delegate call's storage context is the final (i.e. _tail) one that needs to be flushed.
This also makes any code after the delegate call unreachable.
With `&self` receiver, `.set_tail_call(true)` is not required since no storage flushing happens at the end of the original caller's function.
(see [Stack Exchange Answer](https://substrate.stackexchange.com/a/3352/3098) for details on how changes are flushed into storage).



:::note Key compatibility
If the delegated code modifies `Lazy` or `Mapping` field, the keys must be identical and `.set_tail_call(true)` is optional 
regardless of the function receiver.
This is because `Lazy` and `Mapping` interact with the storage directly instead of loading and flushing storage states.
:::

Now let's look at the "delegatee" code:

```rust
#[ink::contract]
pub mod delegatee {
    use ink::storage::{
        traits::ManualKey,
        Mapping,
    };
    #[ink(storage)]
    pub struct Delegatee {
        // `ManualKey` must be the same as in the original contract.
        addresses: Mapping<AccountId, i32, ManualKey<0x23>>,
        counter: i32,
        // Uncommenting below line will break storage compatibility.
        // flag: bool,
    }

    impl Delegatee {
        /// When using the delegate call. You only upload the code of the delegatee
        /// contract. However, the code and storage do not get initialized.
        ///
        /// Because of this. The constructor actually never gets called.
        #[allow(clippy::new_without_default)]
        #[ink(constructor)]
        pub fn new() -> Self {
            unreachable!(
                "Constructors are not called when upgrading using `set_code_hash`."
            )
        }

        /// Increments the current value.
        #[ink(message)]
        pub fn inc(&mut self) {
            self.counter = self.counter.checked_add(2).unwrap();
        }

        /// Adds current value of counter to the `addresses`
        #[ink(message)]
        pub fn append_address_value(&mut self) {
            let caller = self.env().caller();
            self.addresses.insert(caller, &self.counter);
        }
    }
}
```

As you can see, delegatee's code looks like a normal ink! Smart Contract with some important features:
- Storage layout is identical to the original contract's storage
- `addresses` mapping key is identical
- Constructor does not have any logic, as the code is never instantiated. (It can be, but plays no effect on the execution)

## Note on the usage of wildcard selectors

When working with cross-contract calls, developers are required to be aware of the some important changes.


Since ink! 5 we have restricted the usage of the wildcard selector due to 
[security reasons](https://blog.openzeppelin.com/security-review-ink-cargo-contract#custom-selectors-could-facilitate-proxy-selector-clashing-attacks).

:::danger Beware
Due to [IIP-2](https://github.com/use-ink/ink/issues/1676), ink! only allows
to contain a single message with a well-known selector `@` when the other message
with the wildcard selector `_` is defined.
:::

See [example](https://github.com/use-ink/ink-examples/tree/main/wildcard-selector)
for illustration on how it can be used in practice.

## Note on `CallFlags`

`CallFlags` provide fine-grained control over the cross-contract execution.

Some useful properties:
- Re-entry is disable by default. It can be enabled with `.set_allow_reentry(true)` flag.
- The call execution context is returned to the caller by default. You can finish execution in the callee with `.set_tail_call(true)` flag.
- `.set_clone_input(true)` clones the input of the caller's messages. It can be used with when `.set_tail_call(false)`.
- `.set_forward_input(true)` consumes the input of the caller's message which can be used after.  It can be used with when `.set_tail_call(true)`. 

## Replacing Contract Code with `set_code_hash()`

Following [Polkadot SDK's runtime upgradeability](https://docs.polkadot.com/develop/parachains/maintenance/runtime-upgrades/) 
philosophy, ink! also supports an easy way to update your contract code via the special function 
[`set_code_hash()`](https://use-ink.github.io/ink/ink_env/fn.set_code_hash.html).

### Properties

- Updates the contract code using `set_code_hash()`. 
This effectively replaces the code which is executed for the contract address.
- The other contract needs to be deployed on-chain.
- State is stored in the storage of the originally instantiated contract.


### Example

Just add the following function to the contract you want to upgrade in the future.

```rust 
/// Modifies the code which is used to execute calls to this contract address (`AccountId`).
///
/// We use this to upgrade the contract logic. We don't do any authorization here, any caller
/// can execute this method. In a production contract you would do some authorization here.
#[ink(message)]
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {
        panic!(
            "Failed to `set_code_hash` to {:?} due to {:?}",
            code_hash, err
        )
    });
    ink::env::debug_println!("Switched code hash to {:?}.", code_hash);
}
```

### Storage Compatibility

It is the developer's responsibility to ensure 
that the new contract's storage is compatible with the storage of the contract that is replaced.

:::danger Beware

You should not change the order in which the contract state variables are declared, nor their type!

Violating the restriction will not prevent a successful compilation,
but will result in **the mix-up of values** or **failure to read the storage correctly**.
This can be a result of severe errors in the application utilizing the contract.

:::


If the storage of your contract looks like this:
```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
    y: bool,
}
```

The procedures listed below will make it ***invalid***

Changing the order of variables:

```rust
#[ink(storage)]
pub struct YourContract {
    y: bool,
    x: u32,
}
```

Removing an existing variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u32,
}
```

Changing the type of a variable:

```rust
#[ink(storage)]
pub struct YourContract {
    x: u64,
    y: bool,
}
```

Introducing a new variable before any of the existing ones:

```rust
#[ink(storage)]
pub struct YourContract {
    z: Vec<u32>,
    x: u32,
    y: bool,
}
```

### A little note on the determinism of contract addresses

:::note

If your contract utilizes `set_code_hash`, it no-longer holds a deterministic address assumption.
_You can no longer assume that a contract address identifies a specific code hash._

:::

## Examples

Examples of upgradable contracts can be found in 
[our contract examples repository](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts).
````

## File: versioned_docs/version-v6/datastructures/storage-layout.md
````markdown
---
title: Storage Layout
slug: /datastructures/storage-layout
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Storage Title Picture](/img/title/storage.svg)

# Storage Layout

Smart contract authors are given some flexibility in regards on how they want to organize
the storage layout of their contracts.
Let's dive deeper into the concepts behind ink! storage to get a better understanding
of some of its implications and limitations.

## Storage Organization

The following schema depicts the storage which is exposed
to ink! by the [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/):

<div class="schema">
    <img src={useBaseUrl('/img/kv-revive.svg')} alt="Storage Organization: Layout" />
</div>

Storage data is always encoded with the
[`SCALE`](https://docs.polkadot.com/polkadot-protocol/basics/data-encoding/#scale-codec-libraries) codec.
The storage API operates by storing and loading entries into and from a single storage
cells, where each storage cell is accessed under its own dedicated storage key. To some
extent, the storage API works similar to a traditional key-value database.

## Packed vs Non-Packed layout

Types that can be stored entirely under a single storage cell are considered
[`Packed`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/trait.Packed.html).
By default, ink! tries to store all storage struct fields under a single storage cell.
Consequentially, with a `Packed` storage layout, any message interacting with the contract
storage will always need to operate on the entire contract storage struct.

For example, if we have a somewhat small contract storage struct consisting of only a few
tiny fields, pulling everything from the storage inside every message is not
problematic. It may even be advantageous - especially if we expect most messages to
interact with most of the storage fields.

On the other hand, this can get problematic if we're storing a large `ink::prelude::vec::Vec`
in the contract storage but provide messages that do not need to read and write from this
`Vec`. In that scenario, each and every contract message bears runtime overhead by dealing
with that `Vec`, regardless whether they access it or not. This results in extra gas costs.
To solve this problem we need to turn our storage into a non-packed layout somehow.

<div class="schema">
    <img src={useBaseUrl('/img/packed-revive.svg')} alt="Storage Organization: Packed" />
</div>

:::caution

If any type exhibiting `Packed` layout gets large enough (an ever-growing `Vec` might be
a prime candidate for this), it will break your contract.
This is because for encoding and decoding storage items, there is a buffer with only limited
capacity (around 16KB in the default configuration) available. This means any contract
trying to decode more than that will trap! If you are unsure about the potential size a
data structure might get, consider using an ink! `Mapping`, which can store an arbitrary
number of elements, instead.

:::

## Eager Loading vs. Lazy Loading
ink! provides means of breaking the storage up into smaller pieces, which can be loaded
on demand, with the
[`Lazy`](https://use-ink.github.io/ink/ink/storage/struct.Lazy.html) primitive.
Wrapping any storage field inside a `Lazy` struct makes the storage
struct in which that field appears also
non-`Packed`, preventing it from being eagerly loaded during arbitrary storage operations:

<div class="schema">
    <img src={useBaseUrl('/img/storage-layout-revive.svg')} alt="Storage Organization: Layout with a Lazy field" />
</div>

Note that in above illustration, the key of `0x12345678` just serves as an example; we'll
learn more about storage key calculation
[later in this chapter](#manual-vs-automatic-key-generation).

The following example demonstrates how we can solve the problem introduced in the above
section. You'll notice that for the lazily loaded storage field, we now work with getters
and setters to access and modify the underlying storage value:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]

#[ink::contract]
mod mycontract {
    use ink::prelude::vec::Vec;
    use ink::storage::Lazy;

    #[derive(Default)]
    #[ink(storage)]
    pub struct MyContract {
        tiny_value: Balance,
        /// This vector might get large and expensive to work with.
        /// We want to enforce a non-`Packed` storage layout.
        large_vec: Lazy<Vec<Balance>>,
    }

    impl MyContract {
        #[ink(constructor)]
        pub fn new() -> Self {
            Self::default()
        }

        /// Because `large_vec` is loaded lazily, this message is always cheap.
        #[ink(message)]
        pub fn get_balance(&self) -> Balance {
            self.tiny_value
        }

        /// Lazy fields like `large_vec` provide `get()` and `set()` storage operators.
        #[ink(message)]
        pub fn add_balance(&mut self, value: Balance) {
            let mut balances = self.large_vec.get_or_default();
            balances.push(value);
            self.large_vec.set(&balances);
        }
    }
}
```

:::caution

`ink::prelude::vec::Vec`'s are always loaded in their entirety. This is because all elements
of the `ink::prelude::vec::Vec` live under a single storage key. Wrapping the
`ink::prelude::vec::Vec` inside `Lazy`, like the
provided example above does, has no influence on its inner layout. If you are dealing with
large or sparse arrays on contract storage, consider using a `Mapping` instead.

:::

## Manual vs. Automatic Key Generation

By default, keys are calculated automatically for you, thanks to the
[`AutoKey`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/struct.AutoKey.html)
primitive. They'll be generated at compile time and ruled out for conflicts.
However, for non-`Packed` types like `Lazy` or the `Mapping`, the
[`ManualKey`](https://docs.rs/ink_storage_traits/6.0.0/ink_storage_traits/struct.ManualKey.html)
primitive allows manual control over the storage key of a field like so:

```rust
#[ink(storage)]
pub struct MyContract {
    /// The storage key for this field is always `0x0000007f`
    inner: Lazy<bool, ManualKey<127>>,
}
```

This may be advantageous: Your storage key will always stay the same, regardless of
the version of your contract or ink! itself (note that the key calculation algorithm may
change with future ink! versions).

:::tip

Using `ManualKey` instead of `AutoKey` might be especially desirable for upgradable
contracts, as using `AutoKey` might result in a different storage key for the same field
in a newer version of the contract. This may break your contract after an upgrade 😱!

:::

The storage key of the contracts root storage struct defaults to `0x00000000`.  However,
contract developers can set the key to an arbitrary 4 bytes value by providing it a
`ManualKey` like so:

```rust
/// Manually set the root storage key of `MyContract` to be `0xcafebabe`.
#[ink(storage)]
pub struct MyContract<KEY: StorageKey = ManualKey<0xcafebabe>> {
    value: bool,
}
```

## Considerations

It might be worthwhile to think about the desired storage layout of your contract. While
using a `Packed` layout will keep your contracts overall code size smaller, it can cause
unnecessarily high gas costs. Thus, we consider it a good practice to break up large
or complex storage layouts into reasonably sized distinct storage cells.

:::note

ink! `Mapping`s are always non-`Packed` and loaded lazily, one key-value pair at the time.

:::
````

## File: versioned_docs/version-v6/faq/migrating-from-ink-4-to-5.md
````markdown
---
title: "Migration: ink! v4 → v5"
slug: /faq/migrating-from-ink-4-to-5
---

![Migration 4.x To 5.0 Title Picture](/img/title/migration-4.x-to-5.0.svg)

We've made a couple of breaking changes from ink! 4.x to ink! 5.0.
On this page we outline how you can migrate existing dApps and
contracts from 4.x to 5.0.

This release addresses the majority of issues raised in [the OpenZeppelin
security review](https://blog.openzeppelin.com/security-review-ink-cargo-contract).
In particular, we addressed the proxy selector clashing attack.

You can find the full changelog of the 5.0 release [here](https://github.com/use-ink/ink/blob/master/CHANGELOG.md#version-500).

:::caution
This migration guide only considers your code base! Not your storage data!

If you have an existing contract on-chain you might not be able to just
upgrade the code on-chain, you possibly also have to migrate your storage data.

The relevant change that you have to take into consideration is
[#1897](https://github.com/use-ink/ink/pull/1897).
A data migration may be required when your contract reads data from storage and truncates
the data when decoding it.
We've described this in more detail below, in the section
["Fail when decoding from storage and not all bytes consumed"](#fail-when-decoding-from-storage-and-not-all-bytes-consumed).
:::

## How to upgrade

- Change the dependency versions of `ink` and `ink_e2e` in your contracts `Cargo.toml` to `5`.
- Update your local `cargo-contract` installation to 4.0.
- Read through this page.

## Compatibility

### Substrate/Polkadot SDK

There are four new functions that are only compatible from particular releases upwards:

- v2 of `call` and `instantiate`: `>= polkadot-v1.8.0` and `substrate-contracts-node >= v0.39.0`
  ([explained here](#call-and-instantiate-v2)).
- `lock_delegate_dependency` and `unlock_delegate_dependency`:
  `>= polkadot-v1.9.0` and `substrate-contracts-node >= v0.40.0` ([explained here](#upgradeable-contracts-delegate_dependency)).

These four functions are all opt-in! None of them are required to use ink! 5.0, they are only
required if you want to access the particular functionality they provide.
Please see the linked explainers for more details about them.

If you are not using any of those four functions, the same requirements as for ink! 4.0 holds:

- `pallet-contracts` >= `polkadot-v0.9.37`.
- `substrate-contracts-node` >= `v0.24.0`

### How do I find out if a chain is compatible with ink! 5?

You can query `contracts::palletVersion()` via the chain state RPCs. It has to
be `>= 9` for ink! 5.0 to be compatible, if you don't use any of the four functions
mentioned above.
For the above mentioned four functions please see the respective sections on this page,
there we explain how to find out if a chain supports them there.

You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » `contracts` » `palletVersion()` » Click on the `+` on the right.

<img src="/img/pallet-version.png"  />

The following chains are in production and support ink! 5.0, if you are not using any of the
four functions mentioned above:

<div className="row">
    <div className="col text--center">
        <a href="https://alephzero.org">
            <img src= "/img/chains/aleph-zero.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://astar.network">
            <img src= "/img/chains/astar.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://shiden.astar.network">
            <img src= "/img/chains/shiden.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="http://phala.network">
            <img src= "/img/chains/phala.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org">
            <img src= "/img/chains/pendulum.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://pendulumchain.org/amplitude">
            <img src= "/img/chains/amplitude.svg" className="chain" />
        </a>
    </div>
</div>

<div className="row">
    <div className="col text--center">
        <a href="https://www.ternoa.network/">
            <img src= "/img/chains/ternoa.svg" className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://krest.peaq.network/">
            <img src= "/img/chains/krest.svg" className="chain" />
        </a>
    </div>
</div>

### `cargo-contract` 4.0

Together with ink! 5.0 we've released `cargo-contract` 4.0.

:::info
You have to use `cargo-contract` >= 4.0 for ink! 5.0 contracts!

You can upgrade via:

```rust
cargo install cargo-contract --version ^4
```

:::

Make sure that e.g. your CI also uses at least `cargo-contract` 4.0 with ink! v5.0.
If you have wrapper scripts around `cargo-contract`, you should
ensure that this version is enforced, otherwise users will get an error.

### Tooling & Libraries

- Stable Rust >= 1.75
- `cargo-contract` >= v4.0
- `polkadot-js/api` and `polkadot-js/api-contract` >= 10.12.1
- [`use-inkathon`](https://github.com/scio-labs/use-inkathon): upgrade the `polkadot-js/api` and `polkadot-js/api-contract` dependencies in your project to >= 10.12.1
- [ink!athon](https://inkathon.xyz/) >= 0.7.0
- [`typechain-polkadot`](https://github.com/Brushfam/typechain-polkadot) >= 1.2.0

## Important Changes

We had to introduce a number of changes that require you to manually upgrade
your contract from 4.x to 5.0. The steps to do this are explained in this section.

### `scale` dependencies were moved to `ink` entrance crate

This change was done to ensure that you always use the correct scale dependency versions
with an ink! version. The relevant PR is [#1890](https://github.com/use-ink/ink/pull/1890).

We removed the requirement for contracts to have direct dependencies on `parity-scale-codec`
and `scale-info` in their `Cargo.toml`.
You can now remove those dependencies from your contracts `Cargo.toml`:

```diff
ink = { version = "4.3", default-features = false }
-scale = { package = "parity-scale-codec", version = "3", default-features = false, features = ["derive"] }
-scale-info = { version = "2.6", default-features = false, features = ["derive"], optional = true }
```

Both crates have been re-exported from the `ink` umbrella crate: `ink::scale_info` and `ink::scale`.

We created a convenience macro to derive the re-exported traits `ink::scale::Encode`,
`ink::scale::Decode` and `ink::scale_info::TypeInfo`.

```rust
// Previously
#[scale::Encode, scale::Decode)]
#[cfg_attr(feature = "std", derive(::scale_info::TypeInfo))]
pub enum Error {}


// Now
#[ink::scale_derive(Encode, Decode, TypeInfo)]
pub enum Error {}
```

The documentation of the macro can be found [here](https://docs.rs/ink/5.0.0/ink/attr.scale_derive.html).

### Wildcard selectors: only one other message is allowed in the contract besides the wildcard selector

Following [our security review by OpenZeppelin](https://blog.openzeppelin.com/security-review-ink-cargo-contract),
we've tightened the usage of wildcard selectors.
With ink! 5.0 we allow only exactly one other contract message with a well-known reserved
selector to be defined. In ink! 4.x, more than one other message was allowed.

Read more in [the PR](https://github.com/use-ink/ink/pull/1708) and [IIP-2: Limit contracts with a wildcard selector to one other message](https://github.com/use-ink/ink/issues/1676).

The proposal is to restrict contracts with a wildcard selector to only have one other message
with a reserved/well-known selector. This guarantees that there are no selector clashes,
either by chance or malicious intent, and that the Proxy will only handle messages intended for it.

If a contract uses a wildcard selector `#[ink(message, payable, selector = _)]` it _MAY_ define one
other message. This message _MUST_ use the reserved selector `@`.
This selector _MUST_ only be used in conjunction with a wildcard selector.

```rust
/// Handles any message with no matching selector in this proxy contract
#[ink(message, selector = _)]
pub fn fallback(&self) {
    // forward call to the "logic" contract which actually executes the call
}

#[ink::scale_derive(Decode)]
pub enum ProxyMessage {
    UpgradeContract(Hash),
}

/// One other message allowed to handle messages.
/// Fails to compile unless `@` is used as the selector.
#[ink(message, selector = @)]
pub fn handler(&self, msg: ProxyMessage) {
  match msg {
    ProxyMessage(hash) => { }
  }
}

/// An additional message. Fails to compile when uncommented.
// #[ink(message)]
// pub fn additional_message(&self, msg: ProxyMessage) {
//    match msg {
//        ProxyMessage(hash) => ...
//    }
// }
```

### Events 2.0

In prior ink! versions, events were defined inside the `#[ink::contract]` macro.
With ink! 5.0 we decouple events from the `#[ink::contract]` macro,
allowing events to be shared between contracts.
We've updated [the Events documentation page](../basics/events.md) accordingly.

The syntax of defining events within the main `#[ink::contract]` macro will continue to work,
no code changes in existing contracts are required to update to the new syntax.

:::caution
The topic calculation changed in general, so also for events that are declared inside the
`#[ink::contract]` macro!

This is a breaking change for any client code which uses topics to filter events.

Please see [#1827](https://github.com/use-ink/ink/pull/1827) for details.
:::

#### Custom signature topics

In [#2031](https://github.com/use-ink/ink/pull/2031) we introduced an
optional attribute `signature_topic` to the `#[ink::event]` and `#[ink(event)]` macros.
It can be used to specify the signature topic for a specific event manually, instead of the
automatic topic calculation.

### No more unchecked arithmetic

Unchecked arithmetic operations in a contract are no longer supported for arithmetic
safety reasons. Compiling a contract that contains those will fail gracefully.

If you haven't already done, you now need to handle overflows that could occur.
Rust supports different possibilities of doing so (saturating, "wrap around",
and unchecked arithmetic operations) .
See [this](https://doc.rust-lang.org/book/ch03-02-data-types.html#scalar-types) section
of the Rust Programming Language for a thorough explanation on how to do safe arithmetic
operations in Rust.

This change was introduced in [#1831](https://github.com/use-ink/ink/pull/1831).

### Fail when decoding from storage and not all bytes consumed

If a contract previously relied on successful decoding which does not consume all bytes,
then recompiling with a version of ink! which includes this change will cause that contract
to trap at runtime when attempting to decode.

A simple example would be if a storage cell contains some bytes which were in the first place
an encoded `u32`. If the contract attempts to decode those into a `u8`
this would previously have succeeded, now the contract would trap.

Here's a code example of behavior that previously worked for ink! 4.x, but
would error now:

```rust
let key = 0u32;
let value = [0x42; 32];
ink::env::set_contract_storage(&key, &value);

// Only attempt to read the first byte (the `u8`) of the storage value data
let _loaded_value: Option<u8> = ink::env::get_contract_storage(&key)
    .map_err(|e| format!("get_contract_storage failed: {:?}", e))?;
```

We introduced this change in [#1897](https://github.com/use-ink/ink/pull/1897).

### [ink_e2e] API Changes

#### Builder API

In [#1917](https://github.com/use-ink/ink/pull/1917) we reworked the E2E API with
a builder API.
`instantiate`, `call` and `upload` will now return a builder instance. You can
specify optional arguments with builder methods, and submit the call for on-chain
execution with the `.submit()` method, or dry-run it with `dry_run()`.

```rust
let contract = client
    .instantiate("flipper", &ink_e2e::alice(), &mut constructor)
    .submit()
    .await
    .expect("instantiate failed");
let mut call_builder = contract.call_builder::<Flipper>();

let get = call_builder.get();
let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await;
assert!(matches!(get_res.return_value(), false));
```

#### Extra gas margin

As part of [#1917](https://github.com/use-ink/ink/pull/1917) we added the possibility
to specify a gas margin (in percentage) as part of the on-chain call.

There are cases when gas estimates may not necessarily be accurate enough due to the complexity
of the smart contract logic that adds additional overhead and gas consumption.
Therefore, it is helpful to allow to specify an extra portion of the gas to be added to the
limit (i.e. 5%, 10%).

The method `.extra_gas_portion(margin: u64)` method is part of the builder API:

- [`ink_e2e::InstantiateBuilder::extra_gas_portion`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/struct.InstantiateBuilder.html#method.extra_gas_portion)
- [`ink_e2e::CallBuilder::extra_gas_portion`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/struct.CallBuilder.html#method.extra_gas_portion)

#### Improved `call()` API

We removed the `build_message()` function with its unhandy callback.

```rust
// Previously
let first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)
    .call(|contract| contract.insert_balance(1_000));

// Now
let first_insert = ink_e2e::build_message::<MappingsRef>(contract_id)
    .call().insert_balance(1_000));
```

See [#1782](https://github.com/use-ink/ink/pull/1782) for more details.

#### Removed `additional_contracts` parameter

`additional_contracts` parameter which is part of `#[ink_e2e:test]` has been removed in [#2098](https://github.com/use-ink/ink/pull/2098).
This information is now implied from the contract's manifest.
Simply, add the other contract as dependency with the `ink-as-a-dependency` feature enabled.
The test will detect the contract and build it as part of the test.

####

In [#2076](https://github.com/use-ink/ink/pull/2076), we've added a new
[`remove_code`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/trait.ContractsBackend.html#method.remove_code)
function to the E2E API:

```rust
let contract = client
    .remove_code(&ink_e2e::alice(), code_hash)
    // Submit the call for on-chain execution.
    .submit()
    .await
    .expect("remove failed");
```

### New Data Structure: `StorageVec`

We've added a `Vec`-like data structure, built on top of Mapping.

This allows to retrieve elements from a vector and grow it without
having to load and push all elements.
For `Vec`, the cost of reading or writing a single element grows linearly corresponding
to the number of elements in the vector (its length). Additionally, the maximum capacity
of the whole vector is limited by the size of [ink!'s static buffer](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
used during ABI encoding and decoding (default 16 KiB).
`StorageVec` on the other hand allows to access each element individually.

With a `Vec` it's possible to e.g. introduce a security issue in your contract
where an attacker can fill the `Vec`, making it very costly for other users to
access it or write to it.

You can find verbatim documentation on `StorageVec` [here](../datastructures/storagevec.md).
The page explains when to use `StorageVec` and when not.
The Rust docs can be found [here](https://docs.rs/ink/5.0.0/ink/storage/struct.StorageVec.html).

### Fallible methods for `Lazy`, `Mapping`, `StorageVec`

In [#1910](https://github.com/use-ink/ink/pull/1910) we added `try_*` methods for
reading and writing `Lazy` and `Mapping` values to and from storage.
The try methods correspond to `Mapping::{insert, get, take}`, `Lazy::{set, get}`.
For `StorageVec::{peek, get, set, pop, push}` we added `try_*` methods in
[#1995](https://github.com/use-ink/ink/pull/1995).

Please see the individual Rust docs for these new methods:

- [`StorageVec`](https://docs.rs/ink/5.0.0/ink/storage/struct.StorageVec.html)
- [`Lazy`](https://docs.rs/ink/5.0.0/ink/storage/struct.Lazy.html)
- [`Mapping`](https://docs.rs/ink/5.0.0/ink/storage/struct.Mapping.html). For `Mapping`, the encoded size of the key is also accounted for.

You should use the `try_*` methods for dynamically sized values, unless you made sure
otherwise they will fit into the static buffer. The [static buffer in ink!](https://github.com/use-ink/ink/blob/master/ARCHITECTURE.md#communication-with-the-pallet)
is 16 kB by default.

We added a lint to `cargo-contract` 4.0 that will detect
potentially unsafe uses of methods for which there are safer alternatives:
[`non_fallible_api`](../linter/rules/non_fallible_api.md).

### Chain Extension API changed + Support for multiple chain extensions

With [#1958](https://github.com/use-ink/ink/pull/1958) we added support for interacting with
multiple chain extensions from ink!. This is a breaking change.

You can now e.g. have a contract that utilizes a PSP22 chain extension together with one
for random numbers.

The syntax for chain extension functions changed slightly:

```diff
-#[ink(extension = 0xfecb)]
+#[ink(function = 0xfecb)]
fn foo() {}
```

The argument type changed from `u32` to `u16`:

```diff
-/// `#[ink(extension = N: u32)]`
-Extension,
+/// `#[ink(function = N: u16)]`
+Function,
```

The top level macro `#[ink::chain_extension]` now _requires_ an `(extension = N: u16)` argument to support multiple chain extensions.
If you are using only one extension, the ID can be any `u16` number,
otherwise please consult the [`#[ink::chain_extension]` macro documentation](../macros-attributes/chain-extension.md)

```diff
-#[ink::chain_extension]
+#[ink::chain_extension(extension = 1)]
```

:::note
If the chain extension was not used in a tuple in the runtime configuration,
`extension = N: u16` can take any `u16` number.
:::

A migration in most cases should just be to rename `#[ink(extension = …)]` to
`#[ink(function = …)]`, and specifying `extension` argument in top level macro.

We added an example contract that illustrates the usage of multiple chain extensions
in one contract:
[`combined-extension`](https://github.com/use-ink/ink-examples/tree/main/combined-extension).

### `call` and `instantiate` v2

The functions to instantiate and call other contracts got an upgrade in the
`polkadot-v1.8.0` release (in the [`d250a6`](https://github.com/paritytech/polkadot-sdk/commit/d250a6e4270a77f28e2737a4faa3fb78c8ea7a85) commit),
The new v2 of them allows passing both `Weight` parts (`ref_time_limit` and `proof_size_limit`),
as well as the `storage_deposit_limit`.

The previous v1 `call` and `instantiate` functions only provided a single `gas_limit` parameter,
which was used as the value for `ref_time_limit`.
You can still use these `v1` versions.
For `call` on a call builder obtained through
[`build_call`](https://docs.rs/ink_env/5.0.0/ink_env/call/fn.build_call.html):

```
call_builder
  .call_v1()
  .gas_limit(ref_time_limit)
  .invoke();
```

For `instantiate` on [`build_create`](https://docs.rs/ink_env/5.0.0/ink_env/call/fn.build_create.html):

The new `v2` parameters can be set like so:

```rust
call_builder // or `create_builder`
  .ref_time_limit(ref_time_limit)
  .proof_size_limit(proof_size_limit)
  .storage_deposit_limit(storage_deposit_limit)
  .invoke();
```

You can find out if a chain supports the new `v2` functions for call/instantiate by
querying the `contracts::apiVersion` constant. It has to be `1`.
You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » Constants » `contracts` » `apiVersion` » Click on the `+` on the right.

<img src="/img/api-version-1.png"  />

At the time of the ink! v5 release (March 2024) no parachain with ink! support
had upgraded to `polkadot-v1.8.0` yet.

Please note that if you are using trait definitions for cross-contract calls,
direct calls from the `contract_ref!` macro are only supported with the `call_v2`.
Otherwise, you need to get the `CallBuilder` from the structure
and build the call manually.

```rust
type Erc20Wrapper = contract_ref!(Erc20);
let erc20: Erc20Wrapper = new_erc20.into();
let erc20_builder = erc20.call();
erc20_builder.total_supply().call_v1().invoke()
```

### Metadata Changes

#### Events 2.0

See [#1827](https://github.com/use-ink/ink/pull/1827) for the full details.
Two fields werere added to the objects in the `events` array:
`module_path` and `signature_topic`.

Previously the order of the events in the `events` array was significant (i.e. the first
one had an implied index of `0`), and this index could be used to determine which event
to decode.
Now that is replaced by the `signature_topic`, and the order of the events in the metadata
no longer has any significance.

See the section "[Events 2.0](#events-20)" on this page for more info.

ink! 4.0:

```json
   "events": [
      {
        "args": [ ... ],
        "docs": [ ... ],
        "label": "Transfer"
      },
      ...
  ]
```

ink! 5.0:

```diff
    "events": [
      {
        "args": [ ... ],
        "docs": [ ... ],
        "label": "...",
+       "module_path": "erc20::erc20",
+       "signature_topic": "0xb5b61a3e6a21a16be4f044b517c28ac692492f73c5bfd3f60178ad98c767f4cb"
      },
      ...
  ]
```

#### New field: `staticBufferSize`

With [#1880](https://github.com/use-ink/ink/pull/1880) we added a `"staticBufferSize"` field to
the metadata file. The unit is bytes.

See the section "[Buffer size can be customized](#buffer-size-can-be-customized)" on this page for
more info.

Example:

```diff
      "maxEventTopics": 4,
+     "staticBufferSize": 16384,
      "timestamp": { ... }
```

#### Metadata storage keys encoding change

Storage keys used to access storage data are SCALE encoded. Previously,
the contract metadata used big endian encoding to represent storage keys.
With the ink! 5.0 release, these encoding formats have been aligned,
and SCALE encoding (little endian) is now used for the metadata storage keys.
This is a breaking change, and client tools that use the storage keys from contract
metadata will need to adapt accordingly.

Please see: [#2048](https://github.com/use-ink/ink/pull/2048) for details.

Example:

```diff
    "storage": {
        "root": {
        "layout": {
            "struct": {
            "fields": [
                {
                "layout": {
                    "leaf": {
-                   "key": "0x00000159",
+                   "key": "0x59010000",
                    "ty": 0
                    }
                },
                "name": "value"
                }
            ],
            "name": "Flipper"
            }
        },
-       "root_key": "0x00000159",
+       "root_key": "0x59010000",
        "ty": 1
        }
    },
```

## Interesting New Features

### End-To-End testing with a chain snapshot

With ink! 5.0 we introduce the possibility of running your tests against the
fork (i.e. snapshot) of a live chain.

See [this page](../testing/testing-with-live-state.md) in our documentation for details.

### New lints

The new lints are:

- [`no_main`](../linter/rules/no_main.md): enforces `no_main` for contracts.
- [`primitive_topic`](../linter/rules/primitive_topic.md): no number types are allowed as event topics.
- [`storage_never_freed`](../linter/rules/storage_never_freed.md): what is written into storage can be removed again.
- [`strict_balance_equality`](../linter/rules/strict_balance_equality.md): detects usage of strict balance equality checks, a common smart contract vulnerability.
- [`non_fallible_api`](../linter/rules/non_fallible_api.md): detects the usage of potentially unsafe methods for which there are safer alternatives.

With `cargo-contract` 4.0 we added a couple new lints for common smart contract issues
and best practices.
You can run the linter via `cargo contract build --lint`.

Details on each lint can be found [here](../linter/overview.md).

### New `cargo-contract` commands

We added a bunch of helpful new commands to `cargo-contract` 4.0.
For all these commands you can also supply the `--help` cli flag to get more
info (e.g. `cargo contract storage --help`).

- `cargo contract verify`: contract verification ([#1404](https://github.com/use-ink/cargo-contract/pull/1404), [#1306](https://github.com/use-ink/cargo-contract/pull/1306))
- `cargo contract info` now outputs the language of the deployed contract, using a heuristic ([#1329](https://github.com/use-ink/cargo-contract/pull/1329))
- `cargo contract info --binary`: outputs the on-chain Wasm of the contract ([#1311](https://github.com/use-ink/cargo-contract/pull/1311/))
- `cargo contract info --all`: displays all addresses of deployed contracts on a particular chain ([#1319](https://github.com/use-ink/cargo-contract/pull/1319))
- `cargo contract storage`: displays the storage of an on-chain contract ([#1395](https://github.com/use-ink/cargo-contract/pull/1395), [#1414](https://github.com/use-ink/cargo-contract/pull/1414))

<img src="/img/cargo-contract-storage.png"  /><br/>
<img src="/img/cargo-contract-info.png"  />

### Alternative off-chain E2E testing backend support: DRink!

DRink! is a toolbox for ink! developers that allows for testing your contracts
without any running node.

It has a number of features that are pretty great:

- deploy and call your contracts synchronously, _without any delays_ related to block production or networking.
- enhanced debugging and call tracing.
- supports _arbitrary runtime_ configurations, including custom chain extensions and runtime calls.
- full control over runtime state, including block number, timestamp, etc.

See the [DRink!](https://github.com/inkdevhub/drink) page for more details.

### Contract Verification

We added a bunch of helpful documentation and `cargo-contract` commands for
contract verification. Please see the page on contract verification under "Basics"
for more details.

### We improved the contract example illustrating upgradeable contracts via `delegate_call`

See [here](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts)
for the contract example.

### Upgradeable Contracts: `delegate_dependency`

We've added support for two new host functions:

- `lock_delegate_dependency`: prevents the code at the given code hash from being removed.
- `unlock_delegate_dependency`: releases the lock on preventing the code from being removed
  from the current contract.

Having a delegate dependency allows contracts to safely delegate to another `code_hash` with
the guarantee that it cannot be deleted.

We've updated the [`upgradeable-contracts/delegator`](https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts#delegator)
example to demonstrate these new calls.
For that purpose we've also added a [`remove_code`](https://docs.rs/ink_e2e/5.0.0/ink_e2e/trait.ContractsBackend.html#method.remove_code)
function to the E2E API.

These two functions are only available from `polkadot-1.8.0` on.
You can find out if a chain supports these new functions by
querying the `contracts::apiVersion` constant. It has to be `2`.
You can use the [polakdot.js app](https://polkadot.js.org/apps/) to do this:
Developer » Chain State » Constants » `contracts` » `apiVersion` » Click on the `+` on the right.

<img src="/img/api-version-2.png"  />

At the time of the ink! v5 release (March 2024) no parachain with ink! support
had upgraded to `polkadot-v1.8.0` yet.

### We made `set_code_hash` generic

The `self.env().set_code_hash()` method now accepts the `Hash` environment type instead
of a concrete `[u8; 32]`.

```rust
// Previously
pub fn set_code(&mut self, code_hash: [u8; 32]) {
    ink::env::set_code_hash(&code_hash).unwrap_or_else(|err| {});
}

// Now
pub fn set_code(&mut self, code_hash: Hash) {
    self.env().set_code_hash(&code_hash).unwrap_or_else(|err| {});
}
```

More details in [#1906](https://github.com/use-ink/ink/pull/1906).

### Buffer size can be customized

With [#1869](https://github.com/use-ink/ink/pull/1869) we added a possibility
of setting a custom static buffer size for ink! to use.

ink! uses a static buffer for interacting with pallet-contracts, i.e. to move data
between `pallet-contracts` and a smart contract. The advantage of a static buffer
is that no gas-expensive heap allocations are necessary, all allocations are done
using simple pointer arithmetic.

The default static buffer size is 16 kB, which is enough for on-chain smart
contracts. However, the [Phala Network](https://phala.network/) parachain on Polkadot
allows the deployment of ink! contracts off-chain. Hence, for their chain certain high
computation contracts might require a larger buffer size.

### Stabilized `call_runtime`

We stabilized `call_runtime` in [#1749](https://github.com/use-ink/ink/pull/1749).
It can be used to call a runtime dispatchable from an ink! contract.

You can find a contract example and a comparison with chain extensions
[here](https://github.com/use-ink/ink-examples/tree/main/call-runtime).
We've added an example of how to end-to-end test
`call_runtime` [here](https://github.com/use-ink/ink-examples/tree/main/e2e-call-runtime).
````

## File: versioned_docs/version-v6/frontend/overview.md
````markdown
---
title: Overview
slug: /frontend/overview
hide_title: true
---

![Frontend Title Picture](/img/title/frontend.svg)

# Overview

:::caution
This page has not yet been updated to ink! v6.

TODO @peterwht Please read this page and see what's still up to date.
The idea was to no longer have tutorials on frontends here, but I would still keep
some pointers around because it's such an obviously important topic.
:::

Now after you [wrote](../getting-started/creating.md), [compiled](../getting-started/compiling.md) and [deployed your smart contract](../getting-started/deploying.md), it is time to craft a user experience around it.

This experience can take many shapes from mobile app to interactive terminal applications. In this section we are focusing on the most prominent shape in web3 right now, web apps.

Although we love Rust, the native language of the web is JavaScript. Thereby naturally the best tools for creating web experiences are available for JavaScript. Hence, the tools for smart contract interaction with JavaScript are the most advanced as well. To be precise all JavaScript tools mentioned here, actually leverage TypeScript to offer a JavaScript and a typesafe TypeScript experience.

## JavaScript/TypeScript Tools

There are several levels of abstraction where you can start your journey creating a web frontend for your contracts. Each levels offers different advantages and disadvantages. The following list is of tools. They are sorted from the most generic no third party library way to interact with Polkadot's smart contracts to the most opinionated template using libraries and proven frontend frameworks.

### Using no libraries

+ [RPC Interface](https://wiki.polkadot.network/docs/build-node-interaction) **(not recommended)**: nodes participating in the blockchain network offer an [JSON RPC interface](https://www.jsonrpc.org/) to interact with the blockchains state and capabilities.

### Low level libraries

+ [`@polkadot/api`](https://polkadot.js.org/docs/api) **(not recommended)**: allows for most general interaction with Polkadot-SDK based blockchains from JavaScript. In order to talk to smart-contracts, one would use the `pallet-contracts` runtime calls.

+ [`@polkadot/api-contract`](https://polkadot.js.org/docs/api-contract) **(recommended)**: abstraction on top of `@polkadot/api` for the `pallet-contracts`. Makes interaction with smart contracts more comfortable and type safe.

### React

+ [`useInkathon`](https://github.com/scio-labs/use-inkathon) **(recommended)**: A hooks library for the popular frontend javascript framework React with focus on smart-contract interactions. Built using `@polkadot/api` & `@polkadot/api-contract`.

### React and Next.js

+ [`inkathon`](https://github.com/scio-labs/inkathon) **(recommended)**: Full Stack web app template using the popular full stack template `Nextjs`. Itself is using `useInkathon`. The fastest way to get up and running with a smart contract and a corresponding web app.

## Other Languages

Of course the browser and JavaScript should not be the one and only platform for smart contract frontends. It's just the most mature for smart contract frontend tooling.

The following is a list of libraries which could be used to craft smart-contract dApps on other platforms than the web.

+ [novasamatech/substrate-sdk-ios](https://github.com/novasamatech/substrate-sdk-ios): low level generic iOS SDK for substrate.

+ [novasamatech/substrate-sdk-android](https://github.com/novasamatech/substrate-sdk-android): low level Android SDK for substrate.

+ [paritytech/subxt](https://github.com/paritytech/subxt): Rust library to submit extrinsics (transactions) to a substrate node via RPC.

+ [polkascan/py-substrate-interface](https://github.com/polkascan/py-substrate-interface/blob/master/docs/usage/ink-contract-interfacing.md): Python library to interface with Substrate nodes.
````

## File: versioned_docs/version-v6/getting-started/running.md
````markdown
---
title: Run a local node
slug: /getting-started/running-substrate
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

![Run an ink! node](/img/title/cargo-contract.svg)

# Run a local node

The [`ink-node`](https://github.com/use-ink/ink-node) is a simple 
[Polkadot SDK](https://polkadot.com/platform/sdk) blockchain. It is 
configured to include the [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive) module,
which adds support for smart contracts.
Specifically this module allows uploading and executing RISC-V smart
contracts to a blockchain.

:::info
You can read more about how ink!, `pallet-revive`, and Polkadot SDK
are related in [our technical background section](../background/polkadot-sdk.md).
:::

[After successfully installing `ink-node`](./setup.md#installing-ink-node),
you can start a local development chain by running:

```bash
$ ink-node
```

**Note:** `ink-node` uses the `--dev` flag by default. 
You may need to specify the `--dev` flag when you want to run a development chain with another binary (e.g using the Polkadot SDK Node Template).

<img src={useBaseUrl('/img/ink-node.png')} className="titlePic titleSpace" title="Screenshot of terminal starting a local node" />

You can interact with your node using `cargo-contract` or [the Contracts UI](https://contracts-ui.substrate.io).
If you use the Contracts UI, you have to configure it to connect to the locally running node:

- Click on the dropdown selector at the top left corner.
- Choose "Local Node".

![Connect to local node](/img/contracts-ui-local-node.png)
````

## File: versioned_docs/version-v6/intro/polkadot-scalability-hackathon.mdx
````
---
title: Polkadot Scalability Hackathon
hide_title: true
slug: /polkadot-scalability-hackathon
hide_table_of_contents: true
---

<head>
    <meta name="description" content="Quickstart info for the Polkadot Scalability Hackathon." />
    <meta name="keywords" content="Polkadot Scalability Hackathon, ink!, Rust, Smart Contracts" />
    <meta property="og:title" content="Polkadot Scalability Hackathon" />
    <meta property="og:description" content="Quickstart info for the Polkadot Scalability Hackathon." />
</head>

import useBaseUrl from '@docusaurus/useBaseUrl';

<img src={useBaseUrl('/img/title/polkadot-scalability-hackathon.svg')} title="The ink! 6.0 smart contracts toolkit release" width="800" style={{ marginBottom: 10 }} />

# Welcome _Polkadot Scalability Hackathon_ participants!

On this page we explain how you can participate with ink! v6.

Read more about the hackathon [here](https://www.encode.club/polkadot-scalability-hackathon).

## You need to use ink! v6!

:::caution
The current stable release of ink! (v5) is only compatible with WebAssembly and
`pallet-contracts`. With v6 we are transitioning to `pallet-revive` and PolkaVM.
`pallet-revive` is the execution environment for smart contracts on Kusama and
Polkadot AssetHub.

ink! v6 is not yet released. This means you have to install our tools from the GitHub
`master` branches and also depend on ink! `master` in your contracts `Cargo.toml`.
:::

<br/>
We did a writeup about this transition and the story behind it [here](./current-state.mdx).
The chapter [Technical Background](../background/why-rust.md) of this documentation describes
the larger architectural view.

For the documentation of ink! v6 you need to make sure you are viewing the v6 version:

<img src={useBaseUrl('/img/v6-dropdown.png')} width="400" />

If you already have an ink! v5 contract: there is a migration guide available [here](/docs/v6/faq/migrating-from-ink-5-to-6).

:::info
ink! v6 is still work in progress, there are still rough edges and possibly bugs.

You can find support in [our Telegram group](https://t.me/inkathon) or open issues in our repositories.
<a href="https://t.me/inkathon">
    <img style={{height: 25}} src="https://img.shields.io/badge/click-white.svg?logo=Telegram&label=ink!%20Support%20on%20Telegram&labelColor=white&color=blue" />
</a>
:::

## Fast Track

Install Rust (>= 1.85) and `cargo`: [Installation Guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

Download the binary for a local development node [here](https://github.com/use-ink/ink-node/releases).

```toml
# Install our cli tool: `cargo-contract`.
# It wraps around Rust's `cargo build` to build contracts with optimal
# flags for blockchains. It also allows for deploying + interacting
# with contracts.
$ rustup component add rust-src
$ cargo install --locked --force --git https://github.com/use-ink/cargo-contract

# Create a simple contract.
$ cargo contract new flipper && cd flipper
$ cargo contract build --release

# Download our local development node.
# Find the binary here: https://github.com/use-ink/ink-node/releases/tag/v0.43.0

# Start your local development node in a separate shell session
$ ink-node

# Instantiate your contract on-chain.
$ cargo contract instantiate --suri //Alice

# Dry-run a call of it.
$ cargo contract call --suri //Alice --contract 0x… --message get

# Execute a contract call, as a transaction on-chain.
$ cargo contract call --suri //Alice --contract 0x… --message flip -x
```

<br/>

Please see the chapter [Getting started](../getting-started/setup.md) of this
documentation for a deeper introduction.

## Smart Contract Examples

You can find many contract examples in
<a href="https://github.com/use-ink/ink-examples/tree/v6.x">the v6 branch of our `ink-examples` repository</a>.

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src={useBaseUrl('/img/icons/flipper.svg')} width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src={useBaseUrl('/img/icons/erc20.svg')} width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src={useBaseUrl('/img/icons/nft.svg')} width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br />

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src={useBaseUrl('/img/icons/upgradable.svg')} width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src={useBaseUrl('/img/icons/multisig.svg')} width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src={useBaseUrl('/img/icons/rand-extension.svg')} width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>
````

## File: versioned_docs/version-v6/testing/testing-with-live-state.md
````markdown
---
title: Testing with Chain Snapshots
hide_title: true
slug: /contract-testing/chain-snapshot
---

![Blockchain Fork Title Picture](/img/title/blockchain-fork.svg)

# Test your Contract with a Chain Snapshot

:::caution
This page has not yet been updated to ink! v6.

TODO
:::

On this page we explain how to test ink! contracts with the
fork of an existing chain. We'll take a snapshot of an existing
chain for this purpose. The snapshot contains the chains full state,
but can be modified locally without affecting the live chain. 
We'll use the [Chopsticks](https://github.com/AcalaNetwork/chopsticks)
tool for this purpose.

This is a powerful workflow that you can use to e.g.

* Test a contract upgrade or migration locally before running it in production.
* Debug the behavior of an on-chain contract with on-chain state locally.
* Get detailed debug info and replay blocks as you want.
* …and much more!

In the first section of this page we explain the general concept, using a local
`ink-node` that will play the role of our "live chain".
The `ink-node` is just for exemplary purposes, you can also 
apply the exact same workflow to production chains like Astar, Aleph Zero,
Pendulum and others.

## General Concept

First you need a node that has produced some blocks with state. We'll
use `ink-node` for this purpose.
[See here](../getting-started/running.md) for how to run it.

You should get output similar to:

```
$ ink-node
2023-09-26 07:58:28.885  INFO main sc_cli::runner: ink! Node
2023-09-26 07:58:28.887  INFO main sc_cli::runner: ✌️  version 0.30.0-124c159ba94    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: ❤️  by Parity Technologies <admin@parity.io>, 2021-2023    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 📋 Chain specification: Development    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 🏷  Node name: chilly-desire-6458    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 👤 Role: AUTHORITY    
2023-09-26 07:58:28.887  INFO main sc_cli::runner: 💾 Database: ParityDb at /tmp/substrateoKCAts/chains/dev/paritydb/full    
2023-09-26 07:58:38.723  INFO main sc_rpc_server: Running JSON-RPC server: addr=127.0.0.1:9944, allowed origins=["*"]  
```

Note that the node is running on port 9944.

Next, we'll create some state and produce a bunch of blocks. You can do this by deploying [our
`flipper` example](https://github.com/use-ink/ink-examples/tree/main/flipper):

```
cd ink-examples/flipper/
cargo contract build --release
cargo contract instantiate --suri //Alice --args true -x
```

You can check that the contract exists by querying its state via `cargo-contract`:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

### Setup Chopsticks

We will now set up [Chopsticks](https://github.com/AcalaNetwork/chopsticks),
a powerful tool in our ecosystem that allows us to create a parallel reality
of an existing network.

We will run it and have it mirror the `ink-node` that is already running
on our machine from the previous step.

The following schema illustrates the setup that we will create:

<img className="schema2" width title="Test your smart contract on a Chopsticks branch" src="/img/test-smart-contract-with-chain-snapshot.svg" alt="Chain Snapshot" />

Clone chopsticks:

```
git clone https://github.com/AcalaNetwork/chopsticks
```

Modify the `dev.yml` config file in the cloned repository (or create one from scratch) :

```
endpoint: ws://127.0.0.1:9944
mock-signature-host: true
block: 1
db: ./db.sqlite
```

:::info
In the example above chopsticks will be mirroring up until block 1 from the
`ink-node`.

For production chains (like Aleph Zero or Astar) you would want to use a different
block number and different endpoint. The Chopsticks repository already contains a
wide number of configurations for ink! production chains (see [here](https://github.com/AcalaNetwork/chopsticks/tree/master/configs)).
If you don't find a fitting configuration there, see the section
"[Application to Production Chains](#application-to-production-chains)".
:::

You can either run chopsticks locally by following the instructions
[here](https://github.com/AcalaNetwork/chopsticks#install), or
you can run it using npx:

```
npx @acala-network/chopsticks@latest --config=configs/dev.yml
```

You should get output similar to:

```
npx @acala-network/chopsticks@latest --config=configs/dev.yml
[08:22:31.231] INFO (rpc/3037748): Development RPC listening on port 8000
```

The Chopsticks node is running on port 8000.
If you now execute the `cargo-contract` storage command against this node, you'll see
that the `flipper` contract exists there as well:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:8000
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

Chopsticks has branched off from the live chain.
You can now submit transactions to the Chopsticks node on port 8000,
without affecting the node/chain on port 9944.

### Run ink! E2E Tests

Recap: We have our "live" `ink-node` running on port 9944
and our test node with the branched state running on port 8000.

Next we would like to run some tests against the contract on our forked chain. 
Our `flipper/lib.rs` contains a test that illustrates how to do this.
The test reads an environment variable `CONTRACT_ADDR_HEX` that refers to
the `flipper` on-chain address.

Here's the code for it:

```rust
#[ink_e2e::test]
#[ignore]
async fn e2e_test_deployed_contract<Client: E2EBackend>(
    mut client: Client,
) -> E2EResult<()> {
    // given
    let addr = std::env::var("CONTRACT_ADDR_HEX")
        .unwrap()
        .replace("0x", "");
    let acc_id = hex::decode(addr).unwrap();
    let acc_id = AccountId::try_from(&acc_id[..]).unwrap();

    // when
    // Invoke `Flipper::flip()` from Bob's account
    let call_builder = ink_e2e::create_call_builder::<Flipper>(acc_id);
    let flip = call_builder.flip();
    let _flip_res = client.call(&ink_e2e::bob(), &flip).submit().await?;
    
    // then
    let get = call_builder.get();
    let get_res = client.call(&ink_e2e::bob(), &get).dry_run().await?;
    assert!(matches!(get_res.return_value(), false));
    Ok(())
}
```

The test is marked as `#[ignore]`, as it requires the pre-conditions that we went through
above to succeed.

:::info
You can convert SS58 addresses to hex using [the `subkey` tool](https://crates.io/crates/subkey):

```
subkey inspect <YOUR-SS58>
```
:::

Here's the process to execute the above test:

```
# Address of your on-chain contract
export CONTRACT_HEX=0x2c75f0aa09dbfbfd49e6286a0f2edd3b4913f04a58b13391c79e96782f5713e3

# This env variable needs to be set to reference the Chopsticks node.
# If this env variable is not set, `ink_e2e` will spawn a new node
# process (typically of `ink-node`) for each test.
export CONTRACTS_NODE_URL=ws://127.0.0.1:8000

cargo test --features e2e-tests e2e_test_deployed_contract -- --ignored
```

You will get output similar to the following:

```
running 1 tests
test flipper::e2e_tests::e2e_test_deployed_contract ... ok
```

If you query the contract storage on our Chopsticks fork, you'll see that the E2E test
flipped the boolean:

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:8000
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: false } |
+-------+----------+--------+-------------------------+
```

On the "original" `ink-node` chain the boolean will be untouched.

```
$ cargo contract storage --contract 5FgRdaReCLFtwbzYiVd2hoz9P3oERdNy2njnFmUBHu4FYg7s --url=ws://localhost:9944
+-------+----------+--------+-------------------------+
| Index | Root Key | Parent | Value                   |
+=====================================================+
| 0     | 00000000 | root   | Flipper { value: true } |
+-------+----------+--------+-------------------------+
```

Success! We just ran an ink! end-to-end test against the snapshot of a chain!

## Application to Production Chains

You can apply the workflow explained above to ink! production chains.

You would want to use a different block number and different endpoint.
The Chopsticks repository already contains a wide number of configurations for
ink! production chains (see [here](https://github.com/AcalaNetwork/chopsticks/tree/master/configs)).

If a pre-made config for chain you want to fork from is not available, you can just
modify the `dev.yml`. You can use [polkadot-js/apps](https://polkadot.js.org/apps) to
the URL of an endpoint to use:

<img src="/img/polkadot-js-rpc-endpoint.png"  />
````

## File: versioned_docs/version-v6/background/ink-vs-cosmwasm.md
````markdown
---
title: ink! vs. CosmWasm
slug: /background/ink-vs-cosmwasm
hide_title: true
---

<head>
    <meta name="title" content="Polkadot's ink! vs. CosmWasm" />
    <meta name="description" content="Comparison of Polkadot's ink! vs. CosmWasm." />
    <meta name="keywords" content="Polkadot, ComsWasm, Cosmos, ink!, Smart Contracts" />
    <meta property="og:title" content="ink! vs. CosmWasm" />
    <meta property="og:description" content="Comparison of Polkadot's ink! vs. CosmWasm." />
</head>

![Cosmwasm Title Picture](/img/title/cosmwasm.svg)

:::caution
This page has not yet been edited for ink! v6.

TODO @peterwht
:::

# ink! vs. CosmWasm

This is a short comparison between [ink!](https://github.com/use-ink/ink/)
and [CosmWasm](https://github.com/CosmWasm/cosmwasm) meant to onboard
developers coming from the Cosmos ecosystem.

## Architecture

CosmWasm is modular, meaning that any blockchain using the Cosmos SDK can add smart
contract support to their chain. That is similar to the [Polkadot SDK](https://polkadot.com/platform/sdk)
approach, where chains have the option to add `pallet-revive` to their runtime.

Aside from that, the architecture philosophy is likely the point where CosmWasm and ink!
differ the most. CosmWasm follows the actor model design pattern, while ink! follows a
synchronous execution model. That means some fundamental differences in how the source
code is structured.

The main entry point functions of CosmWasm contracts are:

- `instantiate` which bootstraps the initial contract state (assuming it's already been
  deployed).
- `execute` which has the actor perform operations to its internal state.
- `query` which retrieves data from the actor’s internal state.

An ink! contract can have as many public dispatchables as the developer desires, and
differently from CosmWasm, it doesn’t rely on JSON schemas for defining how the messages
are structured.

Instead, ink! makes heavy usage of Rust macros. The main ink! macros are:

- `#[ink(constructor)]` which is called when the contract is deployed, and is responsible
  for bootstrapping the initial contract state into the storage. It is analogous to the
  CosmWasm `instantiate` function.
- `#[ink(storage)]` which annotates a struct that represents the contract's internal
  state.
- `#[ink(message)]` which marks a function as a public dispatchable, meaning that it is
  exposed in the contract interface to the outside world. This macro can make a function
  behave analogously to CosmWasm’s `execute` and `query` functions. This depends on how it
  affects the internal contract state and what the return types.
- `#[ink(event)]` and `#[ink(topic)]` which annotates a struct and its members as the
  events and topics that the contract might emit.

There are other ink! macros, for which details can be found at [Macros & Attributes](../macros-attributes/overview.md).

## Unit Testing

Unit testing in CosmWasm is quite similar to ink!. Both use the conventional Rust
`#[cfg(test)]` macro and set up a mock on-chain environment.

While CosmWasm unit tests have different modules for each of the three main entry-point
functions, ink! allows for a more generalised approach, where the `#[ink(test)]` macro is
used for each unit test.

You can read more about ink! unit tests [here](../testing/unit-integration.md).

## Compiler

CosmWasm uses [cargo-wasm](https://docs.rs/crate/cargo-wasm/latest) as its main
compiler, while ink! uses [cargo-contract](https://github.com/use-ink/cargo-contract).
`cargo-contract` is developed specifically for building, testing, and deploying
ink! contracts.

# Local Development Network

In terms of local development networks, the [cosmos/gaia](https://github.com/cosmos/gaia)
repository acts as the basic template for a generic Cosmos node. With the addition of the
`x/wasm` module and some clean-up, this template repository becomes
[wasmd](https://github.com/CosmWasm/wasmd), the entry point for CosmWasm development.

In terms of Polkadot SDK, [`polkadot-sdk-solochain-template`](https://github.com/paritytech/polkadot-sdk-solochain-template) is a basic generic template of a node.
Similar to `x/wasm`, [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/susbtrate/frame/revive)
is the module that adds RISC-V smart contract functionality to the chain. 
We provide the [ink-node](https://github.com/use-ink/ink-node), which is analogous to `wasmd` — a basic template node 
for smart contract development.

## Testnets

For CosmWasm development and on-chain testing, `wasmd` can be operated as a local setup
(single or multiple nodes), or connected to the `cliffnet` public test network.

For testing, ink! contracts can be deployed on a few different options:

- Locally, on a single or multiple node setup of [`ink-node`](https://github.com/use-ink/ink-node).
- TODO add Paseo/Westend
- TODO add Pop Testnet

## Development Workflow

### Dependencies and Environment Setup

The first step in CosmWasm development is to
[install dependencies and setup the environment](https://docs.cosmwasm.com/core/installation),
namely Rust, the WebAssembly target, `cargo-generate` and `cargo-run-script`.

For ink! you can also find [a setup guide](../getting-started/setup.md) which will help you
with dependencies, namely Rust, `cargo-contract` and `ink-node`.

### Compile and Test

CosmWasm provides a template at the
[cw-template](https://github.com/CosmWasm/cw-template) repository. In order to generate a new project, all  you have to do is run:

```
$ cargo generate --git https://github.com/CosmWasm/cw-template.git --name PROJECT_NAME
```

Replacing `PROJECT_NAME` with the name of your project.

Similarly, ink! provides an
[`examples`](https://github.com/use-ink/ink-examples/tree/main) directory of its
main repository.

A contract can be compiled from its directory via:

```
$ cargo contract build
```

and tested via:

```
$ cargo test
```

### Deploy and Interact

CosmWasm contracts are deployed and instantiated with help of the `wasmd` executable. The
list of step is provided [here](https://docs.cosmwasm.com/wasmd).

It is possible to deploy and interact with ink! contracts using either a CLI
(`cargo-contract`), or a web UI ([`contracts-ui`](https://ui.use.ink)).

- [Instructions for `cargo-contract`](https://github.com/use-ink/cargo-contract/blob/master/crates/extrinsics/README.md)
- [Instructions for `contracts-ui`](../getting-started/deploying.md)
````

## File: versioned_docs/version-v6/faq/faq.md
````markdown
---
title: Frequently Asked Questions
hide: true
slug: /faq
hide_table_of_contents: true
---

import useBaseUrl from '@docusaurus/useBaseUrl';

![Faq Title Picture](/img/title/faq.svg)

# Frequently Asked Questions

### Who is "Squink"?

<img src={useBaseUrl('/img/ink-squink.svg')} alt="Squink ‒ the ink! mascot" className="squid" />
This little cute purple squid is Squink.<br/><br/>

Squink is the mascot of ink! and guides new users and adventurers through our presentations
workshops and tutorials. It also has a romance with Rust's mascot, Ferris.

Generally it is very friendly and open to learning new Rustaceans but be aware to never upset
it by taking away dots from the word ink! by spelling it incorrectly!
It really is into dots. Stories tell that it demanded the spelling of ink! with as many dots as possible.

<h3 id="correct-spelling">Is it "ink" or "ink!"? What does the "!" stand for?</h3>

The correct spelling is _ink!_ ‒ with a lowercase "i" and an exclamation mark at the end.
The history here is that:

* …in the very first iteration ink! was originally a [declarative Rust macro](https://doc.rust-lang.org/book/ch19-06-macros.html#declarative-macros-with-macro_rules-for-general-metaprogramming). A contract was invoked by writing `ink!{ … }`.
* …there is a real-world analogy here of writing a paper contract using ink.
* …we wanted to have as many DOTs as possible in the name 😉.
* …the symmetry of the top and bottom dot of i and ! is aesthetically pleasing 🌻.

So please don't make poor Squink cry having to read !ink, ink, Ink!, or Ink.

<center>
<img src={useBaseUrl('/img/sad-squid.svg')} alt="Squink ‒ the ink! mascot" width="300" />
</center>

### What's ink!'s relationship to the Polkadot SDK/Substrate?

Please see our page [Polkadot SDK](../background/polkadot-sdk.md) for more information.

### How to call other smart contracts on the same blockchain?

See our [Cross-contract calling](../basics/cross-contract-calling.md) page.

### How to call other smart contracts on another rollup/parachain?

See our page on [XCM](../basics/xcm.md).

### What is a contract's ABI or Metadata?

In ink! a smart contract's metadata is retrieved by using the `cargo-contract` CLI tool and
invoking `cargo contract build` which outputs a `.contract` file that includes both the compiled
`.polkavm` of the ink! smart contract as well as the so-called metadata information of the same
smart contract.
The metadata is especially important for third party tools such as Polkadot JS Apps or the Contracts UI
and provides useful information about the contract's constructors, messages, events, function selectors,
documentation and comments of the aforementioned structures as well as how inputs and outputs shall
be encoded and decoded respectively etc.

### Can a re-entrancy bug occur in ink! contracts?

:::caution
This page has to be reviewed in light of our ABI changes.

TODO There are some reentrancy features in ink!,
those should be explained here or on another page.
:::

# Cross-Contract Calls

### How can my smart contract interact with the runtime?

:::caution
TODO review
:::

See the [Chain Extensions](../macros-attributes/chain-extension.md) section for more information.

### How can I use ink! with a Polkadot SDK chain with a custom chain config?

Please see [this section](../macros-attributes/contract.md#env-impl-environment) in our documentation.

Detailed documentation is found in [the Rust docs](https://docs.rs/ink_macro/6.0.0/ink_macro/attr.contract.html#header-arguments)
for the `#[ink(contract)]` macro. It allows you to specify your environment a la
`#[ink::contract(env = MyEnvironment)]`.

### What does the `#![cfg_attr(not(feature = "std"), no_std, no_main)]` at the beginning of each contract mean?

The `#[cfg(..)]` or `#[cfg_attr(..)]` annotations are how Rust does conditional compilation.

ink! smart contracts can be compiled in two different modes.

Through `#![cfg_attr(not(feature = "std"), no_std, no_main)]` an ink! smart contract tells the Rust compiler
in which mode they are being compiled. This also plays a significant role in how ink! generates
the smart contract code.

The two modes are as follows:

1. On-chain mode: This is the mode chosen when compiling an ink! smart contract for deployment on a blockchain.
   The resulting binary is a `.polkavm` file and as such it is not possible to use certain parts of Rust's standard
   library.
2. Off-chain mode: This is the mode chosen when trying to test an ink! smart contract using the off-chain
   environment. Off-chain environment testing is very useful to check if certain ink! constructors or messages
   are well behaving and allow for better debuggability than when trying to debug the same smart contract deployed
   on a chain.

<h3 id="why-no_std">Why is Rust's standard library (stdlib) not available in ink!?</h3>

Rust's standard library consists of three different layers:

1. `core` library which defines everything that has no dependencies outside of Rust itself.
   Included are types such as `Option`, `Result` as well as a whole variety of modules,
   functions and macro.

   ink! smart contracts allow authors to use Rust's `core` crate.

2. `alloc` library which is depending on a global allocator and mainly defines collections
   that spill their elements on to the execution's heap memory.
   Examples for collections are `Box`, `String`, `Vec`, `HashMap`, `LinkedList` and modules
   such as `fmt`, `rc` (ref-counted pointers) or borrows.

   ink! smart contracts allow authors to use Rust's `alloc` crate.
   By default ink! authors use definitions from the `alloc` crate through `ink::prelude` crate.

   3. `std` library is what people generally call Rust's standard library.

   >    The Rust Standard Library is the foundation of portable Rust software, a set of minimal and battle-tested shared abstractions for the broader Rust ecosystem.

   It requires several operating system capabilities in order to work correctly such as input and
   output systems for files, networking etc.

   Since our RISC-V compilation target does not support Rust's
   standard library ink! authors cannot use it either for their own purposes. Instead the [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive)
   tries to provide some common functionality that would otherwise be missing for common smart contract
   operations.

### Overflow Safety?

:::caution
TODO @davidsemakula Please review if still up to date.
:::

Being written in Rust, ink! can provide compile-time overflow/underflow safety. Using a Rust compiler configuration, you can specify whether you want to support overflowing math, or if you want contract execution to panic when overflows occur. No need to continually import "Safe Math" libraries, although Rust also provides [integrated checked, wrapped, and saturated math functions](https://doc.rust-lang.org/std/primitive.u32.html).

:::note
There are some known issues regarding functionality of compiler level overflow checks and the resulting size of the binary blob. This feature may change or be iterated on in the future.
:::

### What is the difference between memory and storage?

In ink!, memory refers to computer memory, while storage refers to the on-chain storage
used by a contract instance. Memory is temporary and only lasts until the contract
execution is done, while storage is persistent and lasts over many contract executions.
The contract storage is built on top of the runtime storage, and access is considered to be slow.

### How do I hash a value?

A number of crypto hashes are built into [`pallet-revive`](../background/polkadot-sdk.md) and
therefore very efficient to use. We currently support a handful of those, you
can view the complete list [here](https://docs.rs/ink_env/6.0.0/ink_env/hash/trait.CryptoHash.html).

If you have the urgent need for another crypto hash you could introduce it through
[Chain Extensions](../macros-attributes/chain-extension.md)
or make a proposal to include it into the default set of the `pallet-revive`.

Using one of the built-in crypto hashes can be done as explained here:
* [`self.env().hash_bytes()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.hash_bytes.html)
* [`self.env().hash_encoded()`](https://docs.rs/ink_env/6.0.0/ink_env/fn.hash_encoded.html)

### Why is it not possible to use floating point data types in ink!? How do I implement returning a decimal number?

Floats are cool for all kinds of reasons, but they also have one important
drawback. Floating point arithmetic is non-deterministic which means that
different processors compute (slightly) different results for the same
operation. Although there is an IEEE spec, non-determinism can come from specific
libraries used, or even hardware. In order for the nodes in a blockchain network
to reach agreement on the state of the chain, all operations must be completely
deterministic. Hence, we don't allow floating point data types in ink!.

Consequently, it's not possible to return a decimal number from an ink! message.
What you should do instead is to have your user interface denominate the returned
number to decimals.

Note, that it's typical for blockchains to have the number of available tokens
defined as a non-floating number and determine the denomination in the user
interface. For example, 1 Bitcoin is equivalent to the smallest unit of 100,000,000
Satoshi and all Bitcoin implementations internally persist account balances in
Satoshi, not as a decimal number of Bitcoin.

### Why can't I just use the standard Rust data collections in ink!?

You can use them! They are exposed via the `ink_prelude` crate (e.g. `ink::prelude::vec::Vec`)
and you can return them from ink! messages and also persist them to storage.

_However, the Rust stdlib collections are not optimized for smart contract usage!_ So for example,
if you use them to persist your data on the chain they will always occupy a single storage cell
and thus always be loaded eagerly, in their entirety. This can be very costly! Just think about
a `Vec` or a `HashMap` where the smart contract might only need access to a few elements, rather
than the entire data collection.

### Why am I getting a `ContractTrapped` error when interacting with a contract?

When it does not constitute a deliberate assertion, like for example a permission check,
it is most likely a bug in your contract or in ink!.

A common source of `ContractTrapped` are Integer overflows, those can cause
your contract to trap as well.

### What are the `Encode`, `Decode` and `TypeInfo` arguments in `#[ink::scale_derive(Encode, Decode, TypeInfo)]` ?

Polkadot SDK-based blockchains use the [SCALE codec](https://github.com/paritytech/parity-scale-codec)
to encode data.
As a consequence the data for every interaction with Polkadot SDK needs to
be SCALE-encodable ‒ i.e. it needs to implement either `scale::Encode`,
`scale::Decode`, or both. This affects e.g. data you want to return to a caller,
data that you want to take as input, or data you want to store on-chain.

ink! re-exports these traits and provides a useful macro `#[ink::scale_derive(Encode, Decode, TypeInfo)]` that allows to derive them
in a concise way.

A common error you might get when a necessary SCALE trait is not implemented
for a data structure could be along the lines of `the trait "WrapperTypeEncode"
is not implemented for "Foo"`.
For example, you might encounter this error if you try to store a custom data
structure in the contract's storage. Or e.g. when attempting to return
a custom error from an ink! message.

:::note
The error `the trait "WrapperTypeEncode" is not implemented for …` is also
a common error when a mismatching version of `parity-scale-codec` is used
in the contract opposed to the version used by ink!.
:::

The solution typically is to add a fitting implementation of the trait
for your data structure:

* `Encode` is used for encoding a data structure when it is e.g. returned
to a caller or when it is persisted to the contracts storage.

* `Decode` is used for the inverse, e.g. when reading from storage or
taking an input from a user (or another contract).

* `TypeInfo` is used to encode the information about the type that is
often used for the generation of metadata.

It's possible to derive those traits and oftentimes the simplest way
is to just derive the missing trait for the object for which its implementation
is missing using the ink! macro:

```rust
#[ink::scale_derive(Encode, Decode)]
struct MyCustomDataStructure { … }
```

### How do I use `String` in my contract?

In general, you should think twice if you really need `String`.
Smart contracts usually don't use strings; those are typically
used for user interactions and should live in your UI and not on the chain.

Minimizing storage usage of your contract is a best practice
and you should only persist items which you need to derive state transitions
in your contract.

If you still, for some reason, need to use `String`, then you should use
the `String` [from the ink! prelude](https://docs.rs/ink_prelude/6.0.0/ink_prelude/string/struct.String.html).

<h3 id="type-comparison">Getting a warning in <code>cargo-contract</code> about type compatibility?</h3>

ink! and Polkadot SDK both support the possibility of deciding to deviate
from the default types for `Balance`, `BlockNumber`, etc.
These types are called environment types.

If a chain decides on custom environment types, contract authors need
to specify these types that deviate from the ink! default environment in their
contracts. Otherwise, undefined behavior can occur when uploading a contract
with deviating types to a chain.

Custom environment types can be specified in ink! via the `#[contract(env = MyCustomEnvironment)]`
attribute. You can read more are about this [here](../macros-attributes/contract.md#env-impl-environment).

When using `cargo-contract` to interact with a chain you might get a warning along those lines:

```
Warning: This chain does not yet support checking for compatibility of your contract types.
```

This warning appears when the chain that you are targeting (via the `--url` cli flag)
does not contain a version of `pallet-revive` that does support type comparison.
Type comparison is a feature that we introduced, it means we check that the environmental
types of your contract are equivalent to the environmental types of the chain that you are
targeting.
It's a safety feature to make sure that you are not accidentally deploying a contract with
e.g. `type Balance = u128` to a chain with a different `Balance` type.

The `cargo-contract` warning means this check for compatible types cannot be performed.

If a chain indeed requires that contract developers have to use custom environment types,
this should be communicated prominently by them.
````

## File: versioned_docs/version-v6/getting-started/setup.md
````markdown
---
title: Setup
slug: /getting-started/setup
hide_title: true
---

![Setup Title Picture](/img/title/setup.svg)

# Setup

On this page we describe the pre-requisites for working with ink!.

## Rust & Cargo

A pre-requisite for compiling smart contracts is to install a stable Rust 
version (>= 1.85) and `cargo`. Please see [the official Rust installation guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

## ink! CLI

The first tool we will be installing is [`cargo-contract`](https://github.com/use-ink/cargo-contract),
our CLI tool for help with setting up and managing smart contracts written with ink!.

The tool has a number of handy capabilities:

```bash
$ cargo contract --help
Utilities to develop ink! smart contracts

Usage: cargo contract <COMMAND>

Commands:
  new              Setup and create a new smart contract project
  build            Compiles the contract, generates metadata, bundles both together in a `<name>.contract` file
  check            Check that the code builds for PolkaVM; does not output any `<name>.contract` artifact to the `target/` directory
  upload           Upload contract code
  instantiate      Instantiate a contract
  call             Call a contract
  account          Account handling and information
  encode           Encodes a contracts input calls and their arguments
  decode           Decodes a contracts input or output data (supplied in hex-encoding)
  remove           Remove contract code
  info             Display information about a contract
  storage          Inspect the on-chain storage of a contract
  verify           Verifies that a given contract binary matches the build result of the specified workspace
  generate-schema  Generates schema from the current metadata specification
  verify-schema    Verify schema from the current metadata specification
  rpc              Make a raw RPC call
  help             Print this message or the help of the given subcommand(s)

Options:
  -h, --help     Print help
  -V, --version  Print version
```

### Installation

Please see the installation instructions in the `cargo-contract` repository [here](https://github.com/use-ink/cargo-contract#installation).

If everything worked, `cargo contract --help` should show you the above list of available commands.

## Installing `ink-node`

The [ink-node](https://github.com/use-ink/ink-node) is
a simple Polkadot SDK blockchain which is configured to include the Polkadot SDK module for
smart contract functionality – the `pallet-revive` (see [Polkadot SDK](../background/polkadot-sdk.md) for more).
It's a comfortable option for local development and testing.

There are two ways of installing the node:

### (1) Download the Binary
This is the recommended method, you can
[download a binary from our releases page](https://github.com/use-ink/ink-node/releases)
(Linux and Mac). 

### (2) Build it yourself

Alternatively, you can build the node by yourself.
This can take a while though!

The build instructions and pre-requisites can be found
[here](https://github.com/use-ink/ink-node?tab=readme-ov-file#build-locally).
````

## File: versioned_docs/version-v6/intro/current-state.mdx
````
---
title: Project State in Q1/25
slug: /current-state
hide_title: true
---

import useBaseUrl from '@docusaurus/useBaseUrl'

<img src={useBaseUrl('/img/title/q1-25.svg')} className="titlePic titleSpace" />

## 🤗 Time at Parity (2019-2024)

In 2019, ink! started out as a small project at Parity. It grew into a sophisticated
ecosystem over the years and a community did form around it.
Throughout all these years Parity continued to allocate developer resource to the
project, which is amazing!

In April 2024, ink! moved out of the Parity umbrella. Instead of one company,
it is nowadays developed and maintained by an alliance of individual developers,
companies, and community teams altogether.
You can read more on our transition out of Parity
[here](https://x.com/ink_lang/status/1783877356819783916).

We continue to work closely with Parity, we contribute code to Parity-maintained
components and regularly synchronize with Parity developers. Parity continues to
be involved in ink! as well: in late 2024 SRLabs and the Parity security team
conducted an audit of ink! v5 ([read more here](https://x.com/paritytech/status/1882492494661005760)).

## 🧑‍🔬 Exploring alternatives to WebAssembly (2023)

From ink! v1 to v5, the execution platform was Substrate's smart contracts
module [`pallet-contracts`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/contracts/).
This pallet required the smart contracts that were uploaded to be in the WebAssembly
(Wasm) bytecode format. So ink! contracts were always compiled to a WebAssembly binary.
This could be done by invoking `cargo build`/`rustc` directly or via our CLI tool
[`cargo-contract`](https://github.com/use-ink/cargo-contract) (which executes the
Rust compiler with optimal flags for smart contracts).

As an ongoing research project Parity was always looking at alternatives to WebAssembly
for smart contract execution. Some of those investigations are
persisted in the Polkadot Forum. The forum post on [the eBPF investigation](https://forum.polkadot.network/t/ebpf-contracts-hackathon/1084)
(eBPF is used in Solana) highlights some shortcomings of WebAssembly for smart contracts.

During 2023, Parity core developer Jan Bujak ([@koute](https://github.com/koute)) did another
exploration on alternatives for WebAssembly. [His forum post](https://forum.polkadot.network/t/exploring-alternatives-to-wasm-for-smart-contracts/2434)
gives a great overview on how he landed at RISC-V and its potential.
His explorations yielded promising results and a new project
was started: [PolkaVM](https://github.com/paritytech/polkavm)
([the announcement contains more info](https://forum.polkadot.network/t/announcing-polkavm-a-new-risc-v-based-vm-for-smart-contracts-and-possibly-more/3811)).
PolkaVM is intended to be a very fast RISC-V based virtual machine. Jan
regularly shared performance benchmarks in the Polkadot Forum. Those were very
good and got community enthusiasm started.
For blockchains a very fast performance correlates with transaction throughput
and transaction costs, which implies improved scalability and reduced costs for users.
Eventually an idea emerged: move the Substrate stack in the long-term to RISC-V
instead of WebAssembly.

## 🤝 RISC-V + `pallet-revive` (2025)

As migrating the Substrate stack from WebAssembly to RISC-V is a highly complex
undertaking, it was found that smart contracts are an ideal starting point
to kick off this migration in a clearly delimited component.

Parity subsequently forked Substrate's `pallet-contracts` into a new project called
[`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive).
Smart contracts that are uploaded to this new pallet have to be
in the RISC-V bytecode format, and no longer in WebAssembly.

Besides the contract binary format, a number of other significant changes were
made to provide first-class support for Solidity contracts:

    * Extensive changes were made in the inner logic of the pallet to bring its behavior
    closer to the EVM (e.g. types, events, and debugging was changed to be Solidity
    compatible).

    * In the `pallet-contracts` era, the idea for Solidity compatibility was a project
    called [Solang](https://github.com/hyperledger-solang/solang/). It's a Solidity
    compiler that parses Solidity syntax and outputs WebAssembly.
    Parsing the Solidity syntax turned out to be a complex undertaking. Solidity
    as a language is also evolving and provided a moving target.<br/><br/>
    As an iteration on that approach, for `pallet-revive` Parity started a new
    project called [`revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive/src) ᠆
    a compiler from the Solidity bytecode YUL to a RISC-V
    contract that can be executed on `pallet-revive`.
    This bytecode is more stable than the language syntax. Plus Solidity developers
    can continue to use the Solidity compiler `solc` to compile their contracts.

    * An RPC wrapper that maps Ethereum RPC's onto Substrate was created.

At the time of writing, `pallet-revive` is deployed to the Polkadot testnet Westend
(on the AssetHub parachain).
A launch on Polkadot's canary network Kusama is targeted for early Q2/25.
The Polkadot launch is targeted for Q3/25.

## 🙌 Migrating ink! to RISC-V + `pallet-revive` (currently wip)

`pallet-revive` and RISC-V are seen as the future of smart contracts in the Polkadot
ecosystem. We agree with that vision and are excited to work on making the ink! stack
ready for it!
In autumn 2024 the ink! Alliance created [a Polkadot treasury proposal](https://forum.polkadot.network/t/treasury-ink-alliance-for-a-more-successful-plaza/9692)
around this.
The Polkadot community signaled its alignment and gave us the mandate of
migrating ink! to this new stack.

Hence, v5 of ink! and `cargo-contract` are the last ones supporting `pallet-contracts`
and Wasm. We can still backport important fixes, but the coming releases (`>= v6`) will
all no longer be compatible. In case you want to create a PR for a backport, we have
v5 release branches [here](https://github.com/use-ink/ink/tree/v5.x) and [here](https://github.com/use-ink/cargo-contract/tree/v5.x.x).

The current state of this migration is that the `master` branches of
[ink!](https://github.com/use-ink/ink) and [`cargo-contract`](https://github.com/use-ink/cargo-contract)
are compatible with `polkadot-sdk` + `pallet-revive` + PolkaVM from Jan 7, 2025.
That's the date to which we've caught up so far. We are working on catching up
to present day and aim to have a pre-release 6.0.0-alpha of both ink! and
`cargo-contract` out in March 2025.

We are actively working on [this migration guide](/docs/v6/faq/migrating-from-ink-5-to-6).
All breaking changes and new features will eventually be documented there.

What has not yet been migrated is [Contracts UI](https://github.com/use-ink/contracts-ui)
and external libraries (such as [ink!athon](https://inkathon.xyz/), the
[ink! Analyzer VS Code extension](https://marketplace.visualstudio.com/items?itemName=ink-analyzer.ink-analyzer),
`polkadot-js`, …).
We are in contact with the maintainers of these external libraries about migrating as well.

## 💸 ink!ubator 2.0

The [ink!ubator](/inkubator) is a funding program for advancing the ink! ecosystem.
The first round of projects was completed in autumn 2024! A final summary was posted
by Toma, one of the curators, on the Polkadot Forum [here](https://forum.polkadot.network/t/final-report-of-ink-ubator/10120).

Applications for the second cohort are now open.
See [the ink!ubator 2.0 repository](https://github.com/use-inkubator/Ecosystem-Grants)
on GitHub for more details.

## ❓Questions?

In case you have any questions, the best way to reach out is in
[our Telegram group](https://t.me/inkathon) or the
[Polkadot Forum](https://forum.polkadot.network/).
````

## File: versioned_docs/version-v6/intro/intro.mdx
````
---
title: Welcome!
hide_title: true
slug: /
hide_table_of_contents: true
---

<head>
    <meta name="title" content="ink! Developer Documentation" />
    <meta
      name="description"
      content="Developer docs for ink!, the Rust smart contract language of Polkadot. Running on RISC-V and PolkaVM."
    />
    <meta name="keywords" content="Smart contracts, Rust, Polkadot, PolkaVM, RISC-V" />
    <meta property="og:title" content="ink! Developer Documentation" />
    <meta property="og:description" content="Developer docs for ink!, the Rust smart contract language of Polkadot. Running on RISC-V and PolkaVM." />
</head>

import useBaseUrl from '@docusaurus/useBaseUrl';

<br />

<center>
    <img src={useBaseUrl('/img/title/ink! 6.0.svg')} title="The ink! 6.0 smart contracts toolkit release" width="800" style={{ marginBottom: 10 }} />
</center>

## Introduction

ink! is a programming language for smart contracts.

It's a domain-specific Rust language: contracts are normal Rust code.

We decided on Rust as it provides inherent safety-guarantees and
a great performance. This translates to low user fees and makes it
an ideal choice for scalable smart contracts.

You can use all the normal Rust tooling ‒ clippy, crates.io, IDE’s, etc.

Interoperability with Solidity contracts:
Solidity developers can cross-contract call ink! contracts as if they were
Solidity contracts.

You can deploy ink! to blockchains built with <a href="https://github.com/paritytech/polkadot-sdk">Polkadot SDK</a>.
See [here](https://use.ink) for a list of chains that support us.

:::note
ink! v6 is no longer using WebAssembly and `pallet-contracts`!
Instead we migrated to RISC-V, PolkaVM, and `pallet-revive`.

Read more about the transition [here](../faq/migrating-from-ink-5-to-6.md).
:::

## Fast Track

Install Rust and `cargo`: [Installation Guide](https://doc.rust-lang.org/cargo/getting-started/installation.html).

Download the binary for a local development node [here](https://github.com/use-ink/ink-node/releases).

```toml
# Install our cli tool.
# It wraps around `cargo build` to build contracts with optimal
# flags for blockchains. It also allows for deploying + interacting
# with contracts.
$ rustup component add rust-src
$ cargo install --locked --force --git https://github.com/use-ink/cargo-contract

# Create a simple contract.
$ cargo contract new flipper && cd flipper
$ cargo contract build --release

# todo ink-node

# Instantiate this contract on-chain.
$ cargo contract instantiate --suri //Alice

# Dry-run a call of it.
$ cargo contract call --suri //Alice --contract 0x… --message get

# Execute a contract call, as a transaction on-chain.
$ cargo contract call --suri //Alice --contract 0x… --message flip -x
```

<br/>

## Smart Contract Examples

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/flipper"><img src={useBaseUrl('/img/icons/flipper.svg')} width="100" /></a>
        <p>
            Our "Hello, World!".<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/flipper">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc20"><img src={useBaseUrl('/img/icons/erc20.svg')} width="100" /></a>
        <p>
            An ERC-20 implementation.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc20">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/erc721"><img src={useBaseUrl('/img/icons/nft.svg')} width="100" /></a>
        <p>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc721">» view ERC-721</a>
            <br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/erc1155">» view ERC-1155</a>
        </p>
    </div>
</div>

<br />

<div className="row">
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts"><img src={useBaseUrl('/img/icons/upgradable.svg')} width="100" /></a>
        <p>
            An upgradeable contract.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/upgradeable-contracts">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/multisig"><img src={useBaseUrl('/img/icons/multisig.svg')} width="100" /></a>
        <p>
            A multi-signature wallet.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/multisig">» view example</a>
        </p>
    </div>
    <div className="col text--center">
        <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension"><img src={useBaseUrl('/img/icons/rand-extension.svg')} width="100" /></a>
        <p>
            Allow runtime access.<br/>
            <a href="https://github.com/use-ink/ink-examples/tree/main/rand-extension">» view example</a>
        </p>
    </div>
</div>
````

## File: versioned_docs/version-v6/faq/migrating-from-ink-5-to-6.md
````markdown
---
title: "Migration: ink! v5 → v6"
slug: /faq/migrating-from-ink-5-to-6
---

import useBaseUrl from '@docusaurus/useBaseUrl';

<img src={useBaseUrl('/img/title/migration-5.x-to-6.0.svg')} className="titlePic titleSpace" title="Migration 5.x To 6.0 Title Picture" />

We've made a number of breaking changes from ink! 5.x to ink! 6.0.
On this page we outline how you can migrate existing dApps and
contracts.

The biggest change is that we've migrated from `pallet-contracts` +
WebAssembly (executed in `wasmi`) to [`pallet-revive`](https://github.com/paritytech/polkadot-sdk/tree/master/substrate/frame/revive) +
RISC-V (executed in [PolkaVM](https://github.com/paritytech/polkavm/)).
_This is a major breaking change, ink! v6 is only compatible with `cargo-contract` >= v6
and chains that include `pallet-revive`._

We did a detailed write-up of the background to this development and the reasoning
[here](https://use.ink/6.x/current-state). 

Compatibility of this release:
* Rust >= 1.85
* [`cargo-contract` `v6.0.0-alpha`](https://github.com/use-ink/cargo-contract/releases/tag/v6.0.0-alpha)
* [`ink-node/cd94b5f`](https://github.com/use-ink/ink-node/commit/cd94b5fa23ee04f2d541decf1ace3b9904d61cb2)
* [`polkadot-sdk/f8c90b2a01ec77579bccd21ae17bd6ff2eeffd6a`](https://github.com/paritytech/polkadot-sdk/commit/f8c90b2a01ec77579bccd21ae17bd6ff2eeffd6a)

In the following we'll describe the breaking changes on a high-level. The
context to understand them is that the `pallet-revive` team has Ethereum/Solidity
support as the number one priority. All their design decisions derive from that,
they don't want to maintain code that is unnecessary for that objective.

You can find the full changelog of the 6.0 release [here](https://github.com/use-ink/ink/blob/master/CHANGELOG.md#version-600).

:::caution
This migration guide only considers your code base! Not your storage data!

If you have an existing contract on-chain you might not be able to just
upgrade the code on-chain, you possibly also have to migrate your storage data.
:::

## How to upgrade

- Change the dependency versions of `ink` and `ink_e2e` in your contracts `Cargo.toml` to `6`.
- Update your local `cargo-contract` installation to 6.0.
- Read through this page.

## Compatibility

- `>= polkadot-v1.9.0`
- `pallet-contracts >= polkadot-v0.9.37`
- `ink-node >= v0.24.0`

### How do I find out if a chain is compatible with ink! 6.0?

You can query `contracts::palletVersion()` via the chain state RPCs. It has to
be `>= 9` for ink! 5.0 to be compatible, if you don't use any of the four functions
mentioned above.
For the above mentioned four functions please see the respective sections on this page,
there we explain how to find out if a chain supports them there.

You can use the [polakdot.js app](https://polkadot.js.org/apps/) to connect to the chain and check if
`reviveApi` is available under Developer » Runtime calls.

<img src={useBaseUrl('/img/pallet-revive-available.png')} />

The following chains are in production and support ink! 6.0.

<div className="row">
    <div className="col text--center">
        <a href="https://onpop.io">
            <img src={useBaseUrl('/img/chains/polkadot-pop-network.svg')} className="chain" />
        </a>
    </div>
    <div className="col text--center">
        <a href="https://kusama.network/">
            <img src={useBaseUrl('/img/chains/kusama-assethub.svg')} className="chain" />
        </a>
    </div>
</div>

### `cargo-contract` v6

Together with ink! 6.0 we've released `cargo-contract` 6.0.
You have to use `cargo-contract` >= 6.0 for ink! 6.0 contracts!

You can upgrade via:

```rust
cargo install cargo-contract --version ^6 --locked
```

### Tooling & Libraries

- Stable Rust >= 1.85
- `cargo-contract` >= v6.0
- `polkadot-js/api` and `polkadot-js/api-contract`: no support yet
- [`use-inkathon`](https://github.com/scio-labs/use-inkathon): no support yet
- [ink!athon](https://inkathon.xyz/): no support yet

## Important Changes

We had to introduce a number of changes that require you to manually upgrade
your contract from 5.x to 6.0. The steps are explained in this section.

### Restrict which `cfg` attributes can be used

This change was done as a recommendation from the ink! 5.x audit.
In a nutshell it prevents developers from hiding functionality in a contract,
that would not be visible in the metadata (so e.g. on a block explorer).
The relevant PR is [#2313](https://github.com/use-ink/ink/pull/2313).

From ink! 6.0 on only these attributes are allowed in `#[cfg(…)]`: - `test` - `feature` (without `std`) - `any` - `not` - `all`

### Metadata Changes

The field `source.wasm` was renamed to `source.contract_binary`.

### Types

#### Contract Balance: `U256`
For the type of a contract's balance, `pallet-revive` uses depending on the context
* either the configured `pallet_revive::Config::Currency` type (which corresponds
  to the `ink::Environment::Balance` type.
* or a hardcoded `U256` (which corresponds to what Ethereum uses).
  In this alpha release we just adhere to requiring the types that `pallet-revive` uses.
  In an upcoming beta release this could be simplified to reduce UX friction by just
  using one type everywhere and converting to the `pallet-revive` one.

#### Contract Address: `H160`
For a contract's account, `pallet-revive` is using either the configured `AccountId` type
of the `polkadot-sdk` runtime, or `H160`.

Finding the `H160` for an `AccountId` is done via an address derivation scheme derived in
[#7662](https://github.com/paritytech/polkadot-sdk/pull/7662).
After instantiating a contract, the address is no longer returned by `pallet-revive`.
Instead one has to derive it from given parameters (see the linked PR). `cargo-contract`
does that automatically.

For contract instantiations and contract calls the pallet requires that a 1-to-1 mapping
of an `AccountId` to a `H160` has been created. This can be done via the `map_account`/
`unmap_account` API.
The PR [#6096](https://github.com/paritytech/polkadot-sdk/pull/6096) contains more
information.

Besides the publicly exposed crate functions, we've introduced a new subcommand
`cargo contract account` that allows resolving the `H160` contract address to the
Polkadot SDK `AccountId` which it is mapped to.

#### Contract Hash: `H256`
For a contract's hash value, `pallet-revive` uses a fixed `H256`, Previously,
the `ink::Environment::Hash` type referenced the hash type being used for the
contract's hash. Now it's just a fixed `H160`.

### Contract delegates can no longer be done by code
In `pallet-contracts` (and hence up until ink! v5), a pattern for upgradeable
contracts was to delegate the contract execution to a different code, e.g. to
a new version of the contract's code.

This distinction of contract code that was uploaded to a chain vs. an instantiated
contract from this code no longer exists in `pallet-revive`. If you want to
delegate the execution, you will have to specify another contract's address
to which code you want to delegate to. This other contract needs to be instantiated
on-chain.

For the execution, the context of the contract that delegates will continue
to be used (storage, caller, value).

Specifically the delegate API changed like this:

```rust
/// ink! v5
#[derive(Clone)]
pub struct DelegateCall<E: Environment> {
    code_hash: E::Hash,
    call_flags: CallFlags,
}

/// ink! v6
#[derive(Clone)]
pub struct DelegateCall {
    address: H160,
    flags: CallFlags,
    ref_time_limit: u64,
    proof_size_limit: u64,
    deposit_limit: Option<[u8; 32]>,
}
```

### Feature `ink/unstable-hostfn`
In `pallet-revive` a number of functions can only be called by smart contracts
if the chain that the pallet is running on has enabled the feature
`pallet-revive/unstable-hostfn`.
This feature is not enabled on Kusama or Westend!

It is enabled for the `ink-node` version that we linked above.

### New debugging workflow
Previously `pallet-contracts` returned a `debug_message` field with contract
instantiations and dry-runs.
Whenever `ink::env::debug_println` was invoked in a contract, ink! wrote debugging
info to this field. This functionality has been removed. Instead `pallet-revive` now
supports other means of debugging.

The most relevant new debugging workflow is the tracing API. There are a number
of PRs that implemented it, so we won't link a specific one here. A good starting
point to look deeper into it is the [`tracing.rs`](https://github.com/paritytech/polkadot-sdk/blob/master/substrate/frame/revive/src/tracing.rs).

We have implemented barebones support for this tracing API in the 6.0.0-alpha
versions of ink! + `cargo-contract`. But it's really barebones and should
certainly be improved before a production release.

We've updated [the Debugging chapter](../debugging/overview.md) of this documentation
to reflect the new workflow.
We've also added a contract example to illustrate these new debugging strategies:
[`debugging-strategies`](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies).

### Removed Events
In [#7164](https://github.com/paritytech/polkadot-sdk/pull/7164), Parity removed
most smart-contract-specific events: `Called`, `ContractCodeUpdated, CodeStored`,
`CodeRemoved`, `Terminated`, `Instantiated`, `DelegateCalled`,
`StorageDepositTransferredAndHeld`, `StorageDepositTransferredAndReleased`.

The `ContractEmitted` event (for events a contract emits) is still available.

### `no_main`

Previously ink! contracts started with this line:

```rust
#![cfg_attr(not(feature = "std"), no_std)]
```

This line instructs the Rust compiler to not link the Rust 
standard library with your contract. 
If you want to know about why:
we have an entry 
["Why is Rust's standard library (stdlib) not available in ink!?"](./faq.md)
in our FAQ.

With ink! v6, an additional crate-level attribute needs to be set:

```rust
#![cfg_attr(not(feature = "std"), no_std, no_main)]
```

It instructs the compiler not to use the default `fn main() {}` function as the
entry point for your smart contract. This is needed because PolkaVM uses a different
entry point (the `deploy` function).

### `substrate-contracts-node` can no longer be used
The `substrate-contracts-node` is still maintained by Parity for ink! v5 and
`pallet-contracts`, but it does not support `pallet-revive`.

We've set up a new project in its place: [`ink-node`](https://github.com/use-ink/ink-node).
As before, it functions as a simple local development node.
It contains `pallet-revive` in a default configuration.
You can find binary releases of the node [here](https://github.com/use-ink/ink-node/releases).

### Solang can no longer be used
It was previously possible to interact with Solidity contracts compiled via the 
Solang compiler. As we have moved from WebAssembly/`pallet-contracts` to 
PolkaVM/RISC-V/`pallet-revive`, users who want to deploy Solidity will use
[the Parity `revive` compiler](https://github.com/paritytech/revive). It takes 
Solidity contracts and compile them into RISC-V for PolkaVM.

## Interesting New Features

### Cross-contract calling Solidity contracts
We are introducing a new attribute `abi` for the `#[ink::contract]` macro.
These are the values it takes:

```rust
#[ink::contract(abi = "all")]
#[ink::contract(abi = "sol")]
#[ink::contract(abi = "ink")]
```

The default currently is `abi = "ink"`, but we might change this before a production
release.

The implication of supporting Solidity ABI encoding is that there is a restriction on
the types you can use as constructor/message arguments or return types.
You won't be able to use Rust types for which no mapping to a Solidity type exists.
An error about a missing trait implementation for this type will be thrown.

Please note that your contract sizes will get larger if you support both the ink!
and Solidity ABI.

### Generate Solidity metadata for an ink! contract
We added a new subcommand:

```bash
$ cargo contract build ---metadata <ink|solidity>
```

Please see [#1930](https://github.com/use-ink/cargo-contract/pull/1930) for more information.

#### Abiility to build contract with features during E2E tests
We've added the possibility to set a feature to build a contract with during e2e tests:

```rust
#[ink_e2e::test(features = ["debug-info"])]
```

This allows for e.g. emitting debug events in the contract, which
you can then check for in testing.
Please see our [`debugging-strategies`](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies)
example for a complete explainer.

We've added a page [Debugging » Events](../debugging/events.md) to this documentation.
We've also added a contract example that illustrates the usage:
[`debugging-strategies`](https://github.com/use-ink/ink/tree/master/integration-tests/public/debugging-strategies).
````
